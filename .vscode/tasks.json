{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Start Docker Services -- Local Development",
            "type": "shell",
            "isBackground": true,
            "command": "docker",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": [
                "compose",
                "-f",
                "docker-compose.yaml",
                "-f",
                "docker-compose.db.yaml",
                "--env-file",
                "./hasura/.env.local",
                "-p",
                "${input:docker-project-name}",
                "up",
                "-d"
            ]
        },
        {
            "label": "Hasura Console -- Local Development",
            "type": "shell",
            "dependsOn": "Start Docker Services -- Local Development",
            "isBackground": true,
            "command": "pnpm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}/hasura"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["console-when-ready"]
        },
        {
            "label": "Hasura Console -- CI Testing",
            "type": "shell",
            "isBackground": true,
            "command": "pnpm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}/hasura"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["console-when-ready", "--envfile='./.env.ci-test'"]
        },
        {
            "label": "All -- GraphQL Codegen",
            "type": "shell",
            "command": "pnpm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["codegen", "-r"]
        },
        {
            "label": "Offline -- GraphQL Codegen",
            "type": "shell",
            "command": "pnpm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["codegen", "-r", "--filter \"...^@midspace/graphql\""]
        },
        {
            "label": "Single -- GraphQL Codegen",
            "type": "shell",
            "command": "pnpm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["codegen", "--filter", "${input:package-name}"]
        },
        {
            "label": "Actions Service -- Local Development",
            "type": "shell",
            "isBackground": true,
            "command": "pnpm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}/services/actions"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["run", "dev"]
        },
        {
            "label": "DataDog Proxy Service -- Local Development",
            "type": "shell",
            "isBackground": true,
            "command": "npm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}/services/dd-proxy"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["dev"]
        },
        {
            "label": "Actions Service -- Heroku Local",
            "type": "shell",
            "isBackground": true,
            "command": "heroku",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["local", "web"]
        },
        {
            "label": "Auth Service -- Local Development",
            "type": "shell",
            "isBackground": true,
            "command": "pnpm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}/services/auth"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["dev"]
        },
        {
            "label": "Caches Service -- Local Development",
            "type": "shell",
            "isBackground": true,
            "command": "pnpm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}/services/caches"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["dev"]
        },
        {
            "label": "Real-time Service -- Local Development",
            "type": "shell",
            "isBackground": true,
            "command": "pnpm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}/services/realtime"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["dev"]
        },
        {
            "label": "Playout Service -- Local Development",
            "type": "shell",
            "isBackground": true,
            "command": "pnpm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}/services/playout"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["dev"]
        },
        {
            "label": "Importer Service -- Local Development",
            "type": "shell",
            "isBackground": true,
            "command": "pnpm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}/services/importer"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["dev"]
        },
        {
            "label": "Frontend -- Local Development",
            "type": "shell",
            "command": "pnpm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}/frontend"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["dev"]
        },
        {
            "label": "Frontend -- Production Build",
            "type": "shell",
            "command": "pnpm",
            "args": ["build"],
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}/frontend"
            },
            "group": "build"
        },
        {
            "label": "Frontend -- Serve Production Build",
            "type": "shell",
            "command": "pnpm",
            "args": ["start"],
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}/frontend"
            }
        },
        {
            "label": "Storybook -- Local Development",
            "type": "shell",
            "command": "pnpm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}/frontend"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["storybook"]
        },
        {
            "label": "Prettier: Format code",
            "type": "shell",
            "command": "pnpm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["prettier", "--write", "."]
        },
        {
            "label": "All -- Build",
            "type": "shell",
            "command": "pnpm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["build", "-r"]
        },
        {
            "label": "All -- Clean",
            "type": "shell",
            "command": "pnpm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["clean", "-r"]
        },
        {
            "label": "Single -- Build",
            "type": "shell",
            "command": "pnpm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["build", "--filter", "${input:package-name}..."]
        },
        {
            "label": "Packetriot",
            "type": "shell",
            "command": "pktriot",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["start", "--config", "pktriot.json"]
        },
        {
            "label": "Run All -- Local Development",
            "dependsOn": [
                "Packetriot",
                "Hasura Console -- Local Development",
                "Run All -- Local Development -- Subtask, wait for Docker"
            ],
            "dependsOrder": "parallel",
            "isBackground": true,
            "problemMatcher": []
        },
        {
            "label": "Run All -- Local Development -- Subtask, wait for Docker",
            "dependsOn": ["Wait for Docker", "Run All -- Local Development -- Subtask, services"],
            "dependsOrder": "sequence",
            "isBackground": true,
            "problemMatcher": []
        },
        {
            "label": "Run All -- Local Development -- Subtask, services",
            "dependsOn": [
                "Auth Service -- Local Development",
                "Actions Service -- Local Development",
                "Caches Service -- Local Development",
                "Real-time Service -- Local Development",
                "Playout Service -- Local Development",
                "Importer Service -- Local Development",
                "Frontend -- Local Development"
            ],
            "dependsOrder": "parallel",
            "isBackground": true,
            "problemMatcher": []
        },
        {
            "label": "Run Minimal -- Local Development",
            "dependsOn": [
                "Packetriot",
                "Hasura Console -- Local Development",
                "Run Minimal -- Local Development -- Subtask, wait for Docker"
            ],
            "dependsOrder": "parallel",
            "isBackground": true,
            "problemMatcher": []
        },
        {
            "label": "Run Minimal -- Local Development -- Subtask, wait for Docker",
            "dependsOn": ["Wait for Docker", "Run Minimal -- Local Development -- Subtask, services"],
            "dependsOrder": "sequence",
            "isBackground": true,
            "problemMatcher": []
        },
        {
            "label": "Run Minimal -- Local Development -- Subtask, services",
            "dependsOn": [
                "Auth Service -- Local Development",
                "Caches Service -- Local Development",
                "Actions Service -- Local Development",
                "Frontend -- Local Development"
            ],
            "dependsOrder": "parallel",
            "isBackground": true,
            "problemMatcher": []
        },
        {
            "label": "AWS -- Bootstrap account",
            "detail": "AWS CDK requires the account to be 'bootstrapped' first.",
            "type": "shell",
            "command": "pnpm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}/aws",
                "env": {
                    "DOTENV_CONFIG_PATH": ".env.${input:aws-profile-name}",
                    "AWS_PROFILE": "${input:aws-profile-name}"
                }
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["bootstrap", "--", "--profile", "${input:aws-profile-name}"]
        },
        {
            "label": "AWS -- Deploy stacks",
            "detail": "Deploy all CDK stacks to an AWS account. You will be asked which profile you want to deploy to.",
            "type": "shell",
            "command": "pnpm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}/aws",
                "env": {
                    "DOTENV_CONFIG_PATH": ".env.${input:aws-profile-name}",
                    "AWS_PROFILE": "${input:aws-profile-name}"
                }
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["deploy:all", "--", "--profile", "${input:aws-profile-name}"]
        },
        {
            "label": "AWS -- Open console",
            "detail": "Open the AWS console in browser.",
            "type": "shell",
            "command": "aws-vault",
            "problemMatcher": [],
            "args": ["login", "${input:aws-profile-name}-internal"]
        },
        {
            "label": "Outdated packages",
            "detail": "Find outdated dependencies in all packages.",
            "type": "shell",
            "command": "pnpm",
            "args": ["dlx", "npm-check-updates", "--deep"],
            "problemMatcher": []
        },
        {
            "label": "Fix Frontend ESLint errors/warnings",
            "type": "shell",
            "command": "pnpm",
            "problemMatcher": [],
            "args": ["eslint", "--ext", ".tsx", "--ext", ".ts", "--fix", "./frontend/src/aspects"]
        },
        {
            "label": "Generated augmented GQL schema",
            "type": "shell",
            "command": "pnpm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}/packages/node/urql-hasura-cache-schema-generator"
            },
            "args": [
                "start",
                "--",
                "-d",
                "../../../hasura/metadata",
                "-o",
                "../../shared/graphql/src/generated/graphql.augschema.json",
                "-a",
                "http://localhost:8080/v1/graphql",
                "-s",
                "XXXXX"
            ]
        },
        {
            "label": "Wait for Docker",
            "type": "shell",
            "command": "npx",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "args": ["wait-on", "http-get://localhost:8080/v1/version"]
        },
        {
            "label": "Packages -- Find Mismatches",
            "type": "shell",
            "command": "pnpm",
            "problemMatcher": [],
            "args": [
                "dlx",
                "syncpack",
                "--",
                "list-mismatches",
                "--source",
                "package.json",
                "--source",
                "services/*/package.json",
                "--source",
                "packages/*/*/package.json",
                "--source",
                "frontend/package.json",
                "--source",
                "aws/package.json"
            ]
        }
    ],
    "inputs": [
        {
            "id": "docker-project-name",
            "description": "Docker project name",
            "default": "clowdr",
            "type": "promptString"
        },
        {
            "id": "aws-profile-name",
            "description": "AWS profile name",
            "default": "sandbox",
            "type": "promptString"
        },
        {
            "id": "package-name",
            "description": "Package name",
            "default": "service-actions",
            "options": [
                "frontend",
                "service-actions",
                "service-playout",
                "service-realtime",
                "service-importer",
                "auth",
                "caches",
                "graphql",
                "hasura"
            ],
            "type": "pickString"
        }
    ]
}
