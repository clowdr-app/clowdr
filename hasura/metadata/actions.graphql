type Mutation {
  createItemRoom(
    itemId: uuid!
    conferenceId: uuid!
    subconferenceId: uuid
  ): CreateItemRoomOutput
}

type Mutation {
  createRoomDm(
    conferenceId: uuid!
    registrantIds: [uuid]!
  ): CreateRoomDmOutput
}

type Mutation {
  getGoogleOAuthUrl(
    registrantId: uuid!
    scopes: [String!]!
  ): GetGoogleOAuthUrlOutput
}

type Query {
  getSlug(
    url: String!
  ): GetSlugOutput!
}

type Query {
  getUploadAgreement: GetUploadAgreementOutput
}

type Mutation {
  initialiseSuperUser: InitialiseSuperUserOutput
}

type Mutation {
  invitationConfirmCurrent(
    inviteCode: uuid!
  ): ConfirmInvitationOutput
}

type Mutation {
  joinEventVonageSession(
    registrantId: uuid!
    eventId: uuid!
  ): JoinEventVonageSessionOutput
}

type Mutation {
  joinRoomChimeSession(
    registrantId: uuid!
    roomId: uuid!
  ): JoinRoomChimeSessionOutput
}

type Mutation {
  joinRoomVonageSession(
    registrantId: uuid!
    roomId: uuid!
  ): JoinRoomVonageSessionOutput
}

type Mutation {
  migrateProfilePhoto(
    registrantId: uuid!
  ): MigrateProfilePhotoResponse
}

type Mutation {
  notifyEventEnded(
    eventId: uuid!
  ): NotifyEventEnded!
}

type Mutation {
  notifyEventStarted(
    eventId: uuid!
  ): NotifyEventStarted!
}

type Mutation {
  presence_Flush: PresenceFlushOutput!
}

type Query {
  presence_Summary: PresenceSummaryOutput
}

type Mutation {
  refreshYouTubeData(
    registrantId: uuid!
    registrantGoogleAccountId: uuid!
  ): RefreshYouTubeDataOutput
}

type Mutation {
  stopEventBroadcast(
    eventId: uuid!
  ): StopEventBroadcastOutput
}

type Mutation {
  submitGoogleOAuthCode(
    code: String!
    state: String!
  ): SubmitGoogleOAuthCodeOutput
}

type Mutation {
  submitUploadableElement(
    data: jsonb!
    magicToken: String!
    elementId: uuid!
  ): SubmitUploadableElementOutput
}

type Mutation {
  toggleVonageRecordingState(
    recordingActive: Boolean!
    vonageSessionId: String!
  ): ToggleVonageRecordingStateOutput
}

type Query {
  transcribeGeneratePresignedUrl(
    languageCode: String!
    sampleRate: String!
  ): TranscribeGeneratePresignedUrlOutput!
}

type Mutation {
  updateProfilePhoto(
    registrantId: uuid!
    s3URL: String
  ): UpdateProfilePhotoResponse
}

type Mutation {
  updateSubtitles(
    elementId: String!
    subtitleText: String!
    magicToken: String!
  ): SubmitUpdatedSubtitlesOutput
}

type Query {
  vapidPublicKey: VAPIDPublicKeyOutput!
}

input SubmitContentItemInput {
  contentItemData: jsonb!
}

input ConfirmInvitationInput {
  inviteCode: uuid!
  confirmationCode: String!
}

input InvitationConfirmationEmailInput {
  inviteCode: uuid!
}

input SubmitUpdatedSubtitlesInput {
  contentItemId: String!
  subtitleText: String!
  accessToken: String!
}

type SubmitContentItemOutput {
  success: Boolean!
  message: String!
}

type ConfirmInvitationOutput {
  ok: String!
  confSlug: String
}

type InvitationConfirmationEmailOutput {
  sent: Boolean!
}

type InvitationSendEmailResult {
  attendeeId: String!
  sent: Boolean!
}

type GetContentItemOutput {
  contentTypeName: String!
  name: String!
  id: String!
  data: jsonb!
  layoutData: jsonb
  contentGroupTitle: String!
}

type SubmitUpdatedSubtitlesOutput {
  success: Boolean!
  message: String!
}

type GetUploadAgreementOutput {
  agreementText: String
  agreementUrl: String
}

type ConferencePrepareOutput {
  success: Boolean!
  message: String
}

type UploaderSendSubmissionRequestResult {
  uploaderId: uuid!
  sent: Boolean!
}

type JoinEventVonageSessionOutput {
  accessToken: String
  isRecorded: Boolean
}

type JoinRoomVonageSessionOutput {
  sessionId: String
  accessToken: String
  message: String
  isRecorded: Boolean
}

type ProfilePhotoURLResponse {
  url: String!
}

type UpdateProfilePhotoResponse {
  ok: Boolean!
  photoURL_350x350: String
  photoURL_50x50: String
}

type CreateRoomDmOutput {
  roomId: uuid
  chatId: uuid
  message: String
}

type CreateContentGroupRoomOutput {
  roomId: String
  message: String
}

type StopEventBroadcastOutput {
  broadcastsStopped: Int!
}

type GetGoogleOAuthUrlOutput {
  url: String!
}

type SubmitGoogleOAuthTokenOutput {
  success: Boolean!
  message: String
}

type SubmitGoogleOAuthCodeOutput {
  success: Boolean!
  message: String
}

type RefreshYouTubeDataOutput {
  success: Boolean!
  message: String
}

type ChatRemoteToken {
  jwt: String!
  expiry: Int!
}

type GenerateChatRemoteServiceIdsOutput {
  error: String
}

type GenerateChatRemoteUserIdsOutput {
  error: String
}

type PresenceSummaryOutput {
  total_unique_tabs: Int!
  total_unique_user_ids: Int!
  pages: jsonb
}

type PresenceFlushOutput {
  ok: String
}

type JoinRoomChimeSessionOutput {
  meeting: jsonb
  registrant: jsonb
  message: String
}

type VAPIDPublicKeyOutput {
  key: String!
}

type CreateItemRoomOutput {
  roomId: String
  message: String
}

type SubmitUploadableElementOutput {
  success: Boolean!
  message: String!
}

type NotifyEventEnded {
  ok: Boolean!
}

type GetSlugOutput {
  slug: String
  url: String
}

type MatchingPersonOutput {
  accessToken: String
}

type ToggleVonageRecordingStateOutput {
  allowed: Boolean!
  recordingState: Boolean!
}

type NotifyEventStarted {
  ok: Boolean!
}

type InitialiseSuperUserOutput {
  success: Boolean!
  error: String
}

type TranscribeGeneratePresignedUrlOutput {
  url: String!
}

type MigrateProfilePhotoResponse {
  ok: Boolean!
}

