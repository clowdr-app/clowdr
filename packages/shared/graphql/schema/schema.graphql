schema {
    query: query_root
    mutation: mutation_root
    subscription: subscription_root
}

"whether this query should be cached (Hasura Cloud only)"
directive @cached(
    """
    refresh the cache entry
    """
    refresh: Boolean! = false
    """
    measured in seconds
    """
    ttl: Int! = 60
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
    _eq: Boolean
    _gt: Boolean
    _gte: Boolean
    _in: [Boolean!]
    _is_null: Boolean
    _lt: Boolean
    _lte: Boolean
    _neq: Boolean
    _nin: [Boolean!]
}

type ConfirmInvitationOutput {
    confSlug: String
    ok: String!
}

type CreateItemRoomOutput {
    message: String
    """
    An object relationship
    """
    room: room_Room!
    roomId: String
}

type CreateRoomDmOutput {
    chatId: uuid
    message: String
    """
    An object relationship
    """
    room: room_Room!
    roomId: uuid
}

"""
columns and relationships of "Email"
"""
type Email {
    conferenceId: uuid
    createdAt: timestamptz!
    emailAddress: String!
    errorMessage: String
    htmlContents: String!
    id: uuid!
    idempotencyKey: uuid!
    """
    An object relationship
    """
    invitation: registrant_Invitation
    invitationId: uuid
    plainTextContents: String!
    reason: String!
    recipientName: String
    retriesCount: Int!
    sentAt: timestamptz
    status: String
    subject: String!
    updatedAt: timestamptz!
    """
    An object relationship
    """
    user: User
    userId: String
}

"""
aggregated selection of "Email"
"""
type Email_aggregate {
    aggregate: Email_aggregate_fields
    nodes: [Email!]!
}

"""
aggregate fields of "Email"
"""
type Email_aggregate_fields {
    avg: Email_avg_fields
    count(columns: [Email_select_column!], distinct: Boolean): Int!
    max: Email_max_fields
    min: Email_min_fields
    stddev: Email_stddev_fields
    stddev_pop: Email_stddev_pop_fields
    stddev_samp: Email_stddev_samp_fields
    sum: Email_sum_fields
    var_pop: Email_var_pop_fields
    var_samp: Email_var_samp_fields
    variance: Email_variance_fields
}

"""
order by aggregate values of table "Email"
"""
input Email_aggregate_order_by {
    avg: Email_avg_order_by
    count: order_by
    max: Email_max_order_by
    min: Email_min_order_by
    stddev: Email_stddev_order_by
    stddev_pop: Email_stddev_pop_order_by
    stddev_samp: Email_stddev_samp_order_by
    sum: Email_sum_order_by
    var_pop: Email_var_pop_order_by
    var_samp: Email_var_samp_order_by
    variance: Email_variance_order_by
}

"""
input type for inserting array relation for remote table "Email"
"""
input Email_arr_rel_insert_input {
    data: [Email_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: Email_on_conflict
}

"""
aggregate avg on columns
"""
type Email_avg_fields {
    retriesCount: Float
}

"""
order by avg() on columns of table "Email"
"""
input Email_avg_order_by {
    retriesCount: order_by
}

"""
Boolean expression to filter rows from the table "Email". All fields are combined with a logical 'AND'.
"""
input Email_bool_exp {
    _and: [Email_bool_exp!]
    _not: Email_bool_exp
    _or: [Email_bool_exp!]
    conferenceId: uuid_comparison_exp
    createdAt: timestamptz_comparison_exp
    emailAddress: String_comparison_exp
    errorMessage: String_comparison_exp
    htmlContents: String_comparison_exp
    id: uuid_comparison_exp
    idempotencyKey: uuid_comparison_exp
    invitation: registrant_Invitation_bool_exp
    invitationId: uuid_comparison_exp
    plainTextContents: String_comparison_exp
    reason: String_comparison_exp
    recipientName: String_comparison_exp
    retriesCount: Int_comparison_exp
    sentAt: timestamptz_comparison_exp
    status: String_comparison_exp
    subject: String_comparison_exp
    updatedAt: timestamptz_comparison_exp
    user: User_bool_exp
    userId: String_comparison_exp
}

"""
unique or primary key constraints on table "Email"
"""
enum Email_constraint {
    """
    unique or primary key constraint
    """
    Email_idempotencyKey_key
    """
    unique or primary key constraint
    """
    Email_pkey
}

"""
input type for incrementing numeric columns in table "Email"
"""
input Email_inc_input {
    retriesCount: Int
}

"""
input type for inserting data into table "Email"
"""
input Email_insert_input {
    conferenceId: uuid
    createdAt: timestamptz
    emailAddress: String
    errorMessage: String
    htmlContents: String
    id: uuid
    idempotencyKey: uuid
    invitation: registrant_Invitation_obj_rel_insert_input
    invitationId: uuid
    plainTextContents: String
    reason: String
    recipientName: String
    retriesCount: Int
    sentAt: timestamptz
    status: String
    subject: String
    updatedAt: timestamptz
    user: User_obj_rel_insert_input
    userId: String
}

"""
aggregate max on columns
"""
type Email_max_fields {
    conferenceId: uuid
    createdAt: timestamptz
    emailAddress: String
    errorMessage: String
    htmlContents: String
    id: uuid
    idempotencyKey: uuid
    invitationId: uuid
    plainTextContents: String
    reason: String
    recipientName: String
    retriesCount: Int
    sentAt: timestamptz
    status: String
    subject: String
    updatedAt: timestamptz
    userId: String
}

"""
order by max() on columns of table "Email"
"""
input Email_max_order_by {
    conferenceId: order_by
    createdAt: order_by
    emailAddress: order_by
    errorMessage: order_by
    htmlContents: order_by
    id: order_by
    idempotencyKey: order_by
    invitationId: order_by
    plainTextContents: order_by
    reason: order_by
    recipientName: order_by
    retriesCount: order_by
    sentAt: order_by
    status: order_by
    subject: order_by
    updatedAt: order_by
    userId: order_by
}

"""
aggregate min on columns
"""
type Email_min_fields {
    conferenceId: uuid
    createdAt: timestamptz
    emailAddress: String
    errorMessage: String
    htmlContents: String
    id: uuid
    idempotencyKey: uuid
    invitationId: uuid
    plainTextContents: String
    reason: String
    recipientName: String
    retriesCount: Int
    sentAt: timestamptz
    status: String
    subject: String
    updatedAt: timestamptz
    userId: String
}

"""
order by min() on columns of table "Email"
"""
input Email_min_order_by {
    conferenceId: order_by
    createdAt: order_by
    emailAddress: order_by
    errorMessage: order_by
    htmlContents: order_by
    id: order_by
    idempotencyKey: order_by
    invitationId: order_by
    plainTextContents: order_by
    reason: order_by
    recipientName: order_by
    retriesCount: order_by
    sentAt: order_by
    status: order_by
    subject: order_by
    updatedAt: order_by
    userId: order_by
}

"""
response of any mutation on the table "Email"
"""
type Email_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [Email!]!
}

"""
on conflict condition type for table "Email"
"""
input Email_on_conflict {
    constraint: Email_constraint!
    update_columns: [Email_update_column!]! = []
    where: Email_bool_exp
}

"""
Ordering options when selecting data from "Email".
"""
input Email_order_by {
    conferenceId: order_by
    createdAt: order_by
    emailAddress: order_by
    errorMessage: order_by
    htmlContents: order_by
    id: order_by
    idempotencyKey: order_by
    invitation: registrant_Invitation_order_by
    invitationId: order_by
    plainTextContents: order_by
    reason: order_by
    recipientName: order_by
    retriesCount: order_by
    sentAt: order_by
    status: order_by
    subject: order_by
    updatedAt: order_by
    user: User_order_by
    userId: order_by
}

"""
primary key columns input for table: Email
"""
input Email_pk_columns_input {
    id: uuid!
}

"""
select columns of table "Email"
"""
enum Email_select_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    emailAddress
    """
    column name
    """
    errorMessage
    """
    column name
    """
    htmlContents
    """
    column name
    """
    id
    """
    column name
    """
    idempotencyKey
    """
    column name
    """
    invitationId
    """
    column name
    """
    plainTextContents
    """
    column name
    """
    reason
    """
    column name
    """
    recipientName
    """
    column name
    """
    retriesCount
    """
    column name
    """
    sentAt
    """
    column name
    """
    status
    """
    column name
    """
    subject
    """
    column name
    """
    updatedAt
    """
    column name
    """
    userId
}

"""
input type for updating data in table "Email"
"""
input Email_set_input {
    conferenceId: uuid
    createdAt: timestamptz
    emailAddress: String
    errorMessage: String
    htmlContents: String
    id: uuid
    idempotencyKey: uuid
    invitationId: uuid
    plainTextContents: String
    reason: String
    recipientName: String
    retriesCount: Int
    sentAt: timestamptz
    status: String
    subject: String
    updatedAt: timestamptz
    userId: String
}

"""
aggregate stddev on columns
"""
type Email_stddev_fields {
    retriesCount: Float
}

"""
order by stddev() on columns of table "Email"
"""
input Email_stddev_order_by {
    retriesCount: order_by
}

"""
aggregate stddev_pop on columns
"""
type Email_stddev_pop_fields {
    retriesCount: Float
}

"""
order by stddev_pop() on columns of table "Email"
"""
input Email_stddev_pop_order_by {
    retriesCount: order_by
}

"""
aggregate stddev_samp on columns
"""
type Email_stddev_samp_fields {
    retriesCount: Float
}

"""
order by stddev_samp() on columns of table "Email"
"""
input Email_stddev_samp_order_by {
    retriesCount: order_by
}

"""
aggregate sum on columns
"""
type Email_sum_fields {
    retriesCount: Int
}

"""
order by sum() on columns of table "Email"
"""
input Email_sum_order_by {
    retriesCount: order_by
}

"""
update columns of table "Email"
"""
enum Email_update_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    emailAddress
    """
    column name
    """
    errorMessage
    """
    column name
    """
    htmlContents
    """
    column name
    """
    id
    """
    column name
    """
    idempotencyKey
    """
    column name
    """
    invitationId
    """
    column name
    """
    plainTextContents
    """
    column name
    """
    reason
    """
    column name
    """
    recipientName
    """
    column name
    """
    retriesCount
    """
    column name
    """
    sentAt
    """
    column name
    """
    status
    """
    column name
    """
    subject
    """
    column name
    """
    updatedAt
    """
    column name
    """
    userId
}

"""
aggregate var_pop on columns
"""
type Email_var_pop_fields {
    retriesCount: Float
}

"""
order by var_pop() on columns of table "Email"
"""
input Email_var_pop_order_by {
    retriesCount: order_by
}

"""
aggregate var_samp on columns
"""
type Email_var_samp_fields {
    retriesCount: Float
}

"""
order by var_samp() on columns of table "Email"
"""
input Email_var_samp_order_by {
    retriesCount: order_by
}

"""
aggregate variance on columns
"""
type Email_variance_fields {
    retriesCount: Float
}

"""
order by variance() on columns of table "Email"
"""
input Email_variance_order_by {
    retriesCount: order_by
}

"""
Boolean expression to compare columns of type "Float". All fields are combined with logical 'AND'.
"""
input Float_comparison_exp {
    _eq: Float
    _gt: Float
    _gte: Float
    _in: [Float!]
    _is_null: Boolean
    _lt: Float
    _lte: Float
    _neq: Float
    _nin: [Float!]
}

"""
columns and relationships of "ForeignKeyIntrospection"
"""
type ForeignKeyIntrospection {
    child_column: name
    child_schema: name
    child_table: name
    constraint_name: name
    parent_column: name
    parent_schema: name
    parent_table: name
}

"""
aggregated selection of "ForeignKeyIntrospection"
"""
type ForeignKeyIntrospection_aggregate {
    aggregate: ForeignKeyIntrospection_aggregate_fields
    nodes: [ForeignKeyIntrospection!]!
}

"""
aggregate fields of "ForeignKeyIntrospection"
"""
type ForeignKeyIntrospection_aggregate_fields {
    count(columns: [ForeignKeyIntrospection_select_column!], distinct: Boolean): Int!
}

"""
Boolean expression to filter rows from the table "ForeignKeyIntrospection". All fields are combined with a logical 'AND'.
"""
input ForeignKeyIntrospection_bool_exp {
    _and: [ForeignKeyIntrospection_bool_exp!]
    _not: ForeignKeyIntrospection_bool_exp
    _or: [ForeignKeyIntrospection_bool_exp!]
    child_column: name_comparison_exp
    child_schema: name_comparison_exp
    child_table: name_comparison_exp
    constraint_name: name_comparison_exp
    parent_column: name_comparison_exp
    parent_schema: name_comparison_exp
    parent_table: name_comparison_exp
}

"""
Ordering options when selecting data from "ForeignKeyIntrospection".
"""
input ForeignKeyIntrospection_order_by {
    child_column: order_by
    child_schema: order_by
    child_table: order_by
    constraint_name: order_by
    parent_column: order_by
    parent_schema: order_by
    parent_table: order_by
}

"""
select columns of table "ForeignKeyIntrospection"
"""
enum ForeignKeyIntrospection_select_column {
    """
    column name
    """
    child_column
    """
    column name
    """
    child_schema
    """
    column name
    """
    child_table
    """
    column name
    """
    constraint_name
    """
    column name
    """
    parent_column
    """
    column name
    """
    parent_schema
    """
    column name
    """
    parent_table
}

type GetGoogleOAuthUrlOutput {
    url: String!
}

type GetSlugOutput {
    slug: String
    url: String
}

type GetUploadAgreementOutput {
    agreementText: String
    agreementUrl: String
}

type InitialiseSuperUserOutput {
    error: String
    success: Boolean!
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
    _eq: Int
    _gt: Int
    _gte: Int
    _in: [Int!]
    _is_null: Boolean
    _lt: Int
    _lte: Int
    _neq: Int
    _nin: [Int!]
}

type JoinEventVonageSessionOutput {
    accessToken: String
    isRecorded: Boolean
}

type JoinRoomChimeSessionOutput {
    meeting: jsonb
    message: String
    registrant: jsonb
}

type JoinRoomVonageSessionOutput {
    accessToken: String
    isRecorded: Boolean
    message: String
    sessionId: String
}

type NotifyEventEnded {
    ok: Boolean!
}

type NotifyEventStarted {
    ok: Boolean!
}

type PresenceFlushOutput {
    ok: String
}

type PresenceSummaryOutput {
    pages: jsonb
    total_unique_tabs: Int!
    total_unique_user_ids: Int!
}

"""
columns and relationships of "PushNotificationSubscription"
"""
type PushNotificationSubscription {
    auth: String!
    created_at: timestamptz!
    endpoint: String!
    p256dh: String!
    updated_at: timestamptz!
    """
    An object relationship
    """
    user: User!
    userId: String!
}

"""
aggregated selection of "PushNotificationSubscription"
"""
type PushNotificationSubscription_aggregate {
    aggregate: PushNotificationSubscription_aggregate_fields
    nodes: [PushNotificationSubscription!]!
}

"""
aggregate fields of "PushNotificationSubscription"
"""
type PushNotificationSubscription_aggregate_fields {
    count(columns: [PushNotificationSubscription_select_column!], distinct: Boolean): Int!
    max: PushNotificationSubscription_max_fields
    min: PushNotificationSubscription_min_fields
}

"""
order by aggregate values of table "PushNotificationSubscription"
"""
input PushNotificationSubscription_aggregate_order_by {
    count: order_by
    max: PushNotificationSubscription_max_order_by
    min: PushNotificationSubscription_min_order_by
}

"""
input type for inserting array relation for remote table "PushNotificationSubscription"
"""
input PushNotificationSubscription_arr_rel_insert_input {
    data: [PushNotificationSubscription_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: PushNotificationSubscription_on_conflict
}

"""
Boolean expression to filter rows from the table "PushNotificationSubscription". All fields are combined with a logical 'AND'.
"""
input PushNotificationSubscription_bool_exp {
    _and: [PushNotificationSubscription_bool_exp!]
    _not: PushNotificationSubscription_bool_exp
    _or: [PushNotificationSubscription_bool_exp!]
    auth: String_comparison_exp
    created_at: timestamptz_comparison_exp
    endpoint: String_comparison_exp
    p256dh: String_comparison_exp
    updated_at: timestamptz_comparison_exp
    user: User_bool_exp
    userId: String_comparison_exp
}

"""
unique or primary key constraints on table "PushNotificationSubscription"
"""
enum PushNotificationSubscription_constraint {
    """
    unique or primary key constraint
    """
    PushNotificationSubscription_pkey
}

"""
input type for inserting data into table "PushNotificationSubscription"
"""
input PushNotificationSubscription_insert_input {
    auth: String
    created_at: timestamptz
    endpoint: String
    p256dh: String
    updated_at: timestamptz
    user: User_obj_rel_insert_input
    userId: String
}

"""
aggregate max on columns
"""
type PushNotificationSubscription_max_fields {
    auth: String
    created_at: timestamptz
    endpoint: String
    p256dh: String
    updated_at: timestamptz
    userId: String
}

"""
order by max() on columns of table "PushNotificationSubscription"
"""
input PushNotificationSubscription_max_order_by {
    auth: order_by
    created_at: order_by
    endpoint: order_by
    p256dh: order_by
    updated_at: order_by
    userId: order_by
}

"""
aggregate min on columns
"""
type PushNotificationSubscription_min_fields {
    auth: String
    created_at: timestamptz
    endpoint: String
    p256dh: String
    updated_at: timestamptz
    userId: String
}

"""
order by min() on columns of table "PushNotificationSubscription"
"""
input PushNotificationSubscription_min_order_by {
    auth: order_by
    created_at: order_by
    endpoint: order_by
    p256dh: order_by
    updated_at: order_by
    userId: order_by
}

"""
response of any mutation on the table "PushNotificationSubscription"
"""
type PushNotificationSubscription_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [PushNotificationSubscription!]!
}

"""
on conflict condition type for table "PushNotificationSubscription"
"""
input PushNotificationSubscription_on_conflict {
    constraint: PushNotificationSubscription_constraint!
    update_columns: [PushNotificationSubscription_update_column!]! = []
    where: PushNotificationSubscription_bool_exp
}

"""
Ordering options when selecting data from "PushNotificationSubscription".
"""
input PushNotificationSubscription_order_by {
    auth: order_by
    created_at: order_by
    endpoint: order_by
    p256dh: order_by
    updated_at: order_by
    user: User_order_by
    userId: order_by
}

"""
primary key columns input for table: PushNotificationSubscription
"""
input PushNotificationSubscription_pk_columns_input {
    endpoint: String!
}

"""
select columns of table "PushNotificationSubscription"
"""
enum PushNotificationSubscription_select_column {
    """
    column name
    """
    auth
    """
    column name
    """
    created_at
    """
    column name
    """
    endpoint
    """
    column name
    """
    p256dh
    """
    column name
    """
    updated_at
    """
    column name
    """
    userId
}

"""
input type for updating data in table "PushNotificationSubscription"
"""
input PushNotificationSubscription_set_input {
    auth: String
    created_at: timestamptz
    endpoint: String
    p256dh: String
    updated_at: timestamptz
    userId: String
}

"""
update columns of table "PushNotificationSubscription"
"""
enum PushNotificationSubscription_update_column {
    """
    column name
    """
    auth
    """
    column name
    """
    created_at
    """
    column name
    """
    endpoint
    """
    column name
    """
    p256dh
    """
    column name
    """
    updated_at
    """
    column name
    """
    userId
}

type RefreshYouTubeDataOutput {
    message: String
    success: Boolean!
}

type StopEventBroadcastOutput {
    broadcastsStopped: Int!
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    """
    does the column match the given case-insensitive pattern
    """
    _ilike: String
    _in: [String!]
    """
    does the column match the given POSIX regular expression, case insensitive
    """
    _iregex: String
    _is_null: Boolean
    """
    does the column match the given pattern
    """
    _like: String
    _lt: String
    _lte: String
    _neq: String
    """
    does the column NOT match the given case-insensitive pattern
    """
    _nilike: String
    _nin: [String!]
    """
    does the column NOT match the given POSIX regular expression, case insensitive
    """
    _niregex: String
    """
    does the column NOT match the given pattern
    """
    _nlike: String
    """
    does the column NOT match the given POSIX regular expression, case sensitive
    """
    _nregex: String
    """
    does the column NOT match the given SQL regular expression
    """
    _nsimilar: String
    """
    does the column match the given POSIX regular expression, case sensitive
    """
    _regex: String
    """
    does the column match the given SQL regular expression
    """
    _similar: String
}

type SubmitGoogleOAuthCodeOutput {
    message: String
    success: Boolean!
}

type SubmitUpdatedSubtitlesOutput {
    message: String!
    success: Boolean!
}

type SubmitUploadableElementOutput {
    message: String!
    success: Boolean!
}

type ToggleVonageRecordingStateOutput {
    allowed: Boolean!
    recordingState: Boolean!
}

type TranscribeGeneratePresignedUrlOutput {
    url: String!
}

type UpdateProfilePhotoResponse {
    ok: Boolean!
    photoURL_50x50: String
    photoURL_350x350: String
}

"""
columns and relationships of "User"
"""
type User {
    acceptedPrivacyPolicyAt: timestamptz
    acceptedTermsAt: timestamptz
    """
    An array relationship
    """
    conferenceDemoCodes(
        """
        distinct select on columns
        """
        distinct_on: [conference_DemoCode_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [conference_DemoCode_order_by!]
        """
        filter the rows returned
        """
        where: conference_DemoCode_bool_exp
    ): [conference_DemoCode!]!
    """
    An aggregate relationship
    """
    conferenceDemoCodes_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [conference_DemoCode_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [conference_DemoCode_order_by!]
        """
        filter the rows returned
        """
        where: conference_DemoCode_bool_exp
    ): conference_DemoCode_aggregate!
    """
    An array relationship
    """
    conferencesCreated(
        """
        distinct select on columns
        """
        distinct_on: [conference_Conference_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [conference_Conference_order_by!]
        """
        filter the rows returned
        """
        where: conference_Conference_bool_exp
    ): [conference_Conference!]!
    """
    An aggregate relationship
    """
    conferencesCreated_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [conference_Conference_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [conference_Conference_order_by!]
        """
        filter the rows returned
        """
        where: conference_Conference_bool_exp
    ): conference_Conference_aggregate!
    createdAt: timestamptz!
    email: String
    """
    An array relationship
    """
    emails(
        """
        distinct select on columns
        """
        distinct_on: [Email_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [Email_order_by!]
        """
        filter the rows returned
        """
        where: Email_bool_exp
    ): [Email!]!
    """
    An aggregate relationship
    """
    emails_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [Email_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [Email_order_by!]
        """
        filter the rows returned
        """
        where: Email_bool_exp
    ): Email_aggregate!
    id: String!
    """
    An array relationship
    """
    invitationsPendingConfirmation(
        """
        distinct select on columns
        """
        distinct_on: [registrant_Invitation_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_Invitation_order_by!]
        """
        filter the rows returned
        """
        where: registrant_Invitation_bool_exp
    ): [registrant_Invitation!]!
    """
    An aggregate relationship
    """
    invitationsPendingConfirmation_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [registrant_Invitation_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_Invitation_order_by!]
        """
        filter the rows returned
        """
        where: registrant_Invitation_bool_exp
    ): registrant_Invitation_aggregate!
    """
    An array relationship
    """
    pushNotificationSubscriptions(
        """
        distinct select on columns
        """
        distinct_on: [PushNotificationSubscription_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [PushNotificationSubscription_order_by!]
        """
        filter the rows returned
        """
        where: PushNotificationSubscription_bool_exp
    ): [PushNotificationSubscription!]!
    """
    An aggregate relationship
    """
    pushNotificationSubscriptions_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [PushNotificationSubscription_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [PushNotificationSubscription_order_by!]
        """
        filter the rows returned
        """
        where: PushNotificationSubscription_bool_exp
    ): PushNotificationSubscription_aggregate!
    """
    An array relationship
    """
    registrants(
        """
        distinct select on columns
        """
        distinct_on: [registrant_Registrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_Registrant_order_by!]
        """
        filter the rows returned
        """
        where: registrant_Registrant_bool_exp
    ): [registrant_Registrant!]!
    """
    An aggregate relationship
    """
    registrants_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [registrant_Registrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_Registrant_order_by!]
        """
        filter the rows returned
        """
        where: registrant_Registrant_bool_exp
    ): registrant_Registrant_aggregate!
    """
    An array relationship
    """
    superUserPermissionGrants(
        """
        distinct select on columns
        """
        distinct_on: [system_SuperUserPermissionGrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [system_SuperUserPermissionGrant_order_by!]
        """
        filter the rows returned
        """
        where: system_SuperUserPermissionGrant_bool_exp
    ): [system_SuperUserPermissionGrant!]!
    """
    An aggregate relationship
    """
    superUserPermissionGrants_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [system_SuperUserPermissionGrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [system_SuperUserPermissionGrant_order_by!]
        """
        filter the rows returned
        """
        where: system_SuperUserPermissionGrant_bool_exp
    ): system_SuperUserPermissionGrant_aggregate!
    updatedAt: timestamptz!
}

"""
aggregated selection of "User"
"""
type User_aggregate {
    aggregate: User_aggregate_fields
    nodes: [User!]!
}

"""
aggregate fields of "User"
"""
type User_aggregate_fields {
    count(columns: [User_select_column!], distinct: Boolean): Int!
    max: User_max_fields
    min: User_min_fields
}

"""
Boolean expression to filter rows from the table "User". All fields are combined with a logical 'AND'.
"""
input User_bool_exp {
    _and: [User_bool_exp!]
    _not: User_bool_exp
    _or: [User_bool_exp!]
    acceptedPrivacyPolicyAt: timestamptz_comparison_exp
    acceptedTermsAt: timestamptz_comparison_exp
    conferenceDemoCodes: conference_DemoCode_bool_exp
    conferencesCreated: conference_Conference_bool_exp
    createdAt: timestamptz_comparison_exp
    email: String_comparison_exp
    emails: Email_bool_exp
    id: String_comparison_exp
    invitationsPendingConfirmation: registrant_Invitation_bool_exp
    pushNotificationSubscriptions: PushNotificationSubscription_bool_exp
    registrants: registrant_Registrant_bool_exp
    superUserPermissionGrants: system_SuperUserPermissionGrant_bool_exp
    updatedAt: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "User"
"""
enum User_constraint {
    """
    unique or primary key constraint
    """
    user_email_key
    """
    unique or primary key constraint
    """
    user_pkey
}

"""
input type for inserting data into table "User"
"""
input User_insert_input {
    acceptedPrivacyPolicyAt: timestamptz
    acceptedTermsAt: timestamptz
    conferenceDemoCodes: conference_DemoCode_arr_rel_insert_input
    conferencesCreated: conference_Conference_arr_rel_insert_input
    createdAt: timestamptz
    email: String
    emails: Email_arr_rel_insert_input
    id: String
    invitationsPendingConfirmation: registrant_Invitation_arr_rel_insert_input
    pushNotificationSubscriptions: PushNotificationSubscription_arr_rel_insert_input
    registrants: registrant_Registrant_arr_rel_insert_input
    superUserPermissionGrants: system_SuperUserPermissionGrant_arr_rel_insert_input
    updatedAt: timestamptz
}

"""
aggregate max on columns
"""
type User_max_fields {
    acceptedPrivacyPolicyAt: timestamptz
    acceptedTermsAt: timestamptz
    createdAt: timestamptz
    email: String
    id: String
    updatedAt: timestamptz
}

"""
aggregate min on columns
"""
type User_min_fields {
    acceptedPrivacyPolicyAt: timestamptz
    acceptedTermsAt: timestamptz
    createdAt: timestamptz
    email: String
    id: String
    updatedAt: timestamptz
}

"""
response of any mutation on the table "User"
"""
type User_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [User!]!
}

"""
input type for inserting object relation for remote table "User"
"""
input User_obj_rel_insert_input {
    data: User_insert_input!
    """
    on conflict condition
    """
    on_conflict: User_on_conflict
}

"""
on conflict condition type for table "User"
"""
input User_on_conflict {
    constraint: User_constraint!
    update_columns: [User_update_column!]! = []
    where: User_bool_exp
}

"""
Ordering options when selecting data from "User".
"""
input User_order_by {
    acceptedPrivacyPolicyAt: order_by
    acceptedTermsAt: order_by
    conferenceDemoCodes_aggregate: conference_DemoCode_aggregate_order_by
    conferencesCreated_aggregate: conference_Conference_aggregate_order_by
    createdAt: order_by
    email: order_by
    emails_aggregate: Email_aggregate_order_by
    id: order_by
    invitationsPendingConfirmation_aggregate: registrant_Invitation_aggregate_order_by
    pushNotificationSubscriptions_aggregate: PushNotificationSubscription_aggregate_order_by
    registrants_aggregate: registrant_Registrant_aggregate_order_by
    superUserPermissionGrants_aggregate: system_SuperUserPermissionGrant_aggregate_order_by
    updatedAt: order_by
}

"""
primary key columns input for table: User
"""
input User_pk_columns_input {
    id: String!
}

"""
select columns of table "User"
"""
enum User_select_column {
    """
    column name
    """
    acceptedPrivacyPolicyAt
    """
    column name
    """
    acceptedTermsAt
    """
    column name
    """
    createdAt
    """
    column name
    """
    email
    """
    column name
    """
    id
    """
    column name
    """
    updatedAt
}

"""
input type for updating data in table "User"
"""
input User_set_input {
    acceptedPrivacyPolicyAt: timestamptz
    acceptedTermsAt: timestamptz
    createdAt: timestamptz
    email: String
    id: String
    updatedAt: timestamptz
}

"""
update columns of table "User"
"""
enum User_update_column {
    """
    column name
    """
    acceptedPrivacyPolicyAt
    """
    column name
    """
    acceptedTermsAt
    """
    column name
    """
    createdAt
    """
    column name
    """
    email
    """
    column name
    """
    id
    """
    column name
    """
    updatedAt
}

type VAPIDPublicKeyOutput {
    key: String!
}

"""
columns and relationships of "analytics.AppStats"
"""
type analytics_AppStats {
    created_at: timestamptz!
    id: Int!
    pages(
        """
        JSON select path
        """
        path: String
    ): jsonb
    total_unique_tabs: Int!
    total_unique_user_ids: Int!
    updated_at: timestamptz!
}

"""
aggregated selection of "analytics.AppStats"
"""
type analytics_AppStats_aggregate {
    aggregate: analytics_AppStats_aggregate_fields
    nodes: [analytics_AppStats!]!
}

"""
aggregate fields of "analytics.AppStats"
"""
type analytics_AppStats_aggregate_fields {
    avg: analytics_AppStats_avg_fields
    count(columns: [analytics_AppStats_select_column!], distinct: Boolean): Int!
    max: analytics_AppStats_max_fields
    min: analytics_AppStats_min_fields
    stddev: analytics_AppStats_stddev_fields
    stddev_pop: analytics_AppStats_stddev_pop_fields
    stddev_samp: analytics_AppStats_stddev_samp_fields
    sum: analytics_AppStats_sum_fields
    var_pop: analytics_AppStats_var_pop_fields
    var_samp: analytics_AppStats_var_samp_fields
    variance: analytics_AppStats_variance_fields
}

"""
append existing jsonb value of filtered columns with new jsonb value
"""
input analytics_AppStats_append_input {
    pages: jsonb
}

"""
aggregate avg on columns
"""
type analytics_AppStats_avg_fields {
    id: Float
    total_unique_tabs: Float
    total_unique_user_ids: Float
}

"""
Boolean expression to filter rows from the table "analytics.AppStats". All fields are combined with a logical 'AND'.
"""
input analytics_AppStats_bool_exp {
    _and: [analytics_AppStats_bool_exp!]
    _not: analytics_AppStats_bool_exp
    _or: [analytics_AppStats_bool_exp!]
    created_at: timestamptz_comparison_exp
    id: Int_comparison_exp
    pages: jsonb_comparison_exp
    total_unique_tabs: Int_comparison_exp
    total_unique_user_ids: Int_comparison_exp
    updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "analytics.AppStats"
"""
enum analytics_AppStats_constraint {
    """
    unique or primary key constraint
    """
    AppStats_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input analytics_AppStats_delete_at_path_input {
    pages: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input analytics_AppStats_delete_elem_input {
    pages: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input analytics_AppStats_delete_key_input {
    pages: String
}

"""
input type for incrementing numeric columns in table "analytics.AppStats"
"""
input analytics_AppStats_inc_input {
    id: Int
    total_unique_tabs: Int
    total_unique_user_ids: Int
}

"""
input type for inserting data into table "analytics.AppStats"
"""
input analytics_AppStats_insert_input {
    created_at: timestamptz
    id: Int
    pages: jsonb
    total_unique_tabs: Int
    total_unique_user_ids: Int
    updated_at: timestamptz
}

"""
aggregate max on columns
"""
type analytics_AppStats_max_fields {
    created_at: timestamptz
    id: Int
    total_unique_tabs: Int
    total_unique_user_ids: Int
    updated_at: timestamptz
}

"""
aggregate min on columns
"""
type analytics_AppStats_min_fields {
    created_at: timestamptz
    id: Int
    total_unique_tabs: Int
    total_unique_user_ids: Int
    updated_at: timestamptz
}

"""
response of any mutation on the table "analytics.AppStats"
"""
type analytics_AppStats_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [analytics_AppStats!]!
}

"""
on conflict condition type for table "analytics.AppStats"
"""
input analytics_AppStats_on_conflict {
    constraint: analytics_AppStats_constraint!
    update_columns: [analytics_AppStats_update_column!]! = []
    where: analytics_AppStats_bool_exp
}

"""
Ordering options when selecting data from "analytics.AppStats".
"""
input analytics_AppStats_order_by {
    created_at: order_by
    id: order_by
    pages: order_by
    total_unique_tabs: order_by
    total_unique_user_ids: order_by
    updated_at: order_by
}

"""
primary key columns input for table: analytics_AppStats
"""
input analytics_AppStats_pk_columns_input {
    id: Int!
}

"""
prepend existing jsonb value of filtered columns with new jsonb value
"""
input analytics_AppStats_prepend_input {
    pages: jsonb
}

"""
select columns of table "analytics.AppStats"
"""
enum analytics_AppStats_select_column {
    """
    column name
    """
    created_at
    """
    column name
    """
    id
    """
    column name
    """
    pages
    """
    column name
    """
    total_unique_tabs
    """
    column name
    """
    total_unique_user_ids
    """
    column name
    """
    updated_at
}

"""
input type for updating data in table "analytics.AppStats"
"""
input analytics_AppStats_set_input {
    created_at: timestamptz
    id: Int
    pages: jsonb
    total_unique_tabs: Int
    total_unique_user_ids: Int
    updated_at: timestamptz
}

"""
aggregate stddev on columns
"""
type analytics_AppStats_stddev_fields {
    id: Float
    total_unique_tabs: Float
    total_unique_user_ids: Float
}

"""
aggregate stddev_pop on columns
"""
type analytics_AppStats_stddev_pop_fields {
    id: Float
    total_unique_tabs: Float
    total_unique_user_ids: Float
}

"""
aggregate stddev_samp on columns
"""
type analytics_AppStats_stddev_samp_fields {
    id: Float
    total_unique_tabs: Float
    total_unique_user_ids: Float
}

"""
aggregate sum on columns
"""
type analytics_AppStats_sum_fields {
    id: Int
    total_unique_tabs: Int
    total_unique_user_ids: Int
}

"""
update columns of table "analytics.AppStats"
"""
enum analytics_AppStats_update_column {
    """
    column name
    """
    created_at
    """
    column name
    """
    id
    """
    column name
    """
    pages
    """
    column name
    """
    total_unique_tabs
    """
    column name
    """
    total_unique_user_ids
    """
    column name
    """
    updated_at
}

"""
aggregate var_pop on columns
"""
type analytics_AppStats_var_pop_fields {
    id: Float
    total_unique_tabs: Float
    total_unique_user_ids: Float
}

"""
aggregate var_samp on columns
"""
type analytics_AppStats_var_samp_fields {
    id: Float
    total_unique_tabs: Float
    total_unique_user_ids: Float
}

"""
aggregate variance on columns
"""
type analytics_AppStats_variance_fields {
    id: Float
    total_unique_tabs: Float
    total_unique_user_ids: Float
}

"""
columns and relationships of "analytics.CompletedRegistrations"
"""
type analytics_CompletedRegistrations {
    """
    An object relationship
    """
    conference: conference_Conference
    count: bigint
    id: uuid
}

"""
aggregated selection of "analytics.CompletedRegistrations"
"""
type analytics_CompletedRegistrations_aggregate {
    aggregate: analytics_CompletedRegistrations_aggregate_fields
    nodes: [analytics_CompletedRegistrations!]!
}

"""
aggregate fields of "analytics.CompletedRegistrations"
"""
type analytics_CompletedRegistrations_aggregate_fields {
    avg: analytics_CompletedRegistrations_avg_fields
    count(columns: [analytics_CompletedRegistrations_select_column!], distinct: Boolean): Int!
    max: analytics_CompletedRegistrations_max_fields
    min: analytics_CompletedRegistrations_min_fields
    stddev: analytics_CompletedRegistrations_stddev_fields
    stddev_pop: analytics_CompletedRegistrations_stddev_pop_fields
    stddev_samp: analytics_CompletedRegistrations_stddev_samp_fields
    sum: analytics_CompletedRegistrations_sum_fields
    var_pop: analytics_CompletedRegistrations_var_pop_fields
    var_samp: analytics_CompletedRegistrations_var_samp_fields
    variance: analytics_CompletedRegistrations_variance_fields
}

"""
aggregate avg on columns
"""
type analytics_CompletedRegistrations_avg_fields {
    count: Float
}

"""
Boolean expression to filter rows from the table "analytics.CompletedRegistrations". All fields are combined with a logical 'AND'.
"""
input analytics_CompletedRegistrations_bool_exp {
    _and: [analytics_CompletedRegistrations_bool_exp!]
    _not: analytics_CompletedRegistrations_bool_exp
    _or: [analytics_CompletedRegistrations_bool_exp!]
    conference: conference_Conference_bool_exp
    count: bigint_comparison_exp
    id: uuid_comparison_exp
}

"""
input type for inserting data into table "analytics.CompletedRegistrations"
"""
input analytics_CompletedRegistrations_insert_input {
    conference: conference_Conference_obj_rel_insert_input
    count: bigint
    id: uuid
}

"""
aggregate max on columns
"""
type analytics_CompletedRegistrations_max_fields {
    count: bigint
    id: uuid
}

"""
aggregate min on columns
"""
type analytics_CompletedRegistrations_min_fields {
    count: bigint
    id: uuid
}

"""
input type for inserting object relation for remote table "analytics.CompletedRegistrations"
"""
input analytics_CompletedRegistrations_obj_rel_insert_input {
    data: analytics_CompletedRegistrations_insert_input!
}

"""
Ordering options when selecting data from "analytics.CompletedRegistrations".
"""
input analytics_CompletedRegistrations_order_by {
    conference: conference_Conference_order_by
    count: order_by
    id: order_by
}

"""
select columns of table "analytics.CompletedRegistrations"
"""
enum analytics_CompletedRegistrations_select_column {
    """
    column name
    """
    count
    """
    column name
    """
    id
}

"""
aggregate stddev on columns
"""
type analytics_CompletedRegistrations_stddev_fields {
    count: Float
}

"""
aggregate stddev_pop on columns
"""
type analytics_CompletedRegistrations_stddev_pop_fields {
    count: Float
}

"""
aggregate stddev_samp on columns
"""
type analytics_CompletedRegistrations_stddev_samp_fields {
    count: Float
}

"""
aggregate sum on columns
"""
type analytics_CompletedRegistrations_sum_fields {
    count: bigint
}

"""
aggregate var_pop on columns
"""
type analytics_CompletedRegistrations_var_pop_fields {
    count: Float
}

"""
aggregate var_samp on columns
"""
type analytics_CompletedRegistrations_var_samp_fields {
    count: Float
}

"""
aggregate variance on columns
"""
type analytics_CompletedRegistrations_variance_fields {
    count: Float
}

"""
columns and relationships of "analytics.ContentElementStats"
"""
type analytics_ContentElementStats {
    created_at: timestamptz!
    """
    An object relationship
    """
    element: content_Element!
    elementId: uuid!
    id: uuid!
    updated_at: timestamptz!
    viewCount: Int!
}

"""
aggregated selection of "analytics.ContentElementStats"
"""
type analytics_ContentElementStats_aggregate {
    aggregate: analytics_ContentElementStats_aggregate_fields
    nodes: [analytics_ContentElementStats!]!
}

"""
aggregate fields of "analytics.ContentElementStats"
"""
type analytics_ContentElementStats_aggregate_fields {
    avg: analytics_ContentElementStats_avg_fields
    count(columns: [analytics_ContentElementStats_select_column!], distinct: Boolean): Int!
    max: analytics_ContentElementStats_max_fields
    min: analytics_ContentElementStats_min_fields
    stddev: analytics_ContentElementStats_stddev_fields
    stddev_pop: analytics_ContentElementStats_stddev_pop_fields
    stddev_samp: analytics_ContentElementStats_stddev_samp_fields
    sum: analytics_ContentElementStats_sum_fields
    var_pop: analytics_ContentElementStats_var_pop_fields
    var_samp: analytics_ContentElementStats_var_samp_fields
    variance: analytics_ContentElementStats_variance_fields
}

"""
order by aggregate values of table "analytics.ContentElementStats"
"""
input analytics_ContentElementStats_aggregate_order_by {
    avg: analytics_ContentElementStats_avg_order_by
    count: order_by
    max: analytics_ContentElementStats_max_order_by
    min: analytics_ContentElementStats_min_order_by
    stddev: analytics_ContentElementStats_stddev_order_by
    stddev_pop: analytics_ContentElementStats_stddev_pop_order_by
    stddev_samp: analytics_ContentElementStats_stddev_samp_order_by
    sum: analytics_ContentElementStats_sum_order_by
    var_pop: analytics_ContentElementStats_var_pop_order_by
    var_samp: analytics_ContentElementStats_var_samp_order_by
    variance: analytics_ContentElementStats_variance_order_by
}

"""
input type for inserting array relation for remote table "analytics.ContentElementStats"
"""
input analytics_ContentElementStats_arr_rel_insert_input {
    data: [analytics_ContentElementStats_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: analytics_ContentElementStats_on_conflict
}

"""
aggregate avg on columns
"""
type analytics_ContentElementStats_avg_fields {
    viewCount: Float
}

"""
order by avg() on columns of table "analytics.ContentElementStats"
"""
input analytics_ContentElementStats_avg_order_by {
    viewCount: order_by
}

"""
Boolean expression to filter rows from the table "analytics.ContentElementStats". All fields are combined with a logical 'AND'.
"""
input analytics_ContentElementStats_bool_exp {
    _and: [analytics_ContentElementStats_bool_exp!]
    _not: analytics_ContentElementStats_bool_exp
    _or: [analytics_ContentElementStats_bool_exp!]
    created_at: timestamptz_comparison_exp
    element: content_Element_bool_exp
    elementId: uuid_comparison_exp
    id: uuid_comparison_exp
    updated_at: timestamptz_comparison_exp
    viewCount: Int_comparison_exp
}

"""
unique or primary key constraints on table "analytics.ContentElementStats"
"""
enum analytics_ContentElementStats_constraint {
    """
    unique or primary key constraint
    """
    ContentElementStats_id_key
    """
    unique or primary key constraint
    """
    ContentElementStats_pkey
}

"""
input type for incrementing numeric columns in table "analytics.ContentElementStats"
"""
input analytics_ContentElementStats_inc_input {
    viewCount: Int
}

"""
input type for inserting data into table "analytics.ContentElementStats"
"""
input analytics_ContentElementStats_insert_input {
    created_at: timestamptz
    element: content_Element_obj_rel_insert_input
    elementId: uuid
    id: uuid
    updated_at: timestamptz
    viewCount: Int
}

"""
aggregate max on columns
"""
type analytics_ContentElementStats_max_fields {
    created_at: timestamptz
    elementId: uuid
    id: uuid
    updated_at: timestamptz
    viewCount: Int
}

"""
order by max() on columns of table "analytics.ContentElementStats"
"""
input analytics_ContentElementStats_max_order_by {
    created_at: order_by
    elementId: order_by
    id: order_by
    updated_at: order_by
    viewCount: order_by
}

"""
aggregate min on columns
"""
type analytics_ContentElementStats_min_fields {
    created_at: timestamptz
    elementId: uuid
    id: uuid
    updated_at: timestamptz
    viewCount: Int
}

"""
order by min() on columns of table "analytics.ContentElementStats"
"""
input analytics_ContentElementStats_min_order_by {
    created_at: order_by
    elementId: order_by
    id: order_by
    updated_at: order_by
    viewCount: order_by
}

"""
response of any mutation on the table "analytics.ContentElementStats"
"""
type analytics_ContentElementStats_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [analytics_ContentElementStats!]!
}

"""
on conflict condition type for table "analytics.ContentElementStats"
"""
input analytics_ContentElementStats_on_conflict {
    constraint: analytics_ContentElementStats_constraint!
    update_columns: [analytics_ContentElementStats_update_column!]! = []
    where: analytics_ContentElementStats_bool_exp
}

"""
Ordering options when selecting data from "analytics.ContentElementStats".
"""
input analytics_ContentElementStats_order_by {
    created_at: order_by
    element: content_Element_order_by
    elementId: order_by
    id: order_by
    updated_at: order_by
    viewCount: order_by
}

"""
primary key columns input for table: analytics_ContentElementStats
"""
input analytics_ContentElementStats_pk_columns_input {
    id: uuid!
}

"""
select columns of table "analytics.ContentElementStats"
"""
enum analytics_ContentElementStats_select_column {
    """
    column name
    """
    created_at
    """
    column name
    """
    elementId
    """
    column name
    """
    id
    """
    column name
    """
    updated_at
    """
    column name
    """
    viewCount
}

"""
input type for updating data in table "analytics.ContentElementStats"
"""
input analytics_ContentElementStats_set_input {
    created_at: timestamptz
    elementId: uuid
    id: uuid
    updated_at: timestamptz
    viewCount: Int
}

"""
aggregate stddev on columns
"""
type analytics_ContentElementStats_stddev_fields {
    viewCount: Float
}

"""
order by stddev() on columns of table "analytics.ContentElementStats"
"""
input analytics_ContentElementStats_stddev_order_by {
    viewCount: order_by
}

"""
aggregate stddev_pop on columns
"""
type analytics_ContentElementStats_stddev_pop_fields {
    viewCount: Float
}

"""
order by stddev_pop() on columns of table "analytics.ContentElementStats"
"""
input analytics_ContentElementStats_stddev_pop_order_by {
    viewCount: order_by
}

"""
aggregate stddev_samp on columns
"""
type analytics_ContentElementStats_stddev_samp_fields {
    viewCount: Float
}

"""
order by stddev_samp() on columns of table "analytics.ContentElementStats"
"""
input analytics_ContentElementStats_stddev_samp_order_by {
    viewCount: order_by
}

"""
aggregate sum on columns
"""
type analytics_ContentElementStats_sum_fields {
    viewCount: Int
}

"""
order by sum() on columns of table "analytics.ContentElementStats"
"""
input analytics_ContentElementStats_sum_order_by {
    viewCount: order_by
}

"""
update columns of table "analytics.ContentElementStats"
"""
enum analytics_ContentElementStats_update_column {
    """
    column name
    """
    created_at
    """
    column name
    """
    elementId
    """
    column name
    """
    id
    """
    column name
    """
    updated_at
    """
    column name
    """
    viewCount
}

"""
aggregate var_pop on columns
"""
type analytics_ContentElementStats_var_pop_fields {
    viewCount: Float
}

"""
order by var_pop() on columns of table "analytics.ContentElementStats"
"""
input analytics_ContentElementStats_var_pop_order_by {
    viewCount: order_by
}

"""
aggregate var_samp on columns
"""
type analytics_ContentElementStats_var_samp_fields {
    viewCount: Float
}

"""
order by var_samp() on columns of table "analytics.ContentElementStats"
"""
input analytics_ContentElementStats_var_samp_order_by {
    viewCount: order_by
}

"""
aggregate variance on columns
"""
type analytics_ContentElementStats_variance_fields {
    viewCount: Float
}

"""
order by variance() on columns of table "analytics.ContentElementStats"
"""
input analytics_ContentElementStats_variance_order_by {
    viewCount: order_by
}

"""
columns and relationships of "analytics.ContentItemStats"
"""
type analytics_ContentItemStats {
    created_at: timestamptz!
    id: uuid!
    """
    An object relationship
    """
    item: content_Item!
    itemId: uuid!
    updated_at: timestamptz!
    viewCount: Int!
}

"""
aggregated selection of "analytics.ContentItemStats"
"""
type analytics_ContentItemStats_aggregate {
    aggregate: analytics_ContentItemStats_aggregate_fields
    nodes: [analytics_ContentItemStats!]!
}

"""
aggregate fields of "analytics.ContentItemStats"
"""
type analytics_ContentItemStats_aggregate_fields {
    avg: analytics_ContentItemStats_avg_fields
    count(columns: [analytics_ContentItemStats_select_column!], distinct: Boolean): Int!
    max: analytics_ContentItemStats_max_fields
    min: analytics_ContentItemStats_min_fields
    stddev: analytics_ContentItemStats_stddev_fields
    stddev_pop: analytics_ContentItemStats_stddev_pop_fields
    stddev_samp: analytics_ContentItemStats_stddev_samp_fields
    sum: analytics_ContentItemStats_sum_fields
    var_pop: analytics_ContentItemStats_var_pop_fields
    var_samp: analytics_ContentItemStats_var_samp_fields
    variance: analytics_ContentItemStats_variance_fields
}

"""
order by aggregate values of table "analytics.ContentItemStats"
"""
input analytics_ContentItemStats_aggregate_order_by {
    avg: analytics_ContentItemStats_avg_order_by
    count: order_by
    max: analytics_ContentItemStats_max_order_by
    min: analytics_ContentItemStats_min_order_by
    stddev: analytics_ContentItemStats_stddev_order_by
    stddev_pop: analytics_ContentItemStats_stddev_pop_order_by
    stddev_samp: analytics_ContentItemStats_stddev_samp_order_by
    sum: analytics_ContentItemStats_sum_order_by
    var_pop: analytics_ContentItemStats_var_pop_order_by
    var_samp: analytics_ContentItemStats_var_samp_order_by
    variance: analytics_ContentItemStats_variance_order_by
}

"""
input type for inserting array relation for remote table "analytics.ContentItemStats"
"""
input analytics_ContentItemStats_arr_rel_insert_input {
    data: [analytics_ContentItemStats_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: analytics_ContentItemStats_on_conflict
}

"""
aggregate avg on columns
"""
type analytics_ContentItemStats_avg_fields {
    viewCount: Float
}

"""
order by avg() on columns of table "analytics.ContentItemStats"
"""
input analytics_ContentItemStats_avg_order_by {
    viewCount: order_by
}

"""
Boolean expression to filter rows from the table "analytics.ContentItemStats". All fields are combined with a logical 'AND'.
"""
input analytics_ContentItemStats_bool_exp {
    _and: [analytics_ContentItemStats_bool_exp!]
    _not: analytics_ContentItemStats_bool_exp
    _or: [analytics_ContentItemStats_bool_exp!]
    created_at: timestamptz_comparison_exp
    id: uuid_comparison_exp
    item: content_Item_bool_exp
    itemId: uuid_comparison_exp
    updated_at: timestamptz_comparison_exp
    viewCount: Int_comparison_exp
}

"""
unique or primary key constraints on table "analytics.ContentItemStats"
"""
enum analytics_ContentItemStats_constraint {
    """
    unique or primary key constraint
    """
    ContentItemStats_id_key
    """
    unique or primary key constraint
    """
    ContentItemStats_pkey
}

"""
input type for incrementing numeric columns in table "analytics.ContentItemStats"
"""
input analytics_ContentItemStats_inc_input {
    viewCount: Int
}

"""
input type for inserting data into table "analytics.ContentItemStats"
"""
input analytics_ContentItemStats_insert_input {
    created_at: timestamptz
    id: uuid
    item: content_Item_obj_rel_insert_input
    itemId: uuid
    updated_at: timestamptz
    viewCount: Int
}

"""
aggregate max on columns
"""
type analytics_ContentItemStats_max_fields {
    created_at: timestamptz
    id: uuid
    itemId: uuid
    updated_at: timestamptz
    viewCount: Int
}

"""
order by max() on columns of table "analytics.ContentItemStats"
"""
input analytics_ContentItemStats_max_order_by {
    created_at: order_by
    id: order_by
    itemId: order_by
    updated_at: order_by
    viewCount: order_by
}

"""
aggregate min on columns
"""
type analytics_ContentItemStats_min_fields {
    created_at: timestamptz
    id: uuid
    itemId: uuid
    updated_at: timestamptz
    viewCount: Int
}

"""
order by min() on columns of table "analytics.ContentItemStats"
"""
input analytics_ContentItemStats_min_order_by {
    created_at: order_by
    id: order_by
    itemId: order_by
    updated_at: order_by
    viewCount: order_by
}

"""
response of any mutation on the table "analytics.ContentItemStats"
"""
type analytics_ContentItemStats_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [analytics_ContentItemStats!]!
}

"""
on conflict condition type for table "analytics.ContentItemStats"
"""
input analytics_ContentItemStats_on_conflict {
    constraint: analytics_ContentItemStats_constraint!
    update_columns: [analytics_ContentItemStats_update_column!]! = []
    where: analytics_ContentItemStats_bool_exp
}

"""
Ordering options when selecting data from "analytics.ContentItemStats".
"""
input analytics_ContentItemStats_order_by {
    created_at: order_by
    id: order_by
    item: content_Item_order_by
    itemId: order_by
    updated_at: order_by
    viewCount: order_by
}

"""
primary key columns input for table: analytics_ContentItemStats
"""
input analytics_ContentItemStats_pk_columns_input {
    id: uuid!
}

"""
select columns of table "analytics.ContentItemStats"
"""
enum analytics_ContentItemStats_select_column {
    """
    column name
    """
    created_at
    """
    column name
    """
    id
    """
    column name
    """
    itemId
    """
    column name
    """
    updated_at
    """
    column name
    """
    viewCount
}

"""
input type for updating data in table "analytics.ContentItemStats"
"""
input analytics_ContentItemStats_set_input {
    created_at: timestamptz
    id: uuid
    itemId: uuid
    updated_at: timestamptz
    viewCount: Int
}

"""
aggregate stddev on columns
"""
type analytics_ContentItemStats_stddev_fields {
    viewCount: Float
}

"""
order by stddev() on columns of table "analytics.ContentItemStats"
"""
input analytics_ContentItemStats_stddev_order_by {
    viewCount: order_by
}

"""
aggregate stddev_pop on columns
"""
type analytics_ContentItemStats_stddev_pop_fields {
    viewCount: Float
}

"""
order by stddev_pop() on columns of table "analytics.ContentItemStats"
"""
input analytics_ContentItemStats_stddev_pop_order_by {
    viewCount: order_by
}

"""
aggregate stddev_samp on columns
"""
type analytics_ContentItemStats_stddev_samp_fields {
    viewCount: Float
}

"""
order by stddev_samp() on columns of table "analytics.ContentItemStats"
"""
input analytics_ContentItemStats_stddev_samp_order_by {
    viewCount: order_by
}

"""
aggregate sum on columns
"""
type analytics_ContentItemStats_sum_fields {
    viewCount: Int
}

"""
order by sum() on columns of table "analytics.ContentItemStats"
"""
input analytics_ContentItemStats_sum_order_by {
    viewCount: order_by
}

"""
update columns of table "analytics.ContentItemStats"
"""
enum analytics_ContentItemStats_update_column {
    """
    column name
    """
    created_at
    """
    column name
    """
    id
    """
    column name
    """
    itemId
    """
    column name
    """
    updated_at
    """
    column name
    """
    viewCount
}

"""
aggregate var_pop on columns
"""
type analytics_ContentItemStats_var_pop_fields {
    viewCount: Float
}

"""
order by var_pop() on columns of table "analytics.ContentItemStats"
"""
input analytics_ContentItemStats_var_pop_order_by {
    viewCount: order_by
}

"""
aggregate var_samp on columns
"""
type analytics_ContentItemStats_var_samp_fields {
    viewCount: Float
}

"""
order by var_samp() on columns of table "analytics.ContentItemStats"
"""
input analytics_ContentItemStats_var_samp_order_by {
    viewCount: order_by
}

"""
aggregate variance on columns
"""
type analytics_ContentItemStats_variance_fields {
    viewCount: Float
}

"""
order by variance() on columns of table "analytics.ContentItemStats"
"""
input analytics_ContentItemStats_variance_order_by {
    viewCount: order_by
}

"""
columns and relationships of "analytics.ElementTotalViews"
"""
type analytics_ElementTotalViews {
    """
    An object relationship
    """
    element: content_Element
    elementId: uuid!
    totalViewCount: bigint!
}

"""
aggregated selection of "analytics.ElementTotalViews"
"""
type analytics_ElementTotalViews_aggregate {
    aggregate: analytics_ElementTotalViews_aggregate_fields
    nodes: [analytics_ElementTotalViews!]!
}

"""
aggregate fields of "analytics.ElementTotalViews"
"""
type analytics_ElementTotalViews_aggregate_fields {
    avg: analytics_ElementTotalViews_avg_fields
    count(columns: [analytics_ElementTotalViews_select_column!], distinct: Boolean): Int!
    max: analytics_ElementTotalViews_max_fields
    min: analytics_ElementTotalViews_min_fields
    stddev: analytics_ElementTotalViews_stddev_fields
    stddev_pop: analytics_ElementTotalViews_stddev_pop_fields
    stddev_samp: analytics_ElementTotalViews_stddev_samp_fields
    sum: analytics_ElementTotalViews_sum_fields
    var_pop: analytics_ElementTotalViews_var_pop_fields
    var_samp: analytics_ElementTotalViews_var_samp_fields
    variance: analytics_ElementTotalViews_variance_fields
}

"""
aggregate avg on columns
"""
type analytics_ElementTotalViews_avg_fields {
    totalViewCount: Float
}

"""
Boolean expression to filter rows from the table "analytics.ElementTotalViews". All fields are combined with a logical 'AND'.
"""
input analytics_ElementTotalViews_bool_exp {
    _and: [analytics_ElementTotalViews_bool_exp!]
    _not: analytics_ElementTotalViews_bool_exp
    _or: [analytics_ElementTotalViews_bool_exp!]
    element: content_Element_bool_exp
    elementId: uuid_comparison_exp
    totalViewCount: bigint_comparison_exp
}

"""
unique or primary key constraints on table "analytics.ElementTotalViews"
"""
enum analytics_ElementTotalViews_constraint {
    """
    unique or primary key constraint
    """
    ElementTotalViews_pkey
}

"""
input type for incrementing numeric columns in table "analytics.ElementTotalViews"
"""
input analytics_ElementTotalViews_inc_input {
    totalViewCount: bigint
}

"""
input type for inserting data into table "analytics.ElementTotalViews"
"""
input analytics_ElementTotalViews_insert_input {
    element: content_Element_obj_rel_insert_input
    elementId: uuid
    totalViewCount: bigint
}

"""
aggregate max on columns
"""
type analytics_ElementTotalViews_max_fields {
    elementId: uuid
    totalViewCount: bigint
}

"""
aggregate min on columns
"""
type analytics_ElementTotalViews_min_fields {
    elementId: uuid
    totalViewCount: bigint
}

"""
response of any mutation on the table "analytics.ElementTotalViews"
"""
type analytics_ElementTotalViews_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [analytics_ElementTotalViews!]!
}

"""
input type for inserting object relation for remote table "analytics.ElementTotalViews"
"""
input analytics_ElementTotalViews_obj_rel_insert_input {
    data: analytics_ElementTotalViews_insert_input!
    """
    on conflict condition
    """
    on_conflict: analytics_ElementTotalViews_on_conflict
}

"""
on conflict condition type for table "analytics.ElementTotalViews"
"""
input analytics_ElementTotalViews_on_conflict {
    constraint: analytics_ElementTotalViews_constraint!
    update_columns: [analytics_ElementTotalViews_update_column!]! = []
    where: analytics_ElementTotalViews_bool_exp
}

"""
Ordering options when selecting data from "analytics.ElementTotalViews".
"""
input analytics_ElementTotalViews_order_by {
    element: content_Element_order_by
    elementId: order_by
    totalViewCount: order_by
}

"""
primary key columns input for table: analytics_ElementTotalViews
"""
input analytics_ElementTotalViews_pk_columns_input {
    elementId: uuid!
}

"""
select columns of table "analytics.ElementTotalViews"
"""
enum analytics_ElementTotalViews_select_column {
    """
    column name
    """
    elementId
    """
    column name
    """
    totalViewCount
}

"""
input type for updating data in table "analytics.ElementTotalViews"
"""
input analytics_ElementTotalViews_set_input {
    elementId: uuid
    totalViewCount: bigint
}

"""
aggregate stddev on columns
"""
type analytics_ElementTotalViews_stddev_fields {
    totalViewCount: Float
}

"""
aggregate stddev_pop on columns
"""
type analytics_ElementTotalViews_stddev_pop_fields {
    totalViewCount: Float
}

"""
aggregate stddev_samp on columns
"""
type analytics_ElementTotalViews_stddev_samp_fields {
    totalViewCount: Float
}

"""
aggregate sum on columns
"""
type analytics_ElementTotalViews_sum_fields {
    totalViewCount: bigint
}

"""
update columns of table "analytics.ElementTotalViews"
"""
enum analytics_ElementTotalViews_update_column {
    """
    column name
    """
    elementId
    """
    column name
    """
    totalViewCount
}

"""
aggregate var_pop on columns
"""
type analytics_ElementTotalViews_var_pop_fields {
    totalViewCount: Float
}

"""
aggregate var_samp on columns
"""
type analytics_ElementTotalViews_var_samp_fields {
    totalViewCount: Float
}

"""
aggregate variance on columns
"""
type analytics_ElementTotalViews_variance_fields {
    totalViewCount: Float
}

"""
columns and relationships of "analytics.ItemTotalViews"
"""
type analytics_ItemTotalViews {
    """
    An object relationship
    """
    item: content_Item
    itemId: uuid!
    totalViewCount: bigint!
}

"""
aggregated selection of "analytics.ItemTotalViews"
"""
type analytics_ItemTotalViews_aggregate {
    aggregate: analytics_ItemTotalViews_aggregate_fields
    nodes: [analytics_ItemTotalViews!]!
}

"""
aggregate fields of "analytics.ItemTotalViews"
"""
type analytics_ItemTotalViews_aggregate_fields {
    avg: analytics_ItemTotalViews_avg_fields
    count(columns: [analytics_ItemTotalViews_select_column!], distinct: Boolean): Int!
    max: analytics_ItemTotalViews_max_fields
    min: analytics_ItemTotalViews_min_fields
    stddev: analytics_ItemTotalViews_stddev_fields
    stddev_pop: analytics_ItemTotalViews_stddev_pop_fields
    stddev_samp: analytics_ItemTotalViews_stddev_samp_fields
    sum: analytics_ItemTotalViews_sum_fields
    var_pop: analytics_ItemTotalViews_var_pop_fields
    var_samp: analytics_ItemTotalViews_var_samp_fields
    variance: analytics_ItemTotalViews_variance_fields
}

"""
aggregate avg on columns
"""
type analytics_ItemTotalViews_avg_fields {
    totalViewCount: Float
}

"""
Boolean expression to filter rows from the table "analytics.ItemTotalViews". All fields are combined with a logical 'AND'.
"""
input analytics_ItemTotalViews_bool_exp {
    _and: [analytics_ItemTotalViews_bool_exp!]
    _not: analytics_ItemTotalViews_bool_exp
    _or: [analytics_ItemTotalViews_bool_exp!]
    item: content_Item_bool_exp
    itemId: uuid_comparison_exp
    totalViewCount: bigint_comparison_exp
}

"""
unique or primary key constraints on table "analytics.ItemTotalViews"
"""
enum analytics_ItemTotalViews_constraint {
    """
    unique or primary key constraint
    """
    ItemTotalViews_pkey
}

"""
input type for incrementing numeric columns in table "analytics.ItemTotalViews"
"""
input analytics_ItemTotalViews_inc_input {
    totalViewCount: bigint
}

"""
input type for inserting data into table "analytics.ItemTotalViews"
"""
input analytics_ItemTotalViews_insert_input {
    item: content_Item_obj_rel_insert_input
    itemId: uuid
    totalViewCount: bigint
}

"""
aggregate max on columns
"""
type analytics_ItemTotalViews_max_fields {
    itemId: uuid
    totalViewCount: bigint
}

"""
aggregate min on columns
"""
type analytics_ItemTotalViews_min_fields {
    itemId: uuid
    totalViewCount: bigint
}

"""
response of any mutation on the table "analytics.ItemTotalViews"
"""
type analytics_ItemTotalViews_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [analytics_ItemTotalViews!]!
}

"""
input type for inserting object relation for remote table "analytics.ItemTotalViews"
"""
input analytics_ItemTotalViews_obj_rel_insert_input {
    data: analytics_ItemTotalViews_insert_input!
    """
    on conflict condition
    """
    on_conflict: analytics_ItemTotalViews_on_conflict
}

"""
on conflict condition type for table "analytics.ItemTotalViews"
"""
input analytics_ItemTotalViews_on_conflict {
    constraint: analytics_ItemTotalViews_constraint!
    update_columns: [analytics_ItemTotalViews_update_column!]! = []
    where: analytics_ItemTotalViews_bool_exp
}

"""
Ordering options when selecting data from "analytics.ItemTotalViews".
"""
input analytics_ItemTotalViews_order_by {
    item: content_Item_order_by
    itemId: order_by
    totalViewCount: order_by
}

"""
primary key columns input for table: analytics_ItemTotalViews
"""
input analytics_ItemTotalViews_pk_columns_input {
    itemId: uuid!
}

"""
select columns of table "analytics.ItemTotalViews"
"""
enum analytics_ItemTotalViews_select_column {
    """
    column name
    """
    itemId
    """
    column name
    """
    totalViewCount
}

"""
input type for updating data in table "analytics.ItemTotalViews"
"""
input analytics_ItemTotalViews_set_input {
    itemId: uuid
    totalViewCount: bigint
}

"""
aggregate stddev on columns
"""
type analytics_ItemTotalViews_stddev_fields {
    totalViewCount: Float
}

"""
aggregate stddev_pop on columns
"""
type analytics_ItemTotalViews_stddev_pop_fields {
    totalViewCount: Float
}

"""
aggregate stddev_samp on columns
"""
type analytics_ItemTotalViews_stddev_samp_fields {
    totalViewCount: Float
}

"""
aggregate sum on columns
"""
type analytics_ItemTotalViews_sum_fields {
    totalViewCount: bigint
}

"""
update columns of table "analytics.ItemTotalViews"
"""
enum analytics_ItemTotalViews_update_column {
    """
    column name
    """
    itemId
    """
    column name
    """
    totalViewCount
}

"""
aggregate var_pop on columns
"""
type analytics_ItemTotalViews_var_pop_fields {
    totalViewCount: Float
}

"""
aggregate var_samp on columns
"""
type analytics_ItemTotalViews_var_samp_fields {
    totalViewCount: Float
}

"""
aggregate variance on columns
"""
type analytics_ItemTotalViews_variance_fields {
    totalViewCount: Float
}

"""
columns and relationships of "analytics.RoomPresence"
"""
type analytics_RoomPresence {
    count: bigint!
    created_at: timestamptz!
    id: uuid!
    """
    An object relationship
    """
    room: room_Room!
    roomId: uuid!
}

"""
aggregated selection of "analytics.RoomPresence"
"""
type analytics_RoomPresence_aggregate {
    aggregate: analytics_RoomPresence_aggregate_fields
    nodes: [analytics_RoomPresence!]!
}

"""
aggregate fields of "analytics.RoomPresence"
"""
type analytics_RoomPresence_aggregate_fields {
    avg: analytics_RoomPresence_avg_fields
    count(columns: [analytics_RoomPresence_select_column!], distinct: Boolean): Int!
    max: analytics_RoomPresence_max_fields
    min: analytics_RoomPresence_min_fields
    stddev: analytics_RoomPresence_stddev_fields
    stddev_pop: analytics_RoomPresence_stddev_pop_fields
    stddev_samp: analytics_RoomPresence_stddev_samp_fields
    sum: analytics_RoomPresence_sum_fields
    var_pop: analytics_RoomPresence_var_pop_fields
    var_samp: analytics_RoomPresence_var_samp_fields
    variance: analytics_RoomPresence_variance_fields
}

"""
order by aggregate values of table "analytics.RoomPresence"
"""
input analytics_RoomPresence_aggregate_order_by {
    avg: analytics_RoomPresence_avg_order_by
    count: order_by
    max: analytics_RoomPresence_max_order_by
    min: analytics_RoomPresence_min_order_by
    stddev: analytics_RoomPresence_stddev_order_by
    stddev_pop: analytics_RoomPresence_stddev_pop_order_by
    stddev_samp: analytics_RoomPresence_stddev_samp_order_by
    sum: analytics_RoomPresence_sum_order_by
    var_pop: analytics_RoomPresence_var_pop_order_by
    var_samp: analytics_RoomPresence_var_samp_order_by
    variance: analytics_RoomPresence_variance_order_by
}

"""
input type for inserting array relation for remote table "analytics.RoomPresence"
"""
input analytics_RoomPresence_arr_rel_insert_input {
    data: [analytics_RoomPresence_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: analytics_RoomPresence_on_conflict
}

"""
aggregate avg on columns
"""
type analytics_RoomPresence_avg_fields {
    count: Float
}

"""
order by avg() on columns of table "analytics.RoomPresence"
"""
input analytics_RoomPresence_avg_order_by {
    count: order_by
}

"""
Boolean expression to filter rows from the table "analytics.RoomPresence". All fields are combined with a logical 'AND'.
"""
input analytics_RoomPresence_bool_exp {
    _and: [analytics_RoomPresence_bool_exp!]
    _not: analytics_RoomPresence_bool_exp
    _or: [analytics_RoomPresence_bool_exp!]
    count: bigint_comparison_exp
    created_at: timestamptz_comparison_exp
    id: uuid_comparison_exp
    room: room_Room_bool_exp
    roomId: uuid_comparison_exp
}

"""
unique or primary key constraints on table "analytics.RoomPresence"
"""
enum analytics_RoomPresence_constraint {
    """
    unique or primary key constraint
    """
    RoomPresence_pkey
    """
    unique or primary key constraint
    """
    RoomPresence_roomId_created_at_key
}

"""
input type for incrementing numeric columns in table "analytics.RoomPresence"
"""
input analytics_RoomPresence_inc_input {
    count: bigint
}

"""
input type for inserting data into table "analytics.RoomPresence"
"""
input analytics_RoomPresence_insert_input {
    count: bigint
    created_at: timestamptz
    id: uuid
    room: room_Room_obj_rel_insert_input
    roomId: uuid
}

"""
aggregate max on columns
"""
type analytics_RoomPresence_max_fields {
    count: bigint
    created_at: timestamptz
    id: uuid
    roomId: uuid
}

"""
order by max() on columns of table "analytics.RoomPresence"
"""
input analytics_RoomPresence_max_order_by {
    count: order_by
    created_at: order_by
    id: order_by
    roomId: order_by
}

"""
aggregate min on columns
"""
type analytics_RoomPresence_min_fields {
    count: bigint
    created_at: timestamptz
    id: uuid
    roomId: uuid
}

"""
order by min() on columns of table "analytics.RoomPresence"
"""
input analytics_RoomPresence_min_order_by {
    count: order_by
    created_at: order_by
    id: order_by
    roomId: order_by
}

"""
response of any mutation on the table "analytics.RoomPresence"
"""
type analytics_RoomPresence_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [analytics_RoomPresence!]!
}

"""
on conflict condition type for table "analytics.RoomPresence"
"""
input analytics_RoomPresence_on_conflict {
    constraint: analytics_RoomPresence_constraint!
    update_columns: [analytics_RoomPresence_update_column!]! = []
    where: analytics_RoomPresence_bool_exp
}

"""
Ordering options when selecting data from "analytics.RoomPresence".
"""
input analytics_RoomPresence_order_by {
    count: order_by
    created_at: order_by
    id: order_by
    room: room_Room_order_by
    roomId: order_by
}

"""
primary key columns input for table: analytics_RoomPresence
"""
input analytics_RoomPresence_pk_columns_input {
    id: uuid!
}

"""
select columns of table "analytics.RoomPresence"
"""
enum analytics_RoomPresence_select_column {
    """
    column name
    """
    count
    """
    column name
    """
    created_at
    """
    column name
    """
    id
    """
    column name
    """
    roomId
}

"""
input type for updating data in table "analytics.RoomPresence"
"""
input analytics_RoomPresence_set_input {
    count: bigint
    created_at: timestamptz
    id: uuid
    roomId: uuid
}

"""
aggregate stddev on columns
"""
type analytics_RoomPresence_stddev_fields {
    count: Float
}

"""
order by stddev() on columns of table "analytics.RoomPresence"
"""
input analytics_RoomPresence_stddev_order_by {
    count: order_by
}

"""
aggregate stddev_pop on columns
"""
type analytics_RoomPresence_stddev_pop_fields {
    count: Float
}

"""
order by stddev_pop() on columns of table "analytics.RoomPresence"
"""
input analytics_RoomPresence_stddev_pop_order_by {
    count: order_by
}

"""
aggregate stddev_samp on columns
"""
type analytics_RoomPresence_stddev_samp_fields {
    count: Float
}

"""
order by stddev_samp() on columns of table "analytics.RoomPresence"
"""
input analytics_RoomPresence_stddev_samp_order_by {
    count: order_by
}

"""
aggregate sum on columns
"""
type analytics_RoomPresence_sum_fields {
    count: bigint
}

"""
order by sum() on columns of table "analytics.RoomPresence"
"""
input analytics_RoomPresence_sum_order_by {
    count: order_by
}

"""
update columns of table "analytics.RoomPresence"
"""
enum analytics_RoomPresence_update_column {
    """
    column name
    """
    count
    """
    column name
    """
    created_at
    """
    column name
    """
    id
    """
    column name
    """
    roomId
}

"""
aggregate var_pop on columns
"""
type analytics_RoomPresence_var_pop_fields {
    count: Float
}

"""
order by var_pop() on columns of table "analytics.RoomPresence"
"""
input analytics_RoomPresence_var_pop_order_by {
    count: order_by
}

"""
aggregate var_samp on columns
"""
type analytics_RoomPresence_var_samp_fields {
    count: Float
}

"""
order by var_samp() on columns of table "analytics.RoomPresence"
"""
input analytics_RoomPresence_var_samp_order_by {
    count: order_by
}

"""
aggregate variance on columns
"""
type analytics_RoomPresence_variance_fields {
    count: Float
}

"""
order by variance() on columns of table "analytics.RoomPresence"
"""
input analytics_RoomPresence_variance_order_by {
    count: order_by
}

"""
columns and relationships of "analytics.RoomStats"
"""
type analytics_RoomStats {
    created_at: timestamptz!
    hlsViewCount: Int!
    id: uuid!
    """
    An object relationship
    """
    room: room_Room!
    roomId: uuid!
    updated_at: timestamptz!
}

"""
aggregated selection of "analytics.RoomStats"
"""
type analytics_RoomStats_aggregate {
    aggregate: analytics_RoomStats_aggregate_fields
    nodes: [analytics_RoomStats!]!
}

"""
aggregate fields of "analytics.RoomStats"
"""
type analytics_RoomStats_aggregate_fields {
    avg: analytics_RoomStats_avg_fields
    count(columns: [analytics_RoomStats_select_column!], distinct: Boolean): Int!
    max: analytics_RoomStats_max_fields
    min: analytics_RoomStats_min_fields
    stddev: analytics_RoomStats_stddev_fields
    stddev_pop: analytics_RoomStats_stddev_pop_fields
    stddev_samp: analytics_RoomStats_stddev_samp_fields
    sum: analytics_RoomStats_sum_fields
    var_pop: analytics_RoomStats_var_pop_fields
    var_samp: analytics_RoomStats_var_samp_fields
    variance: analytics_RoomStats_variance_fields
}

"""
order by aggregate values of table "analytics.RoomStats"
"""
input analytics_RoomStats_aggregate_order_by {
    avg: analytics_RoomStats_avg_order_by
    count: order_by
    max: analytics_RoomStats_max_order_by
    min: analytics_RoomStats_min_order_by
    stddev: analytics_RoomStats_stddev_order_by
    stddev_pop: analytics_RoomStats_stddev_pop_order_by
    stddev_samp: analytics_RoomStats_stddev_samp_order_by
    sum: analytics_RoomStats_sum_order_by
    var_pop: analytics_RoomStats_var_pop_order_by
    var_samp: analytics_RoomStats_var_samp_order_by
    variance: analytics_RoomStats_variance_order_by
}

"""
input type for inserting array relation for remote table "analytics.RoomStats"
"""
input analytics_RoomStats_arr_rel_insert_input {
    data: [analytics_RoomStats_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: analytics_RoomStats_on_conflict
}

"""
aggregate avg on columns
"""
type analytics_RoomStats_avg_fields {
    hlsViewCount: Float
}

"""
order by avg() on columns of table "analytics.RoomStats"
"""
input analytics_RoomStats_avg_order_by {
    hlsViewCount: order_by
}

"""
Boolean expression to filter rows from the table "analytics.RoomStats". All fields are combined with a logical 'AND'.
"""
input analytics_RoomStats_bool_exp {
    _and: [analytics_RoomStats_bool_exp!]
    _not: analytics_RoomStats_bool_exp
    _or: [analytics_RoomStats_bool_exp!]
    created_at: timestamptz_comparison_exp
    hlsViewCount: Int_comparison_exp
    id: uuid_comparison_exp
    room: room_Room_bool_exp
    roomId: uuid_comparison_exp
    updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "analytics.RoomStats"
"""
enum analytics_RoomStats_constraint {
    """
    unique or primary key constraint
    """
    RoomStats_pkey
}

"""
input type for incrementing numeric columns in table "analytics.RoomStats"
"""
input analytics_RoomStats_inc_input {
    hlsViewCount: Int
}

"""
input type for inserting data into table "analytics.RoomStats"
"""
input analytics_RoomStats_insert_input {
    created_at: timestamptz
    hlsViewCount: Int
    id: uuid
    room: room_Room_obj_rel_insert_input
    roomId: uuid
    updated_at: timestamptz
}

"""
aggregate max on columns
"""
type analytics_RoomStats_max_fields {
    created_at: timestamptz
    hlsViewCount: Int
    id: uuid
    roomId: uuid
    updated_at: timestamptz
}

"""
order by max() on columns of table "analytics.RoomStats"
"""
input analytics_RoomStats_max_order_by {
    created_at: order_by
    hlsViewCount: order_by
    id: order_by
    roomId: order_by
    updated_at: order_by
}

"""
aggregate min on columns
"""
type analytics_RoomStats_min_fields {
    created_at: timestamptz
    hlsViewCount: Int
    id: uuid
    roomId: uuid
    updated_at: timestamptz
}

"""
order by min() on columns of table "analytics.RoomStats"
"""
input analytics_RoomStats_min_order_by {
    created_at: order_by
    hlsViewCount: order_by
    id: order_by
    roomId: order_by
    updated_at: order_by
}

"""
response of any mutation on the table "analytics.RoomStats"
"""
type analytics_RoomStats_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [analytics_RoomStats!]!
}

"""
on conflict condition type for table "analytics.RoomStats"
"""
input analytics_RoomStats_on_conflict {
    constraint: analytics_RoomStats_constraint!
    update_columns: [analytics_RoomStats_update_column!]! = []
    where: analytics_RoomStats_bool_exp
}

"""
Ordering options when selecting data from "analytics.RoomStats".
"""
input analytics_RoomStats_order_by {
    created_at: order_by
    hlsViewCount: order_by
    id: order_by
    room: room_Room_order_by
    roomId: order_by
    updated_at: order_by
}

"""
primary key columns input for table: analytics_RoomStats
"""
input analytics_RoomStats_pk_columns_input {
    id: uuid!
}

"""
select columns of table "analytics.RoomStats"
"""
enum analytics_RoomStats_select_column {
    """
    column name
    """
    created_at
    """
    column name
    """
    hlsViewCount
    """
    column name
    """
    id
    """
    column name
    """
    roomId
    """
    column name
    """
    updated_at
}

"""
input type for updating data in table "analytics.RoomStats"
"""
input analytics_RoomStats_set_input {
    created_at: timestamptz
    hlsViewCount: Int
    id: uuid
    roomId: uuid
    updated_at: timestamptz
}

"""
aggregate stddev on columns
"""
type analytics_RoomStats_stddev_fields {
    hlsViewCount: Float
}

"""
order by stddev() on columns of table "analytics.RoomStats"
"""
input analytics_RoomStats_stddev_order_by {
    hlsViewCount: order_by
}

"""
aggregate stddev_pop on columns
"""
type analytics_RoomStats_stddev_pop_fields {
    hlsViewCount: Float
}

"""
order by stddev_pop() on columns of table "analytics.RoomStats"
"""
input analytics_RoomStats_stddev_pop_order_by {
    hlsViewCount: order_by
}

"""
aggregate stddev_samp on columns
"""
type analytics_RoomStats_stddev_samp_fields {
    hlsViewCount: Float
}

"""
order by stddev_samp() on columns of table "analytics.RoomStats"
"""
input analytics_RoomStats_stddev_samp_order_by {
    hlsViewCount: order_by
}

"""
aggregate sum on columns
"""
type analytics_RoomStats_sum_fields {
    hlsViewCount: Int
}

"""
order by sum() on columns of table "analytics.RoomStats"
"""
input analytics_RoomStats_sum_order_by {
    hlsViewCount: order_by
}

"""
update columns of table "analytics.RoomStats"
"""
enum analytics_RoomStats_update_column {
    """
    column name
    """
    created_at
    """
    column name
    """
    hlsViewCount
    """
    column name
    """
    id
    """
    column name
    """
    roomId
    """
    column name
    """
    updated_at
}

"""
aggregate var_pop on columns
"""
type analytics_RoomStats_var_pop_fields {
    hlsViewCount: Float
}

"""
order by var_pop() on columns of table "analytics.RoomStats"
"""
input analytics_RoomStats_var_pop_order_by {
    hlsViewCount: order_by
}

"""
aggregate var_samp on columns
"""
type analytics_RoomStats_var_samp_fields {
    hlsViewCount: Float
}

"""
order by var_samp() on columns of table "analytics.RoomStats"
"""
input analytics_RoomStats_var_samp_order_by {
    hlsViewCount: order_by
}

"""
aggregate variance on columns
"""
type analytics_RoomStats_variance_fields {
    hlsViewCount: Float
}

"""
order by variance() on columns of table "analytics.RoomStats"
"""
input analytics_RoomStats_variance_order_by {
    hlsViewCount: order_by
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
    _eq: bigint
    _gt: bigint
    _gte: bigint
    _in: [bigint!]
    _is_null: Boolean
    _lt: bigint
    _lte: bigint
    _neq: bigint
    _nin: [bigint!]
}

"""
columns and relationships of "chat.Chat"
"""
type chat_Chat {
    """
    An object relationship
    """
    conference: conference_Conference!
    conferenceId: uuid!
    created_at: timestamptz!
    """
    An object relationship
    """
    duplicateTo: chat_Chat
    duplicateToId: uuid
    """
    An array relationship
    """
    duplicatesFrom(
        """
        distinct select on columns
        """
        distinct_on: [chat_Chat_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Chat_order_by!]
        """
        filter the rows returned
        """
        where: chat_Chat_bool_exp
    ): [chat_Chat!]!
    """
    An aggregate relationship
    """
    duplicatesFrom_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [chat_Chat_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Chat_order_by!]
        """
        filter the rows returned
        """
        where: chat_Chat_bool_exp
    ): chat_Chat_aggregate!
    enableAutoPin: Boolean!
    enableAutoSubscribe: Boolean!
    enableMandatoryPin: Boolean!
    enableMandatorySubscribe: Boolean!
    """
    An array relationship
    """
    flags(
        """
        distinct select on columns
        """
        distinct_on: [chat_Flag_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Flag_order_by!]
        """
        filter the rows returned
        """
        where: chat_Flag_bool_exp
    ): [chat_Flag!]!
    """
    An aggregate relationship
    """
    flags_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [chat_Flag_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Flag_order_by!]
        """
        filter the rows returned
        """
        where: chat_Flag_bool_exp
    ): chat_Flag_aggregate!
    id: uuid!
    """
    An object relationship
    """
    item: content_Item
    """
    An array relationship
    """
    messages(
        """
        distinct select on columns
        """
        distinct_on: [chat_Message_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Message_order_by!]
        """
        filter the rows returned
        """
        where: chat_Message_bool_exp
    ): [chat_Message!]!
    """
    An aggregate relationship
    """
    messages_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [chat_Message_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Message_order_by!]
        """
        filter the rows returned
        """
        where: chat_Message_bool_exp
    ): chat_Message_aggregate!
    """
    An array relationship
    """
    pins(
        """
        distinct select on columns
        """
        distinct_on: [chat_Pin_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Pin_order_by!]
        """
        filter the rows returned
        """
        where: chat_Pin_bool_exp
    ): [chat_Pin!]!
    """
    An aggregate relationship
    """
    pins_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [chat_Pin_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Pin_order_by!]
        """
        filter the rows returned
        """
        where: chat_Pin_bool_exp
    ): chat_Pin_aggregate!
    """
    An array relationship
    """
    readUpToIndices(
        """
        distinct select on columns
        """
        distinct_on: [chat_ReadUpToIndex_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_ReadUpToIndex_order_by!]
        """
        filter the rows returned
        """
        where: chat_ReadUpToIndex_bool_exp
    ): [chat_ReadUpToIndex!]!
    """
    An aggregate relationship
    """
    readUpToIndices_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [chat_ReadUpToIndex_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_ReadUpToIndex_order_by!]
        """
        filter the rows returned
        """
        where: chat_ReadUpToIndex_bool_exp
    ): chat_ReadUpToIndex_aggregate!
    restrictToAdmins: Boolean!
    """
    An object relationship
    """
    room: room_Room
    subconferenceId: uuid
    """
    An array relationship
    """
    subscriptions(
        """
        distinct select on columns
        """
        distinct_on: [chat_Subscription_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Subscription_order_by!]
        """
        filter the rows returned
        """
        where: chat_Subscription_bool_exp
    ): [chat_Subscription!]!
    """
    An aggregate relationship
    """
    subscriptions_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [chat_Subscription_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Subscription_order_by!]
        """
        filter the rows returned
        """
        where: chat_Subscription_bool_exp
    ): chat_Subscription_aggregate!
    updated_at: timestamptz!
}

"""
aggregated selection of "chat.Chat"
"""
type chat_Chat_aggregate {
    aggregate: chat_Chat_aggregate_fields
    nodes: [chat_Chat!]!
}

"""
aggregate fields of "chat.Chat"
"""
type chat_Chat_aggregate_fields {
    count(columns: [chat_Chat_select_column!], distinct: Boolean): Int!
    max: chat_Chat_max_fields
    min: chat_Chat_min_fields
}

"""
order by aggregate values of table "chat.Chat"
"""
input chat_Chat_aggregate_order_by {
    count: order_by
    max: chat_Chat_max_order_by
    min: chat_Chat_min_order_by
}

"""
input type for inserting array relation for remote table "chat.Chat"
"""
input chat_Chat_arr_rel_insert_input {
    data: [chat_Chat_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: chat_Chat_on_conflict
}

"""
Boolean expression to filter rows from the table "chat.Chat". All fields are combined with a logical 'AND'.
"""
input chat_Chat_bool_exp {
    _and: [chat_Chat_bool_exp!]
    _not: chat_Chat_bool_exp
    _or: [chat_Chat_bool_exp!]
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    created_at: timestamptz_comparison_exp
    duplicateTo: chat_Chat_bool_exp
    duplicateToId: uuid_comparison_exp
    duplicatesFrom: chat_Chat_bool_exp
    enableAutoPin: Boolean_comparison_exp
    enableAutoSubscribe: Boolean_comparison_exp
    enableMandatoryPin: Boolean_comparison_exp
    enableMandatorySubscribe: Boolean_comparison_exp
    flags: chat_Flag_bool_exp
    id: uuid_comparison_exp
    item: content_Item_bool_exp
    messages: chat_Message_bool_exp
    pins: chat_Pin_bool_exp
    readUpToIndices: chat_ReadUpToIndex_bool_exp
    restrictToAdmins: Boolean_comparison_exp
    room: room_Room_bool_exp
    subconferenceId: uuid_comparison_exp
    subscriptions: chat_Subscription_bool_exp
    updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "chat.Chat"
"""
enum chat_Chat_constraint {
    """
    unique or primary key constraint
    """
    Chat_pkey
}

"""
input type for inserting data into table "chat.Chat"
"""
input chat_Chat_insert_input {
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    created_at: timestamptz
    duplicateTo: chat_Chat_obj_rel_insert_input
    duplicateToId: uuid
    duplicatesFrom: chat_Chat_arr_rel_insert_input
    enableAutoPin: Boolean
    enableAutoSubscribe: Boolean
    enableMandatoryPin: Boolean
    enableMandatorySubscribe: Boolean
    flags: chat_Flag_arr_rel_insert_input
    id: uuid
    item: content_Item_obj_rel_insert_input
    messages: chat_Message_arr_rel_insert_input
    pins: chat_Pin_arr_rel_insert_input
    readUpToIndices: chat_ReadUpToIndex_arr_rel_insert_input
    restrictToAdmins: Boolean
    room: room_Room_obj_rel_insert_input
    subconferenceId: uuid
    subscriptions: chat_Subscription_arr_rel_insert_input
    updated_at: timestamptz
}

"""
aggregate max on columns
"""
type chat_Chat_max_fields {
    conferenceId: uuid
    created_at: timestamptz
    duplicateToId: uuid
    id: uuid
    subconferenceId: uuid
    updated_at: timestamptz
}

"""
order by max() on columns of table "chat.Chat"
"""
input chat_Chat_max_order_by {
    conferenceId: order_by
    created_at: order_by
    duplicateToId: order_by
    id: order_by
    subconferenceId: order_by
    updated_at: order_by
}

"""
aggregate min on columns
"""
type chat_Chat_min_fields {
    conferenceId: uuid
    created_at: timestamptz
    duplicateToId: uuid
    id: uuid
    subconferenceId: uuid
    updated_at: timestamptz
}

"""
order by min() on columns of table "chat.Chat"
"""
input chat_Chat_min_order_by {
    conferenceId: order_by
    created_at: order_by
    duplicateToId: order_by
    id: order_by
    subconferenceId: order_by
    updated_at: order_by
}

"""
response of any mutation on the table "chat.Chat"
"""
type chat_Chat_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [chat_Chat!]!
}

"""
input type for inserting object relation for remote table "chat.Chat"
"""
input chat_Chat_obj_rel_insert_input {
    data: chat_Chat_insert_input!
    """
    on conflict condition
    """
    on_conflict: chat_Chat_on_conflict
}

"""
on conflict condition type for table "chat.Chat"
"""
input chat_Chat_on_conflict {
    constraint: chat_Chat_constraint!
    update_columns: [chat_Chat_update_column!]! = []
    where: chat_Chat_bool_exp
}

"""
Ordering options when selecting data from "chat.Chat".
"""
input chat_Chat_order_by {
    conference: conference_Conference_order_by
    conferenceId: order_by
    created_at: order_by
    duplicateTo: chat_Chat_order_by
    duplicateToId: order_by
    duplicatesFrom_aggregate: chat_Chat_aggregate_order_by
    enableAutoPin: order_by
    enableAutoSubscribe: order_by
    enableMandatoryPin: order_by
    enableMandatorySubscribe: order_by
    flags_aggregate: chat_Flag_aggregate_order_by
    id: order_by
    item: content_Item_order_by
    messages_aggregate: chat_Message_aggregate_order_by
    pins_aggregate: chat_Pin_aggregate_order_by
    readUpToIndices_aggregate: chat_ReadUpToIndex_aggregate_order_by
    restrictToAdmins: order_by
    room: room_Room_order_by
    subconferenceId: order_by
    subscriptions_aggregate: chat_Subscription_aggregate_order_by
    updated_at: order_by
}

"""
primary key columns input for table: chat_Chat
"""
input chat_Chat_pk_columns_input {
    id: uuid!
}

"""
select columns of table "chat.Chat"
"""
enum chat_Chat_select_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    created_at
    """
    column name
    """
    duplicateToId
    """
    column name
    """
    enableAutoPin
    """
    column name
    """
    enableAutoSubscribe
    """
    column name
    """
    enableMandatoryPin
    """
    column name
    """
    enableMandatorySubscribe
    """
    column name
    """
    id
    """
    column name
    """
    restrictToAdmins
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updated_at
}

"""
input type for updating data in table "chat.Chat"
"""
input chat_Chat_set_input {
    conferenceId: uuid
    created_at: timestamptz
    duplicateToId: uuid
    enableAutoPin: Boolean
    enableAutoSubscribe: Boolean
    enableMandatoryPin: Boolean
    enableMandatorySubscribe: Boolean
    id: uuid
    restrictToAdmins: Boolean
    subconferenceId: uuid
    updated_at: timestamptz
}

"""
update columns of table "chat.Chat"
"""
enum chat_Chat_update_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    created_at
    """
    column name
    """
    duplicateToId
    """
    column name
    """
    enableAutoPin
    """
    column name
    """
    enableAutoSubscribe
    """
    column name
    """
    enableMandatoryPin
    """
    column name
    """
    enableMandatorySubscribe
    """
    column name
    """
    id
    """
    column name
    """
    restrictToAdmins
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updated_at
}

"""
columns and relationships of "chat.Flag"
"""
type chat_Flag {
    created_at: timestamptz!
    """
    An object relationship
    """
    discussionChat: chat_Chat
    discussionChatId: uuid
    """
    An object relationship
    """
    flaggedBy: registrant_Registrant
    flaggedById: uuid
    id: Int!
    """
    An object relationship
    """
    message: chat_Message!
    messageSId: uuid!
    notes: String
    resolution: String
    resolved_at: timestamptz
    type: chat_FlagType_enum!
    updated_at: timestamptz!
}

"""
columns and relationships of "chat.FlagType"
"""
type chat_FlagType {
    description: String!
    name: String!
}

"""
aggregated selection of "chat.FlagType"
"""
type chat_FlagType_aggregate {
    aggregate: chat_FlagType_aggregate_fields
    nodes: [chat_FlagType!]!
}

"""
aggregate fields of "chat.FlagType"
"""
type chat_FlagType_aggregate_fields {
    count(columns: [chat_FlagType_select_column!], distinct: Boolean): Int!
    max: chat_FlagType_max_fields
    min: chat_FlagType_min_fields
}

"""
Boolean expression to filter rows from the table "chat.FlagType". All fields are combined with a logical 'AND'.
"""
input chat_FlagType_bool_exp {
    _and: [chat_FlagType_bool_exp!]
    _not: chat_FlagType_bool_exp
    _or: [chat_FlagType_bool_exp!]
    description: String_comparison_exp
    name: String_comparison_exp
}

"""
unique or primary key constraints on table "chat.FlagType"
"""
enum chat_FlagType_constraint {
    """
    unique or primary key constraint
    """
    FlagType_pkey
}

enum chat_FlagType_enum {
    """
    It's abusive or harmful.
    """
    Abusive
    """
    It contains false information and is intended to mislead readers.
    """
    Disinformation
    """
    It gives the wrong idea or impression.
    """
    Misleading
    """
    It expresses intentions of self-harm or suicide.
    """
    Risk_To_Life
    """
    It's spam, suspicious or annoying.
    """
    Spam
}

"""
Boolean expression to compare columns of type "chat_FlagType_enum". All fields are combined with logical 'AND'.
"""
input chat_FlagType_enum_comparison_exp {
    _eq: chat_FlagType_enum
    _in: [chat_FlagType_enum!]
    _is_null: Boolean
    _neq: chat_FlagType_enum
    _nin: [chat_FlagType_enum!]
}

"""
input type for inserting data into table "chat.FlagType"
"""
input chat_FlagType_insert_input {
    description: String
    name: String
}

"""
aggregate max on columns
"""
type chat_FlagType_max_fields {
    description: String
    name: String
}

"""
aggregate min on columns
"""
type chat_FlagType_min_fields {
    description: String
    name: String
}

"""
response of any mutation on the table "chat.FlagType"
"""
type chat_FlagType_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [chat_FlagType!]!
}

"""
on conflict condition type for table "chat.FlagType"
"""
input chat_FlagType_on_conflict {
    constraint: chat_FlagType_constraint!
    update_columns: [chat_FlagType_update_column!]! = []
    where: chat_FlagType_bool_exp
}

"""
Ordering options when selecting data from "chat.FlagType".
"""
input chat_FlagType_order_by {
    description: order_by
    name: order_by
}

"""
primary key columns input for table: chat_FlagType
"""
input chat_FlagType_pk_columns_input {
    name: String!
}

"""
select columns of table "chat.FlagType"
"""
enum chat_FlagType_select_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
input type for updating data in table "chat.FlagType"
"""
input chat_FlagType_set_input {
    description: String
    name: String
}

"""
update columns of table "chat.FlagType"
"""
enum chat_FlagType_update_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
aggregated selection of "chat.Flag"
"""
type chat_Flag_aggregate {
    aggregate: chat_Flag_aggregate_fields
    nodes: [chat_Flag!]!
}

"""
aggregate fields of "chat.Flag"
"""
type chat_Flag_aggregate_fields {
    avg: chat_Flag_avg_fields
    count(columns: [chat_Flag_select_column!], distinct: Boolean): Int!
    max: chat_Flag_max_fields
    min: chat_Flag_min_fields
    stddev: chat_Flag_stddev_fields
    stddev_pop: chat_Flag_stddev_pop_fields
    stddev_samp: chat_Flag_stddev_samp_fields
    sum: chat_Flag_sum_fields
    var_pop: chat_Flag_var_pop_fields
    var_samp: chat_Flag_var_samp_fields
    variance: chat_Flag_variance_fields
}

"""
order by aggregate values of table "chat.Flag"
"""
input chat_Flag_aggregate_order_by {
    avg: chat_Flag_avg_order_by
    count: order_by
    max: chat_Flag_max_order_by
    min: chat_Flag_min_order_by
    stddev: chat_Flag_stddev_order_by
    stddev_pop: chat_Flag_stddev_pop_order_by
    stddev_samp: chat_Flag_stddev_samp_order_by
    sum: chat_Flag_sum_order_by
    var_pop: chat_Flag_var_pop_order_by
    var_samp: chat_Flag_var_samp_order_by
    variance: chat_Flag_variance_order_by
}

"""
input type for inserting array relation for remote table "chat.Flag"
"""
input chat_Flag_arr_rel_insert_input {
    data: [chat_Flag_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: chat_Flag_on_conflict
}

"""
aggregate avg on columns
"""
type chat_Flag_avg_fields {
    id: Float
}

"""
order by avg() on columns of table "chat.Flag"
"""
input chat_Flag_avg_order_by {
    id: order_by
}

"""
Boolean expression to filter rows from the table "chat.Flag". All fields are combined with a logical 'AND'.
"""
input chat_Flag_bool_exp {
    _and: [chat_Flag_bool_exp!]
    _not: chat_Flag_bool_exp
    _or: [chat_Flag_bool_exp!]
    created_at: timestamptz_comparison_exp
    discussionChat: chat_Chat_bool_exp
    discussionChatId: uuid_comparison_exp
    flaggedBy: registrant_Registrant_bool_exp
    flaggedById: uuid_comparison_exp
    id: Int_comparison_exp
    message: chat_Message_bool_exp
    messageSId: uuid_comparison_exp
    notes: String_comparison_exp
    resolution: String_comparison_exp
    resolved_at: timestamptz_comparison_exp
    type: chat_FlagType_enum_comparison_exp
    updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "chat.Flag"
"""
enum chat_Flag_constraint {
    """
    unique or primary key constraint
    """
    Flag_flaggedById_messageSId_type_key
    """
    unique or primary key constraint
    """
    Flag_pkey
}

"""
input type for incrementing numeric columns in table "chat.Flag"
"""
input chat_Flag_inc_input {
    id: Int
}

"""
input type for inserting data into table "chat.Flag"
"""
input chat_Flag_insert_input {
    created_at: timestamptz
    discussionChat: chat_Chat_obj_rel_insert_input
    discussionChatId: uuid
    flaggedBy: registrant_Registrant_obj_rel_insert_input
    flaggedById: uuid
    id: Int
    message: chat_Message_obj_rel_insert_input
    messageSId: uuid
    notes: String
    resolution: String
    resolved_at: timestamptz
    type: chat_FlagType_enum
    updated_at: timestamptz
}

"""
aggregate max on columns
"""
type chat_Flag_max_fields {
    created_at: timestamptz
    discussionChatId: uuid
    flaggedById: uuid
    id: Int
    messageSId: uuid
    notes: String
    resolution: String
    resolved_at: timestamptz
    updated_at: timestamptz
}

"""
order by max() on columns of table "chat.Flag"
"""
input chat_Flag_max_order_by {
    created_at: order_by
    discussionChatId: order_by
    flaggedById: order_by
    id: order_by
    messageSId: order_by
    notes: order_by
    resolution: order_by
    resolved_at: order_by
    updated_at: order_by
}

"""
aggregate min on columns
"""
type chat_Flag_min_fields {
    created_at: timestamptz
    discussionChatId: uuid
    flaggedById: uuid
    id: Int
    messageSId: uuid
    notes: String
    resolution: String
    resolved_at: timestamptz
    updated_at: timestamptz
}

"""
order by min() on columns of table "chat.Flag"
"""
input chat_Flag_min_order_by {
    created_at: order_by
    discussionChatId: order_by
    flaggedById: order_by
    id: order_by
    messageSId: order_by
    notes: order_by
    resolution: order_by
    resolved_at: order_by
    updated_at: order_by
}

"""
response of any mutation on the table "chat.Flag"
"""
type chat_Flag_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [chat_Flag!]!
}

"""
on conflict condition type for table "chat.Flag"
"""
input chat_Flag_on_conflict {
    constraint: chat_Flag_constraint!
    update_columns: [chat_Flag_update_column!]! = []
    where: chat_Flag_bool_exp
}

"""
Ordering options when selecting data from "chat.Flag".
"""
input chat_Flag_order_by {
    created_at: order_by
    discussionChat: chat_Chat_order_by
    discussionChatId: order_by
    flaggedBy: registrant_Registrant_order_by
    flaggedById: order_by
    id: order_by
    message: chat_Message_order_by
    messageSId: order_by
    notes: order_by
    resolution: order_by
    resolved_at: order_by
    type: order_by
    updated_at: order_by
}

"""
primary key columns input for table: chat_Flag
"""
input chat_Flag_pk_columns_input {
    id: Int!
}

"""
select columns of table "chat.Flag"
"""
enum chat_Flag_select_column {
    """
    column name
    """
    created_at
    """
    column name
    """
    discussionChatId
    """
    column name
    """
    flaggedById
    """
    column name
    """
    id
    """
    column name
    """
    messageSId
    """
    column name
    """
    notes
    """
    column name
    """
    resolution
    """
    column name
    """
    resolved_at
    """
    column name
    """
    type
    """
    column name
    """
    updated_at
}

"""
input type for updating data in table "chat.Flag"
"""
input chat_Flag_set_input {
    created_at: timestamptz
    discussionChatId: uuid
    flaggedById: uuid
    id: Int
    messageSId: uuid
    notes: String
    resolution: String
    resolved_at: timestamptz
    type: chat_FlagType_enum
    updated_at: timestamptz
}

"""
aggregate stddev on columns
"""
type chat_Flag_stddev_fields {
    id: Float
}

"""
order by stddev() on columns of table "chat.Flag"
"""
input chat_Flag_stddev_order_by {
    id: order_by
}

"""
aggregate stddev_pop on columns
"""
type chat_Flag_stddev_pop_fields {
    id: Float
}

"""
order by stddev_pop() on columns of table "chat.Flag"
"""
input chat_Flag_stddev_pop_order_by {
    id: order_by
}

"""
aggregate stddev_samp on columns
"""
type chat_Flag_stddev_samp_fields {
    id: Float
}

"""
order by stddev_samp() on columns of table "chat.Flag"
"""
input chat_Flag_stddev_samp_order_by {
    id: order_by
}

"""
aggregate sum on columns
"""
type chat_Flag_sum_fields {
    id: Int
}

"""
order by sum() on columns of table "chat.Flag"
"""
input chat_Flag_sum_order_by {
    id: order_by
}

"""
update columns of table "chat.Flag"
"""
enum chat_Flag_update_column {
    """
    column name
    """
    created_at
    """
    column name
    """
    discussionChatId
    """
    column name
    """
    flaggedById
    """
    column name
    """
    id
    """
    column name
    """
    messageSId
    """
    column name
    """
    notes
    """
    column name
    """
    resolution
    """
    column name
    """
    resolved_at
    """
    column name
    """
    type
    """
    column name
    """
    updated_at
}

"""
aggregate var_pop on columns
"""
type chat_Flag_var_pop_fields {
    id: Float
}

"""
order by var_pop() on columns of table "chat.Flag"
"""
input chat_Flag_var_pop_order_by {
    id: order_by
}

"""
aggregate var_samp on columns
"""
type chat_Flag_var_samp_fields {
    id: Float
}

"""
order by var_samp() on columns of table "chat.Flag"
"""
input chat_Flag_var_samp_order_by {
    id: order_by
}

"""
aggregate variance on columns
"""
type chat_Flag_variance_fields {
    id: Float
}

"""
order by variance() on columns of table "chat.Flag"
"""
input chat_Flag_variance_order_by {
    id: order_by
}

"""
Chat messages. The systemId field is unique and can be used to prevent duplicate inserts of things like event start/end markers.


columns and relationships of "chat.Message"
"""
type chat_Message {
    """
    An object relationship
    """
    chat: chat_Chat!
    chatId: uuid!
    created_at: timestamptz!
    data(
        """
        JSON select path
        """
        path: String
    ): jsonb!
    """
    An object relationship
    """
    duplicateIncoming: chat_Message
    """
    An object relationship
    """
    duplicateOutgoing: chat_Message
    duplicatedMessageSId: uuid
    """
    An array relationship
    """
    flags(
        """
        distinct select on columns
        """
        distinct_on: [chat_Flag_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Flag_order_by!]
        """
        filter the rows returned
        """
        where: chat_Flag_bool_exp
    ): [chat_Flag!]!
    """
    An aggregate relationship
    """
    flags_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [chat_Flag_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Flag_order_by!]
        """
        filter the rows returned
        """
        where: chat_Flag_bool_exp
    ): chat_Flag_aggregate!
    id: Int!
    isPinned: Boolean!
    message: String!
    """
    An array relationship
    """
    reactions(
        """
        distinct select on columns
        """
        distinct_on: [chat_Reaction_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Reaction_order_by!]
        """
        filter the rows returned
        """
        where: chat_Reaction_bool_exp
    ): [chat_Reaction!]!
    """
    An aggregate relationship
    """
    reactions_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [chat_Reaction_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Reaction_order_by!]
        """
        filter the rows returned
        """
        where: chat_Reaction_bool_exp
    ): chat_Reaction_aggregate!
    sId: uuid!
    """
    An object relationship
    """
    sender: registrant_Registrant
    senderId: uuid
    systemId: String
    type: chat_MessageType_enum!
    updated_at: timestamptz!
}

"""
columns and relationships of "chat.MessageType"
"""
type chat_MessageType {
    name: String!
}

"""
aggregated selection of "chat.MessageType"
"""
type chat_MessageType_aggregate {
    aggregate: chat_MessageType_aggregate_fields
    nodes: [chat_MessageType!]!
}

"""
aggregate fields of "chat.MessageType"
"""
type chat_MessageType_aggregate_fields {
    count(columns: [chat_MessageType_select_column!], distinct: Boolean): Int!
    max: chat_MessageType_max_fields
    min: chat_MessageType_min_fields
}

"""
Boolean expression to filter rows from the table "chat.MessageType". All fields are combined with a logical 'AND'.
"""
input chat_MessageType_bool_exp {
    _and: [chat_MessageType_bool_exp!]
    _not: chat_MessageType_bool_exp
    _or: [chat_MessageType_bool_exp!]
    name: String_comparison_exp
}

"""
unique or primary key constraints on table "chat.MessageType"
"""
enum chat_MessageType_constraint {
    """
    unique or primary key constraint
    """
    MessageType_pkey
}

enum chat_MessageType_enum {
    ANSWER
    DUPLICATION_MARKER
    EMOTE
    EVENT_START
    MESSAGE
    PARTICIPATION_SURVEY
    POLL
    POLL_RESULTS
    QUESTION
}

"""
Boolean expression to compare columns of type "chat_MessageType_enum". All fields are combined with logical 'AND'.
"""
input chat_MessageType_enum_comparison_exp {
    _eq: chat_MessageType_enum
    _in: [chat_MessageType_enum!]
    _is_null: Boolean
    _neq: chat_MessageType_enum
    _nin: [chat_MessageType_enum!]
}

"""
input type for inserting data into table "chat.MessageType"
"""
input chat_MessageType_insert_input {
    name: String
}

"""
aggregate max on columns
"""
type chat_MessageType_max_fields {
    name: String
}

"""
aggregate min on columns
"""
type chat_MessageType_min_fields {
    name: String
}

"""
response of any mutation on the table "chat.MessageType"
"""
type chat_MessageType_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [chat_MessageType!]!
}

"""
on conflict condition type for table "chat.MessageType"
"""
input chat_MessageType_on_conflict {
    constraint: chat_MessageType_constraint!
    update_columns: [chat_MessageType_update_column!]! = []
    where: chat_MessageType_bool_exp
}

"""
Ordering options when selecting data from "chat.MessageType".
"""
input chat_MessageType_order_by {
    name: order_by
}

"""
primary key columns input for table: chat_MessageType
"""
input chat_MessageType_pk_columns_input {
    name: String!
}

"""
select columns of table "chat.MessageType"
"""
enum chat_MessageType_select_column {
    """
    column name
    """
    name
}

"""
input type for updating data in table "chat.MessageType"
"""
input chat_MessageType_set_input {
    name: String
}

"""
update columns of table "chat.MessageType"
"""
enum chat_MessageType_update_column {
    """
    column name
    """
    name
}

"""
aggregated selection of "chat.Message"
"""
type chat_Message_aggregate {
    aggregate: chat_Message_aggregate_fields
    nodes: [chat_Message!]!
}

"""
aggregate fields of "chat.Message"
"""
type chat_Message_aggregate_fields {
    avg: chat_Message_avg_fields
    count(columns: [chat_Message_select_column!], distinct: Boolean): Int!
    max: chat_Message_max_fields
    min: chat_Message_min_fields
    stddev: chat_Message_stddev_fields
    stddev_pop: chat_Message_stddev_pop_fields
    stddev_samp: chat_Message_stddev_samp_fields
    sum: chat_Message_sum_fields
    var_pop: chat_Message_var_pop_fields
    var_samp: chat_Message_var_samp_fields
    variance: chat_Message_variance_fields
}

"""
order by aggregate values of table "chat.Message"
"""
input chat_Message_aggregate_order_by {
    avg: chat_Message_avg_order_by
    count: order_by
    max: chat_Message_max_order_by
    min: chat_Message_min_order_by
    stddev: chat_Message_stddev_order_by
    stddev_pop: chat_Message_stddev_pop_order_by
    stddev_samp: chat_Message_stddev_samp_order_by
    sum: chat_Message_sum_order_by
    var_pop: chat_Message_var_pop_order_by
    var_samp: chat_Message_var_samp_order_by
    variance: chat_Message_variance_order_by
}

"""
append existing jsonb value of filtered columns with new jsonb value
"""
input chat_Message_append_input {
    data: jsonb
}

"""
input type for inserting array relation for remote table "chat.Message"
"""
input chat_Message_arr_rel_insert_input {
    data: [chat_Message_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: chat_Message_on_conflict
}

"""
aggregate avg on columns
"""
type chat_Message_avg_fields {
    id: Float
}

"""
order by avg() on columns of table "chat.Message"
"""
input chat_Message_avg_order_by {
    id: order_by
}

"""
Boolean expression to filter rows from the table "chat.Message". All fields are combined with a logical 'AND'.
"""
input chat_Message_bool_exp {
    _and: [chat_Message_bool_exp!]
    _not: chat_Message_bool_exp
    _or: [chat_Message_bool_exp!]
    chat: chat_Chat_bool_exp
    chatId: uuid_comparison_exp
    created_at: timestamptz_comparison_exp
    data: jsonb_comparison_exp
    duplicateIncoming: chat_Message_bool_exp
    duplicateOutgoing: chat_Message_bool_exp
    duplicatedMessageSId: uuid_comparison_exp
    flags: chat_Flag_bool_exp
    id: Int_comparison_exp
    isPinned: Boolean_comparison_exp
    message: String_comparison_exp
    reactions: chat_Reaction_bool_exp
    sId: uuid_comparison_exp
    sender: registrant_Registrant_bool_exp
    senderId: uuid_comparison_exp
    systemId: String_comparison_exp
    type: chat_MessageType_enum_comparison_exp
    updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "chat.Message"
"""
enum chat_Message_constraint {
    """
    unique or primary key constraint
    """
    Message_duplicatedMessageSId_key
    """
    unique or primary key constraint
    """
    Message_pkey
    """
    unique or primary key constraint
    """
    Message_sId_chatId_key
    """
    unique or primary key constraint
    """
    Message_sId_key
    """
    unique or primary key constraint
    """
    Message_systemId_key
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input chat_Message_delete_at_path_input {
    data: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input chat_Message_delete_elem_input {
    data: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input chat_Message_delete_key_input {
    data: String
}

"""
input type for incrementing numeric columns in table "chat.Message"
"""
input chat_Message_inc_input {
    id: Int
}

"""
input type for inserting data into table "chat.Message"
"""
input chat_Message_insert_input {
    chat: chat_Chat_obj_rel_insert_input
    chatId: uuid
    created_at: timestamptz
    data: jsonb
    duplicateIncoming: chat_Message_obj_rel_insert_input
    duplicateOutgoing: chat_Message_obj_rel_insert_input
    duplicatedMessageSId: uuid
    flags: chat_Flag_arr_rel_insert_input
    id: Int
    isPinned: Boolean
    message: String
    reactions: chat_Reaction_arr_rel_insert_input
    sId: uuid
    sender: registrant_Registrant_obj_rel_insert_input
    senderId: uuid
    systemId: String
    type: chat_MessageType_enum
    updated_at: timestamptz
}

"""
aggregate max on columns
"""
type chat_Message_max_fields {
    chatId: uuid
    created_at: timestamptz
    duplicatedMessageSId: uuid
    id: Int
    message: String
    sId: uuid
    senderId: uuid
    systemId: String
    updated_at: timestamptz
}

"""
order by max() on columns of table "chat.Message"
"""
input chat_Message_max_order_by {
    chatId: order_by
    created_at: order_by
    duplicatedMessageSId: order_by
    id: order_by
    message: order_by
    sId: order_by
    senderId: order_by
    systemId: order_by
    updated_at: order_by
}

"""
aggregate min on columns
"""
type chat_Message_min_fields {
    chatId: uuid
    created_at: timestamptz
    duplicatedMessageSId: uuid
    id: Int
    message: String
    sId: uuid
    senderId: uuid
    systemId: String
    updated_at: timestamptz
}

"""
order by min() on columns of table "chat.Message"
"""
input chat_Message_min_order_by {
    chatId: order_by
    created_at: order_by
    duplicatedMessageSId: order_by
    id: order_by
    message: order_by
    sId: order_by
    senderId: order_by
    systemId: order_by
    updated_at: order_by
}

"""
response of any mutation on the table "chat.Message"
"""
type chat_Message_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [chat_Message!]!
}

"""
input type for inserting object relation for remote table "chat.Message"
"""
input chat_Message_obj_rel_insert_input {
    data: chat_Message_insert_input!
    """
    on conflict condition
    """
    on_conflict: chat_Message_on_conflict
}

"""
on conflict condition type for table "chat.Message"
"""
input chat_Message_on_conflict {
    constraint: chat_Message_constraint!
    update_columns: [chat_Message_update_column!]! = []
    where: chat_Message_bool_exp
}

"""
Ordering options when selecting data from "chat.Message".
"""
input chat_Message_order_by {
    chat: chat_Chat_order_by
    chatId: order_by
    created_at: order_by
    data: order_by
    duplicateIncoming: chat_Message_order_by
    duplicateOutgoing: chat_Message_order_by
    duplicatedMessageSId: order_by
    flags_aggregate: chat_Flag_aggregate_order_by
    id: order_by
    isPinned: order_by
    message: order_by
    reactions_aggregate: chat_Reaction_aggregate_order_by
    sId: order_by
    sender: registrant_Registrant_order_by
    senderId: order_by
    systemId: order_by
    type: order_by
    updated_at: order_by
}

"""
primary key columns input for table: chat_Message
"""
input chat_Message_pk_columns_input {
    id: Int!
}

"""
prepend existing jsonb value of filtered columns with new jsonb value
"""
input chat_Message_prepend_input {
    data: jsonb
}

"""
select columns of table "chat.Message"
"""
enum chat_Message_select_column {
    """
    column name
    """
    chatId
    """
    column name
    """
    created_at
    """
    column name
    """
    data
    """
    column name
    """
    duplicatedMessageSId
    """
    column name
    """
    id
    """
    column name
    """
    isPinned
    """
    column name
    """
    message
    """
    column name
    """
    sId
    """
    column name
    """
    senderId
    """
    column name
    """
    systemId
    """
    column name
    """
    type
    """
    column name
    """
    updated_at
}

"""
input type for updating data in table "chat.Message"
"""
input chat_Message_set_input {
    chatId: uuid
    created_at: timestamptz
    data: jsonb
    duplicatedMessageSId: uuid
    id: Int
    isPinned: Boolean
    message: String
    sId: uuid
    senderId: uuid
    systemId: String
    type: chat_MessageType_enum
    updated_at: timestamptz
}

"""
aggregate stddev on columns
"""
type chat_Message_stddev_fields {
    id: Float
}

"""
order by stddev() on columns of table "chat.Message"
"""
input chat_Message_stddev_order_by {
    id: order_by
}

"""
aggregate stddev_pop on columns
"""
type chat_Message_stddev_pop_fields {
    id: Float
}

"""
order by stddev_pop() on columns of table "chat.Message"
"""
input chat_Message_stddev_pop_order_by {
    id: order_by
}

"""
aggregate stddev_samp on columns
"""
type chat_Message_stddev_samp_fields {
    id: Float
}

"""
order by stddev_samp() on columns of table "chat.Message"
"""
input chat_Message_stddev_samp_order_by {
    id: order_by
}

"""
aggregate sum on columns
"""
type chat_Message_sum_fields {
    id: Int
}

"""
order by sum() on columns of table "chat.Message"
"""
input chat_Message_sum_order_by {
    id: order_by
}

"""
update columns of table "chat.Message"
"""
enum chat_Message_update_column {
    """
    column name
    """
    chatId
    """
    column name
    """
    created_at
    """
    column name
    """
    data
    """
    column name
    """
    duplicatedMessageSId
    """
    column name
    """
    id
    """
    column name
    """
    isPinned
    """
    column name
    """
    message
    """
    column name
    """
    sId
    """
    column name
    """
    senderId
    """
    column name
    """
    systemId
    """
    column name
    """
    type
    """
    column name
    """
    updated_at
}

"""
aggregate var_pop on columns
"""
type chat_Message_var_pop_fields {
    id: Float
}

"""
order by var_pop() on columns of table "chat.Message"
"""
input chat_Message_var_pop_order_by {
    id: order_by
}

"""
aggregate var_samp on columns
"""
type chat_Message_var_samp_fields {
    id: Float
}

"""
order by var_samp() on columns of table "chat.Message"
"""
input chat_Message_var_samp_order_by {
    id: order_by
}

"""
aggregate variance on columns
"""
type chat_Message_variance_fields {
    id: Float
}

"""
order by variance() on columns of table "chat.Message"
"""
input chat_Message_variance_order_by {
    id: order_by
}

"""
Pin a chat to the sidebar.


columns and relationships of "chat.Pin"
"""
type chat_Pin {
    """
    An object relationship
    """
    chat: chat_Chat!
    chatId: uuid!
    created_at: timestamptz!
    """
    An object relationship
    """
    registrant: registrant_Registrant!
    registrantId: uuid!
    wasManuallyPinned: Boolean!
}

"""
aggregated selection of "chat.Pin"
"""
type chat_Pin_aggregate {
    aggregate: chat_Pin_aggregate_fields
    nodes: [chat_Pin!]!
}

"""
aggregate fields of "chat.Pin"
"""
type chat_Pin_aggregate_fields {
    count(columns: [chat_Pin_select_column!], distinct: Boolean): Int!
    max: chat_Pin_max_fields
    min: chat_Pin_min_fields
}

"""
order by aggregate values of table "chat.Pin"
"""
input chat_Pin_aggregate_order_by {
    count: order_by
    max: chat_Pin_max_order_by
    min: chat_Pin_min_order_by
}

"""
input type for inserting array relation for remote table "chat.Pin"
"""
input chat_Pin_arr_rel_insert_input {
    data: [chat_Pin_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: chat_Pin_on_conflict
}

"""
Boolean expression to filter rows from the table "chat.Pin". All fields are combined with a logical 'AND'.
"""
input chat_Pin_bool_exp {
    _and: [chat_Pin_bool_exp!]
    _not: chat_Pin_bool_exp
    _or: [chat_Pin_bool_exp!]
    chat: chat_Chat_bool_exp
    chatId: uuid_comparison_exp
    created_at: timestamptz_comparison_exp
    registrant: registrant_Registrant_bool_exp
    registrantId: uuid_comparison_exp
    wasManuallyPinned: Boolean_comparison_exp
}

"""
unique or primary key constraints on table "chat.Pin"
"""
enum chat_Pin_constraint {
    """
    unique or primary key constraint
    """
    ChatPin_pkey
}

"""
input type for inserting data into table "chat.Pin"
"""
input chat_Pin_insert_input {
    chat: chat_Chat_obj_rel_insert_input
    chatId: uuid
    created_at: timestamptz
    registrant: registrant_Registrant_obj_rel_insert_input
    registrantId: uuid
    wasManuallyPinned: Boolean
}

"""
aggregate max on columns
"""
type chat_Pin_max_fields {
    chatId: uuid
    created_at: timestamptz
    registrantId: uuid
}

"""
order by max() on columns of table "chat.Pin"
"""
input chat_Pin_max_order_by {
    chatId: order_by
    created_at: order_by
    registrantId: order_by
}

"""
aggregate min on columns
"""
type chat_Pin_min_fields {
    chatId: uuid
    created_at: timestamptz
    registrantId: uuid
}

"""
order by min() on columns of table "chat.Pin"
"""
input chat_Pin_min_order_by {
    chatId: order_by
    created_at: order_by
    registrantId: order_by
}

"""
response of any mutation on the table "chat.Pin"
"""
type chat_Pin_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [chat_Pin!]!
}

"""
input type for inserting object relation for remote table "chat.Pin"
"""
input chat_Pin_obj_rel_insert_input {
    data: chat_Pin_insert_input!
    """
    on conflict condition
    """
    on_conflict: chat_Pin_on_conflict
}

"""
on conflict condition type for table "chat.Pin"
"""
input chat_Pin_on_conflict {
    constraint: chat_Pin_constraint!
    update_columns: [chat_Pin_update_column!]! = []
    where: chat_Pin_bool_exp
}

"""
Ordering options when selecting data from "chat.Pin".
"""
input chat_Pin_order_by {
    chat: chat_Chat_order_by
    chatId: order_by
    created_at: order_by
    registrant: registrant_Registrant_order_by
    registrantId: order_by
    wasManuallyPinned: order_by
}

"""
primary key columns input for table: chat_Pin
"""
input chat_Pin_pk_columns_input {
    chatId: uuid!
    registrantId: uuid!
}

"""
select columns of table "chat.Pin"
"""
enum chat_Pin_select_column {
    """
    column name
    """
    chatId
    """
    column name
    """
    created_at
    """
    column name
    """
    registrantId
    """
    column name
    """
    wasManuallyPinned
}

"""
input type for updating data in table "chat.Pin"
"""
input chat_Pin_set_input {
    chatId: uuid
    created_at: timestamptz
    registrantId: uuid
    wasManuallyPinned: Boolean
}

"""
update columns of table "chat.Pin"
"""
enum chat_Pin_update_column {
    """
    column name
    """
    chatId
    """
    column name
    """
    created_at
    """
    column name
    """
    registrantId
    """
    column name
    """
    wasManuallyPinned
}

"""
columns and relationships of "chat.Reaction"
"""
type chat_Reaction {
    """
    An object relationship
    """
    chat: chat_Chat!
    chatId: uuid!
    created_at: timestamptz!
    data(
        """
        JSON select path
        """
        path: String
    ): jsonb!
    """
    An object relationship
    """
    duplicate: chat_Reaction
    duplicateSId: uuid
    """
    An array relationship
    """
    duplicates(
        """
        distinct select on columns
        """
        distinct_on: [chat_Reaction_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Reaction_order_by!]
        """
        filter the rows returned
        """
        where: chat_Reaction_bool_exp
    ): [chat_Reaction!]!
    """
    An aggregate relationship
    """
    duplicates_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [chat_Reaction_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Reaction_order_by!]
        """
        filter the rows returned
        """
        where: chat_Reaction_bool_exp
    ): chat_Reaction_aggregate!
    """
    An object relationship
    """
    message: chat_Message!
    messageSId: uuid!
    sId: uuid!
    """
    An object relationship
    """
    sender: registrant_Registrant!
    senderId: uuid!
    symbol: String!
    type: chat_ReactionType_enum!
    updated_at: timestamptz!
}

"""
columns and relationships of "chat.ReactionType"
"""
type chat_ReactionType {
    description: String!
    name: String!
}

"""
aggregated selection of "chat.ReactionType"
"""
type chat_ReactionType_aggregate {
    aggregate: chat_ReactionType_aggregate_fields
    nodes: [chat_ReactionType!]!
}

"""
aggregate fields of "chat.ReactionType"
"""
type chat_ReactionType_aggregate_fields {
    count(columns: [chat_ReactionType_select_column!], distinct: Boolean): Int!
    max: chat_ReactionType_max_fields
    min: chat_ReactionType_min_fields
}

"""
Boolean expression to filter rows from the table "chat.ReactionType". All fields are combined with a logical 'AND'.
"""
input chat_ReactionType_bool_exp {
    _and: [chat_ReactionType_bool_exp!]
    _not: chat_ReactionType_bool_exp
    _or: [chat_ReactionType_bool_exp!]
    description: String_comparison_exp
    name: String_comparison_exp
}

"""
unique or primary key constraints on table "chat.ReactionType"
"""
enum chat_ReactionType_constraint {
    """
    unique or primary key constraint
    """
    ReactionType_pkey
}

enum chat_ReactionType_enum {
    """
    Link to a message that answers the question.
    """
    ANSWER
    """
    A plain emoji reaction
    """
    EMOJI
    """
    Responding to an event participation survey.
    """
    EVENT_PARTICIPATION
    """
    A vote in a poll
    """
    POLL_CHOICE
    """
    Stop accepting new responses to the poll
    """
    POLL_CLOSED
    """
    Make the poll results visible
    """
    POLL_COMPLETE
}

"""
Boolean expression to compare columns of type "chat_ReactionType_enum". All fields are combined with logical 'AND'.
"""
input chat_ReactionType_enum_comparison_exp {
    _eq: chat_ReactionType_enum
    _in: [chat_ReactionType_enum!]
    _is_null: Boolean
    _neq: chat_ReactionType_enum
    _nin: [chat_ReactionType_enum!]
}

"""
input type for inserting data into table "chat.ReactionType"
"""
input chat_ReactionType_insert_input {
    description: String
    name: String
}

"""
aggregate max on columns
"""
type chat_ReactionType_max_fields {
    description: String
    name: String
}

"""
aggregate min on columns
"""
type chat_ReactionType_min_fields {
    description: String
    name: String
}

"""
response of any mutation on the table "chat.ReactionType"
"""
type chat_ReactionType_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [chat_ReactionType!]!
}

"""
on conflict condition type for table "chat.ReactionType"
"""
input chat_ReactionType_on_conflict {
    constraint: chat_ReactionType_constraint!
    update_columns: [chat_ReactionType_update_column!]! = []
    where: chat_ReactionType_bool_exp
}

"""
Ordering options when selecting data from "chat.ReactionType".
"""
input chat_ReactionType_order_by {
    description: order_by
    name: order_by
}

"""
primary key columns input for table: chat_ReactionType
"""
input chat_ReactionType_pk_columns_input {
    name: String!
}

"""
select columns of table "chat.ReactionType"
"""
enum chat_ReactionType_select_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
input type for updating data in table "chat.ReactionType"
"""
input chat_ReactionType_set_input {
    description: String
    name: String
}

"""
update columns of table "chat.ReactionType"
"""
enum chat_ReactionType_update_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
aggregated selection of "chat.Reaction"
"""
type chat_Reaction_aggregate {
    aggregate: chat_Reaction_aggregate_fields
    nodes: [chat_Reaction!]!
}

"""
aggregate fields of "chat.Reaction"
"""
type chat_Reaction_aggregate_fields {
    count(columns: [chat_Reaction_select_column!], distinct: Boolean): Int!
    max: chat_Reaction_max_fields
    min: chat_Reaction_min_fields
}

"""
order by aggregate values of table "chat.Reaction"
"""
input chat_Reaction_aggregate_order_by {
    count: order_by
    max: chat_Reaction_max_order_by
    min: chat_Reaction_min_order_by
}

"""
append existing jsonb value of filtered columns with new jsonb value
"""
input chat_Reaction_append_input {
    data: jsonb
}

"""
input type for inserting array relation for remote table "chat.Reaction"
"""
input chat_Reaction_arr_rel_insert_input {
    data: [chat_Reaction_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: chat_Reaction_on_conflict
}

"""
Boolean expression to filter rows from the table "chat.Reaction". All fields are combined with a logical 'AND'.
"""
input chat_Reaction_bool_exp {
    _and: [chat_Reaction_bool_exp!]
    _not: chat_Reaction_bool_exp
    _or: [chat_Reaction_bool_exp!]
    chat: chat_Chat_bool_exp
    chatId: uuid_comparison_exp
    created_at: timestamptz_comparison_exp
    data: jsonb_comparison_exp
    duplicate: chat_Reaction_bool_exp
    duplicateSId: uuid_comparison_exp
    duplicates: chat_Reaction_bool_exp
    message: chat_Message_bool_exp
    messageSId: uuid_comparison_exp
    sId: uuid_comparison_exp
    sender: registrant_Registrant_bool_exp
    senderId: uuid_comparison_exp
    symbol: String_comparison_exp
    type: chat_ReactionType_enum_comparison_exp
    updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "chat.Reaction"
"""
enum chat_Reaction_constraint {
    """
    unique or primary key constraint
    """
    Reaction_pkey
    """
    unique or primary key constraint
    """
    Reaction_sId_key
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input chat_Reaction_delete_at_path_input {
    data: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input chat_Reaction_delete_elem_input {
    data: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input chat_Reaction_delete_key_input {
    data: String
}

"""
input type for inserting data into table "chat.Reaction"
"""
input chat_Reaction_insert_input {
    chat: chat_Chat_obj_rel_insert_input
    chatId: uuid
    created_at: timestamptz
    data: jsonb
    duplicate: chat_Reaction_obj_rel_insert_input
    duplicateSId: uuid
    duplicates: chat_Reaction_arr_rel_insert_input
    message: chat_Message_obj_rel_insert_input
    messageSId: uuid
    sId: uuid
    sender: registrant_Registrant_obj_rel_insert_input
    senderId: uuid
    symbol: String
    type: chat_ReactionType_enum
    updated_at: timestamptz
}

"""
aggregate max on columns
"""
type chat_Reaction_max_fields {
    chatId: uuid
    created_at: timestamptz
    duplicateSId: uuid
    messageSId: uuid
    sId: uuid
    senderId: uuid
    symbol: String
    updated_at: timestamptz
}

"""
order by max() on columns of table "chat.Reaction"
"""
input chat_Reaction_max_order_by {
    chatId: order_by
    created_at: order_by
    duplicateSId: order_by
    messageSId: order_by
    sId: order_by
    senderId: order_by
    symbol: order_by
    updated_at: order_by
}

"""
aggregate min on columns
"""
type chat_Reaction_min_fields {
    chatId: uuid
    created_at: timestamptz
    duplicateSId: uuid
    messageSId: uuid
    sId: uuid
    senderId: uuid
    symbol: String
    updated_at: timestamptz
}

"""
order by min() on columns of table "chat.Reaction"
"""
input chat_Reaction_min_order_by {
    chatId: order_by
    created_at: order_by
    duplicateSId: order_by
    messageSId: order_by
    sId: order_by
    senderId: order_by
    symbol: order_by
    updated_at: order_by
}

"""
response of any mutation on the table "chat.Reaction"
"""
type chat_Reaction_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [chat_Reaction!]!
}

"""
input type for inserting object relation for remote table "chat.Reaction"
"""
input chat_Reaction_obj_rel_insert_input {
    data: chat_Reaction_insert_input!
    """
    on conflict condition
    """
    on_conflict: chat_Reaction_on_conflict
}

"""
on conflict condition type for table "chat.Reaction"
"""
input chat_Reaction_on_conflict {
    constraint: chat_Reaction_constraint!
    update_columns: [chat_Reaction_update_column!]! = []
    where: chat_Reaction_bool_exp
}

"""
Ordering options when selecting data from "chat.Reaction".
"""
input chat_Reaction_order_by {
    chat: chat_Chat_order_by
    chatId: order_by
    created_at: order_by
    data: order_by
    duplicate: chat_Reaction_order_by
    duplicateSId: order_by
    duplicates_aggregate: chat_Reaction_aggregate_order_by
    message: chat_Message_order_by
    messageSId: order_by
    sId: order_by
    sender: registrant_Registrant_order_by
    senderId: order_by
    symbol: order_by
    type: order_by
    updated_at: order_by
}

"""
primary key columns input for table: chat_Reaction
"""
input chat_Reaction_pk_columns_input {
    sId: uuid!
}

"""
prepend existing jsonb value of filtered columns with new jsonb value
"""
input chat_Reaction_prepend_input {
    data: jsonb
}

"""
select columns of table "chat.Reaction"
"""
enum chat_Reaction_select_column {
    """
    column name
    """
    chatId
    """
    column name
    """
    created_at
    """
    column name
    """
    data
    """
    column name
    """
    duplicateSId
    """
    column name
    """
    messageSId
    """
    column name
    """
    sId
    """
    column name
    """
    senderId
    """
    column name
    """
    symbol
    """
    column name
    """
    type
    """
    column name
    """
    updated_at
}

"""
input type for updating data in table "chat.Reaction"
"""
input chat_Reaction_set_input {
    chatId: uuid
    created_at: timestamptz
    data: jsonb
    duplicateSId: uuid
    messageSId: uuid
    sId: uuid
    senderId: uuid
    symbol: String
    type: chat_ReactionType_enum
    updated_at: timestamptz
}

"""
update columns of table "chat.Reaction"
"""
enum chat_Reaction_update_column {
    """
    column name
    """
    chatId
    """
    column name
    """
    created_at
    """
    column name
    """
    data
    """
    column name
    """
    duplicateSId
    """
    column name
    """
    messageSId
    """
    column name
    """
    sId
    """
    column name
    """
    senderId
    """
    column name
    """
    symbol
    """
    column name
    """
    type
    """
    column name
    """
    updated_at
}

"""
columns and relationships of "chat.ReadUpToIndex"
"""
type chat_ReadUpToIndex {
    """
    An object relationship
    """
    chat: chat_Chat!
    chatId: uuid!
    messageSId: uuid
    """
    An object relationship
    """
    registrant: registrant_Registrant!
    registrantId: uuid!
    updated_at: timestamptz!
}

"""
aggregated selection of "chat.ReadUpToIndex"
"""
type chat_ReadUpToIndex_aggregate {
    aggregate: chat_ReadUpToIndex_aggregate_fields
    nodes: [chat_ReadUpToIndex!]!
}

"""
aggregate fields of "chat.ReadUpToIndex"
"""
type chat_ReadUpToIndex_aggregate_fields {
    count(columns: [chat_ReadUpToIndex_select_column!], distinct: Boolean): Int!
    max: chat_ReadUpToIndex_max_fields
    min: chat_ReadUpToIndex_min_fields
}

"""
order by aggregate values of table "chat.ReadUpToIndex"
"""
input chat_ReadUpToIndex_aggregate_order_by {
    count: order_by
    max: chat_ReadUpToIndex_max_order_by
    min: chat_ReadUpToIndex_min_order_by
}

"""
input type for inserting array relation for remote table "chat.ReadUpToIndex"
"""
input chat_ReadUpToIndex_arr_rel_insert_input {
    data: [chat_ReadUpToIndex_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: chat_ReadUpToIndex_on_conflict
}

"""
Boolean expression to filter rows from the table "chat.ReadUpToIndex". All fields are combined with a logical 'AND'.
"""
input chat_ReadUpToIndex_bool_exp {
    _and: [chat_ReadUpToIndex_bool_exp!]
    _not: chat_ReadUpToIndex_bool_exp
    _or: [chat_ReadUpToIndex_bool_exp!]
    chat: chat_Chat_bool_exp
    chatId: uuid_comparison_exp
    messageSId: uuid_comparison_exp
    registrant: registrant_Registrant_bool_exp
    registrantId: uuid_comparison_exp
    updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "chat.ReadUpToIndex"
"""
enum chat_ReadUpToIndex_constraint {
    """
    unique or primary key constraint
    """
    ReadUpToIndex_pkey
}

"""
input type for inserting data into table "chat.ReadUpToIndex"
"""
input chat_ReadUpToIndex_insert_input {
    chat: chat_Chat_obj_rel_insert_input
    chatId: uuid
    messageSId: uuid
    registrant: registrant_Registrant_obj_rel_insert_input
    registrantId: uuid
    updated_at: timestamptz
}

"""
aggregate max on columns
"""
type chat_ReadUpToIndex_max_fields {
    chatId: uuid
    messageSId: uuid
    registrantId: uuid
    updated_at: timestamptz
}

"""
order by max() on columns of table "chat.ReadUpToIndex"
"""
input chat_ReadUpToIndex_max_order_by {
    chatId: order_by
    messageSId: order_by
    registrantId: order_by
    updated_at: order_by
}

"""
aggregate min on columns
"""
type chat_ReadUpToIndex_min_fields {
    chatId: uuid
    messageSId: uuid
    registrantId: uuid
    updated_at: timestamptz
}

"""
order by min() on columns of table "chat.ReadUpToIndex"
"""
input chat_ReadUpToIndex_min_order_by {
    chatId: order_by
    messageSId: order_by
    registrantId: order_by
    updated_at: order_by
}

"""
response of any mutation on the table "chat.ReadUpToIndex"
"""
type chat_ReadUpToIndex_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [chat_ReadUpToIndex!]!
}

"""
on conflict condition type for table "chat.ReadUpToIndex"
"""
input chat_ReadUpToIndex_on_conflict {
    constraint: chat_ReadUpToIndex_constraint!
    update_columns: [chat_ReadUpToIndex_update_column!]! = []
    where: chat_ReadUpToIndex_bool_exp
}

"""
Ordering options when selecting data from "chat.ReadUpToIndex".
"""
input chat_ReadUpToIndex_order_by {
    chat: chat_Chat_order_by
    chatId: order_by
    messageSId: order_by
    registrant: registrant_Registrant_order_by
    registrantId: order_by
    updated_at: order_by
}

"""
primary key columns input for table: chat_ReadUpToIndex
"""
input chat_ReadUpToIndex_pk_columns_input {
    chatId: uuid!
    registrantId: uuid!
}

"""
select columns of table "chat.ReadUpToIndex"
"""
enum chat_ReadUpToIndex_select_column {
    """
    column name
    """
    chatId
    """
    column name
    """
    messageSId
    """
    column name
    """
    registrantId
    """
    column name
    """
    updated_at
}

"""
input type for updating data in table "chat.ReadUpToIndex"
"""
input chat_ReadUpToIndex_set_input {
    chatId: uuid
    messageSId: uuid
    registrantId: uuid
    updated_at: timestamptz
}

"""
update columns of table "chat.ReadUpToIndex"
"""
enum chat_ReadUpToIndex_update_column {
    """
    column name
    """
    chatId
    """
    column name
    """
    messageSId
    """
    column name
    """
    registrantId
    """
    column name
    """
    updated_at
}

"""
Subscribe to chat notifications.


columns and relationships of "chat.Subscription"
"""
type chat_Subscription {
    """
    An object relationship
    """
    XPin: chat_Pin
    """
    An object relationship
    """
    chat: chat_Chat!
    chatId: uuid!
    created_at: timestamptz!
    """
    An object relationship
    """
    registrant: registrant_Registrant!
    registrantId: uuid!
    wasManuallySubscribed: Boolean!
}

"""
aggregated selection of "chat.Subscription"
"""
type chat_Subscription_aggregate {
    aggregate: chat_Subscription_aggregate_fields
    nodes: [chat_Subscription!]!
}

"""
aggregate fields of "chat.Subscription"
"""
type chat_Subscription_aggregate_fields {
    count(columns: [chat_Subscription_select_column!], distinct: Boolean): Int!
    max: chat_Subscription_max_fields
    min: chat_Subscription_min_fields
}

"""
order by aggregate values of table "chat.Subscription"
"""
input chat_Subscription_aggregate_order_by {
    count: order_by
    max: chat_Subscription_max_order_by
    min: chat_Subscription_min_order_by
}

"""
input type for inserting array relation for remote table "chat.Subscription"
"""
input chat_Subscription_arr_rel_insert_input {
    data: [chat_Subscription_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: chat_Subscription_on_conflict
}

"""
Boolean expression to filter rows from the table "chat.Subscription". All fields are combined with a logical 'AND'.
"""
input chat_Subscription_bool_exp {
    XPin: chat_Pin_bool_exp
    _and: [chat_Subscription_bool_exp!]
    _not: chat_Subscription_bool_exp
    _or: [chat_Subscription_bool_exp!]
    chat: chat_Chat_bool_exp
    chatId: uuid_comparison_exp
    created_at: timestamptz_comparison_exp
    registrant: registrant_Registrant_bool_exp
    registrantId: uuid_comparison_exp
    wasManuallySubscribed: Boolean_comparison_exp
}

"""
unique or primary key constraints on table "chat.Subscription"
"""
enum chat_Subscription_constraint {
    """
    unique or primary key constraint
    """
    Subscription_pkey
}

"""
input type for inserting data into table "chat.Subscription"
"""
input chat_Subscription_insert_input {
    XPin: chat_Pin_obj_rel_insert_input
    chat: chat_Chat_obj_rel_insert_input
    chatId: uuid
    created_at: timestamptz
    registrant: registrant_Registrant_obj_rel_insert_input
    registrantId: uuid
    wasManuallySubscribed: Boolean
}

"""
aggregate max on columns
"""
type chat_Subscription_max_fields {
    chatId: uuid
    created_at: timestamptz
    registrantId: uuid
}

"""
order by max() on columns of table "chat.Subscription"
"""
input chat_Subscription_max_order_by {
    chatId: order_by
    created_at: order_by
    registrantId: order_by
}

"""
aggregate min on columns
"""
type chat_Subscription_min_fields {
    chatId: uuid
    created_at: timestamptz
    registrantId: uuid
}

"""
order by min() on columns of table "chat.Subscription"
"""
input chat_Subscription_min_order_by {
    chatId: order_by
    created_at: order_by
    registrantId: order_by
}

"""
response of any mutation on the table "chat.Subscription"
"""
type chat_Subscription_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [chat_Subscription!]!
}

"""
on conflict condition type for table "chat.Subscription"
"""
input chat_Subscription_on_conflict {
    constraint: chat_Subscription_constraint!
    update_columns: [chat_Subscription_update_column!]! = []
    where: chat_Subscription_bool_exp
}

"""
Ordering options when selecting data from "chat.Subscription".
"""
input chat_Subscription_order_by {
    XPin: chat_Pin_order_by
    chat: chat_Chat_order_by
    chatId: order_by
    created_at: order_by
    registrant: registrant_Registrant_order_by
    registrantId: order_by
    wasManuallySubscribed: order_by
}

"""
primary key columns input for table: chat_Subscription
"""
input chat_Subscription_pk_columns_input {
    chatId: uuid!
    registrantId: uuid!
}

"""
select columns of table "chat.Subscription"
"""
enum chat_Subscription_select_column {
    """
    column name
    """
    chatId
    """
    column name
    """
    created_at
    """
    column name
    """
    registrantId
    """
    column name
    """
    wasManuallySubscribed
}

"""
input type for updating data in table "chat.Subscription"
"""
input chat_Subscription_set_input {
    chatId: uuid
    created_at: timestamptz
    registrantId: uuid
    wasManuallySubscribed: Boolean
}

"""
update columns of table "chat.Subscription"
"""
enum chat_Subscription_update_column {
    """
    column name
    """
    chatId
    """
    column name
    """
    created_at
    """
    column name
    """
    registrantId
    """
    column name
    """
    wasManuallySubscribed
}

"""
columns and relationships of "collection.Exhibition"
"""
type collection_Exhibition {
    colour: String!
    """
    An object relationship
    """
    conference: conference_Conference!
    conferenceId: uuid!
    created_at: timestamptz!
    """
    An object relationship
    """
    descriptiveItem: content_Item
    descriptiveItemId: uuid
    id: uuid!
    isHidden: Boolean!
    """
    An array relationship
    """
    items(
        """
        distinct select on columns
        """
        distinct_on: [content_ItemExhibition_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_ItemExhibition_order_by!]
        """
        filter the rows returned
        """
        where: content_ItemExhibition_bool_exp
    ): [content_ItemExhibition!]!
    """
    An aggregate relationship
    """
    items_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [content_ItemExhibition_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_ItemExhibition_order_by!]
        """
        filter the rows returned
        """
        where: content_ItemExhibition_bool_exp
    ): content_ItemExhibition_aggregate!
    name: String!
    priority: Int!
    subconferenceId: uuid
    updated_at: timestamptz!
    visibilityLevel: conference_VisibilityLevel_enum!
}

"""
aggregated selection of "collection.Exhibition"
"""
type collection_Exhibition_aggregate {
    aggregate: collection_Exhibition_aggregate_fields
    nodes: [collection_Exhibition!]!
}

"""
aggregate fields of "collection.Exhibition"
"""
type collection_Exhibition_aggregate_fields {
    avg: collection_Exhibition_avg_fields
    count(columns: [collection_Exhibition_select_column!], distinct: Boolean): Int!
    max: collection_Exhibition_max_fields
    min: collection_Exhibition_min_fields
    stddev: collection_Exhibition_stddev_fields
    stddev_pop: collection_Exhibition_stddev_pop_fields
    stddev_samp: collection_Exhibition_stddev_samp_fields
    sum: collection_Exhibition_sum_fields
    var_pop: collection_Exhibition_var_pop_fields
    var_samp: collection_Exhibition_var_samp_fields
    variance: collection_Exhibition_variance_fields
}

"""
order by aggregate values of table "collection.Exhibition"
"""
input collection_Exhibition_aggregate_order_by {
    avg: collection_Exhibition_avg_order_by
    count: order_by
    max: collection_Exhibition_max_order_by
    min: collection_Exhibition_min_order_by
    stddev: collection_Exhibition_stddev_order_by
    stddev_pop: collection_Exhibition_stddev_pop_order_by
    stddev_samp: collection_Exhibition_stddev_samp_order_by
    sum: collection_Exhibition_sum_order_by
    var_pop: collection_Exhibition_var_pop_order_by
    var_samp: collection_Exhibition_var_samp_order_by
    variance: collection_Exhibition_variance_order_by
}

"""
input type for inserting array relation for remote table "collection.Exhibition"
"""
input collection_Exhibition_arr_rel_insert_input {
    data: [collection_Exhibition_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: collection_Exhibition_on_conflict
}

"""
aggregate avg on columns
"""
type collection_Exhibition_avg_fields {
    priority: Float
}

"""
order by avg() on columns of table "collection.Exhibition"
"""
input collection_Exhibition_avg_order_by {
    priority: order_by
}

"""
Boolean expression to filter rows from the table "collection.Exhibition". All fields are combined with a logical 'AND'.
"""
input collection_Exhibition_bool_exp {
    _and: [collection_Exhibition_bool_exp!]
    _not: collection_Exhibition_bool_exp
    _or: [collection_Exhibition_bool_exp!]
    colour: String_comparison_exp
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    created_at: timestamptz_comparison_exp
    descriptiveItem: content_Item_bool_exp
    descriptiveItemId: uuid_comparison_exp
    id: uuid_comparison_exp
    isHidden: Boolean_comparison_exp
    items: content_ItemExhibition_bool_exp
    name: String_comparison_exp
    priority: Int_comparison_exp
    subconferenceId: uuid_comparison_exp
    updated_at: timestamptz_comparison_exp
    visibilityLevel: conference_VisibilityLevel_enum_comparison_exp
}

"""
unique or primary key constraints on table "collection.Exhibition"
"""
enum collection_Exhibition_constraint {
    """
    unique or primary key constraint
    """
    Exhibition_name_conferenceId_fkey
    """
    unique or primary key constraint
    """
    Exhibition_pkey
}

"""
input type for incrementing numeric columns in table "collection.Exhibition"
"""
input collection_Exhibition_inc_input {
    priority: Int
}

"""
input type for inserting data into table "collection.Exhibition"
"""
input collection_Exhibition_insert_input {
    colour: String
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    created_at: timestamptz
    descriptiveItem: content_Item_obj_rel_insert_input
    descriptiveItemId: uuid
    id: uuid
    isHidden: Boolean
    items: content_ItemExhibition_arr_rel_insert_input
    name: String
    priority: Int
    subconferenceId: uuid
    updated_at: timestamptz
    visibilityLevel: conference_VisibilityLevel_enum
}

"""
aggregate max on columns
"""
type collection_Exhibition_max_fields {
    colour: String
    conferenceId: uuid
    created_at: timestamptz
    descriptiveItemId: uuid
    id: uuid
    name: String
    priority: Int
    subconferenceId: uuid
    updated_at: timestamptz
}

"""
order by max() on columns of table "collection.Exhibition"
"""
input collection_Exhibition_max_order_by {
    colour: order_by
    conferenceId: order_by
    created_at: order_by
    descriptiveItemId: order_by
    id: order_by
    name: order_by
    priority: order_by
    subconferenceId: order_by
    updated_at: order_by
}

"""
aggregate min on columns
"""
type collection_Exhibition_min_fields {
    colour: String
    conferenceId: uuid
    created_at: timestamptz
    descriptiveItemId: uuid
    id: uuid
    name: String
    priority: Int
    subconferenceId: uuid
    updated_at: timestamptz
}

"""
order by min() on columns of table "collection.Exhibition"
"""
input collection_Exhibition_min_order_by {
    colour: order_by
    conferenceId: order_by
    created_at: order_by
    descriptiveItemId: order_by
    id: order_by
    name: order_by
    priority: order_by
    subconferenceId: order_by
    updated_at: order_by
}

"""
response of any mutation on the table "collection.Exhibition"
"""
type collection_Exhibition_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [collection_Exhibition!]!
}

"""
input type for inserting object relation for remote table "collection.Exhibition"
"""
input collection_Exhibition_obj_rel_insert_input {
    data: collection_Exhibition_insert_input!
    """
    on conflict condition
    """
    on_conflict: collection_Exhibition_on_conflict
}

"""
on conflict condition type for table "collection.Exhibition"
"""
input collection_Exhibition_on_conflict {
    constraint: collection_Exhibition_constraint!
    update_columns: [collection_Exhibition_update_column!]! = []
    where: collection_Exhibition_bool_exp
}

"""
Ordering options when selecting data from "collection.Exhibition".
"""
input collection_Exhibition_order_by {
    colour: order_by
    conference: conference_Conference_order_by
    conferenceId: order_by
    created_at: order_by
    descriptiveItem: content_Item_order_by
    descriptiveItemId: order_by
    id: order_by
    isHidden: order_by
    items_aggregate: content_ItemExhibition_aggregate_order_by
    name: order_by
    priority: order_by
    subconferenceId: order_by
    updated_at: order_by
    visibilityLevel: order_by
}

"""
primary key columns input for table: collection_Exhibition
"""
input collection_Exhibition_pk_columns_input {
    id: uuid!
}

"""
select columns of table "collection.Exhibition"
"""
enum collection_Exhibition_select_column {
    """
    column name
    """
    colour
    """
    column name
    """
    conferenceId
    """
    column name
    """
    created_at
    """
    column name
    """
    descriptiveItemId
    """
    column name
    """
    id
    """
    column name
    """
    isHidden
    """
    column name
    """
    name
    """
    column name
    """
    priority
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updated_at
    """
    column name
    """
    visibilityLevel
}

"""
input type for updating data in table "collection.Exhibition"
"""
input collection_Exhibition_set_input {
    colour: String
    conferenceId: uuid
    created_at: timestamptz
    descriptiveItemId: uuid
    id: uuid
    isHidden: Boolean
    name: String
    priority: Int
    subconferenceId: uuid
    updated_at: timestamptz
    visibilityLevel: conference_VisibilityLevel_enum
}

"""
aggregate stddev on columns
"""
type collection_Exhibition_stddev_fields {
    priority: Float
}

"""
order by stddev() on columns of table "collection.Exhibition"
"""
input collection_Exhibition_stddev_order_by {
    priority: order_by
}

"""
aggregate stddev_pop on columns
"""
type collection_Exhibition_stddev_pop_fields {
    priority: Float
}

"""
order by stddev_pop() on columns of table "collection.Exhibition"
"""
input collection_Exhibition_stddev_pop_order_by {
    priority: order_by
}

"""
aggregate stddev_samp on columns
"""
type collection_Exhibition_stddev_samp_fields {
    priority: Float
}

"""
order by stddev_samp() on columns of table "collection.Exhibition"
"""
input collection_Exhibition_stddev_samp_order_by {
    priority: order_by
}

"""
aggregate sum on columns
"""
type collection_Exhibition_sum_fields {
    priority: Int
}

"""
order by sum() on columns of table "collection.Exhibition"
"""
input collection_Exhibition_sum_order_by {
    priority: order_by
}

"""
update columns of table "collection.Exhibition"
"""
enum collection_Exhibition_update_column {
    """
    column name
    """
    colour
    """
    column name
    """
    conferenceId
    """
    column name
    """
    created_at
    """
    column name
    """
    descriptiveItemId
    """
    column name
    """
    id
    """
    column name
    """
    isHidden
    """
    column name
    """
    name
    """
    column name
    """
    priority
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updated_at
    """
    column name
    """
    visibilityLevel
}

"""
aggregate var_pop on columns
"""
type collection_Exhibition_var_pop_fields {
    priority: Float
}

"""
order by var_pop() on columns of table "collection.Exhibition"
"""
input collection_Exhibition_var_pop_order_by {
    priority: order_by
}

"""
aggregate var_samp on columns
"""
type collection_Exhibition_var_samp_fields {
    priority: Float
}

"""
order by var_samp() on columns of table "collection.Exhibition"
"""
input collection_Exhibition_var_samp_order_by {
    priority: order_by
}

"""
aggregate variance on columns
"""
type collection_Exhibition_variance_fields {
    priority: Float
}

"""
order by variance() on columns of table "collection.Exhibition"
"""
input collection_Exhibition_variance_order_by {
    priority: order_by
}

"""
columns and relationships of "collection.ProgramPerson"
"""
type collection_ProgramPerson {
    accessToken: String!
    affiliation: String
    """
    An object relationship
    """
    conference: conference_Conference!
    conferenceId: uuid!
    email: String
    """
    An array relationship
    """
    eventPeople(
        """
        distinct select on columns
        """
        distinct_on: [schedule_EventProgramPerson_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_EventProgramPerson_order_by!]
        """
        filter the rows returned
        """
        where: schedule_EventProgramPerson_bool_exp
    ): [schedule_EventProgramPerson!]!
    """
    An aggregate relationship
    """
    eventPeople_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [schedule_EventProgramPerson_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_EventProgramPerson_order_by!]
        """
        filter the rows returned
        """
        where: schedule_EventProgramPerson_bool_exp
    ): schedule_EventProgramPerson_aggregate!
    id: uuid!
    """
    An array relationship
    """
    itemPeople(
        """
        distinct select on columns
        """
        distinct_on: [content_ItemProgramPerson_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_ItemProgramPerson_order_by!]
        """
        filter the rows returned
        """
        where: content_ItemProgramPerson_bool_exp
    ): [content_ItemProgramPerson!]!
    """
    An aggregate relationship
    """
    itemPeople_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [content_ItemProgramPerson_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_ItemProgramPerson_order_by!]
        """
        filter the rows returned
        """
        where: content_ItemProgramPerson_bool_exp
    ): content_ItemProgramPerson_aggregate!
    name: String!
    """
    An object relationship
    """
    registrant: registrant_Registrant
    registrantId: uuid
    subconferenceId: uuid
    submissionRequestsSentCount: Int!
    visibilityLevel: conference_VisibilityLevel_enum!
}

"""
aggregated selection of "collection.ProgramPerson"
"""
type collection_ProgramPerson_aggregate {
    aggregate: collection_ProgramPerson_aggregate_fields
    nodes: [collection_ProgramPerson!]!
}

"""
aggregate fields of "collection.ProgramPerson"
"""
type collection_ProgramPerson_aggregate_fields {
    avg: collection_ProgramPerson_avg_fields
    count(columns: [collection_ProgramPerson_select_column!], distinct: Boolean): Int!
    max: collection_ProgramPerson_max_fields
    min: collection_ProgramPerson_min_fields
    stddev: collection_ProgramPerson_stddev_fields
    stddev_pop: collection_ProgramPerson_stddev_pop_fields
    stddev_samp: collection_ProgramPerson_stddev_samp_fields
    sum: collection_ProgramPerson_sum_fields
    var_pop: collection_ProgramPerson_var_pop_fields
    var_samp: collection_ProgramPerson_var_samp_fields
    variance: collection_ProgramPerson_variance_fields
}

"""
order by aggregate values of table "collection.ProgramPerson"
"""
input collection_ProgramPerson_aggregate_order_by {
    avg: collection_ProgramPerson_avg_order_by
    count: order_by
    max: collection_ProgramPerson_max_order_by
    min: collection_ProgramPerson_min_order_by
    stddev: collection_ProgramPerson_stddev_order_by
    stddev_pop: collection_ProgramPerson_stddev_pop_order_by
    stddev_samp: collection_ProgramPerson_stddev_samp_order_by
    sum: collection_ProgramPerson_sum_order_by
    var_pop: collection_ProgramPerson_var_pop_order_by
    var_samp: collection_ProgramPerson_var_samp_order_by
    variance: collection_ProgramPerson_variance_order_by
}

"""
input type for inserting array relation for remote table "collection.ProgramPerson"
"""
input collection_ProgramPerson_arr_rel_insert_input {
    data: [collection_ProgramPerson_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: collection_ProgramPerson_on_conflict
}

"""
aggregate avg on columns
"""
type collection_ProgramPerson_avg_fields {
    submissionRequestsSentCount: Float
}

"""
order by avg() on columns of table "collection.ProgramPerson"
"""
input collection_ProgramPerson_avg_order_by {
    submissionRequestsSentCount: order_by
}

"""
Boolean expression to filter rows from the table "collection.ProgramPerson". All fields are combined with a logical 'AND'.
"""
input collection_ProgramPerson_bool_exp {
    _and: [collection_ProgramPerson_bool_exp!]
    _not: collection_ProgramPerson_bool_exp
    _or: [collection_ProgramPerson_bool_exp!]
    accessToken: String_comparison_exp
    affiliation: String_comparison_exp
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    email: String_comparison_exp
    eventPeople: schedule_EventProgramPerson_bool_exp
    id: uuid_comparison_exp
    itemPeople: content_ItemProgramPerson_bool_exp
    name: String_comparison_exp
    registrant: registrant_Registrant_bool_exp
    registrantId: uuid_comparison_exp
    subconferenceId: uuid_comparison_exp
    submissionRequestsSentCount: Int_comparison_exp
    visibilityLevel: conference_VisibilityLevel_enum_comparison_exp
}

"""
unique or primary key constraints on table "collection.ProgramPerson"
"""
enum collection_ProgramPerson_constraint {
    """
    unique or primary key constraint
    """
    ProgramPerson_conferenceId_name_affiliation_key
    """
    unique or primary key constraint
    """
    ProgramPerson_conferenceId_name_key
    """
    unique or primary key constraint
    """
    ProgramPerson_pkey
    """
    unique or primary key constraint
    """
    collection_ProgramPerson_accessToken
}

"""
input type for incrementing numeric columns in table "collection.ProgramPerson"
"""
input collection_ProgramPerson_inc_input {
    submissionRequestsSentCount: Int
}

"""
input type for inserting data into table "collection.ProgramPerson"
"""
input collection_ProgramPerson_insert_input {
    accessToken: String
    affiliation: String
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    email: String
    eventPeople: schedule_EventProgramPerson_arr_rel_insert_input
    id: uuid
    itemPeople: content_ItemProgramPerson_arr_rel_insert_input
    name: String
    registrant: registrant_Registrant_obj_rel_insert_input
    registrantId: uuid
    subconferenceId: uuid
    submissionRequestsSentCount: Int
    visibilityLevel: conference_VisibilityLevel_enum
}

"""
aggregate max on columns
"""
type collection_ProgramPerson_max_fields {
    accessToken: String
    affiliation: String
    conferenceId: uuid
    email: String
    id: uuid
    name: String
    registrantId: uuid
    subconferenceId: uuid
    submissionRequestsSentCount: Int
}

"""
order by max() on columns of table "collection.ProgramPerson"
"""
input collection_ProgramPerson_max_order_by {
    accessToken: order_by
    affiliation: order_by
    conferenceId: order_by
    email: order_by
    id: order_by
    name: order_by
    registrantId: order_by
    subconferenceId: order_by
    submissionRequestsSentCount: order_by
}

"""
aggregate min on columns
"""
type collection_ProgramPerson_min_fields {
    accessToken: String
    affiliation: String
    conferenceId: uuid
    email: String
    id: uuid
    name: String
    registrantId: uuid
    subconferenceId: uuid
    submissionRequestsSentCount: Int
}

"""
order by min() on columns of table "collection.ProgramPerson"
"""
input collection_ProgramPerson_min_order_by {
    accessToken: order_by
    affiliation: order_by
    conferenceId: order_by
    email: order_by
    id: order_by
    name: order_by
    registrantId: order_by
    subconferenceId: order_by
    submissionRequestsSentCount: order_by
}

"""
response of any mutation on the table "collection.ProgramPerson"
"""
type collection_ProgramPerson_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [collection_ProgramPerson!]!
}

"""
input type for inserting object relation for remote table "collection.ProgramPerson"
"""
input collection_ProgramPerson_obj_rel_insert_input {
    data: collection_ProgramPerson_insert_input!
    """
    on conflict condition
    """
    on_conflict: collection_ProgramPerson_on_conflict
}

"""
on conflict condition type for table "collection.ProgramPerson"
"""
input collection_ProgramPerson_on_conflict {
    constraint: collection_ProgramPerson_constraint!
    update_columns: [collection_ProgramPerson_update_column!]! = []
    where: collection_ProgramPerson_bool_exp
}

"""
Ordering options when selecting data from "collection.ProgramPerson".
"""
input collection_ProgramPerson_order_by {
    accessToken: order_by
    affiliation: order_by
    conference: conference_Conference_order_by
    conferenceId: order_by
    email: order_by
    eventPeople_aggregate: schedule_EventProgramPerson_aggregate_order_by
    id: order_by
    itemPeople_aggregate: content_ItemProgramPerson_aggregate_order_by
    name: order_by
    registrant: registrant_Registrant_order_by
    registrantId: order_by
    subconferenceId: order_by
    submissionRequestsSentCount: order_by
    visibilityLevel: order_by
}

"""
primary key columns input for table: collection_ProgramPerson
"""
input collection_ProgramPerson_pk_columns_input {
    id: uuid!
}

"""
select columns of table "collection.ProgramPerson"
"""
enum collection_ProgramPerson_select_column {
    """
    column name
    """
    accessToken
    """
    column name
    """
    affiliation
    """
    column name
    """
    conferenceId
    """
    column name
    """
    email
    """
    column name
    """
    id
    """
    column name
    """
    name
    """
    column name
    """
    registrantId
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    submissionRequestsSentCount
    """
    column name
    """
    visibilityLevel
}

"""
input type for updating data in table "collection.ProgramPerson"
"""
input collection_ProgramPerson_set_input {
    accessToken: String
    affiliation: String
    conferenceId: uuid
    email: String
    id: uuid
    name: String
    registrantId: uuid
    subconferenceId: uuid
    submissionRequestsSentCount: Int
    visibilityLevel: conference_VisibilityLevel_enum
}

"""
aggregate stddev on columns
"""
type collection_ProgramPerson_stddev_fields {
    submissionRequestsSentCount: Float
}

"""
order by stddev() on columns of table "collection.ProgramPerson"
"""
input collection_ProgramPerson_stddev_order_by {
    submissionRequestsSentCount: order_by
}

"""
aggregate stddev_pop on columns
"""
type collection_ProgramPerson_stddev_pop_fields {
    submissionRequestsSentCount: Float
}

"""
order by stddev_pop() on columns of table "collection.ProgramPerson"
"""
input collection_ProgramPerson_stddev_pop_order_by {
    submissionRequestsSentCount: order_by
}

"""
aggregate stddev_samp on columns
"""
type collection_ProgramPerson_stddev_samp_fields {
    submissionRequestsSentCount: Float
}

"""
order by stddev_samp() on columns of table "collection.ProgramPerson"
"""
input collection_ProgramPerson_stddev_samp_order_by {
    submissionRequestsSentCount: order_by
}

"""
aggregate sum on columns
"""
type collection_ProgramPerson_sum_fields {
    submissionRequestsSentCount: Int
}

"""
order by sum() on columns of table "collection.ProgramPerson"
"""
input collection_ProgramPerson_sum_order_by {
    submissionRequestsSentCount: order_by
}

"""
update columns of table "collection.ProgramPerson"
"""
enum collection_ProgramPerson_update_column {
    """
    column name
    """
    accessToken
    """
    column name
    """
    affiliation
    """
    column name
    """
    conferenceId
    """
    column name
    """
    email
    """
    column name
    """
    id
    """
    column name
    """
    name
    """
    column name
    """
    registrantId
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    submissionRequestsSentCount
    """
    column name
    """
    visibilityLevel
}

"""
aggregate var_pop on columns
"""
type collection_ProgramPerson_var_pop_fields {
    submissionRequestsSentCount: Float
}

"""
order by var_pop() on columns of table "collection.ProgramPerson"
"""
input collection_ProgramPerson_var_pop_order_by {
    submissionRequestsSentCount: order_by
}

"""
aggregate var_samp on columns
"""
type collection_ProgramPerson_var_samp_fields {
    submissionRequestsSentCount: Float
}

"""
order by var_samp() on columns of table "collection.ProgramPerson"
"""
input collection_ProgramPerson_var_samp_order_by {
    submissionRequestsSentCount: order_by
}

"""
aggregate variance on columns
"""
type collection_ProgramPerson_variance_fields {
    submissionRequestsSentCount: Float
}

"""
order by variance() on columns of table "collection.ProgramPerson"
"""
input collection_ProgramPerson_variance_order_by {
    submissionRequestsSentCount: order_by
}

"""
columns and relationships of "collection.Tag"
"""
type collection_Tag {
    colour: String!
    """
    An object relationship
    """
    conference: conference_Conference!
    conferenceId: uuid!
    createdAt: timestamptz!
    id: uuid!
    """
    An array relationship
    """
    itemTags(
        """
        distinct select on columns
        """
        distinct_on: [content_ItemTag_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_ItemTag_order_by!]
        """
        filter the rows returned
        """
        where: content_ItemTag_bool_exp
    ): [content_ItemTag!]!
    """
    An aggregate relationship
    """
    itemTags_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [content_ItemTag_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_ItemTag_order_by!]
        """
        filter the rows returned
        """
        where: content_ItemTag_bool_exp
    ): content_ItemTag_aggregate!
    name: String!
    priority: Int!
    subconferenceId: uuid
    updatedAt: timestamptz!
    visibilityLevel: conference_VisibilityLevel_enum!
}

"""
aggregated selection of "collection.Tag"
"""
type collection_Tag_aggregate {
    aggregate: collection_Tag_aggregate_fields
    nodes: [collection_Tag!]!
}

"""
aggregate fields of "collection.Tag"
"""
type collection_Tag_aggregate_fields {
    avg: collection_Tag_avg_fields
    count(columns: [collection_Tag_select_column!], distinct: Boolean): Int!
    max: collection_Tag_max_fields
    min: collection_Tag_min_fields
    stddev: collection_Tag_stddev_fields
    stddev_pop: collection_Tag_stddev_pop_fields
    stddev_samp: collection_Tag_stddev_samp_fields
    sum: collection_Tag_sum_fields
    var_pop: collection_Tag_var_pop_fields
    var_samp: collection_Tag_var_samp_fields
    variance: collection_Tag_variance_fields
}

"""
order by aggregate values of table "collection.Tag"
"""
input collection_Tag_aggregate_order_by {
    avg: collection_Tag_avg_order_by
    count: order_by
    max: collection_Tag_max_order_by
    min: collection_Tag_min_order_by
    stddev: collection_Tag_stddev_order_by
    stddev_pop: collection_Tag_stddev_pop_order_by
    stddev_samp: collection_Tag_stddev_samp_order_by
    sum: collection_Tag_sum_order_by
    var_pop: collection_Tag_var_pop_order_by
    var_samp: collection_Tag_var_samp_order_by
    variance: collection_Tag_variance_order_by
}

"""
input type for inserting array relation for remote table "collection.Tag"
"""
input collection_Tag_arr_rel_insert_input {
    data: [collection_Tag_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: collection_Tag_on_conflict
}

"""
aggregate avg on columns
"""
type collection_Tag_avg_fields {
    priority: Float
}

"""
order by avg() on columns of table "collection.Tag"
"""
input collection_Tag_avg_order_by {
    priority: order_by
}

"""
Boolean expression to filter rows from the table "collection.Tag". All fields are combined with a logical 'AND'.
"""
input collection_Tag_bool_exp {
    _and: [collection_Tag_bool_exp!]
    _not: collection_Tag_bool_exp
    _or: [collection_Tag_bool_exp!]
    colour: String_comparison_exp
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    createdAt: timestamptz_comparison_exp
    id: uuid_comparison_exp
    itemTags: content_ItemTag_bool_exp
    name: String_comparison_exp
    priority: Int_comparison_exp
    subconferenceId: uuid_comparison_exp
    updatedAt: timestamptz_comparison_exp
    visibilityLevel: conference_VisibilityLevel_enum_comparison_exp
}

"""
unique or primary key constraints on table "collection.Tag"
"""
enum collection_Tag_constraint {
    """
    unique or primary key constraint
    """
    Tag_pkey
}

"""
input type for incrementing numeric columns in table "collection.Tag"
"""
input collection_Tag_inc_input {
    priority: Int
}

"""
input type for inserting data into table "collection.Tag"
"""
input collection_Tag_insert_input {
    colour: String
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    itemTags: content_ItemTag_arr_rel_insert_input
    name: String
    priority: Int
    subconferenceId: uuid
    updatedAt: timestamptz
    visibilityLevel: conference_VisibilityLevel_enum
}

"""
aggregate max on columns
"""
type collection_Tag_max_fields {
    colour: String
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    name: String
    priority: Int
    subconferenceId: uuid
    updatedAt: timestamptz
}

"""
order by max() on columns of table "collection.Tag"
"""
input collection_Tag_max_order_by {
    colour: order_by
    conferenceId: order_by
    createdAt: order_by
    id: order_by
    name: order_by
    priority: order_by
    subconferenceId: order_by
    updatedAt: order_by
}

"""
aggregate min on columns
"""
type collection_Tag_min_fields {
    colour: String
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    name: String
    priority: Int
    subconferenceId: uuid
    updatedAt: timestamptz
}

"""
order by min() on columns of table "collection.Tag"
"""
input collection_Tag_min_order_by {
    colour: order_by
    conferenceId: order_by
    createdAt: order_by
    id: order_by
    name: order_by
    priority: order_by
    subconferenceId: order_by
    updatedAt: order_by
}

"""
response of any mutation on the table "collection.Tag"
"""
type collection_Tag_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [collection_Tag!]!
}

"""
input type for inserting object relation for remote table "collection.Tag"
"""
input collection_Tag_obj_rel_insert_input {
    data: collection_Tag_insert_input!
    """
    on conflict condition
    """
    on_conflict: collection_Tag_on_conflict
}

"""
on conflict condition type for table "collection.Tag"
"""
input collection_Tag_on_conflict {
    constraint: collection_Tag_constraint!
    update_columns: [collection_Tag_update_column!]! = []
    where: collection_Tag_bool_exp
}

"""
Ordering options when selecting data from "collection.Tag".
"""
input collection_Tag_order_by {
    colour: order_by
    conference: conference_Conference_order_by
    conferenceId: order_by
    createdAt: order_by
    id: order_by
    itemTags_aggregate: content_ItemTag_aggregate_order_by
    name: order_by
    priority: order_by
    subconferenceId: order_by
    updatedAt: order_by
    visibilityLevel: order_by
}

"""
primary key columns input for table: collection_Tag
"""
input collection_Tag_pk_columns_input {
    id: uuid!
}

"""
select columns of table "collection.Tag"
"""
enum collection_Tag_select_column {
    """
    column name
    """
    colour
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    id
    """
    column name
    """
    name
    """
    column name
    """
    priority
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updatedAt
    """
    column name
    """
    visibilityLevel
}

"""
input type for updating data in table "collection.Tag"
"""
input collection_Tag_set_input {
    colour: String
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    name: String
    priority: Int
    subconferenceId: uuid
    updatedAt: timestamptz
    visibilityLevel: conference_VisibilityLevel_enum
}

"""
aggregate stddev on columns
"""
type collection_Tag_stddev_fields {
    priority: Float
}

"""
order by stddev() on columns of table "collection.Tag"
"""
input collection_Tag_stddev_order_by {
    priority: order_by
}

"""
aggregate stddev_pop on columns
"""
type collection_Tag_stddev_pop_fields {
    priority: Float
}

"""
order by stddev_pop() on columns of table "collection.Tag"
"""
input collection_Tag_stddev_pop_order_by {
    priority: order_by
}

"""
aggregate stddev_samp on columns
"""
type collection_Tag_stddev_samp_fields {
    priority: Float
}

"""
order by stddev_samp() on columns of table "collection.Tag"
"""
input collection_Tag_stddev_samp_order_by {
    priority: order_by
}

"""
aggregate sum on columns
"""
type collection_Tag_sum_fields {
    priority: Int
}

"""
order by sum() on columns of table "collection.Tag"
"""
input collection_Tag_sum_order_by {
    priority: order_by
}

"""
update columns of table "collection.Tag"
"""
enum collection_Tag_update_column {
    """
    column name
    """
    colour
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    id
    """
    column name
    """
    name
    """
    column name
    """
    priority
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updatedAt
    """
    column name
    """
    visibilityLevel
}

"""
aggregate var_pop on columns
"""
type collection_Tag_var_pop_fields {
    priority: Float
}

"""
order by var_pop() on columns of table "collection.Tag"
"""
input collection_Tag_var_pop_order_by {
    priority: order_by
}

"""
aggregate var_samp on columns
"""
type collection_Tag_var_samp_fields {
    priority: Float
}

"""
order by var_samp() on columns of table "collection.Tag"
"""
input collection_Tag_var_samp_order_by {
    priority: order_by
}

"""
aggregate variance on columns
"""
type collection_Tag_variance_fields {
    priority: Float
}

"""
order by variance() on columns of table "collection.Tag"
"""
input collection_Tag_variance_order_by {
    priority: order_by
}

input collection_searchProgramPerson_args {
    conferenceid: uuid
    search: String
}

"""
columns and relationships of "conference.Conference"
"""
type conference_Conference {
    announcementsChatId: uuid
    """
    An array relationship
    """
    chats(
        """
        distinct select on columns
        """
        distinct_on: [chat_Chat_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Chat_order_by!]
        """
        filter the rows returned
        """
        where: chat_Chat_bool_exp
    ): [chat_Chat!]!
    """
    An aggregate relationship
    """
    chats_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [chat_Chat_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Chat_order_by!]
        """
        filter the rows returned
        """
        where: chat_Chat_bool_exp
    ): chat_Chat_aggregate!
    """
    An object relationship
    """
    completedRegistrationsStat: analytics_CompletedRegistrations
    conferenceVisibilityLevel: conference_VisibilityLevel_enum!
    """
    An array relationship
    """
    configurations(
        """
        distinct select on columns
        """
        distinct_on: [conference_Configuration_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [conference_Configuration_order_by!]
        """
        filter the rows returned
        """
        where: conference_Configuration_bool_exp
    ): [conference_Configuration!]!
    """
    An aggregate relationship
    """
    configurations_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [conference_Configuration_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [conference_Configuration_order_by!]
        """
        filter the rows returned
        """
        where: conference_Configuration_bool_exp
    ): conference_Configuration_aggregate!
    createdAt: timestamptz!
    createdBy: String!
    """
    An object relationship
    """
    creator: User!
    defaultProgramVisibilityLevel: String!
    """
    An object relationship
    """
    demoCode: conference_DemoCode!
    demoCodeId: uuid!
    """
    An array relationship
    """
    events(
        """
        distinct select on columns
        """
        distinct_on: [schedule_Event_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_Event_order_by!]
        """
        filter the rows returned
        """
        where: schedule_Event_bool_exp
    ): [schedule_Event!]!
    """
    An aggregate relationship
    """
    events_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [schedule_Event_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_Event_order_by!]
        """
        filter the rows returned
        """
        where: schedule_Event_bool_exp
    ): schedule_Event_aggregate!
    """
    An array relationship
    """
    exhibitions(
        """
        distinct select on columns
        """
        distinct_on: [collection_Exhibition_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [collection_Exhibition_order_by!]
        """
        filter the rows returned
        """
        where: collection_Exhibition_bool_exp
    ): [collection_Exhibition!]!
    """
    An aggregate relationship
    """
    exhibitions_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [collection_Exhibition_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [collection_Exhibition_order_by!]
        """
        filter the rows returned
        """
        where: collection_Exhibition_bool_exp
    ): collection_Exhibition_aggregate!
    globalInviteCode: uuid
    id: uuid!
    """
    An array relationship
    """
    items(
        """
        distinct select on columns
        """
        distinct_on: [content_Item_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_Item_order_by!]
        """
        filter the rows returned
        """
        where: content_Item_bool_exp
    ): [content_Item!]!
    """
    An aggregate relationship
    """
    items_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [content_Item_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_Item_order_by!]
        """
        filter the rows returned
        """
        where: content_Item_bool_exp
    ): content_Item_aggregate!
    name: String!
    """
    An array relationship
    """
    programPeople(
        """
        distinct select on columns
        """
        distinct_on: [collection_ProgramPerson_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [collection_ProgramPerson_order_by!]
        """
        filter the rows returned
        """
        where: collection_ProgramPerson_bool_exp
    ): [collection_ProgramPerson!]!
    """
    An aggregate relationship
    """
    programPeople_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [collection_ProgramPerson_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [collection_ProgramPerson_order_by!]
        """
        filter the rows returned
        """
        where: collection_ProgramPerson_bool_exp
    ): collection_ProgramPerson_aggregate!
    """
    An array relationship
    """
    registrants(
        """
        distinct select on columns
        """
        distinct_on: [registrant_Registrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_Registrant_order_by!]
        """
        filter the rows returned
        """
        where: registrant_Registrant_bool_exp
    ): [registrant_Registrant!]!
    """
    An aggregate relationship
    """
    registrants_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [registrant_Registrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_Registrant_order_by!]
        """
        filter the rows returned
        """
        where: registrant_Registrant_bool_exp
    ): registrant_Registrant_aggregate!
    """
    An array relationship
    """
    rooms(
        """
        distinct select on columns
        """
        distinct_on: [room_Room_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_Room_order_by!]
        """
        filter the rows returned
        """
        where: room_Room_bool_exp
    ): [room_Room!]!
    """
    An aggregate relationship
    """
    rooms_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_Room_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_Room_order_by!]
        """
        filter the rows returned
        """
        where: room_Room_bool_exp
    ): room_Room_aggregate!
    shortName: String!
    """
    An array relationship
    """
    shufflePeriods(
        """
        distinct select on columns
        """
        distinct_on: [room_ShufflePeriod_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_ShufflePeriod_order_by!]
        """
        filter the rows returned
        """
        where: room_ShufflePeriod_bool_exp
    ): [room_ShufflePeriod!]!
    """
    An aggregate relationship
    """
    shufflePeriods_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_ShufflePeriod_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_ShufflePeriod_order_by!]
        """
        filter the rows returned
        """
        where: room_ShufflePeriod_bool_exp
    ): room_ShufflePeriod_aggregate!
    slug: String!
    """
    An array relationship
    """
    sponsorshipTiers(
        """
        distinct select on columns
        """
        distinct_on: [sponsor_Tier_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [sponsor_Tier_order_by!]
        """
        filter the rows returned
        """
        where: sponsor_Tier_bool_exp
    ): [sponsor_Tier!]!
    """
    An aggregate relationship
    """
    sponsorshipTiers_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [sponsor_Tier_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [sponsor_Tier_order_by!]
        """
        filter the rows returned
        """
        where: sponsor_Tier_bool_exp
    ): sponsor_Tier_aggregate!
    """
    An array relationship
    """
    subconferences(
        """
        distinct select on columns
        """
        distinct_on: [conference_Subconference_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [conference_Subconference_order_by!]
        """
        filter the rows returned
        """
        where: conference_Subconference_bool_exp
    ): [conference_Subconference!]!
    """
    An aggregate relationship
    """
    subconferences_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [conference_Subconference_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [conference_Subconference_order_by!]
        """
        filter the rows returned
        """
        where: conference_Subconference_bool_exp
    ): conference_Subconference_aggregate!
    """
    An array relationship
    """
    tags(
        """
        distinct select on columns
        """
        distinct_on: [collection_Tag_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [collection_Tag_order_by!]
        """
        filter the rows returned
        """
        where: collection_Tag_bool_exp
    ): [collection_Tag!]!
    """
    An aggregate relationship
    """
    tags_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [collection_Tag_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [collection_Tag_order_by!]
        """
        filter the rows returned
        """
        where: collection_Tag_bool_exp
    ): collection_Tag_aggregate!
    updatedAt: timestamptz!
}

"""
aggregated selection of "conference.Conference"
"""
type conference_Conference_aggregate {
    aggregate: conference_Conference_aggregate_fields
    nodes: [conference_Conference!]!
}

"""
aggregate fields of "conference.Conference"
"""
type conference_Conference_aggregate_fields {
    count(columns: [conference_Conference_select_column!], distinct: Boolean): Int!
    max: conference_Conference_max_fields
    min: conference_Conference_min_fields
}

"""
order by aggregate values of table "conference.Conference"
"""
input conference_Conference_aggregate_order_by {
    count: order_by
    max: conference_Conference_max_order_by
    min: conference_Conference_min_order_by
}

"""
input type for inserting array relation for remote table "conference.Conference"
"""
input conference_Conference_arr_rel_insert_input {
    data: [conference_Conference_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: conference_Conference_on_conflict
}

"""
Boolean expression to filter rows from the table "conference.Conference". All fields are combined with a logical 'AND'.
"""
input conference_Conference_bool_exp {
    _and: [conference_Conference_bool_exp!]
    _not: conference_Conference_bool_exp
    _or: [conference_Conference_bool_exp!]
    announcementsChatId: uuid_comparison_exp
    chats: chat_Chat_bool_exp
    completedRegistrationsStat: analytics_CompletedRegistrations_bool_exp
    conferenceVisibilityLevel: conference_VisibilityLevel_enum_comparison_exp
    configurations: conference_Configuration_bool_exp
    createdAt: timestamptz_comparison_exp
    createdBy: String_comparison_exp
    creator: User_bool_exp
    defaultProgramVisibilityLevel: String_comparison_exp
    demoCode: conference_DemoCode_bool_exp
    demoCodeId: uuid_comparison_exp
    events: schedule_Event_bool_exp
    exhibitions: collection_Exhibition_bool_exp
    globalInviteCode: uuid_comparison_exp
    id: uuid_comparison_exp
    items: content_Item_bool_exp
    name: String_comparison_exp
    programPeople: collection_ProgramPerson_bool_exp
    registrants: registrant_Registrant_bool_exp
    rooms: room_Room_bool_exp
    shortName: String_comparison_exp
    shufflePeriods: room_ShufflePeriod_bool_exp
    slug: String_comparison_exp
    sponsorshipTiers: sponsor_Tier_bool_exp
    subconferences: conference_Subconference_bool_exp
    tags: collection_Tag_bool_exp
    updatedAt: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "conference.Conference"
"""
enum conference_Conference_constraint {
    """
    unique or primary key constraint
    """
    Conference_demoCodeId_key
    """
    unique or primary key constraint
    """
    Conference_globalInviteCode_key
    """
    unique or primary key constraint
    """
    Conference_name_key
    """
    unique or primary key constraint
    """
    Conference_pkey
    """
    unique or primary key constraint
    """
    Conference_shortName_key
    """
    unique or primary key constraint
    """
    Conference_slug_key
}

"""
input type for inserting data into table "conference.Conference"
"""
input conference_Conference_insert_input {
    announcementsChatId: uuid
    chats: chat_Chat_arr_rel_insert_input
    completedRegistrationsStat: analytics_CompletedRegistrations_obj_rel_insert_input
    conferenceVisibilityLevel: conference_VisibilityLevel_enum
    configurations: conference_Configuration_arr_rel_insert_input
    createdAt: timestamptz
    createdBy: String
    creator: User_obj_rel_insert_input
    defaultProgramVisibilityLevel: String
    demoCode: conference_DemoCode_obj_rel_insert_input
    demoCodeId: uuid
    events: schedule_Event_arr_rel_insert_input
    exhibitions: collection_Exhibition_arr_rel_insert_input
    globalInviteCode: uuid
    id: uuid
    items: content_Item_arr_rel_insert_input
    name: String
    programPeople: collection_ProgramPerson_arr_rel_insert_input
    registrants: registrant_Registrant_arr_rel_insert_input
    rooms: room_Room_arr_rel_insert_input
    shortName: String
    shufflePeriods: room_ShufflePeriod_arr_rel_insert_input
    slug: String
    sponsorshipTiers: sponsor_Tier_arr_rel_insert_input
    subconferences: conference_Subconference_arr_rel_insert_input
    tags: collection_Tag_arr_rel_insert_input
    updatedAt: timestamptz
}

"""
aggregate max on columns
"""
type conference_Conference_max_fields {
    announcementsChatId: uuid
    createdAt: timestamptz
    createdBy: String
    defaultProgramVisibilityLevel: String
    demoCodeId: uuid
    globalInviteCode: uuid
    id: uuid
    name: String
    shortName: String
    slug: String
    updatedAt: timestamptz
}

"""
order by max() on columns of table "conference.Conference"
"""
input conference_Conference_max_order_by {
    announcementsChatId: order_by
    createdAt: order_by
    createdBy: order_by
    defaultProgramVisibilityLevel: order_by
    demoCodeId: order_by
    globalInviteCode: order_by
    id: order_by
    name: order_by
    shortName: order_by
    slug: order_by
    updatedAt: order_by
}

"""
aggregate min on columns
"""
type conference_Conference_min_fields {
    announcementsChatId: uuid
    createdAt: timestamptz
    createdBy: String
    defaultProgramVisibilityLevel: String
    demoCodeId: uuid
    globalInviteCode: uuid
    id: uuid
    name: String
    shortName: String
    slug: String
    updatedAt: timestamptz
}

"""
order by min() on columns of table "conference.Conference"
"""
input conference_Conference_min_order_by {
    announcementsChatId: order_by
    createdAt: order_by
    createdBy: order_by
    defaultProgramVisibilityLevel: order_by
    demoCodeId: order_by
    globalInviteCode: order_by
    id: order_by
    name: order_by
    shortName: order_by
    slug: order_by
    updatedAt: order_by
}

"""
response of any mutation on the table "conference.Conference"
"""
type conference_Conference_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [conference_Conference!]!
}

"""
input type for inserting object relation for remote table "conference.Conference"
"""
input conference_Conference_obj_rel_insert_input {
    data: conference_Conference_insert_input!
    """
    on conflict condition
    """
    on_conflict: conference_Conference_on_conflict
}

"""
on conflict condition type for table "conference.Conference"
"""
input conference_Conference_on_conflict {
    constraint: conference_Conference_constraint!
    update_columns: [conference_Conference_update_column!]! = []
    where: conference_Conference_bool_exp
}

"""
Ordering options when selecting data from "conference.Conference".
"""
input conference_Conference_order_by {
    announcementsChatId: order_by
    chats_aggregate: chat_Chat_aggregate_order_by
    completedRegistrationsStat: analytics_CompletedRegistrations_order_by
    conferenceVisibilityLevel: order_by
    configurations_aggregate: conference_Configuration_aggregate_order_by
    createdAt: order_by
    createdBy: order_by
    creator: User_order_by
    defaultProgramVisibilityLevel: order_by
    demoCode: conference_DemoCode_order_by
    demoCodeId: order_by
    events_aggregate: schedule_Event_aggregate_order_by
    exhibitions_aggregate: collection_Exhibition_aggregate_order_by
    globalInviteCode: order_by
    id: order_by
    items_aggregate: content_Item_aggregate_order_by
    name: order_by
    programPeople_aggregate: collection_ProgramPerson_aggregate_order_by
    registrants_aggregate: registrant_Registrant_aggregate_order_by
    rooms_aggregate: room_Room_aggregate_order_by
    shortName: order_by
    shufflePeriods_aggregate: room_ShufflePeriod_aggregate_order_by
    slug: order_by
    sponsorshipTiers_aggregate: sponsor_Tier_aggregate_order_by
    subconferences_aggregate: conference_Subconference_aggregate_order_by
    tags_aggregate: collection_Tag_aggregate_order_by
    updatedAt: order_by
}

"""
primary key columns input for table: conference_Conference
"""
input conference_Conference_pk_columns_input {
    id: uuid!
}

"""
select columns of table "conference.Conference"
"""
enum conference_Conference_select_column {
    """
    column name
    """
    announcementsChatId
    """
    column name
    """
    conferenceVisibilityLevel
    """
    column name
    """
    createdAt
    """
    column name
    """
    createdBy
    """
    column name
    """
    defaultProgramVisibilityLevel
    """
    column name
    """
    demoCodeId
    """
    column name
    """
    globalInviteCode
    """
    column name
    """
    id
    """
    column name
    """
    name
    """
    column name
    """
    shortName
    """
    column name
    """
    slug
    """
    column name
    """
    updatedAt
}

"""
input type for updating data in table "conference.Conference"
"""
input conference_Conference_set_input {
    announcementsChatId: uuid
    conferenceVisibilityLevel: conference_VisibilityLevel_enum
    createdAt: timestamptz
    createdBy: String
    defaultProgramVisibilityLevel: String
    demoCodeId: uuid
    globalInviteCode: uuid
    id: uuid
    name: String
    shortName: String
    slug: String
    updatedAt: timestamptz
}

"""
update columns of table "conference.Conference"
"""
enum conference_Conference_update_column {
    """
    column name
    """
    announcementsChatId
    """
    column name
    """
    conferenceVisibilityLevel
    """
    column name
    """
    createdAt
    """
    column name
    """
    createdBy
    """
    column name
    """
    defaultProgramVisibilityLevel
    """
    column name
    """
    demoCodeId
    """
    column name
    """
    globalInviteCode
    """
    column name
    """
    id
    """
    column name
    """
    name
    """
    column name
    """
    shortName
    """
    column name
    """
    slug
    """
    column name
    """
    updatedAt
}

"""
columns and relationships of "conference.Configuration"
"""
type conference_Configuration {
    """
    An object relationship
    """
    conference: conference_Conference!
    conferenceId: uuid!
    createdAt: timestamptz!
    key: conference_ConfigurationKey_enum!
    updatedAt: timestamptz!
    value(
        """
        JSON select path
        """
        path: String
    ): jsonb!
}

"""
columns and relationships of "conference.ConfigurationKey"
"""
type conference_ConfigurationKey {
    description: String!
    name: String!
}

"""
aggregated selection of "conference.ConfigurationKey"
"""
type conference_ConfigurationKey_aggregate {
    aggregate: conference_ConfigurationKey_aggregate_fields
    nodes: [conference_ConfigurationKey!]!
}

"""
aggregate fields of "conference.ConfigurationKey"
"""
type conference_ConfigurationKey_aggregate_fields {
    count(columns: [conference_ConfigurationKey_select_column!], distinct: Boolean): Int!
    max: conference_ConfigurationKey_max_fields
    min: conference_ConfigurationKey_min_fields
}

"""
Boolean expression to filter rows from the table "conference.ConfigurationKey". All fields are combined with a logical 'AND'.
"""
input conference_ConfigurationKey_bool_exp {
    _and: [conference_ConfigurationKey_bool_exp!]
    _not: conference_ConfigurationKey_bool_exp
    _or: [conference_ConfigurationKey_bool_exp!]
    description: String_comparison_exp
    name: String_comparison_exp
}

"""
unique or primary key constraints on table "conference.ConfigurationKey"
"""
enum conference_ConfigurationKey_constraint {
    """
    unique or primary key constraint
    """
    ConfigurationKey_pkey
}

enum conference_ConfigurationKey_enum {
    """
    Number. Milliseconds UTC. Time from which to stop sending initial invitations automatically.
    """
    AUTOMATIC_INVITATIONS_END
    """
    Number. Milliseconds UTC. Time from which to stop sending repeat emails for unaccepted invitations automatically.
    """
    AUTOMATIC_INVITATIONS_REPEAT_END
    """
    Number. Milliseconds. Time between sending repeat emails for unaccepted invitations.
    """
    AUTOMATIC_INVITATIONS_REPEAT_FREQUENCY
    """
    Number. Milliseconds UTC. Time from which to stop sending repeat emails for unaccepted invitations automatically.
    """
    AUTOMATIC_INVITATIONS_REPEAT_START
    """
    Number. Milliseconds UTC. Time from which to start sending initial invitations automatically.
    """
    AUTOMATIC_INVITATIONS_START
    """
    A list of videos to be used as the background for title/sponsor slides.
    """
    BACKGROUND_VIDEOS
    """
    A string representing the app version. Changing this causes the user's browsers to refresh.
    """
    CLOWDR_APP_VERSION
    """
    Boolean. Disable the "All times for this content" section of the Item pages.
    """
    DISABLE_ALL_EVENTS_FOR_ITEM
    """
    Boolean. Disable the "Events around this content" section of the Item pages.
    """
    DISABLE_NEARBY_EVENTS
    EMAIL_TEMPLATE_SUBMISSION_REQUEST
    EMAIL_TEMPLATE_SUBTITLES_GENERATED
    """
    Boolean. Whether to enable the backstage stream preview or not.
    """
    ENABLE_BACKSTAGE_STREAM_PREVIEW
    """
    Boolean. Whether to enable the External RTMP Broadcast feature.
    """
    ENABLE_EXTERNAL_RTMP_BROADCAST
    """
    Boolean. Whether to enable external RTMP input feature.
    """
    ENABLE_EXTERNAL_RTMP_INPUT
    """
    Whether to enable email notifications for recordings (default: true).
    """
    ENABLE_RECORDING_SUBTITLE_EMAIL_NOTIFICATIONS
    """
    Boolean. Hide the exhibition people from the event boxes in the schedule.
    """
    EVENT_BOX_HIDE_EXHIBITION_PEOPLE
    """
    List of S3 URLs.
    """
    FILLER_VIDEOS
    """
    Boolean. Switches on the Sponsors menu button (even if no sponsors exist).
    """
    FORCE_MENU_SPONSORS_LINK
    """
    A string representing the full frontend host URL for the conference. If not provided, this defaults to the system configuration.
    """
    FRONTEND_HOST
    """
    String. Name for hidden exhibitions. Default: "Exhibition"
    """
    HIDDEN_EXHIBITIONS_LABEL
    """
    An image to be displayed if AWS MediaLive loses input.
    """
    INPUT_LOSS_SLATE
    """
    Additional text for the My Backstages modal.
    """
    MY_BACKSTAGES_NOTICE
    """
    A string representing a valid URL for users to register for the conference.
    """
    REGISTRATION_URL
    """
    Select different versions of the schedule view.
    """
    SCHEDULE_VIEW_VERSION
    """
    String. Label for the "sponsors" in the sidebar for when a conference uses a different term.
    """
    SPONSORS_LABEL
    """
    A list of strings indicating which program people roles receive notifications (e.g. subtitles) about submissions. Default: ["PRESENTER","AUTHOR"].
    """
    SUBMISSION_NOTIFICATION_ROLES
    """
    A string representing a valid email address for contacting the conference organisers.
    """
    SUPPORT_ADDRESS
    """
    A string representing a valid email address for contacting the service hosting company for technical support related to the conference.
    """
    TECH_SUPPORT_ADDRESS
    """
    JSON representation of a custom Component Map colors object.
    """
    THEME_COMPONENT_COLORS
    """
    Text of the upload agreement or a URL to one.
    """
    UPLOAD_AGREEMENT
    """
    The time in milliseconds since the UNIX epoch, as a string.
    """
    UPLOAD_CUTOFF_TIMESTAMP
    """
    String. Name for visible exhibitions. Default: "Exhibition"
    """
    VISIBLE_EXHIBITIONS_LABEL
    """
    Integer. The maximum number of simultaneous screen shares allowed in Vonage video chats.
    """
    VONAGE_MAX_SIMULTANEOUS_SCREEN_SHARES
}

"""
Boolean expression to compare columns of type "conference_ConfigurationKey_enum". All fields are combined with logical 'AND'.
"""
input conference_ConfigurationKey_enum_comparison_exp {
    _eq: conference_ConfigurationKey_enum
    _in: [conference_ConfigurationKey_enum!]
    _is_null: Boolean
    _neq: conference_ConfigurationKey_enum
    _nin: [conference_ConfigurationKey_enum!]
}

"""
input type for inserting data into table "conference.ConfigurationKey"
"""
input conference_ConfigurationKey_insert_input {
    description: String
    name: String
}

"""
aggregate max on columns
"""
type conference_ConfigurationKey_max_fields {
    description: String
    name: String
}

"""
aggregate min on columns
"""
type conference_ConfigurationKey_min_fields {
    description: String
    name: String
}

"""
response of any mutation on the table "conference.ConfigurationKey"
"""
type conference_ConfigurationKey_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [conference_ConfigurationKey!]!
}

"""
on conflict condition type for table "conference.ConfigurationKey"
"""
input conference_ConfigurationKey_on_conflict {
    constraint: conference_ConfigurationKey_constraint!
    update_columns: [conference_ConfigurationKey_update_column!]! = []
    where: conference_ConfigurationKey_bool_exp
}

"""
Ordering options when selecting data from "conference.ConfigurationKey".
"""
input conference_ConfigurationKey_order_by {
    description: order_by
    name: order_by
}

"""
primary key columns input for table: conference_ConfigurationKey
"""
input conference_ConfigurationKey_pk_columns_input {
    name: String!
}

"""
select columns of table "conference.ConfigurationKey"
"""
enum conference_ConfigurationKey_select_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
input type for updating data in table "conference.ConfigurationKey"
"""
input conference_ConfigurationKey_set_input {
    description: String
    name: String
}

"""
update columns of table "conference.ConfigurationKey"
"""
enum conference_ConfigurationKey_update_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
aggregated selection of "conference.Configuration"
"""
type conference_Configuration_aggregate {
    aggregate: conference_Configuration_aggregate_fields
    nodes: [conference_Configuration!]!
}

"""
aggregate fields of "conference.Configuration"
"""
type conference_Configuration_aggregate_fields {
    count(columns: [conference_Configuration_select_column!], distinct: Boolean): Int!
    max: conference_Configuration_max_fields
    min: conference_Configuration_min_fields
}

"""
order by aggregate values of table "conference.Configuration"
"""
input conference_Configuration_aggregate_order_by {
    count: order_by
    max: conference_Configuration_max_order_by
    min: conference_Configuration_min_order_by
}

"""
append existing jsonb value of filtered columns with new jsonb value
"""
input conference_Configuration_append_input {
    value: jsonb
}

"""
input type for inserting array relation for remote table "conference.Configuration"
"""
input conference_Configuration_arr_rel_insert_input {
    data: [conference_Configuration_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: conference_Configuration_on_conflict
}

"""
Boolean expression to filter rows from the table "conference.Configuration". All fields are combined with a logical 'AND'.
"""
input conference_Configuration_bool_exp {
    _and: [conference_Configuration_bool_exp!]
    _not: conference_Configuration_bool_exp
    _or: [conference_Configuration_bool_exp!]
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    createdAt: timestamptz_comparison_exp
    key: conference_ConfigurationKey_enum_comparison_exp
    updatedAt: timestamptz_comparison_exp
    value: jsonb_comparison_exp
}

"""
unique or primary key constraints on table "conference.Configuration"
"""
enum conference_Configuration_constraint {
    """
    unique or primary key constraint
    """
    Configuration_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input conference_Configuration_delete_at_path_input {
    value: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input conference_Configuration_delete_elem_input {
    value: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input conference_Configuration_delete_key_input {
    value: String
}

"""
input type for inserting data into table "conference.Configuration"
"""
input conference_Configuration_insert_input {
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    createdAt: timestamptz
    key: conference_ConfigurationKey_enum
    updatedAt: timestamptz
    value: jsonb
}

"""
aggregate max on columns
"""
type conference_Configuration_max_fields {
    conferenceId: uuid
    createdAt: timestamptz
    updatedAt: timestamptz
}

"""
order by max() on columns of table "conference.Configuration"
"""
input conference_Configuration_max_order_by {
    conferenceId: order_by
    createdAt: order_by
    updatedAt: order_by
}

"""
aggregate min on columns
"""
type conference_Configuration_min_fields {
    conferenceId: uuid
    createdAt: timestamptz
    updatedAt: timestamptz
}

"""
order by min() on columns of table "conference.Configuration"
"""
input conference_Configuration_min_order_by {
    conferenceId: order_by
    createdAt: order_by
    updatedAt: order_by
}

"""
response of any mutation on the table "conference.Configuration"
"""
type conference_Configuration_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [conference_Configuration!]!
}

"""
on conflict condition type for table "conference.Configuration"
"""
input conference_Configuration_on_conflict {
    constraint: conference_Configuration_constraint!
    update_columns: [conference_Configuration_update_column!]! = []
    where: conference_Configuration_bool_exp
}

"""
Ordering options when selecting data from "conference.Configuration".
"""
input conference_Configuration_order_by {
    conference: conference_Conference_order_by
    conferenceId: order_by
    createdAt: order_by
    key: order_by
    updatedAt: order_by
    value: order_by
}

"""
primary key columns input for table: conference_Configuration
"""
input conference_Configuration_pk_columns_input {
    conferenceId: uuid!
    key: conference_ConfigurationKey_enum!
}

"""
prepend existing jsonb value of filtered columns with new jsonb value
"""
input conference_Configuration_prepend_input {
    value: jsonb
}

"""
select columns of table "conference.Configuration"
"""
enum conference_Configuration_select_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    key
    """
    column name
    """
    updatedAt
    """
    column name
    """
    value
}

"""
input type for updating data in table "conference.Configuration"
"""
input conference_Configuration_set_input {
    conferenceId: uuid
    createdAt: timestamptz
    key: conference_ConfigurationKey_enum
    updatedAt: timestamptz
    value: jsonb
}

"""
update columns of table "conference.Configuration"
"""
enum conference_Configuration_update_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    key
    """
    column name
    """
    updatedAt
    """
    column name
    """
    value
}

"""
columns and relationships of "conference.DemoCode"
"""
type conference_DemoCode {
    """
    An object relationship
    """
    conference: conference_Conference
    createdAt: timestamptz!
    id: uuid!
    note: String
    updatedAt: timestamptz!
    """
    An object relationship
    """
    usedBy: User
    usedById: String
}

"""
aggregated selection of "conference.DemoCode"
"""
type conference_DemoCode_aggregate {
    aggregate: conference_DemoCode_aggregate_fields
    nodes: [conference_DemoCode!]!
}

"""
aggregate fields of "conference.DemoCode"
"""
type conference_DemoCode_aggregate_fields {
    count(columns: [conference_DemoCode_select_column!], distinct: Boolean): Int!
    max: conference_DemoCode_max_fields
    min: conference_DemoCode_min_fields
}

"""
order by aggregate values of table "conference.DemoCode"
"""
input conference_DemoCode_aggregate_order_by {
    count: order_by
    max: conference_DemoCode_max_order_by
    min: conference_DemoCode_min_order_by
}

"""
input type for inserting array relation for remote table "conference.DemoCode"
"""
input conference_DemoCode_arr_rel_insert_input {
    data: [conference_DemoCode_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: conference_DemoCode_on_conflict
}

"""
Boolean expression to filter rows from the table "conference.DemoCode". All fields are combined with a logical 'AND'.
"""
input conference_DemoCode_bool_exp {
    _and: [conference_DemoCode_bool_exp!]
    _not: conference_DemoCode_bool_exp
    _or: [conference_DemoCode_bool_exp!]
    conference: conference_Conference_bool_exp
    createdAt: timestamptz_comparison_exp
    id: uuid_comparison_exp
    note: String_comparison_exp
    updatedAt: timestamptz_comparison_exp
    usedBy: User_bool_exp
    usedById: String_comparison_exp
}

"""
unique or primary key constraints on table "conference.DemoCode"
"""
enum conference_DemoCode_constraint {
    """
    unique or primary key constraint
    """
    DemoCode_pkey
}

"""
input type for inserting data into table "conference.DemoCode"
"""
input conference_DemoCode_insert_input {
    conference: conference_Conference_obj_rel_insert_input
    createdAt: timestamptz
    id: uuid
    note: String
    updatedAt: timestamptz
    usedBy: User_obj_rel_insert_input
    usedById: String
}

"""
aggregate max on columns
"""
type conference_DemoCode_max_fields {
    createdAt: timestamptz
    id: uuid
    note: String
    updatedAt: timestamptz
    usedById: String
}

"""
order by max() on columns of table "conference.DemoCode"
"""
input conference_DemoCode_max_order_by {
    createdAt: order_by
    id: order_by
    note: order_by
    updatedAt: order_by
    usedById: order_by
}

"""
aggregate min on columns
"""
type conference_DemoCode_min_fields {
    createdAt: timestamptz
    id: uuid
    note: String
    updatedAt: timestamptz
    usedById: String
}

"""
order by min() on columns of table "conference.DemoCode"
"""
input conference_DemoCode_min_order_by {
    createdAt: order_by
    id: order_by
    note: order_by
    updatedAt: order_by
    usedById: order_by
}

"""
response of any mutation on the table "conference.DemoCode"
"""
type conference_DemoCode_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [conference_DemoCode!]!
}

"""
input type for inserting object relation for remote table "conference.DemoCode"
"""
input conference_DemoCode_obj_rel_insert_input {
    data: conference_DemoCode_insert_input!
    """
    on conflict condition
    """
    on_conflict: conference_DemoCode_on_conflict
}

"""
on conflict condition type for table "conference.DemoCode"
"""
input conference_DemoCode_on_conflict {
    constraint: conference_DemoCode_constraint!
    update_columns: [conference_DemoCode_update_column!]! = []
    where: conference_DemoCode_bool_exp
}

"""
Ordering options when selecting data from "conference.DemoCode".
"""
input conference_DemoCode_order_by {
    conference: conference_Conference_order_by
    createdAt: order_by
    id: order_by
    note: order_by
    updatedAt: order_by
    usedBy: User_order_by
    usedById: order_by
}

"""
primary key columns input for table: conference_DemoCode
"""
input conference_DemoCode_pk_columns_input {
    id: uuid!
}

"""
select columns of table "conference.DemoCode"
"""
enum conference_DemoCode_select_column {
    """
    column name
    """
    createdAt
    """
    column name
    """
    id
    """
    column name
    """
    note
    """
    column name
    """
    updatedAt
    """
    column name
    """
    usedById
}

"""
input type for updating data in table "conference.DemoCode"
"""
input conference_DemoCode_set_input {
    createdAt: timestamptz
    id: uuid
    note: String
    updatedAt: timestamptz
    usedById: String
}

"""
update columns of table "conference.DemoCode"
"""
enum conference_DemoCode_update_column {
    """
    column name
    """
    createdAt
    """
    column name
    """
    id
    """
    column name
    """
    note
    """
    column name
    """
    updatedAt
    """
    column name
    """
    usedById
}

"""
columns and relationships of "conference.Subconference"
"""
type conference_Subconference {
    """
    An object relationship
    """
    conference: conference_Conference!
    conferenceId: uuid!
    conferenceVisibilityLevel: conference_VisibilityLevel_enum!
    created_at: timestamptz!
    defaultProgramVisibilityLevel: conference_VisibilityLevel_enum!
    id: uuid!
    name: String!
    shortName: String!
    slug: String!
    """
    An array relationship
    """
    sponsorshipTiers(
        """
        distinct select on columns
        """
        distinct_on: [sponsor_Tier_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [sponsor_Tier_order_by!]
        """
        filter the rows returned
        """
        where: sponsor_Tier_bool_exp
    ): [sponsor_Tier!]!
    """
    An aggregate relationship
    """
    sponsorshipTiers_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [sponsor_Tier_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [sponsor_Tier_order_by!]
        """
        filter the rows returned
        """
        where: sponsor_Tier_bool_exp
    ): sponsor_Tier_aggregate!
    updated_at: timestamptz!
}

"""
aggregated selection of "conference.Subconference"
"""
type conference_Subconference_aggregate {
    aggregate: conference_Subconference_aggregate_fields
    nodes: [conference_Subconference!]!
}

"""
aggregate fields of "conference.Subconference"
"""
type conference_Subconference_aggregate_fields {
    count(columns: [conference_Subconference_select_column!], distinct: Boolean): Int!
    max: conference_Subconference_max_fields
    min: conference_Subconference_min_fields
}

"""
order by aggregate values of table "conference.Subconference"
"""
input conference_Subconference_aggregate_order_by {
    count: order_by
    max: conference_Subconference_max_order_by
    min: conference_Subconference_min_order_by
}

"""
input type for inserting array relation for remote table "conference.Subconference"
"""
input conference_Subconference_arr_rel_insert_input {
    data: [conference_Subconference_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: conference_Subconference_on_conflict
}

"""
Boolean expression to filter rows from the table "conference.Subconference". All fields are combined with a logical 'AND'.
"""
input conference_Subconference_bool_exp {
    _and: [conference_Subconference_bool_exp!]
    _not: conference_Subconference_bool_exp
    _or: [conference_Subconference_bool_exp!]
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    conferenceVisibilityLevel: conference_VisibilityLevel_enum_comparison_exp
    created_at: timestamptz_comparison_exp
    defaultProgramVisibilityLevel: conference_VisibilityLevel_enum_comparison_exp
    id: uuid_comparison_exp
    name: String_comparison_exp
    shortName: String_comparison_exp
    slug: String_comparison_exp
    sponsorshipTiers: sponsor_Tier_bool_exp
    updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "conference.Subconference"
"""
enum conference_Subconference_constraint {
    """
    unique or primary key constraint
    """
    Subconference_conferenceId_name_key
    """
    unique or primary key constraint
    """
    Subconference_conferenceId_shortName_key
    """
    unique or primary key constraint
    """
    Subconference_conferenceId_slug_key
    """
    unique or primary key constraint
    """
    Subconference_pkey
}

"""
input type for inserting data into table "conference.Subconference"
"""
input conference_Subconference_insert_input {
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    conferenceVisibilityLevel: conference_VisibilityLevel_enum
    created_at: timestamptz
    defaultProgramVisibilityLevel: conference_VisibilityLevel_enum
    id: uuid
    name: String
    shortName: String
    slug: String
    sponsorshipTiers: sponsor_Tier_arr_rel_insert_input
    updated_at: timestamptz
}

"""
aggregate max on columns
"""
type conference_Subconference_max_fields {
    conferenceId: uuid
    created_at: timestamptz
    id: uuid
    name: String
    shortName: String
    slug: String
    updated_at: timestamptz
}

"""
order by max() on columns of table "conference.Subconference"
"""
input conference_Subconference_max_order_by {
    conferenceId: order_by
    created_at: order_by
    id: order_by
    name: order_by
    shortName: order_by
    slug: order_by
    updated_at: order_by
}

"""
aggregate min on columns
"""
type conference_Subconference_min_fields {
    conferenceId: uuid
    created_at: timestamptz
    id: uuid
    name: String
    shortName: String
    slug: String
    updated_at: timestamptz
}

"""
order by min() on columns of table "conference.Subconference"
"""
input conference_Subconference_min_order_by {
    conferenceId: order_by
    created_at: order_by
    id: order_by
    name: order_by
    shortName: order_by
    slug: order_by
    updated_at: order_by
}

"""
response of any mutation on the table "conference.Subconference"
"""
type conference_Subconference_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [conference_Subconference!]!
}

"""
input type for inserting object relation for remote table "conference.Subconference"
"""
input conference_Subconference_obj_rel_insert_input {
    data: conference_Subconference_insert_input!
    """
    on conflict condition
    """
    on_conflict: conference_Subconference_on_conflict
}

"""
on conflict condition type for table "conference.Subconference"
"""
input conference_Subconference_on_conflict {
    constraint: conference_Subconference_constraint!
    update_columns: [conference_Subconference_update_column!]! = []
    where: conference_Subconference_bool_exp
}

"""
Ordering options when selecting data from "conference.Subconference".
"""
input conference_Subconference_order_by {
    conference: conference_Conference_order_by
    conferenceId: order_by
    conferenceVisibilityLevel: order_by
    created_at: order_by
    defaultProgramVisibilityLevel: order_by
    id: order_by
    name: order_by
    shortName: order_by
    slug: order_by
    sponsorshipTiers_aggregate: sponsor_Tier_aggregate_order_by
    updated_at: order_by
}

"""
primary key columns input for table: conference_Subconference
"""
input conference_Subconference_pk_columns_input {
    id: uuid!
}

"""
select columns of table "conference.Subconference"
"""
enum conference_Subconference_select_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    conferenceVisibilityLevel
    """
    column name
    """
    created_at
    """
    column name
    """
    defaultProgramVisibilityLevel
    """
    column name
    """
    id
    """
    column name
    """
    name
    """
    column name
    """
    shortName
    """
    column name
    """
    slug
    """
    column name
    """
    updated_at
}

"""
input type for updating data in table "conference.Subconference"
"""
input conference_Subconference_set_input {
    conferenceId: uuid
    conferenceVisibilityLevel: conference_VisibilityLevel_enum
    created_at: timestamptz
    defaultProgramVisibilityLevel: conference_VisibilityLevel_enum
    id: uuid
    name: String
    shortName: String
    slug: String
    updated_at: timestamptz
}

"""
update columns of table "conference.Subconference"
"""
enum conference_Subconference_update_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    conferenceVisibilityLevel
    """
    column name
    """
    created_at
    """
    column name
    """
    defaultProgramVisibilityLevel
    """
    column name
    """
    id
    """
    column name
    """
    name
    """
    column name
    """
    shortName
    """
    column name
    """
    slug
    """
    column name
    """
    updated_at
}

"""
columns and relationships of "conference.VisibilityLevel"
"""
type conference_VisibilityLevel {
    description: String
    name: String!
}

"""
aggregated selection of "conference.VisibilityLevel"
"""
type conference_VisibilityLevel_aggregate {
    aggregate: conference_VisibilityLevel_aggregate_fields
    nodes: [conference_VisibilityLevel!]!
}

"""
aggregate fields of "conference.VisibilityLevel"
"""
type conference_VisibilityLevel_aggregate_fields {
    count(columns: [conference_VisibilityLevel_select_column!], distinct: Boolean): Int!
    max: conference_VisibilityLevel_max_fields
    min: conference_VisibilityLevel_min_fields
}

"""
Boolean expression to filter rows from the table "conference.VisibilityLevel". All fields are combined with a logical 'AND'.
"""
input conference_VisibilityLevel_bool_exp {
    _and: [conference_VisibilityLevel_bool_exp!]
    _not: conference_VisibilityLevel_bool_exp
    _or: [conference_VisibilityLevel_bool_exp!]
    description: String_comparison_exp
    name: String_comparison_exp
}

"""
unique or primary key constraints on table "conference.VisibilityLevel"
"""
enum conference_VisibilityLevel_constraint {
    """
    unique or primary key constraint
    """
    VisibilityLevel_pkey
}

enum conference_VisibilityLevel_enum {
    EXTERNAL
    INTERNAL
    PRIVATE
    PUBLIC
    """
    Primarily intended for content elements, this visibility level specifies that _only_ unauthenticated users (the general public) should be able to view the element. That is to say, registrants should not see the element. For instance, this may be used to show a registration link button only to unregistered users.
    """
    PUBLIC_ONLY
}

"""
Boolean expression to compare columns of type "conference_VisibilityLevel_enum". All fields are combined with logical 'AND'.
"""
input conference_VisibilityLevel_enum_comparison_exp {
    _eq: conference_VisibilityLevel_enum
    _in: [conference_VisibilityLevel_enum!]
    _is_null: Boolean
    _neq: conference_VisibilityLevel_enum
    _nin: [conference_VisibilityLevel_enum!]
}

"""
input type for inserting data into table "conference.VisibilityLevel"
"""
input conference_VisibilityLevel_insert_input {
    description: String
    name: String
}

"""
aggregate max on columns
"""
type conference_VisibilityLevel_max_fields {
    description: String
    name: String
}

"""
aggregate min on columns
"""
type conference_VisibilityLevel_min_fields {
    description: String
    name: String
}

"""
response of any mutation on the table "conference.VisibilityLevel"
"""
type conference_VisibilityLevel_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [conference_VisibilityLevel!]!
}

"""
on conflict condition type for table "conference.VisibilityLevel"
"""
input conference_VisibilityLevel_on_conflict {
    constraint: conference_VisibilityLevel_constraint!
    update_columns: [conference_VisibilityLevel_update_column!]! = []
    where: conference_VisibilityLevel_bool_exp
}

"""
Ordering options when selecting data from "conference.VisibilityLevel".
"""
input conference_VisibilityLevel_order_by {
    description: order_by
    name: order_by
}

"""
primary key columns input for table: conference_VisibilityLevel
"""
input conference_VisibilityLevel_pk_columns_input {
    name: String!
}

"""
select columns of table "conference.VisibilityLevel"
"""
enum conference_VisibilityLevel_select_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
input type for updating data in table "conference.VisibilityLevel"
"""
input conference_VisibilityLevel_set_input {
    description: String
    name: String
}

"""
update columns of table "conference.VisibilityLevel"
"""
enum conference_VisibilityLevel_update_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
columns and relationships of "content.Element"
"""
type content_Element {
    """
    An object relationship
    """
    conference: conference_Conference!
    conferenceId: uuid!
    createdAt: timestamptz!
    data(
        """
        JSON select path
        """
        path: String
    ): jsonb!
    """
    A computed field, executes function "content.elementHasBeenSubmitted"
    """
    hasBeenSubmitted: Boolean
    id: uuid!
    isHidden: Boolean!
    """
    An object relationship
    """
    item: content_Item!
    itemId: uuid!
    """
    A computed field, executes function "content.Element_itemTitle"
    """
    itemTitle: String
    layoutData(
        """
        JSON select path
        """
        path: String
    ): jsonb
    name: String!
    source(
        """
        JSON select path
        """
        path: String
    ): jsonb
    """
    An array relationship
    """
    stats(
        """
        distinct select on columns
        """
        distinct_on: [analytics_ContentElementStats_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_ContentElementStats_order_by!]
        """
        filter the rows returned
        """
        where: analytics_ContentElementStats_bool_exp
    ): [analytics_ContentElementStats!]!
    """
    An aggregate relationship
    """
    stats_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [analytics_ContentElementStats_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_ContentElementStats_order_by!]
        """
        filter the rows returned
        """
        where: analytics_ContentElementStats_bool_exp
    ): analytics_ContentElementStats_aggregate!
    subconferenceId: uuid
    """
    An object relationship
    """
    totalViewsStat: analytics_ElementTotalViews
    """
    An object relationship
    """
    type: content_ElementType!
    typeName: content_ElementType_enum!
    updatedAt: timestamptz!
    uploadsRemaining: Int
    visibilityLevel: conference_VisibilityLevel_enum!
    """
    An array relationship
    """
    youTubeUploads(
        """
        distinct select on columns
        """
        distinct_on: [video_YouTubeUpload_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_YouTubeUpload_order_by!]
        """
        filter the rows returned
        """
        where: video_YouTubeUpload_bool_exp
    ): [video_YouTubeUpload!]!
    """
    An aggregate relationship
    """
    youTubeUploads_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_YouTubeUpload_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_YouTubeUpload_order_by!]
        """
        filter the rows returned
        """
        where: video_YouTubeUpload_bool_exp
    ): video_YouTubeUpload_aggregate!
}

"""
columns and relationships of "content.ElementType"
"""
type content_ElementType {
    description: String!
    name: String!
}

"""
aggregated selection of "content.ElementType"
"""
type content_ElementType_aggregate {
    aggregate: content_ElementType_aggregate_fields
    nodes: [content_ElementType!]!
}

"""
aggregate fields of "content.ElementType"
"""
type content_ElementType_aggregate_fields {
    count(columns: [content_ElementType_select_column!], distinct: Boolean): Int!
    max: content_ElementType_max_fields
    min: content_ElementType_min_fields
}

"""
Boolean expression to filter rows from the table "content.ElementType". All fields are combined with a logical 'AND'.
"""
input content_ElementType_bool_exp {
    _and: [content_ElementType_bool_exp!]
    _not: content_ElementType_bool_exp
    _or: [content_ElementType_bool_exp!]
    description: String_comparison_exp
    name: String_comparison_exp
}

"""
unique or primary key constraints on table "content.ElementType"
"""
enum content_ElementType_constraint {
    """
    unique or primary key constraint
    """
    ElementType_pkey
}

enum content_ElementType_enum {
    """
    Abstract Markdown text.
    """
    ABSTRACT
    """
    Show a summary of the currently active social and discussion rooms
    """
    ACTIVE_SOCIAL_ROOMS
    """
    File for an audio clip (stored by Clowdr).
    """
    AUDIO_FILE
    """
    Link to an audio clip (audio is not embedded in Clowdr UI).
    """
    AUDIO_LINK
    """
    URL for an audio clip (audio is embedded in Clowdr UI).
    """
    AUDIO_URL
    """
    List of content groups in the system.
    """
    CONTENT_GROUP_LIST
    """
    A horizontal divider
    """
    DIVIDER
    """
    Button that opens the explore program modal. Intended for use on the landing page.
    """
    EXPLORE_PROGRAM_BUTTON
    """
    Button that opens the explore program modal with the Schedule tab open. Intended for use on the landing page.
    """
    EXPLORE_SCHEDULE_BUTTON
    """
    File for an image (stored by Clowdr).
    """
    IMAGE_FILE
    """
    URL to an image (embedded in Clowdr UI).
    """
    IMAGE_URL
    """
    A generic URL.
    """
    LINK
    """
    A URL for a link button.
    """
    LINK_BUTTON
    """
    Show a summary of the currently live program rooms
    """
    LIVE_PROGRAM_ROOMS
    """
    File for a paper (stored by Clowdr).
    """
    PAPER_FILE
    """
    Link for a paper (preview is not embedded in Clowdr UI).
    """
    PAPER_LINK
    """
    URL to a paper (preview may be embedded in Clowdr UI e.g. PDF JS viewer).
    """
    PAPER_URL
    """
    File for a poster image (stored by Clowdr).
    """
    POSTER_FILE
    """
    URL to a poster image (embedded in Clowdr UI).
    """
    POSTER_URL
    """
    Show a summary of the sponsor booths
    """
    SPONSOR_BOOTHS
    """
    General-purpose Markdown text.
    """
    TEXT
    """
    Video file to be broadcast.
    """
    VIDEO_BROADCAST
    """
    Video file for counting down to a transition in a broadcast.
    """
    VIDEO_COUNTDOWN
    """
    File for a video (stored by Clowdr).
    """
    VIDEO_FILE
    """
    Video file for filler loop between events/during breaks in a broadcast.
    """
    VIDEO_FILLER
    """
    Link to a video (video is not embedded in Clowdr UI).
    """
    VIDEO_LINK
    """
    Video file to be published in advance of the conference.
    """
    VIDEO_PREPUBLISH
    """
    Video file for sponsors filler loop between events/during breaks in a broadcast.
    """
    VIDEO_SPONSORS_FILLER
    """
    Video file for titles introducing an event during a broadcast.
    """
    VIDEO_TITLES
    """
    URL for a video (video is embedded in Clowdr UI).
    """
    VIDEO_URL
    """
    Schedule view for the whole conference.
    """
    WHOLE_SCHEDULE
    """
    Data for a Zoom meeting.
    """
    ZOOM
}

"""
Boolean expression to compare columns of type "content_ElementType_enum". All fields are combined with logical 'AND'.
"""
input content_ElementType_enum_comparison_exp {
    _eq: content_ElementType_enum
    _in: [content_ElementType_enum!]
    _is_null: Boolean
    _neq: content_ElementType_enum
    _nin: [content_ElementType_enum!]
}

"""
input type for inserting data into table "content.ElementType"
"""
input content_ElementType_insert_input {
    description: String
    name: String
}

"""
aggregate max on columns
"""
type content_ElementType_max_fields {
    description: String
    name: String
}

"""
aggregate min on columns
"""
type content_ElementType_min_fields {
    description: String
    name: String
}

"""
response of any mutation on the table "content.ElementType"
"""
type content_ElementType_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [content_ElementType!]!
}

"""
input type for inserting object relation for remote table "content.ElementType"
"""
input content_ElementType_obj_rel_insert_input {
    data: content_ElementType_insert_input!
    """
    on conflict condition
    """
    on_conflict: content_ElementType_on_conflict
}

"""
on conflict condition type for table "content.ElementType"
"""
input content_ElementType_on_conflict {
    constraint: content_ElementType_constraint!
    update_columns: [content_ElementType_update_column!]! = []
    where: content_ElementType_bool_exp
}

"""
Ordering options when selecting data from "content.ElementType".
"""
input content_ElementType_order_by {
    description: order_by
    name: order_by
}

"""
primary key columns input for table: content_ElementType
"""
input content_ElementType_pk_columns_input {
    name: String!
}

"""
select columns of table "content.ElementType"
"""
enum content_ElementType_select_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
input type for updating data in table "content.ElementType"
"""
input content_ElementType_set_input {
    description: String
    name: String
}

"""
update columns of table "content.ElementType"
"""
enum content_ElementType_update_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
aggregated selection of "content.Element"
"""
type content_Element_aggregate {
    aggregate: content_Element_aggregate_fields
    nodes: [content_Element!]!
}

"""
aggregate fields of "content.Element"
"""
type content_Element_aggregate_fields {
    avg: content_Element_avg_fields
    count(columns: [content_Element_select_column!], distinct: Boolean): Int!
    max: content_Element_max_fields
    min: content_Element_min_fields
    stddev: content_Element_stddev_fields
    stddev_pop: content_Element_stddev_pop_fields
    stddev_samp: content_Element_stddev_samp_fields
    sum: content_Element_sum_fields
    var_pop: content_Element_var_pop_fields
    var_samp: content_Element_var_samp_fields
    variance: content_Element_variance_fields
}

"""
order by aggregate values of table "content.Element"
"""
input content_Element_aggregate_order_by {
    avg: content_Element_avg_order_by
    count: order_by
    max: content_Element_max_order_by
    min: content_Element_min_order_by
    stddev: content_Element_stddev_order_by
    stddev_pop: content_Element_stddev_pop_order_by
    stddev_samp: content_Element_stddev_samp_order_by
    sum: content_Element_sum_order_by
    var_pop: content_Element_var_pop_order_by
    var_samp: content_Element_var_samp_order_by
    variance: content_Element_variance_order_by
}

"""
append existing jsonb value of filtered columns with new jsonb value
"""
input content_Element_append_input {
    data: jsonb
    layoutData: jsonb
    source: jsonb
}

"""
input type for inserting array relation for remote table "content.Element"
"""
input content_Element_arr_rel_insert_input {
    data: [content_Element_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: content_Element_on_conflict
}

"""
aggregate avg on columns
"""
type content_Element_avg_fields {
    uploadsRemaining: Float
}

"""
order by avg() on columns of table "content.Element"
"""
input content_Element_avg_order_by {
    uploadsRemaining: order_by
}

"""
Boolean expression to filter rows from the table "content.Element". All fields are combined with a logical 'AND'.
"""
input content_Element_bool_exp {
    _and: [content_Element_bool_exp!]
    _not: content_Element_bool_exp
    _or: [content_Element_bool_exp!]
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    createdAt: timestamptz_comparison_exp
    data: jsonb_comparison_exp
    hasBeenSubmitted: Boolean_comparison_exp
    id: uuid_comparison_exp
    isHidden: Boolean_comparison_exp
    item: content_Item_bool_exp
    itemId: uuid_comparison_exp
    itemTitle: String_comparison_exp
    layoutData: jsonb_comparison_exp
    name: String_comparison_exp
    source: jsonb_comparison_exp
    stats: analytics_ContentElementStats_bool_exp
    subconferenceId: uuid_comparison_exp
    totalViewsStat: analytics_ElementTotalViews_bool_exp
    type: content_ElementType_bool_exp
    typeName: content_ElementType_enum_comparison_exp
    updatedAt: timestamptz_comparison_exp
    uploadsRemaining: Int_comparison_exp
    visibilityLevel: conference_VisibilityLevel_enum_comparison_exp
    youTubeUploads: video_YouTubeUpload_bool_exp
}

"""
unique or primary key constraints on table "content.Element"
"""
enum content_Element_constraint {
    """
    unique or primary key constraint
    """
    Element_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input content_Element_delete_at_path_input {
    data: [String!]
    layoutData: [String!]
    source: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input content_Element_delete_elem_input {
    data: Int
    layoutData: Int
    source: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input content_Element_delete_key_input {
    data: String
    layoutData: String
    source: String
}

"""
input type for incrementing numeric columns in table "content.Element"
"""
input content_Element_inc_input {
    uploadsRemaining: Int
}

"""
input type for inserting data into table "content.Element"
"""
input content_Element_insert_input {
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    createdAt: timestamptz
    data: jsonb
    id: uuid
    isHidden: Boolean
    item: content_Item_obj_rel_insert_input
    itemId: uuid
    layoutData: jsonb
    name: String
    source: jsonb
    stats: analytics_ContentElementStats_arr_rel_insert_input
    subconferenceId: uuid
    totalViewsStat: analytics_ElementTotalViews_obj_rel_insert_input
    type: content_ElementType_obj_rel_insert_input
    typeName: content_ElementType_enum
    updatedAt: timestamptz
    uploadsRemaining: Int
    visibilityLevel: conference_VisibilityLevel_enum
    youTubeUploads: video_YouTubeUpload_arr_rel_insert_input
}

"""
aggregate max on columns
"""
type content_Element_max_fields {
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    itemId: uuid
    name: String
    subconferenceId: uuid
    updatedAt: timestamptz
    uploadsRemaining: Int
}

"""
order by max() on columns of table "content.Element"
"""
input content_Element_max_order_by {
    conferenceId: order_by
    createdAt: order_by
    id: order_by
    itemId: order_by
    name: order_by
    subconferenceId: order_by
    updatedAt: order_by
    uploadsRemaining: order_by
}

"""
aggregate min on columns
"""
type content_Element_min_fields {
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    itemId: uuid
    name: String
    subconferenceId: uuid
    updatedAt: timestamptz
    uploadsRemaining: Int
}

"""
order by min() on columns of table "content.Element"
"""
input content_Element_min_order_by {
    conferenceId: order_by
    createdAt: order_by
    id: order_by
    itemId: order_by
    name: order_by
    subconferenceId: order_by
    updatedAt: order_by
    uploadsRemaining: order_by
}

"""
response of any mutation on the table "content.Element"
"""
type content_Element_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [content_Element!]!
}

"""
input type for inserting object relation for remote table "content.Element"
"""
input content_Element_obj_rel_insert_input {
    data: content_Element_insert_input!
    """
    on conflict condition
    """
    on_conflict: content_Element_on_conflict
}

"""
on conflict condition type for table "content.Element"
"""
input content_Element_on_conflict {
    constraint: content_Element_constraint!
    update_columns: [content_Element_update_column!]! = []
    where: content_Element_bool_exp
}

"""
Ordering options when selecting data from "content.Element".
"""
input content_Element_order_by {
    conference: conference_Conference_order_by
    conferenceId: order_by
    createdAt: order_by
    data: order_by
    hasBeenSubmitted: order_by
    id: order_by
    isHidden: order_by
    item: content_Item_order_by
    itemId: order_by
    itemTitle: order_by
    layoutData: order_by
    name: order_by
    source: order_by
    stats_aggregate: analytics_ContentElementStats_aggregate_order_by
    subconferenceId: order_by
    totalViewsStat: analytics_ElementTotalViews_order_by
    type: content_ElementType_order_by
    typeName: order_by
    updatedAt: order_by
    uploadsRemaining: order_by
    visibilityLevel: order_by
    youTubeUploads_aggregate: video_YouTubeUpload_aggregate_order_by
}

"""
primary key columns input for table: content_Element
"""
input content_Element_pk_columns_input {
    id: uuid!
}

"""
prepend existing jsonb value of filtered columns with new jsonb value
"""
input content_Element_prepend_input {
    data: jsonb
    layoutData: jsonb
    source: jsonb
}

"""
select columns of table "content.Element"
"""
enum content_Element_select_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    data
    """
    column name
    """
    id
    """
    column name
    """
    isHidden
    """
    column name
    """
    itemId
    """
    column name
    """
    layoutData
    """
    column name
    """
    name
    """
    column name
    """
    source
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    typeName
    """
    column name
    """
    updatedAt
    """
    column name
    """
    uploadsRemaining
    """
    column name
    """
    visibilityLevel
}

"""
input type for updating data in table "content.Element"
"""
input content_Element_set_input {
    conferenceId: uuid
    createdAt: timestamptz
    data: jsonb
    id: uuid
    isHidden: Boolean
    itemId: uuid
    layoutData: jsonb
    name: String
    source: jsonb
    subconferenceId: uuid
    typeName: content_ElementType_enum
    updatedAt: timestamptz
    uploadsRemaining: Int
    visibilityLevel: conference_VisibilityLevel_enum
}

"""
aggregate stddev on columns
"""
type content_Element_stddev_fields {
    uploadsRemaining: Float
}

"""
order by stddev() on columns of table "content.Element"
"""
input content_Element_stddev_order_by {
    uploadsRemaining: order_by
}

"""
aggregate stddev_pop on columns
"""
type content_Element_stddev_pop_fields {
    uploadsRemaining: Float
}

"""
order by stddev_pop() on columns of table "content.Element"
"""
input content_Element_stddev_pop_order_by {
    uploadsRemaining: order_by
}

"""
aggregate stddev_samp on columns
"""
type content_Element_stddev_samp_fields {
    uploadsRemaining: Float
}

"""
order by stddev_samp() on columns of table "content.Element"
"""
input content_Element_stddev_samp_order_by {
    uploadsRemaining: order_by
}

"""
aggregate sum on columns
"""
type content_Element_sum_fields {
    uploadsRemaining: Int
}

"""
order by sum() on columns of table "content.Element"
"""
input content_Element_sum_order_by {
    uploadsRemaining: order_by
}

"""
update columns of table "content.Element"
"""
enum content_Element_update_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    data
    """
    column name
    """
    id
    """
    column name
    """
    isHidden
    """
    column name
    """
    itemId
    """
    column name
    """
    layoutData
    """
    column name
    """
    name
    """
    column name
    """
    source
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    typeName
    """
    column name
    """
    updatedAt
    """
    column name
    """
    uploadsRemaining
    """
    column name
    """
    visibilityLevel
}

"""
aggregate var_pop on columns
"""
type content_Element_var_pop_fields {
    uploadsRemaining: Float
}

"""
order by var_pop() on columns of table "content.Element"
"""
input content_Element_var_pop_order_by {
    uploadsRemaining: order_by
}

"""
aggregate var_samp on columns
"""
type content_Element_var_samp_fields {
    uploadsRemaining: Float
}

"""
order by var_samp() on columns of table "content.Element"
"""
input content_Element_var_samp_order_by {
    uploadsRemaining: order_by
}

"""
aggregate variance on columns
"""
type content_Element_variance_fields {
    uploadsRemaining: Float
}

"""
order by variance() on columns of table "content.Element"
"""
input content_Element_variance_order_by {
    uploadsRemaining: order_by
}

"""
columns and relationships of "content.Item"
"""
type content_Item {
    """
    An object relationship
    """
    chat: chat_Chat
    chatId: uuid
    """
    An object relationship
    """
    conference: conference_Conference!
    conferenceId: uuid!
    createdAt: timestamptz!
    """
    An array relationship
    """
    descriptionOfExhibitions(
        """
        distinct select on columns
        """
        distinct_on: [collection_Exhibition_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [collection_Exhibition_order_by!]
        """
        filter the rows returned
        """
        where: collection_Exhibition_bool_exp
    ): [collection_Exhibition!]!
    """
    An aggregate relationship
    """
    descriptionOfExhibitions_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [collection_Exhibition_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [collection_Exhibition_order_by!]
        """
        filter the rows returned
        """
        where: collection_Exhibition_bool_exp
    ): collection_Exhibition_aggregate!
    """
    An array relationship
    """
    elements(
        """
        distinct select on columns
        """
        distinct_on: [content_Element_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_Element_order_by!]
        """
        filter the rows returned
        """
        where: content_Element_bool_exp
    ): [content_Element!]!
    """
    An aggregate relationship
    """
    elements_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [content_Element_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_Element_order_by!]
        """
        filter the rows returned
        """
        where: content_Element_bool_exp
    ): content_Element_aggregate!
    """
    An array relationship
    """
    events(
        """
        distinct select on columns
        """
        distinct_on: [schedule_Event_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_Event_order_by!]
        """
        filter the rows returned
        """
        where: schedule_Event_bool_exp
    ): [schedule_Event!]!
    """
    An aggregate relationship
    """
    events_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [schedule_Event_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_Event_order_by!]
        """
        filter the rows returned
        """
        where: schedule_Event_bool_exp
    ): schedule_Event_aggregate!
    """
    A computed field, executes function "content.itemHasUnsubmittedElements"
    """
    hasUnsubmittedElements: Boolean
    id: uuid!
    """
    An array relationship
    """
    itemExhibitions(
        """
        distinct select on columns
        """
        distinct_on: [content_ItemExhibition_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_ItemExhibition_order_by!]
        """
        filter the rows returned
        """
        where: content_ItemExhibition_bool_exp
    ): [content_ItemExhibition!]!
    """
    An aggregate relationship
    """
    itemExhibitions_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [content_ItemExhibition_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_ItemExhibition_order_by!]
        """
        filter the rows returned
        """
        where: content_ItemExhibition_bool_exp
    ): content_ItemExhibition_aggregate!
    """
    An array relationship
    """
    itemPeople(
        """
        distinct select on columns
        """
        distinct_on: [content_ItemProgramPerson_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_ItemProgramPerson_order_by!]
        """
        filter the rows returned
        """
        where: content_ItemProgramPerson_bool_exp
    ): [content_ItemProgramPerson!]!
    """
    An aggregate relationship
    """
    itemPeople_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [content_ItemProgramPerson_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_ItemProgramPerson_order_by!]
        """
        filter the rows returned
        """
        where: content_ItemProgramPerson_bool_exp
    ): content_ItemProgramPerson_aggregate!
    """
    An array relationship
    """
    itemTags(
        """
        distinct select on columns
        """
        distinct_on: [content_ItemTag_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_ItemTag_order_by!]
        """
        filter the rows returned
        """
        where: content_ItemTag_bool_exp
    ): [content_ItemTag!]!
    """
    An aggregate relationship
    """
    itemTags_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [content_ItemTag_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_ItemTag_order_by!]
        """
        filter the rows returned
        """
        where: content_ItemTag_bool_exp
    ): content_ItemTag_aggregate!
    """
    An object relationship
    """
    room: room_Room
    shortTitle: String
    """
    An array relationship
    """
    sponsorshipTierMemberships(
        """
        distinct select on columns
        """
        distinct_on: [sponsor_TierMember_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [sponsor_TierMember_order_by!]
        """
        filter the rows returned
        """
        where: sponsor_TierMember_bool_exp
    ): [sponsor_TierMember!]!
    """
    An aggregate relationship
    """
    sponsorshipTierMemberships_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [sponsor_TierMember_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [sponsor_TierMember_order_by!]
        """
        filter the rows returned
        """
        where: sponsor_TierMember_bool_exp
    ): sponsor_TierMember_aggregate!
    """
    An array relationship
    """
    stats(
        """
        distinct select on columns
        """
        distinct_on: [analytics_ContentItemStats_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_ContentItemStats_order_by!]
        """
        filter the rows returned
        """
        where: analytics_ContentItemStats_bool_exp
    ): [analytics_ContentItemStats!]!
    """
    An aggregate relationship
    """
    stats_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [analytics_ContentItemStats_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_ContentItemStats_order_by!]
        """
        filter the rows returned
        """
        where: analytics_ContentItemStats_bool_exp
    ): analytics_ContentItemStats_aggregate!
    subconferenceId: uuid
    title: String!
    """
    An object relationship
    """
    totalViewsStat: analytics_ItemTotalViews
    """
    An object relationship
    """
    type: content_ItemType!
    typeName: content_ItemType_enum!
    updatedAt: timestamptz!
    visibilityLevel: conference_VisibilityLevel_enum!
}

"""
columns and relationships of "content.ItemExhibition"
"""
type content_ItemExhibition {
    """
    An object relationship
    """
    exhibition: collection_Exhibition!
    exhibitionId: uuid!
    id: uuid!
    """
    An object relationship
    """
    item: content_Item!
    itemId: uuid!
    layout(
        """
        JSON select path
        """
        path: String
    ): jsonb
    priority: Int
}

"""
aggregated selection of "content.ItemExhibition"
"""
type content_ItemExhibition_aggregate {
    aggregate: content_ItemExhibition_aggregate_fields
    nodes: [content_ItemExhibition!]!
}

"""
aggregate fields of "content.ItemExhibition"
"""
type content_ItemExhibition_aggregate_fields {
    avg: content_ItemExhibition_avg_fields
    count(columns: [content_ItemExhibition_select_column!], distinct: Boolean): Int!
    max: content_ItemExhibition_max_fields
    min: content_ItemExhibition_min_fields
    stddev: content_ItemExhibition_stddev_fields
    stddev_pop: content_ItemExhibition_stddev_pop_fields
    stddev_samp: content_ItemExhibition_stddev_samp_fields
    sum: content_ItemExhibition_sum_fields
    var_pop: content_ItemExhibition_var_pop_fields
    var_samp: content_ItemExhibition_var_samp_fields
    variance: content_ItemExhibition_variance_fields
}

"""
order by aggregate values of table "content.ItemExhibition"
"""
input content_ItemExhibition_aggregate_order_by {
    avg: content_ItemExhibition_avg_order_by
    count: order_by
    max: content_ItemExhibition_max_order_by
    min: content_ItemExhibition_min_order_by
    stddev: content_ItemExhibition_stddev_order_by
    stddev_pop: content_ItemExhibition_stddev_pop_order_by
    stddev_samp: content_ItemExhibition_stddev_samp_order_by
    sum: content_ItemExhibition_sum_order_by
    var_pop: content_ItemExhibition_var_pop_order_by
    var_samp: content_ItemExhibition_var_samp_order_by
    variance: content_ItemExhibition_variance_order_by
}

"""
append existing jsonb value of filtered columns with new jsonb value
"""
input content_ItemExhibition_append_input {
    layout: jsonb
}

"""
input type for inserting array relation for remote table "content.ItemExhibition"
"""
input content_ItemExhibition_arr_rel_insert_input {
    data: [content_ItemExhibition_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: content_ItemExhibition_on_conflict
}

"""
aggregate avg on columns
"""
type content_ItemExhibition_avg_fields {
    priority: Float
}

"""
order by avg() on columns of table "content.ItemExhibition"
"""
input content_ItemExhibition_avg_order_by {
    priority: order_by
}

"""
Boolean expression to filter rows from the table "content.ItemExhibition". All fields are combined with a logical 'AND'.
"""
input content_ItemExhibition_bool_exp {
    _and: [content_ItemExhibition_bool_exp!]
    _not: content_ItemExhibition_bool_exp
    _or: [content_ItemExhibition_bool_exp!]
    exhibition: collection_Exhibition_bool_exp
    exhibitionId: uuid_comparison_exp
    id: uuid_comparison_exp
    item: content_Item_bool_exp
    itemId: uuid_comparison_exp
    layout: jsonb_comparison_exp
    priority: Int_comparison_exp
}

"""
unique or primary key constraints on table "content.ItemExhibition"
"""
enum content_ItemExhibition_constraint {
    """
    unique or primary key constraint
    """
    ItemExhibition_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input content_ItemExhibition_delete_at_path_input {
    layout: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input content_ItemExhibition_delete_elem_input {
    layout: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input content_ItemExhibition_delete_key_input {
    layout: String
}

"""
input type for incrementing numeric columns in table "content.ItemExhibition"
"""
input content_ItemExhibition_inc_input {
    priority: Int
}

"""
input type for inserting data into table "content.ItemExhibition"
"""
input content_ItemExhibition_insert_input {
    exhibition: collection_Exhibition_obj_rel_insert_input
    exhibitionId: uuid
    id: uuid
    item: content_Item_obj_rel_insert_input
    itemId: uuid
    layout: jsonb
    priority: Int
}

"""
aggregate max on columns
"""
type content_ItemExhibition_max_fields {
    exhibitionId: uuid
    id: uuid
    itemId: uuid
    priority: Int
}

"""
order by max() on columns of table "content.ItemExhibition"
"""
input content_ItemExhibition_max_order_by {
    exhibitionId: order_by
    id: order_by
    itemId: order_by
    priority: order_by
}

"""
aggregate min on columns
"""
type content_ItemExhibition_min_fields {
    exhibitionId: uuid
    id: uuid
    itemId: uuid
    priority: Int
}

"""
order by min() on columns of table "content.ItemExhibition"
"""
input content_ItemExhibition_min_order_by {
    exhibitionId: order_by
    id: order_by
    itemId: order_by
    priority: order_by
}

"""
response of any mutation on the table "content.ItemExhibition"
"""
type content_ItemExhibition_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [content_ItemExhibition!]!
}

"""
on conflict condition type for table "content.ItemExhibition"
"""
input content_ItemExhibition_on_conflict {
    constraint: content_ItemExhibition_constraint!
    update_columns: [content_ItemExhibition_update_column!]! = []
    where: content_ItemExhibition_bool_exp
}

"""
Ordering options when selecting data from "content.ItemExhibition".
"""
input content_ItemExhibition_order_by {
    exhibition: collection_Exhibition_order_by
    exhibitionId: order_by
    id: order_by
    item: content_Item_order_by
    itemId: order_by
    layout: order_by
    priority: order_by
}

"""
primary key columns input for table: content_ItemExhibition
"""
input content_ItemExhibition_pk_columns_input {
    id: uuid!
}

"""
prepend existing jsonb value of filtered columns with new jsonb value
"""
input content_ItemExhibition_prepend_input {
    layout: jsonb
}

"""
select columns of table "content.ItemExhibition"
"""
enum content_ItemExhibition_select_column {
    """
    column name
    """
    exhibitionId
    """
    column name
    """
    id
    """
    column name
    """
    itemId
    """
    column name
    """
    layout
    """
    column name
    """
    priority
}

"""
input type for updating data in table "content.ItemExhibition"
"""
input content_ItemExhibition_set_input {
    exhibitionId: uuid
    id: uuid
    itemId: uuid
    layout: jsonb
    priority: Int
}

"""
aggregate stddev on columns
"""
type content_ItemExhibition_stddev_fields {
    priority: Float
}

"""
order by stddev() on columns of table "content.ItemExhibition"
"""
input content_ItemExhibition_stddev_order_by {
    priority: order_by
}

"""
aggregate stddev_pop on columns
"""
type content_ItemExhibition_stddev_pop_fields {
    priority: Float
}

"""
order by stddev_pop() on columns of table "content.ItemExhibition"
"""
input content_ItemExhibition_stddev_pop_order_by {
    priority: order_by
}

"""
aggregate stddev_samp on columns
"""
type content_ItemExhibition_stddev_samp_fields {
    priority: Float
}

"""
order by stddev_samp() on columns of table "content.ItemExhibition"
"""
input content_ItemExhibition_stddev_samp_order_by {
    priority: order_by
}

"""
aggregate sum on columns
"""
type content_ItemExhibition_sum_fields {
    priority: Int
}

"""
order by sum() on columns of table "content.ItemExhibition"
"""
input content_ItemExhibition_sum_order_by {
    priority: order_by
}

"""
update columns of table "content.ItemExhibition"
"""
enum content_ItemExhibition_update_column {
    """
    column name
    """
    exhibitionId
    """
    column name
    """
    id
    """
    column name
    """
    itemId
    """
    column name
    """
    layout
    """
    column name
    """
    priority
}

"""
aggregate var_pop on columns
"""
type content_ItemExhibition_var_pop_fields {
    priority: Float
}

"""
order by var_pop() on columns of table "content.ItemExhibition"
"""
input content_ItemExhibition_var_pop_order_by {
    priority: order_by
}

"""
aggregate var_samp on columns
"""
type content_ItemExhibition_var_samp_fields {
    priority: Float
}

"""
order by var_samp() on columns of table "content.ItemExhibition"
"""
input content_ItemExhibition_var_samp_order_by {
    priority: order_by
}

"""
aggregate variance on columns
"""
type content_ItemExhibition_variance_fields {
    priority: Float
}

"""
order by variance() on columns of table "content.ItemExhibition"
"""
input content_ItemExhibition_variance_order_by {
    priority: order_by
}

"""
columns and relationships of "content.ItemProgramPerson"
"""
type content_ItemProgramPerson {
    """
    A computed field, executes function "content.itemProgramPerson_HasSubmissionRequestBeenSent"
    """
    hasSubmissionRequestBeenSent: Boolean
    id: uuid!
    """
    An object relationship
    """
    item: content_Item!
    itemId: uuid!
    """
    An object relationship
    """
    person: collection_ProgramPerson!
    personId: uuid!
    priority: Int
    roleName: String!
}

"""
aggregated selection of "content.ItemProgramPerson"
"""
type content_ItemProgramPerson_aggregate {
    aggregate: content_ItemProgramPerson_aggregate_fields
    nodes: [content_ItemProgramPerson!]!
}

"""
aggregate fields of "content.ItemProgramPerson"
"""
type content_ItemProgramPerson_aggregate_fields {
    avg: content_ItemProgramPerson_avg_fields
    count(columns: [content_ItemProgramPerson_select_column!], distinct: Boolean): Int!
    max: content_ItemProgramPerson_max_fields
    min: content_ItemProgramPerson_min_fields
    stddev: content_ItemProgramPerson_stddev_fields
    stddev_pop: content_ItemProgramPerson_stddev_pop_fields
    stddev_samp: content_ItemProgramPerson_stddev_samp_fields
    sum: content_ItemProgramPerson_sum_fields
    var_pop: content_ItemProgramPerson_var_pop_fields
    var_samp: content_ItemProgramPerson_var_samp_fields
    variance: content_ItemProgramPerson_variance_fields
}

"""
order by aggregate values of table "content.ItemProgramPerson"
"""
input content_ItemProgramPerson_aggregate_order_by {
    avg: content_ItemProgramPerson_avg_order_by
    count: order_by
    max: content_ItemProgramPerson_max_order_by
    min: content_ItemProgramPerson_min_order_by
    stddev: content_ItemProgramPerson_stddev_order_by
    stddev_pop: content_ItemProgramPerson_stddev_pop_order_by
    stddev_samp: content_ItemProgramPerson_stddev_samp_order_by
    sum: content_ItemProgramPerson_sum_order_by
    var_pop: content_ItemProgramPerson_var_pop_order_by
    var_samp: content_ItemProgramPerson_var_samp_order_by
    variance: content_ItemProgramPerson_variance_order_by
}

"""
input type for inserting array relation for remote table "content.ItemProgramPerson"
"""
input content_ItemProgramPerson_arr_rel_insert_input {
    data: [content_ItemProgramPerson_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: content_ItemProgramPerson_on_conflict
}

"""
aggregate avg on columns
"""
type content_ItemProgramPerson_avg_fields {
    priority: Float
}

"""
order by avg() on columns of table "content.ItemProgramPerson"
"""
input content_ItemProgramPerson_avg_order_by {
    priority: order_by
}

"""
Boolean expression to filter rows from the table "content.ItemProgramPerson". All fields are combined with a logical 'AND'.
"""
input content_ItemProgramPerson_bool_exp {
    _and: [content_ItemProgramPerson_bool_exp!]
    _not: content_ItemProgramPerson_bool_exp
    _or: [content_ItemProgramPerson_bool_exp!]
    hasSubmissionRequestBeenSent: Boolean_comparison_exp
    id: uuid_comparison_exp
    item: content_Item_bool_exp
    itemId: uuid_comparison_exp
    person: collection_ProgramPerson_bool_exp
    personId: uuid_comparison_exp
    priority: Int_comparison_exp
    roleName: String_comparison_exp
}

"""
unique or primary key constraints on table "content.ItemProgramPerson"
"""
enum content_ItemProgramPerson_constraint {
    """
    unique or primary key constraint
    """
    ItemProgramPerson_pkey
    """
    unique or primary key constraint
    """
    ItemProgramPerson_roleName_personId_itemId_key
}

"""
input type for incrementing numeric columns in table "content.ItemProgramPerson"
"""
input content_ItemProgramPerson_inc_input {
    priority: Int
}

"""
input type for inserting data into table "content.ItemProgramPerson"
"""
input content_ItemProgramPerson_insert_input {
    id: uuid
    item: content_Item_obj_rel_insert_input
    itemId: uuid
    person: collection_ProgramPerson_obj_rel_insert_input
    personId: uuid
    priority: Int
    roleName: String
}

"""
aggregate max on columns
"""
type content_ItemProgramPerson_max_fields {
    id: uuid
    itemId: uuid
    personId: uuid
    priority: Int
    roleName: String
}

"""
order by max() on columns of table "content.ItemProgramPerson"
"""
input content_ItemProgramPerson_max_order_by {
    id: order_by
    itemId: order_by
    personId: order_by
    priority: order_by
    roleName: order_by
}

"""
aggregate min on columns
"""
type content_ItemProgramPerson_min_fields {
    id: uuid
    itemId: uuid
    personId: uuid
    priority: Int
    roleName: String
}

"""
order by min() on columns of table "content.ItemProgramPerson"
"""
input content_ItemProgramPerson_min_order_by {
    id: order_by
    itemId: order_by
    personId: order_by
    priority: order_by
    roleName: order_by
}

"""
response of any mutation on the table "content.ItemProgramPerson"
"""
type content_ItemProgramPerson_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [content_ItemProgramPerson!]!
}

"""
on conflict condition type for table "content.ItemProgramPerson"
"""
input content_ItemProgramPerson_on_conflict {
    constraint: content_ItemProgramPerson_constraint!
    update_columns: [content_ItemProgramPerson_update_column!]! = []
    where: content_ItemProgramPerson_bool_exp
}

"""
Ordering options when selecting data from "content.ItemProgramPerson".
"""
input content_ItemProgramPerson_order_by {
    hasSubmissionRequestBeenSent: order_by
    id: order_by
    item: content_Item_order_by
    itemId: order_by
    person: collection_ProgramPerson_order_by
    personId: order_by
    priority: order_by
    roleName: order_by
}

"""
primary key columns input for table: content_ItemProgramPerson
"""
input content_ItemProgramPerson_pk_columns_input {
    id: uuid!
}

"""
select columns of table "content.ItemProgramPerson"
"""
enum content_ItemProgramPerson_select_column {
    """
    column name
    """
    id
    """
    column name
    """
    itemId
    """
    column name
    """
    personId
    """
    column name
    """
    priority
    """
    column name
    """
    roleName
}

"""
input type for updating data in table "content.ItemProgramPerson"
"""
input content_ItemProgramPerson_set_input {
    id: uuid
    itemId: uuid
    personId: uuid
    priority: Int
    roleName: String
}

"""
aggregate stddev on columns
"""
type content_ItemProgramPerson_stddev_fields {
    priority: Float
}

"""
order by stddev() on columns of table "content.ItemProgramPerson"
"""
input content_ItemProgramPerson_stddev_order_by {
    priority: order_by
}

"""
aggregate stddev_pop on columns
"""
type content_ItemProgramPerson_stddev_pop_fields {
    priority: Float
}

"""
order by stddev_pop() on columns of table "content.ItemProgramPerson"
"""
input content_ItemProgramPerson_stddev_pop_order_by {
    priority: order_by
}

"""
aggregate stddev_samp on columns
"""
type content_ItemProgramPerson_stddev_samp_fields {
    priority: Float
}

"""
order by stddev_samp() on columns of table "content.ItemProgramPerson"
"""
input content_ItemProgramPerson_stddev_samp_order_by {
    priority: order_by
}

"""
aggregate sum on columns
"""
type content_ItemProgramPerson_sum_fields {
    priority: Int
}

"""
order by sum() on columns of table "content.ItemProgramPerson"
"""
input content_ItemProgramPerson_sum_order_by {
    priority: order_by
}

"""
update columns of table "content.ItemProgramPerson"
"""
enum content_ItemProgramPerson_update_column {
    """
    column name
    """
    id
    """
    column name
    """
    itemId
    """
    column name
    """
    personId
    """
    column name
    """
    priority
    """
    column name
    """
    roleName
}

"""
aggregate var_pop on columns
"""
type content_ItemProgramPerson_var_pop_fields {
    priority: Float
}

"""
order by var_pop() on columns of table "content.ItemProgramPerson"
"""
input content_ItemProgramPerson_var_pop_order_by {
    priority: order_by
}

"""
aggregate var_samp on columns
"""
type content_ItemProgramPerson_var_samp_fields {
    priority: Float
}

"""
order by var_samp() on columns of table "content.ItemProgramPerson"
"""
input content_ItemProgramPerson_var_samp_order_by {
    priority: order_by
}

"""
aggregate variance on columns
"""
type content_ItemProgramPerson_variance_fields {
    priority: Float
}

"""
order by variance() on columns of table "content.ItemProgramPerson"
"""
input content_ItemProgramPerson_variance_order_by {
    priority: order_by
}

"""
columns and relationships of "content.ItemTag"
"""
type content_ItemTag {
    id: uuid!
    """
    An object relationship
    """
    item: content_Item!
    itemId: uuid!
    """
    An object relationship
    """
    tag: collection_Tag!
    tagId: uuid!
}

"""
aggregated selection of "content.ItemTag"
"""
type content_ItemTag_aggregate {
    aggregate: content_ItemTag_aggregate_fields
    nodes: [content_ItemTag!]!
}

"""
aggregate fields of "content.ItemTag"
"""
type content_ItemTag_aggregate_fields {
    count(columns: [content_ItemTag_select_column!], distinct: Boolean): Int!
    max: content_ItemTag_max_fields
    min: content_ItemTag_min_fields
}

"""
order by aggregate values of table "content.ItemTag"
"""
input content_ItemTag_aggregate_order_by {
    count: order_by
    max: content_ItemTag_max_order_by
    min: content_ItemTag_min_order_by
}

"""
input type for inserting array relation for remote table "content.ItemTag"
"""
input content_ItemTag_arr_rel_insert_input {
    data: [content_ItemTag_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: content_ItemTag_on_conflict
}

"""
Boolean expression to filter rows from the table "content.ItemTag". All fields are combined with a logical 'AND'.
"""
input content_ItemTag_bool_exp {
    _and: [content_ItemTag_bool_exp!]
    _not: content_ItemTag_bool_exp
    _or: [content_ItemTag_bool_exp!]
    id: uuid_comparison_exp
    item: content_Item_bool_exp
    itemId: uuid_comparison_exp
    tag: collection_Tag_bool_exp
    tagId: uuid_comparison_exp
}

"""
unique or primary key constraints on table "content.ItemTag"
"""
enum content_ItemTag_constraint {
    """
    unique or primary key constraint
    """
    ItemTag_itemId_tagId_key
    """
    unique or primary key constraint
    """
    ItemTag_pkey
}

"""
input type for inserting data into table "content.ItemTag"
"""
input content_ItemTag_insert_input {
    id: uuid
    item: content_Item_obj_rel_insert_input
    itemId: uuid
    tag: collection_Tag_obj_rel_insert_input
    tagId: uuid
}

"""
aggregate max on columns
"""
type content_ItemTag_max_fields {
    id: uuid
    itemId: uuid
    tagId: uuid
}

"""
order by max() on columns of table "content.ItemTag"
"""
input content_ItemTag_max_order_by {
    id: order_by
    itemId: order_by
    tagId: order_by
}

"""
aggregate min on columns
"""
type content_ItemTag_min_fields {
    id: uuid
    itemId: uuid
    tagId: uuid
}

"""
order by min() on columns of table "content.ItemTag"
"""
input content_ItemTag_min_order_by {
    id: order_by
    itemId: order_by
    tagId: order_by
}

"""
response of any mutation on the table "content.ItemTag"
"""
type content_ItemTag_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [content_ItemTag!]!
}

"""
on conflict condition type for table "content.ItemTag"
"""
input content_ItemTag_on_conflict {
    constraint: content_ItemTag_constraint!
    update_columns: [content_ItemTag_update_column!]! = []
    where: content_ItemTag_bool_exp
}

"""
Ordering options when selecting data from "content.ItemTag".
"""
input content_ItemTag_order_by {
    id: order_by
    item: content_Item_order_by
    itemId: order_by
    tag: collection_Tag_order_by
    tagId: order_by
}

"""
primary key columns input for table: content_ItemTag
"""
input content_ItemTag_pk_columns_input {
    id: uuid!
}

"""
select columns of table "content.ItemTag"
"""
enum content_ItemTag_select_column {
    """
    column name
    """
    id
    """
    column name
    """
    itemId
    """
    column name
    """
    tagId
}

"""
input type for updating data in table "content.ItemTag"
"""
input content_ItemTag_set_input {
    id: uuid
    itemId: uuid
    tagId: uuid
}

"""
update columns of table "content.ItemTag"
"""
enum content_ItemTag_update_column {
    """
    column name
    """
    id
    """
    column name
    """
    itemId
    """
    column name
    """
    tagId
}

"""
columns and relationships of "content.ItemType"
"""
type content_ItemType {
    description: String!
    name: String!
}

"""
aggregated selection of "content.ItemType"
"""
type content_ItemType_aggregate {
    aggregate: content_ItemType_aggregate_fields
    nodes: [content_ItemType!]!
}

"""
aggregate fields of "content.ItemType"
"""
type content_ItemType_aggregate_fields {
    count(columns: [content_ItemType_select_column!], distinct: Boolean): Int!
    max: content_ItemType_max_fields
    min: content_ItemType_min_fields
}

"""
Boolean expression to filter rows from the table "content.ItemType". All fields are combined with a logical 'AND'.
"""
input content_ItemType_bool_exp {
    _and: [content_ItemType_bool_exp!]
    _not: content_ItemType_bool_exp
    _or: [content_ItemType_bool_exp!]
    description: String_comparison_exp
    name: String_comparison_exp
}

"""
unique or primary key constraints on table "content.ItemType"
"""
enum content_ItemType_constraint {
    """
    unique or primary key constraint
    """
    ItemType_pkey
}

enum content_ItemType_enum {
    """
    A demonstration.
    """
    DEMONSTRATION
    """
    A keynote.
    """
    KEYNOTE
    """
    Conference main landing page.
    """
    LANDING_PAGE
    """
    A generic group type - use sparingly.
    """
    OTHER
    """
    A paper.
    """
    PAPER
    """
    A poster.
    """
    POSTER
    """
    A presentation.
    """
    PRESENTATION
    """
    Content representing a whole session.
    """
    SESSION
    """
    A Q&A covering the whole session.
    """
    SESSION_Q_AND_A
    """
    A scheduled social.
    """
    SOCIAL
    """
    A sponsor.
    """
    SPONSOR
    """
    An item of conference goodies for attendee's swag bags.
    """
    SWAG_BAG
    """
    A symposium.
    """
    SYMPOSIUM
    """
    A tutorial.
    """
    TUTORIAL
    """
    A workshop.
    """
    WORKSHOP
}

"""
Boolean expression to compare columns of type "content_ItemType_enum". All fields are combined with logical 'AND'.
"""
input content_ItemType_enum_comparison_exp {
    _eq: content_ItemType_enum
    _in: [content_ItemType_enum!]
    _is_null: Boolean
    _neq: content_ItemType_enum
    _nin: [content_ItemType_enum!]
}

"""
input type for inserting data into table "content.ItemType"
"""
input content_ItemType_insert_input {
    description: String
    name: String
}

"""
aggregate max on columns
"""
type content_ItemType_max_fields {
    description: String
    name: String
}

"""
aggregate min on columns
"""
type content_ItemType_min_fields {
    description: String
    name: String
}

"""
response of any mutation on the table "content.ItemType"
"""
type content_ItemType_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [content_ItemType!]!
}

"""
input type for inserting object relation for remote table "content.ItemType"
"""
input content_ItemType_obj_rel_insert_input {
    data: content_ItemType_insert_input!
    """
    on conflict condition
    """
    on_conflict: content_ItemType_on_conflict
}

"""
on conflict condition type for table "content.ItemType"
"""
input content_ItemType_on_conflict {
    constraint: content_ItemType_constraint!
    update_columns: [content_ItemType_update_column!]! = []
    where: content_ItemType_bool_exp
}

"""
Ordering options when selecting data from "content.ItemType".
"""
input content_ItemType_order_by {
    description: order_by
    name: order_by
}

"""
primary key columns input for table: content_ItemType
"""
input content_ItemType_pk_columns_input {
    name: String!
}

"""
select columns of table "content.ItemType"
"""
enum content_ItemType_select_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
input type for updating data in table "content.ItemType"
"""
input content_ItemType_set_input {
    description: String
    name: String
}

"""
update columns of table "content.ItemType"
"""
enum content_ItemType_update_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
aggregated selection of "content.Item"
"""
type content_Item_aggregate {
    aggregate: content_Item_aggregate_fields
    nodes: [content_Item!]!
}

"""
aggregate fields of "content.Item"
"""
type content_Item_aggregate_fields {
    count(columns: [content_Item_select_column!], distinct: Boolean): Int!
    max: content_Item_max_fields
    min: content_Item_min_fields
}

"""
order by aggregate values of table "content.Item"
"""
input content_Item_aggregate_order_by {
    count: order_by
    max: content_Item_max_order_by
    min: content_Item_min_order_by
}

"""
input type for inserting array relation for remote table "content.Item"
"""
input content_Item_arr_rel_insert_input {
    data: [content_Item_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: content_Item_on_conflict
}

"""
Boolean expression to filter rows from the table "content.Item". All fields are combined with a logical 'AND'.
"""
input content_Item_bool_exp {
    _and: [content_Item_bool_exp!]
    _not: content_Item_bool_exp
    _or: [content_Item_bool_exp!]
    chat: chat_Chat_bool_exp
    chatId: uuid_comparison_exp
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    createdAt: timestamptz_comparison_exp
    descriptionOfExhibitions: collection_Exhibition_bool_exp
    elements: content_Element_bool_exp
    events: schedule_Event_bool_exp
    hasUnsubmittedElements: Boolean_comparison_exp
    id: uuid_comparison_exp
    itemExhibitions: content_ItemExhibition_bool_exp
    itemPeople: content_ItemProgramPerson_bool_exp
    itemTags: content_ItemTag_bool_exp
    room: room_Room_bool_exp
    shortTitle: String_comparison_exp
    sponsorshipTierMemberships: sponsor_TierMember_bool_exp
    stats: analytics_ContentItemStats_bool_exp
    subconferenceId: uuid_comparison_exp
    title: String_comparison_exp
    totalViewsStat: analytics_ItemTotalViews_bool_exp
    type: content_ItemType_bool_exp
    typeName: content_ItemType_enum_comparison_exp
    updatedAt: timestamptz_comparison_exp
    visibilityLevel: conference_VisibilityLevel_enum_comparison_exp
}

"""
unique or primary key constraints on table "content.Item"
"""
enum content_Item_constraint {
    """
    unique or primary key constraint
    """
    Item_chatId_key
    """
    unique or primary key constraint
    """
    Item_pkey
}

"""
input type for inserting data into table "content.Item"
"""
input content_Item_insert_input {
    chat: chat_Chat_obj_rel_insert_input
    chatId: uuid
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    createdAt: timestamptz
    descriptionOfExhibitions: collection_Exhibition_arr_rel_insert_input
    elements: content_Element_arr_rel_insert_input
    events: schedule_Event_arr_rel_insert_input
    id: uuid
    itemExhibitions: content_ItemExhibition_arr_rel_insert_input
    itemPeople: content_ItemProgramPerson_arr_rel_insert_input
    itemTags: content_ItemTag_arr_rel_insert_input
    room: room_Room_obj_rel_insert_input
    shortTitle: String
    sponsorshipTierMemberships: sponsor_TierMember_arr_rel_insert_input
    stats: analytics_ContentItemStats_arr_rel_insert_input
    subconferenceId: uuid
    title: String
    totalViewsStat: analytics_ItemTotalViews_obj_rel_insert_input
    type: content_ItemType_obj_rel_insert_input
    typeName: content_ItemType_enum
    updatedAt: timestamptz
    visibilityLevel: conference_VisibilityLevel_enum
}

"""
aggregate max on columns
"""
type content_Item_max_fields {
    chatId: uuid
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    shortTitle: String
    subconferenceId: uuid
    title: String
    updatedAt: timestamptz
}

"""
order by max() on columns of table "content.Item"
"""
input content_Item_max_order_by {
    chatId: order_by
    conferenceId: order_by
    createdAt: order_by
    id: order_by
    shortTitle: order_by
    subconferenceId: order_by
    title: order_by
    updatedAt: order_by
}

"""
aggregate min on columns
"""
type content_Item_min_fields {
    chatId: uuid
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    shortTitle: String
    subconferenceId: uuid
    title: String
    updatedAt: timestamptz
}

"""
order by min() on columns of table "content.Item"
"""
input content_Item_min_order_by {
    chatId: order_by
    conferenceId: order_by
    createdAt: order_by
    id: order_by
    shortTitle: order_by
    subconferenceId: order_by
    title: order_by
    updatedAt: order_by
}

"""
response of any mutation on the table "content.Item"
"""
type content_Item_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [content_Item!]!
}

"""
input type for inserting object relation for remote table "content.Item"
"""
input content_Item_obj_rel_insert_input {
    data: content_Item_insert_input!
    """
    on conflict condition
    """
    on_conflict: content_Item_on_conflict
}

"""
on conflict condition type for table "content.Item"
"""
input content_Item_on_conflict {
    constraint: content_Item_constraint!
    update_columns: [content_Item_update_column!]! = []
    where: content_Item_bool_exp
}

"""
Ordering options when selecting data from "content.Item".
"""
input content_Item_order_by {
    chat: chat_Chat_order_by
    chatId: order_by
    conference: conference_Conference_order_by
    conferenceId: order_by
    createdAt: order_by
    descriptionOfExhibitions_aggregate: collection_Exhibition_aggregate_order_by
    elements_aggregate: content_Element_aggregate_order_by
    events_aggregate: schedule_Event_aggregate_order_by
    hasUnsubmittedElements: order_by
    id: order_by
    itemExhibitions_aggregate: content_ItemExhibition_aggregate_order_by
    itemPeople_aggregate: content_ItemProgramPerson_aggregate_order_by
    itemTags_aggregate: content_ItemTag_aggregate_order_by
    room: room_Room_order_by
    shortTitle: order_by
    sponsorshipTierMemberships_aggregate: sponsor_TierMember_aggregate_order_by
    stats_aggregate: analytics_ContentItemStats_aggregate_order_by
    subconferenceId: order_by
    title: order_by
    totalViewsStat: analytics_ItemTotalViews_order_by
    type: content_ItemType_order_by
    typeName: order_by
    updatedAt: order_by
    visibilityLevel: order_by
}

"""
primary key columns input for table: content_Item
"""
input content_Item_pk_columns_input {
    id: uuid!
}

"""
select columns of table "content.Item"
"""
enum content_Item_select_column {
    """
    column name
    """
    chatId
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    id
    """
    column name
    """
    shortTitle
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    title
    """
    column name
    """
    typeName
    """
    column name
    """
    updatedAt
    """
    column name
    """
    visibilityLevel
}

"""
input type for updating data in table "content.Item"
"""
input content_Item_set_input {
    chatId: uuid
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    shortTitle: String
    subconferenceId: uuid
    title: String
    typeName: content_ItemType_enum
    updatedAt: timestamptz
    visibilityLevel: conference_VisibilityLevel_enum
}

"""
update columns of table "content.Item"
"""
enum content_Item_update_column {
    """
    column name
    """
    chatId
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    id
    """
    column name
    """
    shortTitle
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    title
    """
    column name
    """
    typeName
    """
    column name
    """
    updatedAt
    """
    column name
    """
    visibilityLevel
}

input content_searchItems_args {
    conferenceId: uuid
    search: String
}

"""
columns and relationships of "job_queues.ChannelStackCreateJob"
"""
type job_queues_ChannelStackCreateJob {
    """
    An object relationship
    """
    conference: conference_Conference!
    conferenceId: uuid!
    created_at: timestamptz!
    id: uuid!
    """
    An object relationship
    """
    jobStatus: job_queues_JobStatus!
    jobStatusName: job_queues_JobStatus_enum!
    message: String
    """
    An object relationship
    """
    room: room_Room!
    roomId: uuid!
    stackLogicalResourceId: String!
    updated_at: timestamptz!
}

"""
aggregated selection of "job_queues.ChannelStackCreateJob"
"""
type job_queues_ChannelStackCreateJob_aggregate {
    aggregate: job_queues_ChannelStackCreateJob_aggregate_fields
    nodes: [job_queues_ChannelStackCreateJob!]!
}

"""
aggregate fields of "job_queues.ChannelStackCreateJob"
"""
type job_queues_ChannelStackCreateJob_aggregate_fields {
    count(columns: [job_queues_ChannelStackCreateJob_select_column!], distinct: Boolean): Int!
    max: job_queues_ChannelStackCreateJob_max_fields
    min: job_queues_ChannelStackCreateJob_min_fields
}

"""
order by aggregate values of table "job_queues.ChannelStackCreateJob"
"""
input job_queues_ChannelStackCreateJob_aggregate_order_by {
    count: order_by
    max: job_queues_ChannelStackCreateJob_max_order_by
    min: job_queues_ChannelStackCreateJob_min_order_by
}

"""
input type for inserting array relation for remote table "job_queues.ChannelStackCreateJob"
"""
input job_queues_ChannelStackCreateJob_arr_rel_insert_input {
    data: [job_queues_ChannelStackCreateJob_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: job_queues_ChannelStackCreateJob_on_conflict
}

"""
Boolean expression to filter rows from the table "job_queues.ChannelStackCreateJob". All fields are combined with a logical 'AND'.
"""
input job_queues_ChannelStackCreateJob_bool_exp {
    _and: [job_queues_ChannelStackCreateJob_bool_exp!]
    _not: job_queues_ChannelStackCreateJob_bool_exp
    _or: [job_queues_ChannelStackCreateJob_bool_exp!]
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    created_at: timestamptz_comparison_exp
    id: uuid_comparison_exp
    jobStatus: job_queues_JobStatus_bool_exp
    jobStatusName: job_queues_JobStatus_enum_comparison_exp
    message: String_comparison_exp
    room: room_Room_bool_exp
    roomId: uuid_comparison_exp
    stackLogicalResourceId: String_comparison_exp
    updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "job_queues.ChannelStackCreateJob"
"""
enum job_queues_ChannelStackCreateJob_constraint {
    """
    unique or primary key constraint
    """
    ChannelStackCreateJob_pkey
    """
    unique or primary key constraint
    """
    ChannelStackCreateJob_stackLogicalResourceId_key
}

"""
input type for inserting data into table "job_queues.ChannelStackCreateJob"
"""
input job_queues_ChannelStackCreateJob_insert_input {
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    created_at: timestamptz
    id: uuid
    jobStatus: job_queues_JobStatus_obj_rel_insert_input
    jobStatusName: job_queues_JobStatus_enum
    message: String
    room: room_Room_obj_rel_insert_input
    roomId: uuid
    stackLogicalResourceId: String
    updated_at: timestamptz
}

"""
aggregate max on columns
"""
type job_queues_ChannelStackCreateJob_max_fields {
    conferenceId: uuid
    created_at: timestamptz
    id: uuid
    message: String
    roomId: uuid
    stackLogicalResourceId: String
    updated_at: timestamptz
}

"""
order by max() on columns of table "job_queues.ChannelStackCreateJob"
"""
input job_queues_ChannelStackCreateJob_max_order_by {
    conferenceId: order_by
    created_at: order_by
    id: order_by
    message: order_by
    roomId: order_by
    stackLogicalResourceId: order_by
    updated_at: order_by
}

"""
aggregate min on columns
"""
type job_queues_ChannelStackCreateJob_min_fields {
    conferenceId: uuid
    created_at: timestamptz
    id: uuid
    message: String
    roomId: uuid
    stackLogicalResourceId: String
    updated_at: timestamptz
}

"""
order by min() on columns of table "job_queues.ChannelStackCreateJob"
"""
input job_queues_ChannelStackCreateJob_min_order_by {
    conferenceId: order_by
    created_at: order_by
    id: order_by
    message: order_by
    roomId: order_by
    stackLogicalResourceId: order_by
    updated_at: order_by
}

"""
response of any mutation on the table "job_queues.ChannelStackCreateJob"
"""
type job_queues_ChannelStackCreateJob_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [job_queues_ChannelStackCreateJob!]!
}

"""
input type for inserting object relation for remote table "job_queues.ChannelStackCreateJob"
"""
input job_queues_ChannelStackCreateJob_obj_rel_insert_input {
    data: job_queues_ChannelStackCreateJob_insert_input!
    """
    on conflict condition
    """
    on_conflict: job_queues_ChannelStackCreateJob_on_conflict
}

"""
on conflict condition type for table "job_queues.ChannelStackCreateJob"
"""
input job_queues_ChannelStackCreateJob_on_conflict {
    constraint: job_queues_ChannelStackCreateJob_constraint!
    update_columns: [job_queues_ChannelStackCreateJob_update_column!]! = []
    where: job_queues_ChannelStackCreateJob_bool_exp
}

"""
Ordering options when selecting data from "job_queues.ChannelStackCreateJob".
"""
input job_queues_ChannelStackCreateJob_order_by {
    conference: conference_Conference_order_by
    conferenceId: order_by
    created_at: order_by
    id: order_by
    jobStatus: job_queues_JobStatus_order_by
    jobStatusName: order_by
    message: order_by
    room: room_Room_order_by
    roomId: order_by
    stackLogicalResourceId: order_by
    updated_at: order_by
}

"""
primary key columns input for table: job_queues_ChannelStackCreateJob
"""
input job_queues_ChannelStackCreateJob_pk_columns_input {
    id: uuid!
}

"""
select columns of table "job_queues.ChannelStackCreateJob"
"""
enum job_queues_ChannelStackCreateJob_select_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    created_at
    """
    column name
    """
    id
    """
    column name
    """
    jobStatusName
    """
    column name
    """
    message
    """
    column name
    """
    roomId
    """
    column name
    """
    stackLogicalResourceId
    """
    column name
    """
    updated_at
}

"""
input type for updating data in table "job_queues.ChannelStackCreateJob"
"""
input job_queues_ChannelStackCreateJob_set_input {
    conferenceId: uuid
    created_at: timestamptz
    id: uuid
    jobStatusName: job_queues_JobStatus_enum
    message: String
    roomId: uuid
    stackLogicalResourceId: String
    updated_at: timestamptz
}

"""
update columns of table "job_queues.ChannelStackCreateJob"
"""
enum job_queues_ChannelStackCreateJob_update_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    created_at
    """
    column name
    """
    id
    """
    column name
    """
    jobStatusName
    """
    column name
    """
    message
    """
    column name
    """
    roomId
    """
    column name
    """
    stackLogicalResourceId
    """
    column name
    """
    updated_at
}

"""
columns and relationships of "job_queues.ChannelStackDeleteJob"
"""
type job_queues_ChannelStackDeleteJob {
    cloudFormationStackArn: String!
    createdAt: timestamptz!
    id: uuid!
    jobStatusName: job_queues_JobStatus_enum!
    mediaLiveChannelId: String!
    message: String
    updatedAt: timestamptz!
}

"""
aggregated selection of "job_queues.ChannelStackDeleteJob"
"""
type job_queues_ChannelStackDeleteJob_aggregate {
    aggregate: job_queues_ChannelStackDeleteJob_aggregate_fields
    nodes: [job_queues_ChannelStackDeleteJob!]!
}

"""
aggregate fields of "job_queues.ChannelStackDeleteJob"
"""
type job_queues_ChannelStackDeleteJob_aggregate_fields {
    count(columns: [job_queues_ChannelStackDeleteJob_select_column!], distinct: Boolean): Int!
    max: job_queues_ChannelStackDeleteJob_max_fields
    min: job_queues_ChannelStackDeleteJob_min_fields
}

"""
Boolean expression to filter rows from the table "job_queues.ChannelStackDeleteJob". All fields are combined with a logical 'AND'.
"""
input job_queues_ChannelStackDeleteJob_bool_exp {
    _and: [job_queues_ChannelStackDeleteJob_bool_exp!]
    _not: job_queues_ChannelStackDeleteJob_bool_exp
    _or: [job_queues_ChannelStackDeleteJob_bool_exp!]
    cloudFormationStackArn: String_comparison_exp
    createdAt: timestamptz_comparison_exp
    id: uuid_comparison_exp
    jobStatusName: job_queues_JobStatus_enum_comparison_exp
    mediaLiveChannelId: String_comparison_exp
    message: String_comparison_exp
    updatedAt: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "job_queues.ChannelStackDeleteJob"
"""
enum job_queues_ChannelStackDeleteJob_constraint {
    """
    unique or primary key constraint
    """
    ChannelStackDeleteJob_pkey
}

"""
input type for inserting data into table "job_queues.ChannelStackDeleteJob"
"""
input job_queues_ChannelStackDeleteJob_insert_input {
    cloudFormationStackArn: String
    createdAt: timestamptz
    id: uuid
    jobStatusName: job_queues_JobStatus_enum
    mediaLiveChannelId: String
    message: String
    updatedAt: timestamptz
}

"""
aggregate max on columns
"""
type job_queues_ChannelStackDeleteJob_max_fields {
    cloudFormationStackArn: String
    createdAt: timestamptz
    id: uuid
    mediaLiveChannelId: String
    message: String
    updatedAt: timestamptz
}

"""
aggregate min on columns
"""
type job_queues_ChannelStackDeleteJob_min_fields {
    cloudFormationStackArn: String
    createdAt: timestamptz
    id: uuid
    mediaLiveChannelId: String
    message: String
    updatedAt: timestamptz
}

"""
response of any mutation on the table "job_queues.ChannelStackDeleteJob"
"""
type job_queues_ChannelStackDeleteJob_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [job_queues_ChannelStackDeleteJob!]!
}

"""
on conflict condition type for table "job_queues.ChannelStackDeleteJob"
"""
input job_queues_ChannelStackDeleteJob_on_conflict {
    constraint: job_queues_ChannelStackDeleteJob_constraint!
    update_columns: [job_queues_ChannelStackDeleteJob_update_column!]! = []
    where: job_queues_ChannelStackDeleteJob_bool_exp
}

"""
Ordering options when selecting data from "job_queues.ChannelStackDeleteJob".
"""
input job_queues_ChannelStackDeleteJob_order_by {
    cloudFormationStackArn: order_by
    createdAt: order_by
    id: order_by
    jobStatusName: order_by
    mediaLiveChannelId: order_by
    message: order_by
    updatedAt: order_by
}

"""
primary key columns input for table: job_queues_ChannelStackDeleteJob
"""
input job_queues_ChannelStackDeleteJob_pk_columns_input {
    id: uuid!
}

"""
select columns of table "job_queues.ChannelStackDeleteJob"
"""
enum job_queues_ChannelStackDeleteJob_select_column {
    """
    column name
    """
    cloudFormationStackArn
    """
    column name
    """
    createdAt
    """
    column name
    """
    id
    """
    column name
    """
    jobStatusName
    """
    column name
    """
    mediaLiveChannelId
    """
    column name
    """
    message
    """
    column name
    """
    updatedAt
}

"""
input type for updating data in table "job_queues.ChannelStackDeleteJob"
"""
input job_queues_ChannelStackDeleteJob_set_input {
    cloudFormationStackArn: String
    createdAt: timestamptz
    id: uuid
    jobStatusName: job_queues_JobStatus_enum
    mediaLiveChannelId: String
    message: String
    updatedAt: timestamptz
}

"""
update columns of table "job_queues.ChannelStackDeleteJob"
"""
enum job_queues_ChannelStackDeleteJob_update_column {
    """
    column name
    """
    cloudFormationStackArn
    """
    column name
    """
    createdAt
    """
    column name
    """
    id
    """
    column name
    """
    jobStatusName
    """
    column name
    """
    mediaLiveChannelId
    """
    column name
    """
    message
    """
    column name
    """
    updatedAt
}

"""
columns and relationships of "job_queues.ChannelStackUpdateJob"
"""
type job_queues_ChannelStackUpdateJob {
    """
    An object relationship
    """
    channelStack: video_ChannelStack
    channelStackId: uuid
    cloudFormationStackArn: String!
    created_at: timestamptz!
    id: uuid!
    jobStatusName: job_queues_JobStatus_enum!
    mediaLiveChannelId: String!
    message: String
    newRtmpBInputAttachmentName: String
    newRtmpBInputId: String
    newRtmpOutputStreamKey: String
    newRtmpOutputUri: String
    newRtmpRoomInputAttachmentName: String
    newRtmpRoomInputId: String
    oldRtmpBInputAttachmentName: String
    oldRtmpBInputId: String
    oldRtmpOutputDestinationId: String
    oldRtmpOutputStreamKey: String
    oldRtmpOutputUri: String
    oldRtmpRoomInputAttachmentName: String
    oldRtmpRoomInputId: String
    updated_at: timestamptz!
}

"""
aggregated selection of "job_queues.ChannelStackUpdateJob"
"""
type job_queues_ChannelStackUpdateJob_aggregate {
    aggregate: job_queues_ChannelStackUpdateJob_aggregate_fields
    nodes: [job_queues_ChannelStackUpdateJob!]!
}

"""
aggregate fields of "job_queues.ChannelStackUpdateJob"
"""
type job_queues_ChannelStackUpdateJob_aggregate_fields {
    count(columns: [job_queues_ChannelStackUpdateJob_select_column!], distinct: Boolean): Int!
    max: job_queues_ChannelStackUpdateJob_max_fields
    min: job_queues_ChannelStackUpdateJob_min_fields
}

"""
order by aggregate values of table "job_queues.ChannelStackUpdateJob"
"""
input job_queues_ChannelStackUpdateJob_aggregate_order_by {
    count: order_by
    max: job_queues_ChannelStackUpdateJob_max_order_by
    min: job_queues_ChannelStackUpdateJob_min_order_by
}

"""
input type for inserting array relation for remote table "job_queues.ChannelStackUpdateJob"
"""
input job_queues_ChannelStackUpdateJob_arr_rel_insert_input {
    data: [job_queues_ChannelStackUpdateJob_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: job_queues_ChannelStackUpdateJob_on_conflict
}

"""
Boolean expression to filter rows from the table "job_queues.ChannelStackUpdateJob". All fields are combined with a logical 'AND'.
"""
input job_queues_ChannelStackUpdateJob_bool_exp {
    _and: [job_queues_ChannelStackUpdateJob_bool_exp!]
    _not: job_queues_ChannelStackUpdateJob_bool_exp
    _or: [job_queues_ChannelStackUpdateJob_bool_exp!]
    channelStack: video_ChannelStack_bool_exp
    channelStackId: uuid_comparison_exp
    cloudFormationStackArn: String_comparison_exp
    created_at: timestamptz_comparison_exp
    id: uuid_comparison_exp
    jobStatusName: job_queues_JobStatus_enum_comparison_exp
    mediaLiveChannelId: String_comparison_exp
    message: String_comparison_exp
    newRtmpBInputAttachmentName: String_comparison_exp
    newRtmpBInputId: String_comparison_exp
    newRtmpOutputStreamKey: String_comparison_exp
    newRtmpOutputUri: String_comparison_exp
    newRtmpRoomInputAttachmentName: String_comparison_exp
    newRtmpRoomInputId: String_comparison_exp
    oldRtmpBInputAttachmentName: String_comparison_exp
    oldRtmpBInputId: String_comparison_exp
    oldRtmpOutputDestinationId: String_comparison_exp
    oldRtmpOutputStreamKey: String_comparison_exp
    oldRtmpOutputUri: String_comparison_exp
    oldRtmpRoomInputAttachmentName: String_comparison_exp
    oldRtmpRoomInputId: String_comparison_exp
    updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "job_queues.ChannelStackUpdateJob"
"""
enum job_queues_ChannelStackUpdateJob_constraint {
    """
    unique or primary key constraint
    """
    ChannelStackUpdateJob_pkey
}

"""
input type for inserting data into table "job_queues.ChannelStackUpdateJob"
"""
input job_queues_ChannelStackUpdateJob_insert_input {
    channelStack: video_ChannelStack_obj_rel_insert_input
    channelStackId: uuid
    cloudFormationStackArn: String
    created_at: timestamptz
    id: uuid
    jobStatusName: job_queues_JobStatus_enum
    mediaLiveChannelId: String
    message: String
    newRtmpBInputAttachmentName: String
    newRtmpBInputId: String
    newRtmpOutputStreamKey: String
    newRtmpOutputUri: String
    newRtmpRoomInputAttachmentName: String
    newRtmpRoomInputId: String
    oldRtmpBInputAttachmentName: String
    oldRtmpBInputId: String
    oldRtmpOutputDestinationId: String
    oldRtmpOutputStreamKey: String
    oldRtmpOutputUri: String
    oldRtmpRoomInputAttachmentName: String
    oldRtmpRoomInputId: String
    updated_at: timestamptz
}

"""
aggregate max on columns
"""
type job_queues_ChannelStackUpdateJob_max_fields {
    channelStackId: uuid
    cloudFormationStackArn: String
    created_at: timestamptz
    id: uuid
    mediaLiveChannelId: String
    message: String
    newRtmpBInputAttachmentName: String
    newRtmpBInputId: String
    newRtmpOutputStreamKey: String
    newRtmpOutputUri: String
    newRtmpRoomInputAttachmentName: String
    newRtmpRoomInputId: String
    oldRtmpBInputAttachmentName: String
    oldRtmpBInputId: String
    oldRtmpOutputDestinationId: String
    oldRtmpOutputStreamKey: String
    oldRtmpOutputUri: String
    oldRtmpRoomInputAttachmentName: String
    oldRtmpRoomInputId: String
    updated_at: timestamptz
}

"""
order by max() on columns of table "job_queues.ChannelStackUpdateJob"
"""
input job_queues_ChannelStackUpdateJob_max_order_by {
    channelStackId: order_by
    cloudFormationStackArn: order_by
    created_at: order_by
    id: order_by
    mediaLiveChannelId: order_by
    message: order_by
    newRtmpBInputAttachmentName: order_by
    newRtmpBInputId: order_by
    newRtmpOutputStreamKey: order_by
    newRtmpOutputUri: order_by
    newRtmpRoomInputAttachmentName: order_by
    newRtmpRoomInputId: order_by
    oldRtmpBInputAttachmentName: order_by
    oldRtmpBInputId: order_by
    oldRtmpOutputDestinationId: order_by
    oldRtmpOutputStreamKey: order_by
    oldRtmpOutputUri: order_by
    oldRtmpRoomInputAttachmentName: order_by
    oldRtmpRoomInputId: order_by
    updated_at: order_by
}

"""
aggregate min on columns
"""
type job_queues_ChannelStackUpdateJob_min_fields {
    channelStackId: uuid
    cloudFormationStackArn: String
    created_at: timestamptz
    id: uuid
    mediaLiveChannelId: String
    message: String
    newRtmpBInputAttachmentName: String
    newRtmpBInputId: String
    newRtmpOutputStreamKey: String
    newRtmpOutputUri: String
    newRtmpRoomInputAttachmentName: String
    newRtmpRoomInputId: String
    oldRtmpBInputAttachmentName: String
    oldRtmpBInputId: String
    oldRtmpOutputDestinationId: String
    oldRtmpOutputStreamKey: String
    oldRtmpOutputUri: String
    oldRtmpRoomInputAttachmentName: String
    oldRtmpRoomInputId: String
    updated_at: timestamptz
}

"""
order by min() on columns of table "job_queues.ChannelStackUpdateJob"
"""
input job_queues_ChannelStackUpdateJob_min_order_by {
    channelStackId: order_by
    cloudFormationStackArn: order_by
    created_at: order_by
    id: order_by
    mediaLiveChannelId: order_by
    message: order_by
    newRtmpBInputAttachmentName: order_by
    newRtmpBInputId: order_by
    newRtmpOutputStreamKey: order_by
    newRtmpOutputUri: order_by
    newRtmpRoomInputAttachmentName: order_by
    newRtmpRoomInputId: order_by
    oldRtmpBInputAttachmentName: order_by
    oldRtmpBInputId: order_by
    oldRtmpOutputDestinationId: order_by
    oldRtmpOutputStreamKey: order_by
    oldRtmpOutputUri: order_by
    oldRtmpRoomInputAttachmentName: order_by
    oldRtmpRoomInputId: order_by
    updated_at: order_by
}

"""
response of any mutation on the table "job_queues.ChannelStackUpdateJob"
"""
type job_queues_ChannelStackUpdateJob_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [job_queues_ChannelStackUpdateJob!]!
}

"""
on conflict condition type for table "job_queues.ChannelStackUpdateJob"
"""
input job_queues_ChannelStackUpdateJob_on_conflict {
    constraint: job_queues_ChannelStackUpdateJob_constraint!
    update_columns: [job_queues_ChannelStackUpdateJob_update_column!]! = []
    where: job_queues_ChannelStackUpdateJob_bool_exp
}

"""
Ordering options when selecting data from "job_queues.ChannelStackUpdateJob".
"""
input job_queues_ChannelStackUpdateJob_order_by {
    channelStack: video_ChannelStack_order_by
    channelStackId: order_by
    cloudFormationStackArn: order_by
    created_at: order_by
    id: order_by
    jobStatusName: order_by
    mediaLiveChannelId: order_by
    message: order_by
    newRtmpBInputAttachmentName: order_by
    newRtmpBInputId: order_by
    newRtmpOutputStreamKey: order_by
    newRtmpOutputUri: order_by
    newRtmpRoomInputAttachmentName: order_by
    newRtmpRoomInputId: order_by
    oldRtmpBInputAttachmentName: order_by
    oldRtmpBInputId: order_by
    oldRtmpOutputDestinationId: order_by
    oldRtmpOutputStreamKey: order_by
    oldRtmpOutputUri: order_by
    oldRtmpRoomInputAttachmentName: order_by
    oldRtmpRoomInputId: order_by
    updated_at: order_by
}

"""
primary key columns input for table: job_queues_ChannelStackUpdateJob
"""
input job_queues_ChannelStackUpdateJob_pk_columns_input {
    id: uuid!
}

"""
select columns of table "job_queues.ChannelStackUpdateJob"
"""
enum job_queues_ChannelStackUpdateJob_select_column {
    """
    column name
    """
    channelStackId
    """
    column name
    """
    cloudFormationStackArn
    """
    column name
    """
    created_at
    """
    column name
    """
    id
    """
    column name
    """
    jobStatusName
    """
    column name
    """
    mediaLiveChannelId
    """
    column name
    """
    message
    """
    column name
    """
    newRtmpBInputAttachmentName
    """
    column name
    """
    newRtmpBInputId
    """
    column name
    """
    newRtmpOutputStreamKey
    """
    column name
    """
    newRtmpOutputUri
    """
    column name
    """
    newRtmpRoomInputAttachmentName
    """
    column name
    """
    newRtmpRoomInputId
    """
    column name
    """
    oldRtmpBInputAttachmentName
    """
    column name
    """
    oldRtmpBInputId
    """
    column name
    """
    oldRtmpOutputDestinationId
    """
    column name
    """
    oldRtmpOutputStreamKey
    """
    column name
    """
    oldRtmpOutputUri
    """
    column name
    """
    oldRtmpRoomInputAttachmentName
    """
    column name
    """
    oldRtmpRoomInputId
    """
    column name
    """
    updated_at
}

"""
input type for updating data in table "job_queues.ChannelStackUpdateJob"
"""
input job_queues_ChannelStackUpdateJob_set_input {
    channelStackId: uuid
    cloudFormationStackArn: String
    created_at: timestamptz
    id: uuid
    jobStatusName: job_queues_JobStatus_enum
    mediaLiveChannelId: String
    message: String
    newRtmpBInputAttachmentName: String
    newRtmpBInputId: String
    newRtmpOutputStreamKey: String
    newRtmpOutputUri: String
    newRtmpRoomInputAttachmentName: String
    newRtmpRoomInputId: String
    oldRtmpBInputAttachmentName: String
    oldRtmpBInputId: String
    oldRtmpOutputDestinationId: String
    oldRtmpOutputStreamKey: String
    oldRtmpOutputUri: String
    oldRtmpRoomInputAttachmentName: String
    oldRtmpRoomInputId: String
    updated_at: timestamptz
}

"""
update columns of table "job_queues.ChannelStackUpdateJob"
"""
enum job_queues_ChannelStackUpdateJob_update_column {
    """
    column name
    """
    channelStackId
    """
    column name
    """
    cloudFormationStackArn
    """
    column name
    """
    created_at
    """
    column name
    """
    id
    """
    column name
    """
    jobStatusName
    """
    column name
    """
    mediaLiveChannelId
    """
    column name
    """
    message
    """
    column name
    """
    newRtmpBInputAttachmentName
    """
    column name
    """
    newRtmpBInputId
    """
    column name
    """
    newRtmpOutputStreamKey
    """
    column name
    """
    newRtmpOutputUri
    """
    column name
    """
    newRtmpRoomInputAttachmentName
    """
    column name
    """
    newRtmpRoomInputId
    """
    column name
    """
    oldRtmpBInputAttachmentName
    """
    column name
    """
    oldRtmpBInputId
    """
    column name
    """
    oldRtmpOutputDestinationId
    """
    column name
    """
    oldRtmpOutputStreamKey
    """
    column name
    """
    oldRtmpOutputUri
    """
    column name
    """
    oldRtmpRoomInputAttachmentName
    """
    column name
    """
    oldRtmpRoomInputId
    """
    column name
    """
    updated_at
}

"""
columns and relationships of "job_queues.CombineVideosJob"
"""
type job_queues_CombineVideosJob {
    """
    An object relationship
    """
    conference: conference_Conference!
    conferenceId: uuid!
    createdByRegistrantId: uuid
    created_at: timestamptz!
    data(
        """
        JSON select path
        """
        path: String
    ): jsonb!
    id: uuid!
    """
    An object relationship
    """
    jobStatus: job_queues_JobStatus!
    jobStatusName: job_queues_JobStatus_enum!
    mediaConvertJobId: String
    message: String
    outputName: String!
    """
    An object relationship
    """
    registrant: registrant_Registrant
    updated_at: timestamptz!
}

"""
aggregated selection of "job_queues.CombineVideosJob"
"""
type job_queues_CombineVideosJob_aggregate {
    aggregate: job_queues_CombineVideosJob_aggregate_fields
    nodes: [job_queues_CombineVideosJob!]!
}

"""
aggregate fields of "job_queues.CombineVideosJob"
"""
type job_queues_CombineVideosJob_aggregate_fields {
    count(columns: [job_queues_CombineVideosJob_select_column!], distinct: Boolean): Int!
    max: job_queues_CombineVideosJob_max_fields
    min: job_queues_CombineVideosJob_min_fields
}

"""
append existing jsonb value of filtered columns with new jsonb value
"""
input job_queues_CombineVideosJob_append_input {
    data: jsonb
}

"""
Boolean expression to filter rows from the table "job_queues.CombineVideosJob". All fields are combined with a logical 'AND'.
"""
input job_queues_CombineVideosJob_bool_exp {
    _and: [job_queues_CombineVideosJob_bool_exp!]
    _not: job_queues_CombineVideosJob_bool_exp
    _or: [job_queues_CombineVideosJob_bool_exp!]
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    createdByRegistrantId: uuid_comparison_exp
    created_at: timestamptz_comparison_exp
    data: jsonb_comparison_exp
    id: uuid_comparison_exp
    jobStatus: job_queues_JobStatus_bool_exp
    jobStatusName: job_queues_JobStatus_enum_comparison_exp
    mediaConvertJobId: String_comparison_exp
    message: String_comparison_exp
    outputName: String_comparison_exp
    registrant: registrant_Registrant_bool_exp
    updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "job_queues.CombineVideosJob"
"""
enum job_queues_CombineVideosJob_constraint {
    """
    unique or primary key constraint
    """
    CombineVideosJob_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input job_queues_CombineVideosJob_delete_at_path_input {
    data: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input job_queues_CombineVideosJob_delete_elem_input {
    data: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input job_queues_CombineVideosJob_delete_key_input {
    data: String
}

"""
input type for inserting data into table "job_queues.CombineVideosJob"
"""
input job_queues_CombineVideosJob_insert_input {
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    createdByRegistrantId: uuid
    created_at: timestamptz
    data: jsonb
    id: uuid
    jobStatus: job_queues_JobStatus_obj_rel_insert_input
    jobStatusName: job_queues_JobStatus_enum
    mediaConvertJobId: String
    message: String
    outputName: String
    registrant: registrant_Registrant_obj_rel_insert_input
    updated_at: timestamptz
}

"""
aggregate max on columns
"""
type job_queues_CombineVideosJob_max_fields {
    conferenceId: uuid
    createdByRegistrantId: uuid
    created_at: timestamptz
    id: uuid
    mediaConvertJobId: String
    message: String
    outputName: String
    updated_at: timestamptz
}

"""
aggregate min on columns
"""
type job_queues_CombineVideosJob_min_fields {
    conferenceId: uuid
    createdByRegistrantId: uuid
    created_at: timestamptz
    id: uuid
    mediaConvertJobId: String
    message: String
    outputName: String
    updated_at: timestamptz
}

"""
response of any mutation on the table "job_queues.CombineVideosJob"
"""
type job_queues_CombineVideosJob_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [job_queues_CombineVideosJob!]!
}

"""
on conflict condition type for table "job_queues.CombineVideosJob"
"""
input job_queues_CombineVideosJob_on_conflict {
    constraint: job_queues_CombineVideosJob_constraint!
    update_columns: [job_queues_CombineVideosJob_update_column!]! = []
    where: job_queues_CombineVideosJob_bool_exp
}

"""
Ordering options when selecting data from "job_queues.CombineVideosJob".
"""
input job_queues_CombineVideosJob_order_by {
    conference: conference_Conference_order_by
    conferenceId: order_by
    createdByRegistrantId: order_by
    created_at: order_by
    data: order_by
    id: order_by
    jobStatus: job_queues_JobStatus_order_by
    jobStatusName: order_by
    mediaConvertJobId: order_by
    message: order_by
    outputName: order_by
    registrant: registrant_Registrant_order_by
    updated_at: order_by
}

"""
primary key columns input for table: job_queues_CombineVideosJob
"""
input job_queues_CombineVideosJob_pk_columns_input {
    id: uuid!
}

"""
prepend existing jsonb value of filtered columns with new jsonb value
"""
input job_queues_CombineVideosJob_prepend_input {
    data: jsonb
}

"""
select columns of table "job_queues.CombineVideosJob"
"""
enum job_queues_CombineVideosJob_select_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdByRegistrantId
    """
    column name
    """
    created_at
    """
    column name
    """
    data
    """
    column name
    """
    id
    """
    column name
    """
    jobStatusName
    """
    column name
    """
    mediaConvertJobId
    """
    column name
    """
    message
    """
    column name
    """
    outputName
    """
    column name
    """
    updated_at
}

"""
input type for updating data in table "job_queues.CombineVideosJob"
"""
input job_queues_CombineVideosJob_set_input {
    conferenceId: uuid
    createdByRegistrantId: uuid
    created_at: timestamptz
    data: jsonb
    id: uuid
    jobStatusName: job_queues_JobStatus_enum
    mediaConvertJobId: String
    message: String
    outputName: String
    updated_at: timestamptz
}

"""
update columns of table "job_queues.CombineVideosJob"
"""
enum job_queues_CombineVideosJob_update_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdByRegistrantId
    """
    column name
    """
    created_at
    """
    column name
    """
    data
    """
    column name
    """
    id
    """
    column name
    """
    jobStatusName
    """
    column name
    """
    mediaConvertJobId
    """
    column name
    """
    message
    """
    column name
    """
    outputName
    """
    column name
    """
    updated_at
}

"""
columns and relationships of "job_queues.CustomEmailJob"
"""
type job_queues_CustomEmailJob {
    """
    An object relationship
    """
    conference: conference_Conference!
    conferenceId: uuid!
    created_at: timestamptz!
    id: uuid!
    markdownBody: String!
    processed: Boolean!
    registrantIds(
        """
        JSON select path
        """
        path: String
    ): jsonb!
    subconferenceId: uuid
    subject: String!
    updated_at: timestamptz!
}

"""
aggregated selection of "job_queues.CustomEmailJob"
"""
type job_queues_CustomEmailJob_aggregate {
    aggregate: job_queues_CustomEmailJob_aggregate_fields
    nodes: [job_queues_CustomEmailJob!]!
}

"""
aggregate fields of "job_queues.CustomEmailJob"
"""
type job_queues_CustomEmailJob_aggregate_fields {
    count(columns: [job_queues_CustomEmailJob_select_column!], distinct: Boolean): Int!
    max: job_queues_CustomEmailJob_max_fields
    min: job_queues_CustomEmailJob_min_fields
}

"""
append existing jsonb value of filtered columns with new jsonb value
"""
input job_queues_CustomEmailJob_append_input {
    registrantIds: jsonb
}

"""
Boolean expression to filter rows from the table "job_queues.CustomEmailJob". All fields are combined with a logical 'AND'.
"""
input job_queues_CustomEmailJob_bool_exp {
    _and: [job_queues_CustomEmailJob_bool_exp!]
    _not: job_queues_CustomEmailJob_bool_exp
    _or: [job_queues_CustomEmailJob_bool_exp!]
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    created_at: timestamptz_comparison_exp
    id: uuid_comparison_exp
    markdownBody: String_comparison_exp
    processed: Boolean_comparison_exp
    registrantIds: jsonb_comparison_exp
    subconferenceId: uuid_comparison_exp
    subject: String_comparison_exp
    updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "job_queues.CustomEmailJob"
"""
enum job_queues_CustomEmailJob_constraint {
    """
    unique or primary key constraint
    """
    CustomEmailJob_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input job_queues_CustomEmailJob_delete_at_path_input {
    registrantIds: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input job_queues_CustomEmailJob_delete_elem_input {
    registrantIds: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input job_queues_CustomEmailJob_delete_key_input {
    registrantIds: String
}

"""
input type for inserting data into table "job_queues.CustomEmailJob"
"""
input job_queues_CustomEmailJob_insert_input {
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    created_at: timestamptz
    id: uuid
    markdownBody: String
    processed: Boolean
    registrantIds: jsonb
    subconferenceId: uuid
    subject: String
    updated_at: timestamptz
}

"""
aggregate max on columns
"""
type job_queues_CustomEmailJob_max_fields {
    conferenceId: uuid
    created_at: timestamptz
    id: uuid
    markdownBody: String
    subconferenceId: uuid
    subject: String
    updated_at: timestamptz
}

"""
aggregate min on columns
"""
type job_queues_CustomEmailJob_min_fields {
    conferenceId: uuid
    created_at: timestamptz
    id: uuid
    markdownBody: String
    subconferenceId: uuid
    subject: String
    updated_at: timestamptz
}

"""
response of any mutation on the table "job_queues.CustomEmailJob"
"""
type job_queues_CustomEmailJob_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [job_queues_CustomEmailJob!]!
}

"""
on conflict condition type for table "job_queues.CustomEmailJob"
"""
input job_queues_CustomEmailJob_on_conflict {
    constraint: job_queues_CustomEmailJob_constraint!
    update_columns: [job_queues_CustomEmailJob_update_column!]! = []
    where: job_queues_CustomEmailJob_bool_exp
}

"""
Ordering options when selecting data from "job_queues.CustomEmailJob".
"""
input job_queues_CustomEmailJob_order_by {
    conference: conference_Conference_order_by
    conferenceId: order_by
    created_at: order_by
    id: order_by
    markdownBody: order_by
    processed: order_by
    registrantIds: order_by
    subconferenceId: order_by
    subject: order_by
    updated_at: order_by
}

"""
primary key columns input for table: job_queues_CustomEmailJob
"""
input job_queues_CustomEmailJob_pk_columns_input {
    id: uuid!
}

"""
prepend existing jsonb value of filtered columns with new jsonb value
"""
input job_queues_CustomEmailJob_prepend_input {
    registrantIds: jsonb
}

"""
select columns of table "job_queues.CustomEmailJob"
"""
enum job_queues_CustomEmailJob_select_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    created_at
    """
    column name
    """
    id
    """
    column name
    """
    markdownBody
    """
    column name
    """
    processed
    """
    column name
    """
    registrantIds
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    subject
    """
    column name
    """
    updated_at
}

"""
input type for updating data in table "job_queues.CustomEmailJob"
"""
input job_queues_CustomEmailJob_set_input {
    conferenceId: uuid
    created_at: timestamptz
    id: uuid
    markdownBody: String
    processed: Boolean
    registrantIds: jsonb
    subconferenceId: uuid
    subject: String
    updated_at: timestamptz
}

"""
update columns of table "job_queues.CustomEmailJob"
"""
enum job_queues_CustomEmailJob_update_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    created_at
    """
    column name
    """
    id
    """
    column name
    """
    markdownBody
    """
    column name
    """
    processed
    """
    column name
    """
    registrantIds
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    subject
    """
    column name
    """
    updated_at
}

"""
columns and relationships of "job_queues.ImportJob"
"""
type job_queues_ImportJob {
    completed_at: timestamptz
    """
    An object relationship
    """
    conference: conference_Conference!
    conferenceId: uuid!
    createdBy: uuid
    created_at: timestamptz!
    """
    An object relationship
    """
    creator: registrant_Registrant
    data(
        """
        JSON select path
        """
        path: String
    ): jsonb!
    errors(
        """
        JSON select path
        """
        path: String
    ): jsonb
    id: uuid!
    options(
        """
        JSON select path
        """
        path: String
    ): jsonb!
    """
    An array relationship
    """
    outputs(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_ImportJobOutput_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_ImportJobOutput_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_ImportJobOutput_bool_exp
    ): [job_queues_ImportJobOutput!]!
    """
    An aggregate relationship
    """
    outputs_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_ImportJobOutput_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_ImportJobOutput_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_ImportJobOutput_bool_exp
    ): job_queues_ImportJobOutput_aggregate!
    progress: Int!
    progressMaximum: Int!
    status: String!
    """
    An object relationship
    """
    subconference: conference_Subconference
    subconferenceId: uuid
    updated_at: timestamptz!
}

"""
columns and relationships of "job_queues.ImportJobOutput"
"""
type job_queues_ImportJobOutput {
    created_at: timestamptz!
    id: uuid!
    jobId: uuid!
    name: String!
    updated_at: timestamptz!
    value(
        """
        JSON select path
        """
        path: String
    ): jsonb!
}

"""
aggregated selection of "job_queues.ImportJobOutput"
"""
type job_queues_ImportJobOutput_aggregate {
    aggregate: job_queues_ImportJobOutput_aggregate_fields
    nodes: [job_queues_ImportJobOutput!]!
}

"""
aggregate fields of "job_queues.ImportJobOutput"
"""
type job_queues_ImportJobOutput_aggregate_fields {
    count(columns: [job_queues_ImportJobOutput_select_column!], distinct: Boolean): Int!
    max: job_queues_ImportJobOutput_max_fields
    min: job_queues_ImportJobOutput_min_fields
}

"""
order by aggregate values of table "job_queues.ImportJobOutput"
"""
input job_queues_ImportJobOutput_aggregate_order_by {
    count: order_by
    max: job_queues_ImportJobOutput_max_order_by
    min: job_queues_ImportJobOutput_min_order_by
}

"""
append existing jsonb value of filtered columns with new jsonb value
"""
input job_queues_ImportJobOutput_append_input {
    value: jsonb
}

"""
input type for inserting array relation for remote table "job_queues.ImportJobOutput"
"""
input job_queues_ImportJobOutput_arr_rel_insert_input {
    data: [job_queues_ImportJobOutput_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: job_queues_ImportJobOutput_on_conflict
}

"""
Boolean expression to filter rows from the table "job_queues.ImportJobOutput". All fields are combined with a logical 'AND'.
"""
input job_queues_ImportJobOutput_bool_exp {
    _and: [job_queues_ImportJobOutput_bool_exp!]
    _not: job_queues_ImportJobOutput_bool_exp
    _or: [job_queues_ImportJobOutput_bool_exp!]
    created_at: timestamptz_comparison_exp
    id: uuid_comparison_exp
    jobId: uuid_comparison_exp
    name: String_comparison_exp
    updated_at: timestamptz_comparison_exp
    value: jsonb_comparison_exp
}

"""
unique or primary key constraints on table "job_queues.ImportJobOutput"
"""
enum job_queues_ImportJobOutput_constraint {
    """
    unique or primary key constraint
    """
    ImportJobOutput_jobId_name_key
    """
    unique or primary key constraint
    """
    ImportJobOutput_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input job_queues_ImportJobOutput_delete_at_path_input {
    value: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input job_queues_ImportJobOutput_delete_elem_input {
    value: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input job_queues_ImportJobOutput_delete_key_input {
    value: String
}

"""
input type for inserting data into table "job_queues.ImportJobOutput"
"""
input job_queues_ImportJobOutput_insert_input {
    created_at: timestamptz
    id: uuid
    jobId: uuid
    name: String
    updated_at: timestamptz
    value: jsonb
}

"""
aggregate max on columns
"""
type job_queues_ImportJobOutput_max_fields {
    created_at: timestamptz
    id: uuid
    jobId: uuid
    name: String
    updated_at: timestamptz
}

"""
order by max() on columns of table "job_queues.ImportJobOutput"
"""
input job_queues_ImportJobOutput_max_order_by {
    created_at: order_by
    id: order_by
    jobId: order_by
    name: order_by
    updated_at: order_by
}

"""
aggregate min on columns
"""
type job_queues_ImportJobOutput_min_fields {
    created_at: timestamptz
    id: uuid
    jobId: uuid
    name: String
    updated_at: timestamptz
}

"""
order by min() on columns of table "job_queues.ImportJobOutput"
"""
input job_queues_ImportJobOutput_min_order_by {
    created_at: order_by
    id: order_by
    jobId: order_by
    name: order_by
    updated_at: order_by
}

"""
response of any mutation on the table "job_queues.ImportJobOutput"
"""
type job_queues_ImportJobOutput_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [job_queues_ImportJobOutput!]!
}

"""
on conflict condition type for table "job_queues.ImportJobOutput"
"""
input job_queues_ImportJobOutput_on_conflict {
    constraint: job_queues_ImportJobOutput_constraint!
    update_columns: [job_queues_ImportJobOutput_update_column!]! = []
    where: job_queues_ImportJobOutput_bool_exp
}

"""
Ordering options when selecting data from "job_queues.ImportJobOutput".
"""
input job_queues_ImportJobOutput_order_by {
    created_at: order_by
    id: order_by
    jobId: order_by
    name: order_by
    updated_at: order_by
    value: order_by
}

"""
primary key columns input for table: job_queues_ImportJobOutput
"""
input job_queues_ImportJobOutput_pk_columns_input {
    id: uuid!
}

"""
prepend existing jsonb value of filtered columns with new jsonb value
"""
input job_queues_ImportJobOutput_prepend_input {
    value: jsonb
}

"""
select columns of table "job_queues.ImportJobOutput"
"""
enum job_queues_ImportJobOutput_select_column {
    """
    column name
    """
    created_at
    """
    column name
    """
    id
    """
    column name
    """
    jobId
    """
    column name
    """
    name
    """
    column name
    """
    updated_at
    """
    column name
    """
    value
}

"""
input type for updating data in table "job_queues.ImportJobOutput"
"""
input job_queues_ImportJobOutput_set_input {
    created_at: timestamptz
    id: uuid
    jobId: uuid
    name: String
    updated_at: timestamptz
    value: jsonb
}

"""
update columns of table "job_queues.ImportJobOutput"
"""
enum job_queues_ImportJobOutput_update_column {
    """
    column name
    """
    created_at
    """
    column name
    """
    id
    """
    column name
    """
    jobId
    """
    column name
    """
    name
    """
    column name
    """
    updated_at
    """
    column name
    """
    value
}

"""
aggregated selection of "job_queues.ImportJob"
"""
type job_queues_ImportJob_aggregate {
    aggregate: job_queues_ImportJob_aggregate_fields
    nodes: [job_queues_ImportJob!]!
}

"""
aggregate fields of "job_queues.ImportJob"
"""
type job_queues_ImportJob_aggregate_fields {
    avg: job_queues_ImportJob_avg_fields
    count(columns: [job_queues_ImportJob_select_column!], distinct: Boolean): Int!
    max: job_queues_ImportJob_max_fields
    min: job_queues_ImportJob_min_fields
    stddev: job_queues_ImportJob_stddev_fields
    stddev_pop: job_queues_ImportJob_stddev_pop_fields
    stddev_samp: job_queues_ImportJob_stddev_samp_fields
    sum: job_queues_ImportJob_sum_fields
    var_pop: job_queues_ImportJob_var_pop_fields
    var_samp: job_queues_ImportJob_var_samp_fields
    variance: job_queues_ImportJob_variance_fields
}

"""
append existing jsonb value of filtered columns with new jsonb value
"""
input job_queues_ImportJob_append_input {
    data: jsonb
    errors: jsonb
    options: jsonb
}

"""
aggregate avg on columns
"""
type job_queues_ImportJob_avg_fields {
    progress: Float
    progressMaximum: Float
}

"""
Boolean expression to filter rows from the table "job_queues.ImportJob". All fields are combined with a logical 'AND'.
"""
input job_queues_ImportJob_bool_exp {
    _and: [job_queues_ImportJob_bool_exp!]
    _not: job_queues_ImportJob_bool_exp
    _or: [job_queues_ImportJob_bool_exp!]
    completed_at: timestamptz_comparison_exp
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    createdBy: uuid_comparison_exp
    created_at: timestamptz_comparison_exp
    creator: registrant_Registrant_bool_exp
    data: jsonb_comparison_exp
    errors: jsonb_comparison_exp
    id: uuid_comparison_exp
    options: jsonb_comparison_exp
    outputs: job_queues_ImportJobOutput_bool_exp
    progress: Int_comparison_exp
    progressMaximum: Int_comparison_exp
    status: String_comparison_exp
    subconference: conference_Subconference_bool_exp
    subconferenceId: uuid_comparison_exp
    updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "job_queues.ImportJob"
"""
enum job_queues_ImportJob_constraint {
    """
    unique or primary key constraint
    """
    ImportJob_conferenceId_status_key
    """
    unique or primary key constraint
    """
    ImportJob_conferenceId_subconferenceId_status_key
    """
    unique or primary key constraint
    """
    ImportJob_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input job_queues_ImportJob_delete_at_path_input {
    data: [String!]
    errors: [String!]
    options: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input job_queues_ImportJob_delete_elem_input {
    data: Int
    errors: Int
    options: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input job_queues_ImportJob_delete_key_input {
    data: String
    errors: String
    options: String
}

"""
input type for incrementing numeric columns in table "job_queues.ImportJob"
"""
input job_queues_ImportJob_inc_input {
    progress: Int
    progressMaximum: Int
}

"""
input type for inserting data into table "job_queues.ImportJob"
"""
input job_queues_ImportJob_insert_input {
    completed_at: timestamptz
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    createdBy: uuid
    created_at: timestamptz
    creator: registrant_Registrant_obj_rel_insert_input
    data: jsonb
    errors: jsonb
    id: uuid
    options: jsonb
    outputs: job_queues_ImportJobOutput_arr_rel_insert_input
    progress: Int
    progressMaximum: Int
    status: String
    subconference: conference_Subconference_obj_rel_insert_input
    subconferenceId: uuid
    updated_at: timestamptz
}

"""
aggregate max on columns
"""
type job_queues_ImportJob_max_fields {
    completed_at: timestamptz
    conferenceId: uuid
    createdBy: uuid
    created_at: timestamptz
    id: uuid
    progress: Int
    progressMaximum: Int
    status: String
    subconferenceId: uuid
    updated_at: timestamptz
}

"""
aggregate min on columns
"""
type job_queues_ImportJob_min_fields {
    completed_at: timestamptz
    conferenceId: uuid
    createdBy: uuid
    created_at: timestamptz
    id: uuid
    progress: Int
    progressMaximum: Int
    status: String
    subconferenceId: uuid
    updated_at: timestamptz
}

"""
response of any mutation on the table "job_queues.ImportJob"
"""
type job_queues_ImportJob_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [job_queues_ImportJob!]!
}

"""
on conflict condition type for table "job_queues.ImportJob"
"""
input job_queues_ImportJob_on_conflict {
    constraint: job_queues_ImportJob_constraint!
    update_columns: [job_queues_ImportJob_update_column!]! = []
    where: job_queues_ImportJob_bool_exp
}

"""
Ordering options when selecting data from "job_queues.ImportJob".
"""
input job_queues_ImportJob_order_by {
    completed_at: order_by
    conference: conference_Conference_order_by
    conferenceId: order_by
    createdBy: order_by
    created_at: order_by
    creator: registrant_Registrant_order_by
    data: order_by
    errors: order_by
    id: order_by
    options: order_by
    outputs_aggregate: job_queues_ImportJobOutput_aggregate_order_by
    progress: order_by
    progressMaximum: order_by
    status: order_by
    subconference: conference_Subconference_order_by
    subconferenceId: order_by
    updated_at: order_by
}

"""
primary key columns input for table: job_queues_ImportJob
"""
input job_queues_ImportJob_pk_columns_input {
    id: uuid!
}

"""
prepend existing jsonb value of filtered columns with new jsonb value
"""
input job_queues_ImportJob_prepend_input {
    data: jsonb
    errors: jsonb
    options: jsonb
}

"""
select columns of table "job_queues.ImportJob"
"""
enum job_queues_ImportJob_select_column {
    """
    column name
    """
    completed_at
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdBy
    """
    column name
    """
    created_at
    """
    column name
    """
    data
    """
    column name
    """
    errors
    """
    column name
    """
    id
    """
    column name
    """
    options
    """
    column name
    """
    progress
    """
    column name
    """
    progressMaximum
    """
    column name
    """
    status
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updated_at
}

"""
input type for updating data in table "job_queues.ImportJob"
"""
input job_queues_ImportJob_set_input {
    completed_at: timestamptz
    conferenceId: uuid
    createdBy: uuid
    created_at: timestamptz
    data: jsonb
    errors: jsonb
    id: uuid
    options: jsonb
    progress: Int
    progressMaximum: Int
    status: String
    subconferenceId: uuid
    updated_at: timestamptz
}

"""
aggregate stddev on columns
"""
type job_queues_ImportJob_stddev_fields {
    progress: Float
    progressMaximum: Float
}

"""
aggregate stddev_pop on columns
"""
type job_queues_ImportJob_stddev_pop_fields {
    progress: Float
    progressMaximum: Float
}

"""
aggregate stddev_samp on columns
"""
type job_queues_ImportJob_stddev_samp_fields {
    progress: Float
    progressMaximum: Float
}

"""
aggregate sum on columns
"""
type job_queues_ImportJob_sum_fields {
    progress: Int
    progressMaximum: Int
}

"""
update columns of table "job_queues.ImportJob"
"""
enum job_queues_ImportJob_update_column {
    """
    column name
    """
    completed_at
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdBy
    """
    column name
    """
    created_at
    """
    column name
    """
    data
    """
    column name
    """
    errors
    """
    column name
    """
    id
    """
    column name
    """
    options
    """
    column name
    """
    progress
    """
    column name
    """
    progressMaximum
    """
    column name
    """
    status
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updated_at
}

"""
aggregate var_pop on columns
"""
type job_queues_ImportJob_var_pop_fields {
    progress: Float
    progressMaximum: Float
}

"""
aggregate var_samp on columns
"""
type job_queues_ImportJob_var_samp_fields {
    progress: Float
    progressMaximum: Float
}

"""
aggregate variance on columns
"""
type job_queues_ImportJob_variance_fields {
    progress: Float
    progressMaximum: Float
}

"""
columns and relationships of "job_queues.InvitationEmailJob"
"""
type job_queues_InvitationEmailJob {
    """
    An object relationship
    """
    conference: conference_Conference!
    conferenceId: uuid!
    createdAt: timestamptz!
    id: uuid!
    processed: Boolean!
    registrantIds(
        """
        JSON select path
        """
        path: String
    ): jsonb!
    sendRepeat: Boolean!
    updatedAt: timestamptz!
}

"""
aggregated selection of "job_queues.InvitationEmailJob"
"""
type job_queues_InvitationEmailJob_aggregate {
    aggregate: job_queues_InvitationEmailJob_aggregate_fields
    nodes: [job_queues_InvitationEmailJob!]!
}

"""
aggregate fields of "job_queues.InvitationEmailJob"
"""
type job_queues_InvitationEmailJob_aggregate_fields {
    count(columns: [job_queues_InvitationEmailJob_select_column!], distinct: Boolean): Int!
    max: job_queues_InvitationEmailJob_max_fields
    min: job_queues_InvitationEmailJob_min_fields
}

"""
append existing jsonb value of filtered columns with new jsonb value
"""
input job_queues_InvitationEmailJob_append_input {
    registrantIds: jsonb
}

"""
Boolean expression to filter rows from the table "job_queues.InvitationEmailJob". All fields are combined with a logical 'AND'.
"""
input job_queues_InvitationEmailJob_bool_exp {
    _and: [job_queues_InvitationEmailJob_bool_exp!]
    _not: job_queues_InvitationEmailJob_bool_exp
    _or: [job_queues_InvitationEmailJob_bool_exp!]
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    createdAt: timestamptz_comparison_exp
    id: uuid_comparison_exp
    processed: Boolean_comparison_exp
    registrantIds: jsonb_comparison_exp
    sendRepeat: Boolean_comparison_exp
    updatedAt: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "job_queues.InvitationEmailJob"
"""
enum job_queues_InvitationEmailJob_constraint {
    """
    unique or primary key constraint
    """
    InvitationEmailJobs_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input job_queues_InvitationEmailJob_delete_at_path_input {
    registrantIds: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input job_queues_InvitationEmailJob_delete_elem_input {
    registrantIds: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input job_queues_InvitationEmailJob_delete_key_input {
    registrantIds: String
}

"""
input type for inserting data into table "job_queues.InvitationEmailJob"
"""
input job_queues_InvitationEmailJob_insert_input {
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    processed: Boolean
    registrantIds: jsonb
    sendRepeat: Boolean
    updatedAt: timestamptz
}

"""
aggregate max on columns
"""
type job_queues_InvitationEmailJob_max_fields {
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    updatedAt: timestamptz
}

"""
aggregate min on columns
"""
type job_queues_InvitationEmailJob_min_fields {
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    updatedAt: timestamptz
}

"""
response of any mutation on the table "job_queues.InvitationEmailJob"
"""
type job_queues_InvitationEmailJob_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [job_queues_InvitationEmailJob!]!
}

"""
on conflict condition type for table "job_queues.InvitationEmailJob"
"""
input job_queues_InvitationEmailJob_on_conflict {
    constraint: job_queues_InvitationEmailJob_constraint!
    update_columns: [job_queues_InvitationEmailJob_update_column!]! = []
    where: job_queues_InvitationEmailJob_bool_exp
}

"""
Ordering options when selecting data from "job_queues.InvitationEmailJob".
"""
input job_queues_InvitationEmailJob_order_by {
    conference: conference_Conference_order_by
    conferenceId: order_by
    createdAt: order_by
    id: order_by
    processed: order_by
    registrantIds: order_by
    sendRepeat: order_by
    updatedAt: order_by
}

"""
primary key columns input for table: job_queues_InvitationEmailJob
"""
input job_queues_InvitationEmailJob_pk_columns_input {
    id: uuid!
}

"""
prepend existing jsonb value of filtered columns with new jsonb value
"""
input job_queues_InvitationEmailJob_prepend_input {
    registrantIds: jsonb
}

"""
select columns of table "job_queues.InvitationEmailJob"
"""
enum job_queues_InvitationEmailJob_select_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    id
    """
    column name
    """
    processed
    """
    column name
    """
    registrantIds
    """
    column name
    """
    sendRepeat
    """
    column name
    """
    updatedAt
}

"""
input type for updating data in table "job_queues.InvitationEmailJob"
"""
input job_queues_InvitationEmailJob_set_input {
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    processed: Boolean
    registrantIds: jsonb
    sendRepeat: Boolean
    updatedAt: timestamptz
}

"""
update columns of table "job_queues.InvitationEmailJob"
"""
enum job_queues_InvitationEmailJob_update_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    id
    """
    column name
    """
    processed
    """
    column name
    """
    registrantIds
    """
    column name
    """
    sendRepeat
    """
    column name
    """
    updatedAt
}

"""
columns and relationships of "job_queues.JobStatus"
"""
type job_queues_JobStatus {
    description: String!
    name: String!
}

"""
aggregated selection of "job_queues.JobStatus"
"""
type job_queues_JobStatus_aggregate {
    aggregate: job_queues_JobStatus_aggregate_fields
    nodes: [job_queues_JobStatus!]!
}

"""
aggregate fields of "job_queues.JobStatus"
"""
type job_queues_JobStatus_aggregate_fields {
    count(columns: [job_queues_JobStatus_select_column!], distinct: Boolean): Int!
    max: job_queues_JobStatus_max_fields
    min: job_queues_JobStatus_min_fields
}

"""
Boolean expression to filter rows from the table "job_queues.JobStatus". All fields are combined with a logical 'AND'.
"""
input job_queues_JobStatus_bool_exp {
    _and: [job_queues_JobStatus_bool_exp!]
    _not: job_queues_JobStatus_bool_exp
    _or: [job_queues_JobStatus_bool_exp!]
    description: String_comparison_exp
    name: String_comparison_exp
}

"""
unique or primary key constraints on table "job_queues.JobStatus"
"""
enum job_queues_JobStatus_constraint {
    """
    unique or primary key constraint
    """
    JobStatus_pkey
}

enum job_queues_JobStatus_enum {
    """
    Job completed successfully.
    """
    COMPLETED
    """
    Job is no longer valid.
    """
    EXPIRED
    """
    Job failed during execution.
    """
    FAILED
    """
    Job is currently in progress.
    """
    IN_PROGRESS
    """
    Job has not yet started execution.
    """
    NEW
}

"""
Boolean expression to compare columns of type "job_queues_JobStatus_enum". All fields are combined with logical 'AND'.
"""
input job_queues_JobStatus_enum_comparison_exp {
    _eq: job_queues_JobStatus_enum
    _in: [job_queues_JobStatus_enum!]
    _is_null: Boolean
    _neq: job_queues_JobStatus_enum
    _nin: [job_queues_JobStatus_enum!]
}

"""
input type for inserting data into table "job_queues.JobStatus"
"""
input job_queues_JobStatus_insert_input {
    description: String
    name: String
}

"""
aggregate max on columns
"""
type job_queues_JobStatus_max_fields {
    description: String
    name: String
}

"""
aggregate min on columns
"""
type job_queues_JobStatus_min_fields {
    description: String
    name: String
}

"""
response of any mutation on the table "job_queues.JobStatus"
"""
type job_queues_JobStatus_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [job_queues_JobStatus!]!
}

"""
input type for inserting object relation for remote table "job_queues.JobStatus"
"""
input job_queues_JobStatus_obj_rel_insert_input {
    data: job_queues_JobStatus_insert_input!
    """
    on conflict condition
    """
    on_conflict: job_queues_JobStatus_on_conflict
}

"""
on conflict condition type for table "job_queues.JobStatus"
"""
input job_queues_JobStatus_on_conflict {
    constraint: job_queues_JobStatus_constraint!
    update_columns: [job_queues_JobStatus_update_column!]! = []
    where: job_queues_JobStatus_bool_exp
}

"""
Ordering options when selecting data from "job_queues.JobStatus".
"""
input job_queues_JobStatus_order_by {
    description: order_by
    name: order_by
}

"""
primary key columns input for table: job_queues_JobStatus
"""
input job_queues_JobStatus_pk_columns_input {
    name: String!
}

"""
select columns of table "job_queues.JobStatus"
"""
enum job_queues_JobStatus_select_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
input type for updating data in table "job_queues.JobStatus"
"""
input job_queues_JobStatus_set_input {
    description: String
    name: String
}

"""
update columns of table "job_queues.JobStatus"
"""
enum job_queues_JobStatus_update_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
columns and relationships of "job_queues.MediaPackageHarvestJob"
"""
type job_queues_MediaPackageHarvestJob {
    """
    An object relationship
    """
    conference: conference_Conference!
    conferenceId: uuid!
    created_at: timestamptz!
    """
    An object relationship
    """
    event: schedule_Event!
    eventId: uuid!
    id: uuid!
    """
    An object relationship
    """
    jobStatus: job_queues_JobStatus!
    jobStatusName: job_queues_JobStatus_enum!
    mediaPackageHarvestJobId: String
    message: String
    updated_at: timestamptz!
}

"""
aggregated selection of "job_queues.MediaPackageHarvestJob"
"""
type job_queues_MediaPackageHarvestJob_aggregate {
    aggregate: job_queues_MediaPackageHarvestJob_aggregate_fields
    nodes: [job_queues_MediaPackageHarvestJob!]!
}

"""
aggregate fields of "job_queues.MediaPackageHarvestJob"
"""
type job_queues_MediaPackageHarvestJob_aggregate_fields {
    count(columns: [job_queues_MediaPackageHarvestJob_select_column!], distinct: Boolean): Int!
    max: job_queues_MediaPackageHarvestJob_max_fields
    min: job_queues_MediaPackageHarvestJob_min_fields
}

"""
Boolean expression to filter rows from the table "job_queues.MediaPackageHarvestJob". All fields are combined with a logical 'AND'.
"""
input job_queues_MediaPackageHarvestJob_bool_exp {
    _and: [job_queues_MediaPackageHarvestJob_bool_exp!]
    _not: job_queues_MediaPackageHarvestJob_bool_exp
    _or: [job_queues_MediaPackageHarvestJob_bool_exp!]
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    created_at: timestamptz_comparison_exp
    event: schedule_Event_bool_exp
    eventId: uuid_comparison_exp
    id: uuid_comparison_exp
    jobStatus: job_queues_JobStatus_bool_exp
    jobStatusName: job_queues_JobStatus_enum_comparison_exp
    mediaPackageHarvestJobId: String_comparison_exp
    message: String_comparison_exp
    updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "job_queues.MediaPackageHarvestJob"
"""
enum job_queues_MediaPackageHarvestJob_constraint {
    """
    unique or primary key constraint
    """
    MediaPackageHarvestJob_mediaPackageHarvestJobId_key
    """
    unique or primary key constraint
    """
    MediaPackageHarvestJob_pkey
}

"""
input type for inserting data into table "job_queues.MediaPackageHarvestJob"
"""
input job_queues_MediaPackageHarvestJob_insert_input {
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    created_at: timestamptz
    event: schedule_Event_obj_rel_insert_input
    eventId: uuid
    id: uuid
    jobStatus: job_queues_JobStatus_obj_rel_insert_input
    jobStatusName: job_queues_JobStatus_enum
    mediaPackageHarvestJobId: String
    message: String
    updated_at: timestamptz
}

"""
aggregate max on columns
"""
type job_queues_MediaPackageHarvestJob_max_fields {
    conferenceId: uuid
    created_at: timestamptz
    eventId: uuid
    id: uuid
    mediaPackageHarvestJobId: String
    message: String
    updated_at: timestamptz
}

"""
aggregate min on columns
"""
type job_queues_MediaPackageHarvestJob_min_fields {
    conferenceId: uuid
    created_at: timestamptz
    eventId: uuid
    id: uuid
    mediaPackageHarvestJobId: String
    message: String
    updated_at: timestamptz
}

"""
response of any mutation on the table "job_queues.MediaPackageHarvestJob"
"""
type job_queues_MediaPackageHarvestJob_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [job_queues_MediaPackageHarvestJob!]!
}

"""
on conflict condition type for table "job_queues.MediaPackageHarvestJob"
"""
input job_queues_MediaPackageHarvestJob_on_conflict {
    constraint: job_queues_MediaPackageHarvestJob_constraint!
    update_columns: [job_queues_MediaPackageHarvestJob_update_column!]! = []
    where: job_queues_MediaPackageHarvestJob_bool_exp
}

"""
Ordering options when selecting data from "job_queues.MediaPackageHarvestJob".
"""
input job_queues_MediaPackageHarvestJob_order_by {
    conference: conference_Conference_order_by
    conferenceId: order_by
    created_at: order_by
    event: schedule_Event_order_by
    eventId: order_by
    id: order_by
    jobStatus: job_queues_JobStatus_order_by
    jobStatusName: order_by
    mediaPackageHarvestJobId: order_by
    message: order_by
    updated_at: order_by
}

"""
primary key columns input for table: job_queues_MediaPackageHarvestJob
"""
input job_queues_MediaPackageHarvestJob_pk_columns_input {
    id: uuid!
}

"""
select columns of table "job_queues.MediaPackageHarvestJob"
"""
enum job_queues_MediaPackageHarvestJob_select_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    created_at
    """
    column name
    """
    eventId
    """
    column name
    """
    id
    """
    column name
    """
    jobStatusName
    """
    column name
    """
    mediaPackageHarvestJobId
    """
    column name
    """
    message
    """
    column name
    """
    updated_at
}

"""
input type for updating data in table "job_queues.MediaPackageHarvestJob"
"""
input job_queues_MediaPackageHarvestJob_set_input {
    conferenceId: uuid
    created_at: timestamptz
    eventId: uuid
    id: uuid
    jobStatusName: job_queues_JobStatus_enum
    mediaPackageHarvestJobId: String
    message: String
    updated_at: timestamptz
}

"""
update columns of table "job_queues.MediaPackageHarvestJob"
"""
enum job_queues_MediaPackageHarvestJob_update_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    created_at
    """
    column name
    """
    eventId
    """
    column name
    """
    id
    """
    column name
    """
    jobStatusName
    """
    column name
    """
    mediaPackageHarvestJobId
    """
    column name
    """
    message
    """
    column name
    """
    updated_at
}

"""
columns and relationships of "job_queues.PrepareJob"
"""
type job_queues_PrepareJob {
    """
    An object relationship
    """
    conference: conference_Conference!
    conferenceId: uuid!
    createdAt: timestamptz!
    id: uuid!
    """
    An object relationship
    """
    jobStatus: job_queues_JobStatus!
    jobStatusName: job_queues_JobStatus_enum!
    message: String
    updatedAt: timestamptz!
    """
    An array relationship
    """
    videoRenderJobs(
        """
        distinct select on columns
        """
        distinct_on: [video_VideoRenderJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_VideoRenderJob_order_by!]
        """
        filter the rows returned
        """
        where: video_VideoRenderJob_bool_exp
    ): [video_VideoRenderJob!]!
    """
    An aggregate relationship
    """
    videoRenderJobs_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_VideoRenderJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_VideoRenderJob_order_by!]
        """
        filter the rows returned
        """
        where: video_VideoRenderJob_bool_exp
    ): video_VideoRenderJob_aggregate!
}

"""
aggregated selection of "job_queues.PrepareJob"
"""
type job_queues_PrepareJob_aggregate {
    aggregate: job_queues_PrepareJob_aggregate_fields
    nodes: [job_queues_PrepareJob!]!
}

"""
aggregate fields of "job_queues.PrepareJob"
"""
type job_queues_PrepareJob_aggregate_fields {
    count(columns: [job_queues_PrepareJob_select_column!], distinct: Boolean): Int!
    max: job_queues_PrepareJob_max_fields
    min: job_queues_PrepareJob_min_fields
}

"""
Boolean expression to filter rows from the table "job_queues.PrepareJob". All fields are combined with a logical 'AND'.
"""
input job_queues_PrepareJob_bool_exp {
    _and: [job_queues_PrepareJob_bool_exp!]
    _not: job_queues_PrepareJob_bool_exp
    _or: [job_queues_PrepareJob_bool_exp!]
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    createdAt: timestamptz_comparison_exp
    id: uuid_comparison_exp
    jobStatus: job_queues_JobStatus_bool_exp
    jobStatusName: job_queues_JobStatus_enum_comparison_exp
    message: String_comparison_exp
    updatedAt: timestamptz_comparison_exp
    videoRenderJobs: video_VideoRenderJob_bool_exp
}

"""
unique or primary key constraints on table "job_queues.PrepareJob"
"""
enum job_queues_PrepareJob_constraint {
    """
    unique or primary key constraint
    """
    PrepareJob_pkey
}

"""
input type for inserting data into table "job_queues.PrepareJob"
"""
input job_queues_PrepareJob_insert_input {
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    jobStatus: job_queues_JobStatus_obj_rel_insert_input
    jobStatusName: job_queues_JobStatus_enum
    message: String
    updatedAt: timestamptz
    videoRenderJobs: video_VideoRenderJob_arr_rel_insert_input
}

"""
aggregate max on columns
"""
type job_queues_PrepareJob_max_fields {
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    message: String
    updatedAt: timestamptz
}

"""
aggregate min on columns
"""
type job_queues_PrepareJob_min_fields {
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    message: String
    updatedAt: timestamptz
}

"""
response of any mutation on the table "job_queues.PrepareJob"
"""
type job_queues_PrepareJob_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [job_queues_PrepareJob!]!
}

"""
input type for inserting object relation for remote table "job_queues.PrepareJob"
"""
input job_queues_PrepareJob_obj_rel_insert_input {
    data: job_queues_PrepareJob_insert_input!
    """
    on conflict condition
    """
    on_conflict: job_queues_PrepareJob_on_conflict
}

"""
on conflict condition type for table "job_queues.PrepareJob"
"""
input job_queues_PrepareJob_on_conflict {
    constraint: job_queues_PrepareJob_constraint!
    update_columns: [job_queues_PrepareJob_update_column!]! = []
    where: job_queues_PrepareJob_bool_exp
}

"""
Ordering options when selecting data from "job_queues.PrepareJob".
"""
input job_queues_PrepareJob_order_by {
    conference: conference_Conference_order_by
    conferenceId: order_by
    createdAt: order_by
    id: order_by
    jobStatus: job_queues_JobStatus_order_by
    jobStatusName: order_by
    message: order_by
    updatedAt: order_by
    videoRenderJobs_aggregate: video_VideoRenderJob_aggregate_order_by
}

"""
primary key columns input for table: job_queues_PrepareJob
"""
input job_queues_PrepareJob_pk_columns_input {
    id: uuid!
}

"""
select columns of table "job_queues.PrepareJob"
"""
enum job_queues_PrepareJob_select_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    id
    """
    column name
    """
    jobStatusName
    """
    column name
    """
    message
    """
    column name
    """
    updatedAt
}

"""
input type for updating data in table "job_queues.PrepareJob"
"""
input job_queues_PrepareJob_set_input {
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    jobStatusName: job_queues_JobStatus_enum
    message: String
    updatedAt: timestamptz
}

"""
update columns of table "job_queues.PrepareJob"
"""
enum job_queues_PrepareJob_update_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    id
    """
    column name
    """
    jobStatusName
    """
    column name
    """
    message
    """
    column name
    """
    updatedAt
}

"""
columns and relationships of "job_queues.PublishVideoJob"
"""
type job_queues_PublishVideoJob {
    """
    An object relationship
    """
    conference: conference_Conference!
    conferenceId: uuid!
    createdAt: timestamptz!
    """
    An object relationship
    """
    element: content_Element!
    elementId: uuid!
    id: uuid!
    jobStatusName: String!
    subconferenceId: uuid
    updatedAt: timestamptz!
    vimeoVideoUrl: String
}

"""
aggregated selection of "job_queues.PublishVideoJob"
"""
type job_queues_PublishVideoJob_aggregate {
    aggregate: job_queues_PublishVideoJob_aggregate_fields
    nodes: [job_queues_PublishVideoJob!]!
}

"""
aggregate fields of "job_queues.PublishVideoJob"
"""
type job_queues_PublishVideoJob_aggregate_fields {
    count(columns: [job_queues_PublishVideoJob_select_column!], distinct: Boolean): Int!
    max: job_queues_PublishVideoJob_max_fields
    min: job_queues_PublishVideoJob_min_fields
}

"""
Boolean expression to filter rows from the table "job_queues.PublishVideoJob". All fields are combined with a logical 'AND'.
"""
input job_queues_PublishVideoJob_bool_exp {
    _and: [job_queues_PublishVideoJob_bool_exp!]
    _not: job_queues_PublishVideoJob_bool_exp
    _or: [job_queues_PublishVideoJob_bool_exp!]
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    createdAt: timestamptz_comparison_exp
    element: content_Element_bool_exp
    elementId: uuid_comparison_exp
    id: uuid_comparison_exp
    jobStatusName: String_comparison_exp
    subconferenceId: uuid_comparison_exp
    updatedAt: timestamptz_comparison_exp
    vimeoVideoUrl: String_comparison_exp
}

"""
unique or primary key constraints on table "job_queues.PublishVideoJob"
"""
enum job_queues_PublishVideoJob_constraint {
    """
    unique or primary key constraint
    """
    PublishVideoJob_pkey
}

"""
input type for inserting data into table "job_queues.PublishVideoJob"
"""
input job_queues_PublishVideoJob_insert_input {
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    createdAt: timestamptz
    element: content_Element_obj_rel_insert_input
    elementId: uuid
    id: uuid
    jobStatusName: String
    subconferenceId: uuid
    updatedAt: timestamptz
    vimeoVideoUrl: String
}

"""
aggregate max on columns
"""
type job_queues_PublishVideoJob_max_fields {
    conferenceId: uuid
    createdAt: timestamptz
    elementId: uuid
    id: uuid
    jobStatusName: String
    subconferenceId: uuid
    updatedAt: timestamptz
    vimeoVideoUrl: String
}

"""
aggregate min on columns
"""
type job_queues_PublishVideoJob_min_fields {
    conferenceId: uuid
    createdAt: timestamptz
    elementId: uuid
    id: uuid
    jobStatusName: String
    subconferenceId: uuid
    updatedAt: timestamptz
    vimeoVideoUrl: String
}

"""
response of any mutation on the table "job_queues.PublishVideoJob"
"""
type job_queues_PublishVideoJob_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [job_queues_PublishVideoJob!]!
}

"""
on conflict condition type for table "job_queues.PublishVideoJob"
"""
input job_queues_PublishVideoJob_on_conflict {
    constraint: job_queues_PublishVideoJob_constraint!
    update_columns: [job_queues_PublishVideoJob_update_column!]! = []
    where: job_queues_PublishVideoJob_bool_exp
}

"""
Ordering options when selecting data from "job_queues.PublishVideoJob".
"""
input job_queues_PublishVideoJob_order_by {
    conference: conference_Conference_order_by
    conferenceId: order_by
    createdAt: order_by
    element: content_Element_order_by
    elementId: order_by
    id: order_by
    jobStatusName: order_by
    subconferenceId: order_by
    updatedAt: order_by
    vimeoVideoUrl: order_by
}

"""
primary key columns input for table: job_queues_PublishVideoJob
"""
input job_queues_PublishVideoJob_pk_columns_input {
    id: uuid!
}

"""
select columns of table "job_queues.PublishVideoJob"
"""
enum job_queues_PublishVideoJob_select_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    elementId
    """
    column name
    """
    id
    """
    column name
    """
    jobStatusName
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updatedAt
    """
    column name
    """
    vimeoVideoUrl
}

"""
input type for updating data in table "job_queues.PublishVideoJob"
"""
input job_queues_PublishVideoJob_set_input {
    conferenceId: uuid
    createdAt: timestamptz
    elementId: uuid
    id: uuid
    jobStatusName: String
    subconferenceId: uuid
    updatedAt: timestamptz
    vimeoVideoUrl: String
}

"""
update columns of table "job_queues.PublishVideoJob"
"""
enum job_queues_PublishVideoJob_update_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    elementId
    """
    column name
    """
    id
    """
    column name
    """
    jobStatusName
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updatedAt
    """
    column name
    """
    vimeoVideoUrl
}

"""
columns and relationships of "job_queues.SubmissionRequestEmailJob"
"""
type job_queues_SubmissionRequestEmailJob {
    created_at: timestamptz!
    emailTemplate(
        """
        JSON select path
        """
        path: String
    ): jsonb
    id: uuid!
    """
    An object relationship
    """
    person: collection_ProgramPerson!
    personId: uuid!
    processed: Boolean!
    updated_at: timestamptz!
}

"""
aggregated selection of "job_queues.SubmissionRequestEmailJob"
"""
type job_queues_SubmissionRequestEmailJob_aggregate {
    aggregate: job_queues_SubmissionRequestEmailJob_aggregate_fields
    nodes: [job_queues_SubmissionRequestEmailJob!]!
}

"""
aggregate fields of "job_queues.SubmissionRequestEmailJob"
"""
type job_queues_SubmissionRequestEmailJob_aggregate_fields {
    count(columns: [job_queues_SubmissionRequestEmailJob_select_column!], distinct: Boolean): Int!
    max: job_queues_SubmissionRequestEmailJob_max_fields
    min: job_queues_SubmissionRequestEmailJob_min_fields
}

"""
append existing jsonb value of filtered columns with new jsonb value
"""
input job_queues_SubmissionRequestEmailJob_append_input {
    emailTemplate: jsonb
}

"""
Boolean expression to filter rows from the table "job_queues.SubmissionRequestEmailJob". All fields are combined with a logical 'AND'.
"""
input job_queues_SubmissionRequestEmailJob_bool_exp {
    _and: [job_queues_SubmissionRequestEmailJob_bool_exp!]
    _not: job_queues_SubmissionRequestEmailJob_bool_exp
    _or: [job_queues_SubmissionRequestEmailJob_bool_exp!]
    created_at: timestamptz_comparison_exp
    emailTemplate: jsonb_comparison_exp
    id: uuid_comparison_exp
    person: collection_ProgramPerson_bool_exp
    personId: uuid_comparison_exp
    processed: Boolean_comparison_exp
    updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "job_queues.SubmissionRequestEmailJob"
"""
enum job_queues_SubmissionRequestEmailJob_constraint {
    """
    unique or primary key constraint
    """
    SubmissionRequestEmailJob_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input job_queues_SubmissionRequestEmailJob_delete_at_path_input {
    emailTemplate: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input job_queues_SubmissionRequestEmailJob_delete_elem_input {
    emailTemplate: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input job_queues_SubmissionRequestEmailJob_delete_key_input {
    emailTemplate: String
}

"""
input type for inserting data into table "job_queues.SubmissionRequestEmailJob"
"""
input job_queues_SubmissionRequestEmailJob_insert_input {
    created_at: timestamptz
    emailTemplate: jsonb
    id: uuid
    person: collection_ProgramPerson_obj_rel_insert_input
    personId: uuid
    processed: Boolean
    updated_at: timestamptz
}

"""
aggregate max on columns
"""
type job_queues_SubmissionRequestEmailJob_max_fields {
    created_at: timestamptz
    id: uuid
    personId: uuid
    updated_at: timestamptz
}

"""
aggregate min on columns
"""
type job_queues_SubmissionRequestEmailJob_min_fields {
    created_at: timestamptz
    id: uuid
    personId: uuid
    updated_at: timestamptz
}

"""
response of any mutation on the table "job_queues.SubmissionRequestEmailJob"
"""
type job_queues_SubmissionRequestEmailJob_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [job_queues_SubmissionRequestEmailJob!]!
}

"""
on conflict condition type for table "job_queues.SubmissionRequestEmailJob"
"""
input job_queues_SubmissionRequestEmailJob_on_conflict {
    constraint: job_queues_SubmissionRequestEmailJob_constraint!
    update_columns: [job_queues_SubmissionRequestEmailJob_update_column!]! = []
    where: job_queues_SubmissionRequestEmailJob_bool_exp
}

"""
Ordering options when selecting data from "job_queues.SubmissionRequestEmailJob".
"""
input job_queues_SubmissionRequestEmailJob_order_by {
    created_at: order_by
    emailTemplate: order_by
    id: order_by
    person: collection_ProgramPerson_order_by
    personId: order_by
    processed: order_by
    updated_at: order_by
}

"""
primary key columns input for table: job_queues_SubmissionRequestEmailJob
"""
input job_queues_SubmissionRequestEmailJob_pk_columns_input {
    id: uuid!
}

"""
prepend existing jsonb value of filtered columns with new jsonb value
"""
input job_queues_SubmissionRequestEmailJob_prepend_input {
    emailTemplate: jsonb
}

"""
select columns of table "job_queues.SubmissionRequestEmailJob"
"""
enum job_queues_SubmissionRequestEmailJob_select_column {
    """
    column name
    """
    created_at
    """
    column name
    """
    emailTemplate
    """
    column name
    """
    id
    """
    column name
    """
    personId
    """
    column name
    """
    processed
    """
    column name
    """
    updated_at
}

"""
input type for updating data in table "job_queues.SubmissionRequestEmailJob"
"""
input job_queues_SubmissionRequestEmailJob_set_input {
    created_at: timestamptz
    emailTemplate: jsonb
    id: uuid
    personId: uuid
    processed: Boolean
    updated_at: timestamptz
}

"""
update columns of table "job_queues.SubmissionRequestEmailJob"
"""
enum job_queues_SubmissionRequestEmailJob_update_column {
    """
    column name
    """
    created_at
    """
    column name
    """
    emailTemplate
    """
    column name
    """
    id
    """
    column name
    """
    personId
    """
    column name
    """
    processed
    """
    column name
    """
    updated_at
}

"""
columns and relationships of "job_queues.UploadYouTubeVideoJob"
"""
type job_queues_UploadYouTubeVideoJob {
    """
    An object relationship
    """
    conference: conference_Conference!
    conferenceId: uuid!
    createdAt: timestamptz!
    """
    An object relationship
    """
    element: content_Element!
    elementId: uuid!
    id: uuid!
    """
    An object relationship
    """
    jobStatus: job_queues_JobStatus!
    jobStatusName: job_queues_JobStatus_enum!
    message: String
    playlistId: String
    """
    An object relationship
    """
    registrantGoogleAccount: registrant_GoogleAccount!
    registrantGoogleAccountId: uuid!
    retriesCount: Int!
    subconferenceId: uuid
    updatedAt: timestamptz!
    videoDescription: String!
    videoPrivacyStatus: String!
    videoTitle: String!
    """
    An array relationship
    """
    youTubeUploads(
        """
        distinct select on columns
        """
        distinct_on: [video_YouTubeUpload_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_YouTubeUpload_order_by!]
        """
        filter the rows returned
        """
        where: video_YouTubeUpload_bool_exp
    ): [video_YouTubeUpload!]!
    """
    An aggregate relationship
    """
    youTubeUploads_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_YouTubeUpload_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_YouTubeUpload_order_by!]
        """
        filter the rows returned
        """
        where: video_YouTubeUpload_bool_exp
    ): video_YouTubeUpload_aggregate!
}

"""
aggregated selection of "job_queues.UploadYouTubeVideoJob"
"""
type job_queues_UploadYouTubeVideoJob_aggregate {
    aggregate: job_queues_UploadYouTubeVideoJob_aggregate_fields
    nodes: [job_queues_UploadYouTubeVideoJob!]!
}

"""
aggregate fields of "job_queues.UploadYouTubeVideoJob"
"""
type job_queues_UploadYouTubeVideoJob_aggregate_fields {
    avg: job_queues_UploadYouTubeVideoJob_avg_fields
    count(columns: [job_queues_UploadYouTubeVideoJob_select_column!], distinct: Boolean): Int!
    max: job_queues_UploadYouTubeVideoJob_max_fields
    min: job_queues_UploadYouTubeVideoJob_min_fields
    stddev: job_queues_UploadYouTubeVideoJob_stddev_fields
    stddev_pop: job_queues_UploadYouTubeVideoJob_stddev_pop_fields
    stddev_samp: job_queues_UploadYouTubeVideoJob_stddev_samp_fields
    sum: job_queues_UploadYouTubeVideoJob_sum_fields
    var_pop: job_queues_UploadYouTubeVideoJob_var_pop_fields
    var_samp: job_queues_UploadYouTubeVideoJob_var_samp_fields
    variance: job_queues_UploadYouTubeVideoJob_variance_fields
}

"""
aggregate avg on columns
"""
type job_queues_UploadYouTubeVideoJob_avg_fields {
    retriesCount: Float
}

"""
Boolean expression to filter rows from the table "job_queues.UploadYouTubeVideoJob". All fields are combined with a logical 'AND'.
"""
input job_queues_UploadYouTubeVideoJob_bool_exp {
    _and: [job_queues_UploadYouTubeVideoJob_bool_exp!]
    _not: job_queues_UploadYouTubeVideoJob_bool_exp
    _or: [job_queues_UploadYouTubeVideoJob_bool_exp!]
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    createdAt: timestamptz_comparison_exp
    element: content_Element_bool_exp
    elementId: uuid_comparison_exp
    id: uuid_comparison_exp
    jobStatus: job_queues_JobStatus_bool_exp
    jobStatusName: job_queues_JobStatus_enum_comparison_exp
    message: String_comparison_exp
    playlistId: String_comparison_exp
    registrantGoogleAccount: registrant_GoogleAccount_bool_exp
    registrantGoogleAccountId: uuid_comparison_exp
    retriesCount: Int_comparison_exp
    subconferenceId: uuid_comparison_exp
    updatedAt: timestamptz_comparison_exp
    videoDescription: String_comparison_exp
    videoPrivacyStatus: String_comparison_exp
    videoTitle: String_comparison_exp
    youTubeUploads: video_YouTubeUpload_bool_exp
}

"""
unique or primary key constraints on table "job_queues.UploadYouTubeVideoJob"
"""
enum job_queues_UploadYouTubeVideoJob_constraint {
    """
    unique or primary key constraint
    """
    UploadYouTubeVideoJob_pkey
}

"""
input type for incrementing numeric columns in table "job_queues.UploadYouTubeVideoJob"
"""
input job_queues_UploadYouTubeVideoJob_inc_input {
    retriesCount: Int
}

"""
input type for inserting data into table "job_queues.UploadYouTubeVideoJob"
"""
input job_queues_UploadYouTubeVideoJob_insert_input {
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    createdAt: timestamptz
    element: content_Element_obj_rel_insert_input
    elementId: uuid
    id: uuid
    jobStatus: job_queues_JobStatus_obj_rel_insert_input
    jobStatusName: job_queues_JobStatus_enum
    message: String
    playlistId: String
    registrantGoogleAccount: registrant_GoogleAccount_obj_rel_insert_input
    registrantGoogleAccountId: uuid
    retriesCount: Int
    subconferenceId: uuid
    updatedAt: timestamptz
    videoDescription: String
    videoPrivacyStatus: String
    videoTitle: String
    youTubeUploads: video_YouTubeUpload_arr_rel_insert_input
}

"""
aggregate max on columns
"""
type job_queues_UploadYouTubeVideoJob_max_fields {
    conferenceId: uuid
    createdAt: timestamptz
    elementId: uuid
    id: uuid
    message: String
    playlistId: String
    registrantGoogleAccountId: uuid
    retriesCount: Int
    subconferenceId: uuid
    updatedAt: timestamptz
    videoDescription: String
    videoPrivacyStatus: String
    videoTitle: String
}

"""
aggregate min on columns
"""
type job_queues_UploadYouTubeVideoJob_min_fields {
    conferenceId: uuid
    createdAt: timestamptz
    elementId: uuid
    id: uuid
    message: String
    playlistId: String
    registrantGoogleAccountId: uuid
    retriesCount: Int
    subconferenceId: uuid
    updatedAt: timestamptz
    videoDescription: String
    videoPrivacyStatus: String
    videoTitle: String
}

"""
response of any mutation on the table "job_queues.UploadYouTubeVideoJob"
"""
type job_queues_UploadYouTubeVideoJob_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [job_queues_UploadYouTubeVideoJob!]!
}

"""
on conflict condition type for table "job_queues.UploadYouTubeVideoJob"
"""
input job_queues_UploadYouTubeVideoJob_on_conflict {
    constraint: job_queues_UploadYouTubeVideoJob_constraint!
    update_columns: [job_queues_UploadYouTubeVideoJob_update_column!]! = []
    where: job_queues_UploadYouTubeVideoJob_bool_exp
}

"""
Ordering options when selecting data from "job_queues.UploadYouTubeVideoJob".
"""
input job_queues_UploadYouTubeVideoJob_order_by {
    conference: conference_Conference_order_by
    conferenceId: order_by
    createdAt: order_by
    element: content_Element_order_by
    elementId: order_by
    id: order_by
    jobStatus: job_queues_JobStatus_order_by
    jobStatusName: order_by
    message: order_by
    playlistId: order_by
    registrantGoogleAccount: registrant_GoogleAccount_order_by
    registrantGoogleAccountId: order_by
    retriesCount: order_by
    subconferenceId: order_by
    updatedAt: order_by
    videoDescription: order_by
    videoPrivacyStatus: order_by
    videoTitle: order_by
    youTubeUploads_aggregate: video_YouTubeUpload_aggregate_order_by
}

"""
primary key columns input for table: job_queues_UploadYouTubeVideoJob
"""
input job_queues_UploadYouTubeVideoJob_pk_columns_input {
    id: uuid!
}

"""
select columns of table "job_queues.UploadYouTubeVideoJob"
"""
enum job_queues_UploadYouTubeVideoJob_select_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    elementId
    """
    column name
    """
    id
    """
    column name
    """
    jobStatusName
    """
    column name
    """
    message
    """
    column name
    """
    playlistId
    """
    column name
    """
    registrantGoogleAccountId
    """
    column name
    """
    retriesCount
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updatedAt
    """
    column name
    """
    videoDescription
    """
    column name
    """
    videoPrivacyStatus
    """
    column name
    """
    videoTitle
}

"""
input type for updating data in table "job_queues.UploadYouTubeVideoJob"
"""
input job_queues_UploadYouTubeVideoJob_set_input {
    conferenceId: uuid
    createdAt: timestamptz
    elementId: uuid
    id: uuid
    jobStatusName: job_queues_JobStatus_enum
    message: String
    playlistId: String
    registrantGoogleAccountId: uuid
    retriesCount: Int
    subconferenceId: uuid
    updatedAt: timestamptz
    videoDescription: String
    videoPrivacyStatus: String
    videoTitle: String
}

"""
aggregate stddev on columns
"""
type job_queues_UploadYouTubeVideoJob_stddev_fields {
    retriesCount: Float
}

"""
aggregate stddev_pop on columns
"""
type job_queues_UploadYouTubeVideoJob_stddev_pop_fields {
    retriesCount: Float
}

"""
aggregate stddev_samp on columns
"""
type job_queues_UploadYouTubeVideoJob_stddev_samp_fields {
    retriesCount: Float
}

"""
aggregate sum on columns
"""
type job_queues_UploadYouTubeVideoJob_sum_fields {
    retriesCount: Int
}

"""
update columns of table "job_queues.UploadYouTubeVideoJob"
"""
enum job_queues_UploadYouTubeVideoJob_update_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    elementId
    """
    column name
    """
    id
    """
    column name
    """
    jobStatusName
    """
    column name
    """
    message
    """
    column name
    """
    playlistId
    """
    column name
    """
    registrantGoogleAccountId
    """
    column name
    """
    retriesCount
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updatedAt
    """
    column name
    """
    videoDescription
    """
    column name
    """
    videoPrivacyStatus
    """
    column name
    """
    videoTitle
}

"""
aggregate var_pop on columns
"""
type job_queues_UploadYouTubeVideoJob_var_pop_fields {
    retriesCount: Float
}

"""
aggregate var_samp on columns
"""
type job_queues_UploadYouTubeVideoJob_var_samp_fields {
    retriesCount: Float
}

"""
aggregate variance on columns
"""
type job_queues_UploadYouTubeVideoJob_variance_fields {
    retriesCount: Float
}

scalar jsonb

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
    """
    is the column contained in the given json value
    """
    _contained_in: jsonb
    """
    does the column contain the given json value at the top level
    """
    _contains: jsonb
    _eq: jsonb
    _gt: jsonb
    _gte: jsonb
    """
    does the string exist as a top-level key in the column
    """
    _has_key: String
    """
    do all of these strings exist as top-level keys in the column
    """
    _has_keys_all: [String!]
    """
    do any of these strings exist as top-level keys in the column
    """
    _has_keys_any: [String!]
    _in: [jsonb!]
    _is_null: Boolean
    _lt: jsonb
    _lte: jsonb
    _neq: jsonb
    _nin: [jsonb!]
}

"""
mutation root
"""
type mutation_root {
    createItemRoom(conferenceId: uuid!, itemId: uuid!): CreateItemRoomOutput
    createRoomDm(conferenceId: uuid!, registrantIds: [uuid]!): CreateRoomDmOutput
    """
    delete data from the table: "Email"
    """
    delete_Email(
        """
        filter the rows which have to be deleted
        """
        where: Email_bool_exp!
    ): Email_mutation_response
    """
    delete single row from the table: "Email"
    """
    delete_Email_by_pk(id: uuid!): Email
    """
    delete data from the table: "PushNotificationSubscription"
    """
    delete_PushNotificationSubscription(
        """
        filter the rows which have to be deleted
        """
        where: PushNotificationSubscription_bool_exp!
    ): PushNotificationSubscription_mutation_response
    """
    delete single row from the table: "PushNotificationSubscription"
    """
    delete_PushNotificationSubscription_by_pk(endpoint: String!): PushNotificationSubscription
    """
    delete data from the table: "User"
    """
    delete_User(
        """
        filter the rows which have to be deleted
        """
        where: User_bool_exp!
    ): User_mutation_response
    """
    delete single row from the table: "User"
    """
    delete_User_by_pk(id: String!): User
    """
    delete data from the table: "analytics.AppStats"
    """
    delete_analytics_AppStats(
        """
        filter the rows which have to be deleted
        """
        where: analytics_AppStats_bool_exp!
    ): analytics_AppStats_mutation_response
    """
    delete single row from the table: "analytics.AppStats"
    """
    delete_analytics_AppStats_by_pk(id: Int!): analytics_AppStats
    """
    delete data from the table: "analytics.ContentElementStats"
    """
    delete_analytics_ContentElementStats(
        """
        filter the rows which have to be deleted
        """
        where: analytics_ContentElementStats_bool_exp!
    ): analytics_ContentElementStats_mutation_response
    """
    delete single row from the table: "analytics.ContentElementStats"
    """
    delete_analytics_ContentElementStats_by_pk(id: uuid!): analytics_ContentElementStats
    """
    delete data from the table: "analytics.ContentItemStats"
    """
    delete_analytics_ContentItemStats(
        """
        filter the rows which have to be deleted
        """
        where: analytics_ContentItemStats_bool_exp!
    ): analytics_ContentItemStats_mutation_response
    """
    delete single row from the table: "analytics.ContentItemStats"
    """
    delete_analytics_ContentItemStats_by_pk(id: uuid!): analytics_ContentItemStats
    """
    delete data from the table: "analytics.ElementTotalViews"
    """
    delete_analytics_ElementTotalViews(
        """
        filter the rows which have to be deleted
        """
        where: analytics_ElementTotalViews_bool_exp!
    ): analytics_ElementTotalViews_mutation_response
    """
    delete single row from the table: "analytics.ElementTotalViews"
    """
    delete_analytics_ElementTotalViews_by_pk(elementId: uuid!): analytics_ElementTotalViews
    """
    delete data from the table: "analytics.ItemTotalViews"
    """
    delete_analytics_ItemTotalViews(
        """
        filter the rows which have to be deleted
        """
        where: analytics_ItemTotalViews_bool_exp!
    ): analytics_ItemTotalViews_mutation_response
    """
    delete single row from the table: "analytics.ItemTotalViews"
    """
    delete_analytics_ItemTotalViews_by_pk(itemId: uuid!): analytics_ItemTotalViews
    """
    delete data from the table: "analytics.RoomPresence"
    """
    delete_analytics_RoomPresence(
        """
        filter the rows which have to be deleted
        """
        where: analytics_RoomPresence_bool_exp!
    ): analytics_RoomPresence_mutation_response
    """
    delete single row from the table: "analytics.RoomPresence"
    """
    delete_analytics_RoomPresence_by_pk(id: uuid!): analytics_RoomPresence
    """
    delete data from the table: "analytics.RoomStats"
    """
    delete_analytics_RoomStats(
        """
        filter the rows which have to be deleted
        """
        where: analytics_RoomStats_bool_exp!
    ): analytics_RoomStats_mutation_response
    """
    delete single row from the table: "analytics.RoomStats"
    """
    delete_analytics_RoomStats_by_pk(id: uuid!): analytics_RoomStats
    """
    delete data from the table: "chat.Chat"
    """
    delete_chat_Chat(
        """
        filter the rows which have to be deleted
        """
        where: chat_Chat_bool_exp!
    ): chat_Chat_mutation_response
    """
    delete single row from the table: "chat.Chat"
    """
    delete_chat_Chat_by_pk(id: uuid!): chat_Chat
    """
    delete data from the table: "chat.Flag"
    """
    delete_chat_Flag(
        """
        filter the rows which have to be deleted
        """
        where: chat_Flag_bool_exp!
    ): chat_Flag_mutation_response
    """
    delete data from the table: "chat.FlagType"
    """
    delete_chat_FlagType(
        """
        filter the rows which have to be deleted
        """
        where: chat_FlagType_bool_exp!
    ): chat_FlagType_mutation_response
    """
    delete single row from the table: "chat.FlagType"
    """
    delete_chat_FlagType_by_pk(name: String!): chat_FlagType
    """
    delete single row from the table: "chat.Flag"
    """
    delete_chat_Flag_by_pk(id: Int!): chat_Flag
    """
    delete data from the table: "chat.Message"
    """
    delete_chat_Message(
        """
        filter the rows which have to be deleted
        """
        where: chat_Message_bool_exp!
    ): chat_Message_mutation_response
    """
    delete data from the table: "chat.MessageType"
    """
    delete_chat_MessageType(
        """
        filter the rows which have to be deleted
        """
        where: chat_MessageType_bool_exp!
    ): chat_MessageType_mutation_response
    """
    delete single row from the table: "chat.MessageType"
    """
    delete_chat_MessageType_by_pk(name: String!): chat_MessageType
    """
    delete single row from the table: "chat.Message"
    """
    delete_chat_Message_by_pk(id: Int!): chat_Message
    """
    delete data from the table: "chat.Pin"
    """
    delete_chat_Pin(
        """
        filter the rows which have to be deleted
        """
        where: chat_Pin_bool_exp!
    ): chat_Pin_mutation_response
    """
    delete single row from the table: "chat.Pin"
    """
    delete_chat_Pin_by_pk(chatId: uuid!, registrantId: uuid!): chat_Pin
    """
    delete data from the table: "chat.Reaction"
    """
    delete_chat_Reaction(
        """
        filter the rows which have to be deleted
        """
        where: chat_Reaction_bool_exp!
    ): chat_Reaction_mutation_response
    """
    delete data from the table: "chat.ReactionType"
    """
    delete_chat_ReactionType(
        """
        filter the rows which have to be deleted
        """
        where: chat_ReactionType_bool_exp!
    ): chat_ReactionType_mutation_response
    """
    delete single row from the table: "chat.ReactionType"
    """
    delete_chat_ReactionType_by_pk(name: String!): chat_ReactionType
    """
    delete single row from the table: "chat.Reaction"
    """
    delete_chat_Reaction_by_pk(sId: uuid!): chat_Reaction
    """
    delete data from the table: "chat.ReadUpToIndex"
    """
    delete_chat_ReadUpToIndex(
        """
        filter the rows which have to be deleted
        """
        where: chat_ReadUpToIndex_bool_exp!
    ): chat_ReadUpToIndex_mutation_response
    """
    delete single row from the table: "chat.ReadUpToIndex"
    """
    delete_chat_ReadUpToIndex_by_pk(chatId: uuid!, registrantId: uuid!): chat_ReadUpToIndex
    """
    delete data from the table: "chat.Subscription"
    """
    delete_chat_Subscription(
        """
        filter the rows which have to be deleted
        """
        where: chat_Subscription_bool_exp!
    ): chat_Subscription_mutation_response
    """
    delete single row from the table: "chat.Subscription"
    """
    delete_chat_Subscription_by_pk(chatId: uuid!, registrantId: uuid!): chat_Subscription
    """
    delete data from the table: "collection.Exhibition"
    """
    delete_collection_Exhibition(
        """
        filter the rows which have to be deleted
        """
        where: collection_Exhibition_bool_exp!
    ): collection_Exhibition_mutation_response
    """
    delete single row from the table: "collection.Exhibition"
    """
    delete_collection_Exhibition_by_pk(id: uuid!): collection_Exhibition
    """
    delete data from the table: "collection.ProgramPerson"
    """
    delete_collection_ProgramPerson(
        """
        filter the rows which have to be deleted
        """
        where: collection_ProgramPerson_bool_exp!
    ): collection_ProgramPerson_mutation_response
    """
    delete single row from the table: "collection.ProgramPerson"
    """
    delete_collection_ProgramPerson_by_pk(id: uuid!): collection_ProgramPerson
    """
    delete data from the table: "collection.Tag"
    """
    delete_collection_Tag(
        """
        filter the rows which have to be deleted
        """
        where: collection_Tag_bool_exp!
    ): collection_Tag_mutation_response
    """
    delete single row from the table: "collection.Tag"
    """
    delete_collection_Tag_by_pk(id: uuid!): collection_Tag
    """
    delete data from the table: "conference.Conference"
    """
    delete_conference_Conference(
        """
        filter the rows which have to be deleted
        """
        where: conference_Conference_bool_exp!
    ): conference_Conference_mutation_response
    """
    delete single row from the table: "conference.Conference"
    """
    delete_conference_Conference_by_pk(id: uuid!): conference_Conference
    """
    delete data from the table: "conference.Configuration"
    """
    delete_conference_Configuration(
        """
        filter the rows which have to be deleted
        """
        where: conference_Configuration_bool_exp!
    ): conference_Configuration_mutation_response
    """
    delete data from the table: "conference.ConfigurationKey"
    """
    delete_conference_ConfigurationKey(
        """
        filter the rows which have to be deleted
        """
        where: conference_ConfigurationKey_bool_exp!
    ): conference_ConfigurationKey_mutation_response
    """
    delete single row from the table: "conference.ConfigurationKey"
    """
    delete_conference_ConfigurationKey_by_pk(name: String!): conference_ConfigurationKey
    """
    delete single row from the table: "conference.Configuration"
    """
    delete_conference_Configuration_by_pk(
        conferenceId: uuid!
        key: conference_ConfigurationKey_enum!
    ): conference_Configuration
    """
    delete data from the table: "conference.DemoCode"
    """
    delete_conference_DemoCode(
        """
        filter the rows which have to be deleted
        """
        where: conference_DemoCode_bool_exp!
    ): conference_DemoCode_mutation_response
    """
    delete single row from the table: "conference.DemoCode"
    """
    delete_conference_DemoCode_by_pk(id: uuid!): conference_DemoCode
    """
    delete data from the table: "conference.Subconference"
    """
    delete_conference_Subconference(
        """
        filter the rows which have to be deleted
        """
        where: conference_Subconference_bool_exp!
    ): conference_Subconference_mutation_response
    """
    delete single row from the table: "conference.Subconference"
    """
    delete_conference_Subconference_by_pk(id: uuid!): conference_Subconference
    """
    delete data from the table: "conference.VisibilityLevel"
    """
    delete_conference_VisibilityLevel(
        """
        filter the rows which have to be deleted
        """
        where: conference_VisibilityLevel_bool_exp!
    ): conference_VisibilityLevel_mutation_response
    """
    delete single row from the table: "conference.VisibilityLevel"
    """
    delete_conference_VisibilityLevel_by_pk(name: String!): conference_VisibilityLevel
    """
    delete data from the table: "content.Element"
    """
    delete_content_Element(
        """
        filter the rows which have to be deleted
        """
        where: content_Element_bool_exp!
    ): content_Element_mutation_response
    """
    delete data from the table: "content.ElementType"
    """
    delete_content_ElementType(
        """
        filter the rows which have to be deleted
        """
        where: content_ElementType_bool_exp!
    ): content_ElementType_mutation_response
    """
    delete single row from the table: "content.ElementType"
    """
    delete_content_ElementType_by_pk(name: String!): content_ElementType
    """
    delete single row from the table: "content.Element"
    """
    delete_content_Element_by_pk(id: uuid!): content_Element
    """
    delete data from the table: "content.Item"
    """
    delete_content_Item(
        """
        filter the rows which have to be deleted
        """
        where: content_Item_bool_exp!
    ): content_Item_mutation_response
    """
    delete data from the table: "content.ItemExhibition"
    """
    delete_content_ItemExhibition(
        """
        filter the rows which have to be deleted
        """
        where: content_ItemExhibition_bool_exp!
    ): content_ItemExhibition_mutation_response
    """
    delete single row from the table: "content.ItemExhibition"
    """
    delete_content_ItemExhibition_by_pk(id: uuid!): content_ItemExhibition
    """
    delete data from the table: "content.ItemProgramPerson"
    """
    delete_content_ItemProgramPerson(
        """
        filter the rows which have to be deleted
        """
        where: content_ItemProgramPerson_bool_exp!
    ): content_ItemProgramPerson_mutation_response
    """
    delete single row from the table: "content.ItemProgramPerson"
    """
    delete_content_ItemProgramPerson_by_pk(id: uuid!): content_ItemProgramPerson
    """
    delete data from the table: "content.ItemTag"
    """
    delete_content_ItemTag(
        """
        filter the rows which have to be deleted
        """
        where: content_ItemTag_bool_exp!
    ): content_ItemTag_mutation_response
    """
    delete single row from the table: "content.ItemTag"
    """
    delete_content_ItemTag_by_pk(id: uuid!): content_ItemTag
    """
    delete data from the table: "content.ItemType"
    """
    delete_content_ItemType(
        """
        filter the rows which have to be deleted
        """
        where: content_ItemType_bool_exp!
    ): content_ItemType_mutation_response
    """
    delete single row from the table: "content.ItemType"
    """
    delete_content_ItemType_by_pk(name: String!): content_ItemType
    """
    delete single row from the table: "content.Item"
    """
    delete_content_Item_by_pk(id: uuid!): content_Item
    """
    delete data from the table: "job_queues.ChannelStackCreateJob"
    """
    delete_job_queues_ChannelStackCreateJob(
        """
        filter the rows which have to be deleted
        """
        where: job_queues_ChannelStackCreateJob_bool_exp!
    ): job_queues_ChannelStackCreateJob_mutation_response
    """
    delete single row from the table: "job_queues.ChannelStackCreateJob"
    """
    delete_job_queues_ChannelStackCreateJob_by_pk(id: uuid!): job_queues_ChannelStackCreateJob
    """
    delete data from the table: "job_queues.ChannelStackDeleteJob"
    """
    delete_job_queues_ChannelStackDeleteJob(
        """
        filter the rows which have to be deleted
        """
        where: job_queues_ChannelStackDeleteJob_bool_exp!
    ): job_queues_ChannelStackDeleteJob_mutation_response
    """
    delete single row from the table: "job_queues.ChannelStackDeleteJob"
    """
    delete_job_queues_ChannelStackDeleteJob_by_pk(id: uuid!): job_queues_ChannelStackDeleteJob
    """
    delete data from the table: "job_queues.ChannelStackUpdateJob"
    """
    delete_job_queues_ChannelStackUpdateJob(
        """
        filter the rows which have to be deleted
        """
        where: job_queues_ChannelStackUpdateJob_bool_exp!
    ): job_queues_ChannelStackUpdateJob_mutation_response
    """
    delete single row from the table: "job_queues.ChannelStackUpdateJob"
    """
    delete_job_queues_ChannelStackUpdateJob_by_pk(id: uuid!): job_queues_ChannelStackUpdateJob
    """
    delete data from the table: "job_queues.CombineVideosJob"
    """
    delete_job_queues_CombineVideosJob(
        """
        filter the rows which have to be deleted
        """
        where: job_queues_CombineVideosJob_bool_exp!
    ): job_queues_CombineVideosJob_mutation_response
    """
    delete single row from the table: "job_queues.CombineVideosJob"
    """
    delete_job_queues_CombineVideosJob_by_pk(id: uuid!): job_queues_CombineVideosJob
    """
    delete data from the table: "job_queues.CustomEmailJob"
    """
    delete_job_queues_CustomEmailJob(
        """
        filter the rows which have to be deleted
        """
        where: job_queues_CustomEmailJob_bool_exp!
    ): job_queues_CustomEmailJob_mutation_response
    """
    delete single row from the table: "job_queues.CustomEmailJob"
    """
    delete_job_queues_CustomEmailJob_by_pk(id: uuid!): job_queues_CustomEmailJob
    """
    delete data from the table: "job_queues.ImportJob"
    """
    delete_job_queues_ImportJob(
        """
        filter the rows which have to be deleted
        """
        where: job_queues_ImportJob_bool_exp!
    ): job_queues_ImportJob_mutation_response
    """
    delete data from the table: "job_queues.ImportJobOutput"
    """
    delete_job_queues_ImportJobOutput(
        """
        filter the rows which have to be deleted
        """
        where: job_queues_ImportJobOutput_bool_exp!
    ): job_queues_ImportJobOutput_mutation_response
    """
    delete single row from the table: "job_queues.ImportJobOutput"
    """
    delete_job_queues_ImportJobOutput_by_pk(id: uuid!): job_queues_ImportJobOutput
    """
    delete single row from the table: "job_queues.ImportJob"
    """
    delete_job_queues_ImportJob_by_pk(id: uuid!): job_queues_ImportJob
    """
    delete data from the table: "job_queues.InvitationEmailJob"
    """
    delete_job_queues_InvitationEmailJob(
        """
        filter the rows which have to be deleted
        """
        where: job_queues_InvitationEmailJob_bool_exp!
    ): job_queues_InvitationEmailJob_mutation_response
    """
    delete single row from the table: "job_queues.InvitationEmailJob"
    """
    delete_job_queues_InvitationEmailJob_by_pk(id: uuid!): job_queues_InvitationEmailJob
    """
    delete data from the table: "job_queues.JobStatus"
    """
    delete_job_queues_JobStatus(
        """
        filter the rows which have to be deleted
        """
        where: job_queues_JobStatus_bool_exp!
    ): job_queues_JobStatus_mutation_response
    """
    delete single row from the table: "job_queues.JobStatus"
    """
    delete_job_queues_JobStatus_by_pk(name: String!): job_queues_JobStatus
    """
    delete data from the table: "job_queues.MediaPackageHarvestJob"
    """
    delete_job_queues_MediaPackageHarvestJob(
        """
        filter the rows which have to be deleted
        """
        where: job_queues_MediaPackageHarvestJob_bool_exp!
    ): job_queues_MediaPackageHarvestJob_mutation_response
    """
    delete single row from the table: "job_queues.MediaPackageHarvestJob"
    """
    delete_job_queues_MediaPackageHarvestJob_by_pk(id: uuid!): job_queues_MediaPackageHarvestJob
    """
    delete data from the table: "job_queues.PrepareJob"
    """
    delete_job_queues_PrepareJob(
        """
        filter the rows which have to be deleted
        """
        where: job_queues_PrepareJob_bool_exp!
    ): job_queues_PrepareJob_mutation_response
    """
    delete single row from the table: "job_queues.PrepareJob"
    """
    delete_job_queues_PrepareJob_by_pk(id: uuid!): job_queues_PrepareJob
    """
    delete data from the table: "job_queues.PublishVideoJob"
    """
    delete_job_queues_PublishVideoJob(
        """
        filter the rows which have to be deleted
        """
        where: job_queues_PublishVideoJob_bool_exp!
    ): job_queues_PublishVideoJob_mutation_response
    """
    delete single row from the table: "job_queues.PublishVideoJob"
    """
    delete_job_queues_PublishVideoJob_by_pk(id: uuid!): job_queues_PublishVideoJob
    """
    delete data from the table: "job_queues.SubmissionRequestEmailJob"
    """
    delete_job_queues_SubmissionRequestEmailJob(
        """
        filter the rows which have to be deleted
        """
        where: job_queues_SubmissionRequestEmailJob_bool_exp!
    ): job_queues_SubmissionRequestEmailJob_mutation_response
    """
    delete single row from the table: "job_queues.SubmissionRequestEmailJob"
    """
    delete_job_queues_SubmissionRequestEmailJob_by_pk(id: uuid!): job_queues_SubmissionRequestEmailJob
    """
    delete data from the table: "job_queues.UploadYouTubeVideoJob"
    """
    delete_job_queues_UploadYouTubeVideoJob(
        """
        filter the rows which have to be deleted
        """
        where: job_queues_UploadYouTubeVideoJob_bool_exp!
    ): job_queues_UploadYouTubeVideoJob_mutation_response
    """
    delete single row from the table: "job_queues.UploadYouTubeVideoJob"
    """
    delete_job_queues_UploadYouTubeVideoJob_by_pk(id: uuid!): job_queues_UploadYouTubeVideoJob
    """
    delete data from the table: "registrant.GoogleAccount"
    """
    delete_registrant_GoogleAccount(
        """
        filter the rows which have to be deleted
        """
        where: registrant_GoogleAccount_bool_exp!
    ): registrant_GoogleAccount_mutation_response
    """
    delete single row from the table: "registrant.GoogleAccount"
    """
    delete_registrant_GoogleAccount_by_pk(id: uuid!): registrant_GoogleAccount
    """
    delete data from the table: "registrant.Group"
    """
    delete_registrant_Group(
        """
        filter the rows which have to be deleted
        """
        where: registrant_Group_bool_exp!
    ): registrant_Group_mutation_response
    """
    delete data from the table: "registrant.GroupRegistrant"
    """
    delete_registrant_GroupRegistrant(
        """
        filter the rows which have to be deleted
        """
        where: registrant_GroupRegistrant_bool_exp!
    ): registrant_GroupRegistrant_mutation_response
    """
    delete single row from the table: "registrant.GroupRegistrant"
    """
    delete_registrant_GroupRegistrant_by_pk(id: uuid!): registrant_GroupRegistrant
    """
    delete single row from the table: "registrant.Group"
    """
    delete_registrant_Group_by_pk(id: uuid!): registrant_Group
    """
    delete data from the table: "registrant.Invitation"
    """
    delete_registrant_Invitation(
        """
        filter the rows which have to be deleted
        """
        where: registrant_Invitation_bool_exp!
    ): registrant_Invitation_mutation_response
    """
    delete single row from the table: "registrant.Invitation"
    """
    delete_registrant_Invitation_by_pk(id: uuid!): registrant_Invitation
    """
    delete data from the table: "registrant.Profile"
    """
    delete_registrant_Profile(
        """
        filter the rows which have to be deleted
        """
        where: registrant_Profile_bool_exp!
    ): registrant_Profile_mutation_response
    """
    delete single row from the table: "registrant.Profile"
    """
    delete_registrant_Profile_by_pk(registrantId: uuid!): registrant_Profile
    """
    delete data from the table: "registrant.Registrant"
    """
    delete_registrant_Registrant(
        """
        filter the rows which have to be deleted
        """
        where: registrant_Registrant_bool_exp!
    ): registrant_Registrant_mutation_response
    """
    delete data from the table: "registrant.RegistrantRole"
    """
    delete_registrant_RegistrantRole(
        """
        filter the rows which have to be deleted
        """
        where: registrant_RegistrantRole_bool_exp!
    ): registrant_RegistrantRole_mutation_response
    """
    delete single row from the table: "registrant.RegistrantRole"
    """
    delete_registrant_RegistrantRole_by_pk(name: String!): registrant_RegistrantRole
    """
    delete single row from the table: "registrant.Registrant"
    """
    delete_registrant_Registrant_by_pk(id: uuid!): registrant_Registrant
    """
    delete data from the table: "registrant.SavedVonageRoomRecording"
    """
    delete_registrant_SavedVonageRoomRecording(
        """
        filter the rows which have to be deleted
        """
        where: registrant_SavedVonageRoomRecording_bool_exp!
    ): registrant_SavedVonageRoomRecording_mutation_response
    """
    delete single row from the table: "registrant.SavedVonageRoomRecording"
    """
    delete_registrant_SavedVonageRoomRecording_by_pk(id: uuid!): registrant_SavedVonageRoomRecording
    """
    delete data from the table: "registrant.SubconferenceMembership"
    """
    delete_registrant_SubconferenceMembership(
        """
        filter the rows which have to be deleted
        """
        where: registrant_SubconferenceMembership_bool_exp!
    ): registrant_SubconferenceMembership_mutation_response
    """
    delete single row from the table: "registrant.SubconferenceMembership"
    """
    delete_registrant_SubconferenceMembership_by_pk(id: uuid!): registrant_SubconferenceMembership
    """
    delete data from the table: "room.Backend"
    """
    delete_room_Backend(
        """
        filter the rows which have to be deleted
        """
        where: room_Backend_bool_exp!
    ): room_Backend_mutation_response
    """
    delete single row from the table: "room.Backend"
    """
    delete_room_Backend_by_pk(name: String!): room_Backend
    """
    delete data from the table: "room.ChimeMeeting"
    """
    delete_room_ChimeMeeting(
        """
        filter the rows which have to be deleted
        """
        where: room_ChimeMeeting_bool_exp!
    ): room_ChimeMeeting_mutation_response
    """
    delete single row from the table: "room.ChimeMeeting"
    """
    delete_room_ChimeMeeting_by_pk(id: uuid!): room_ChimeMeeting
    """
    delete data from the table: "room.ManagementMode"
    """
    delete_room_ManagementMode(
        """
        filter the rows which have to be deleted
        """
        where: room_ManagementMode_bool_exp!
    ): room_ManagementMode_mutation_response
    """
    delete single row from the table: "room.ManagementMode"
    """
    delete_room_ManagementMode_by_pk(name: String!): room_ManagementMode
    """
    delete data from the table: "room.Mode"
    """
    delete_room_Mode(
        """
        filter the rows which have to be deleted
        """
        where: room_Mode_bool_exp!
    ): room_Mode_mutation_response
    """
    delete single row from the table: "room.Mode"
    """
    delete_room_Mode_by_pk(name: String!): room_Mode
    """
    delete data from the table: "room.Participant"
    """
    delete_room_Participant(
        """
        filter the rows which have to be deleted
        """
        where: room_Participant_bool_exp!
    ): room_Participant_mutation_response
    """
    delete single row from the table: "room.Participant"
    """
    delete_room_Participant_by_pk(id: uuid!): room_Participant
    """
    delete data from the table: "room.PersonRole"
    """
    delete_room_PersonRole(
        """
        filter the rows which have to be deleted
        """
        where: room_PersonRole_bool_exp!
    ): room_PersonRole_mutation_response
    """
    delete single row from the table: "room.PersonRole"
    """
    delete_room_PersonRole_by_pk(name: String!): room_PersonRole
    """
    delete data from the table: "room.Room"
    """
    delete_room_Room(
        """
        filter the rows which have to be deleted
        """
        where: room_Room_bool_exp!
    ): room_Room_mutation_response
    """
    delete data from the table: "room.RoomGroupMembership"
    """
    delete_room_RoomGroupMembership(
        """
        filter the rows which have to be deleted
        """
        where: room_RoomGroupMembership_bool_exp!
    ): room_RoomGroupMembership_mutation_response
    """
    delete single row from the table: "room.RoomGroupMembership"
    """
    delete_room_RoomGroupMembership_by_pk(id: uuid!): room_RoomGroupMembership
    """
    delete data from the table: "room.RoomMembership"
    """
    delete_room_RoomMembership(
        """
        filter the rows which have to be deleted
        """
        where: room_RoomMembership_bool_exp!
    ): room_RoomMembership_mutation_response
    """
    delete single row from the table: "room.RoomMembership"
    """
    delete_room_RoomMembership_by_pk(id: uuid!): room_RoomMembership
    """
    delete single row from the table: "room.Room"
    """
    delete_room_Room_by_pk(id: uuid!): room_Room
    """
    delete data from the table: "room.ShuffleAlgorithm"
    """
    delete_room_ShuffleAlgorithm(
        """
        filter the rows which have to be deleted
        """
        where: room_ShuffleAlgorithm_bool_exp!
    ): room_ShuffleAlgorithm_mutation_response
    """
    delete single row from the table: "room.ShuffleAlgorithm"
    """
    delete_room_ShuffleAlgorithm_by_pk(name: String!): room_ShuffleAlgorithm
    """
    delete data from the table: "room.ShufflePeriod"
    """
    delete_room_ShufflePeriod(
        """
        filter the rows which have to be deleted
        """
        where: room_ShufflePeriod_bool_exp!
    ): room_ShufflePeriod_mutation_response
    """
    delete single row from the table: "room.ShufflePeriod"
    """
    delete_room_ShufflePeriod_by_pk(id: uuid!): room_ShufflePeriod
    """
    delete data from the table: "room.ShuffleQueueEntry"
    """
    delete_room_ShuffleQueueEntry(
        """
        filter the rows which have to be deleted
        """
        where: room_ShuffleQueueEntry_bool_exp!
    ): room_ShuffleQueueEntry_mutation_response
    """
    delete single row from the table: "room.ShuffleQueueEntry"
    """
    delete_room_ShuffleQueueEntry_by_pk(id: bigint!): room_ShuffleQueueEntry
    """
    delete data from the table: "room.ShuffleRoom"
    """
    delete_room_ShuffleRoom(
        """
        filter the rows which have to be deleted
        """
        where: room_ShuffleRoom_bool_exp!
    ): room_ShuffleRoom_mutation_response
    """
    delete single row from the table: "room.ShuffleRoom"
    """
    delete_room_ShuffleRoom_by_pk(id: bigint!): room_ShuffleRoom
    """
    delete data from the table: "schedule.Continuation"
    """
    delete_schedule_Continuation(
        """
        filter the rows which have to be deleted
        """
        where: schedule_Continuation_bool_exp!
    ): schedule_Continuation_mutation_response
    """
    delete single row from the table: "schedule.Continuation"
    """
    delete_schedule_Continuation_by_pk(id: uuid!): schedule_Continuation
    """
    delete data from the table: "schedule.CurrentEvents"
    """
    delete_schedule_CurrentEvents(
        """
        filter the rows which have to be deleted
        """
        where: schedule_CurrentEvents_bool_exp!
    ): schedule_CurrentEvents_mutation_response
    """
    delete data from the table: "schedule.Event"
    """
    delete_schedule_Event(
        """
        filter the rows which have to be deleted
        """
        where: schedule_Event_bool_exp!
    ): schedule_Event_mutation_response
    """
    delete data from the table: "schedule.EventProgramPerson"
    """
    delete_schedule_EventProgramPerson(
        """
        filter the rows which have to be deleted
        """
        where: schedule_EventProgramPerson_bool_exp!
    ): schedule_EventProgramPerson_mutation_response
    """
    delete data from the table: "schedule.EventProgramPersonRole"
    """
    delete_schedule_EventProgramPersonRole(
        """
        filter the rows which have to be deleted
        """
        where: schedule_EventProgramPersonRole_bool_exp!
    ): schedule_EventProgramPersonRole_mutation_response
    """
    delete single row from the table: "schedule.EventProgramPersonRole"
    """
    delete_schedule_EventProgramPersonRole_by_pk(name: String!): schedule_EventProgramPersonRole
    """
    delete single row from the table: "schedule.EventProgramPerson"
    """
    delete_schedule_EventProgramPerson_by_pk(id: uuid!): schedule_EventProgramPerson
    """
    delete single row from the table: "schedule.Event"
    """
    delete_schedule_Event_by_pk(id: uuid!): schedule_Event
    """
    delete data from the table: "schedule.StarredEvent"
    """
    delete_schedule_StarredEvent(
        """
        filter the rows which have to be deleted
        """
        where: schedule_StarredEvent_bool_exp!
    ): schedule_StarredEvent_mutation_response
    """
    delete single row from the table: "schedule.StarredEvent"
    """
    delete_schedule_StarredEvent_by_pk(id: uuid!): schedule_StarredEvent
    """
    delete data from the table: "sponsor.Tier"
    """
    delete_sponsor_Tier(
        """
        filter the rows which have to be deleted
        """
        where: sponsor_Tier_bool_exp!
    ): sponsor_Tier_mutation_response
    """
    delete data from the table: "sponsor.TierMember"
    """
    delete_sponsor_TierMember(
        """
        filter the rows which have to be deleted
        """
        where: sponsor_TierMember_bool_exp!
    ): sponsor_TierMember_mutation_response
    """
    delete single row from the table: "sponsor.TierMember"
    """
    delete_sponsor_TierMember_by_pk(id: uuid!): sponsor_TierMember
    """
    delete single row from the table: "sponsor.Tier"
    """
    delete_sponsor_Tier_by_pk(id: uuid!): sponsor_Tier
    """
    delete data from the table: "system.Configuration"
    """
    delete_system_Configuration(
        """
        filter the rows which have to be deleted
        """
        where: system_Configuration_bool_exp!
    ): system_Configuration_mutation_response
    """
    delete data from the table: "system.ConfigurationKey"
    """
    delete_system_ConfigurationKey(
        """
        filter the rows which have to be deleted
        """
        where: system_ConfigurationKey_bool_exp!
    ): system_ConfigurationKey_mutation_response
    """
    delete single row from the table: "system.ConfigurationKey"
    """
    delete_system_ConfigurationKey_by_pk(name: String!): system_ConfigurationKey
    """
    delete data from the table: "system.ConfigurationPermissionGrant"
    """
    delete_system_ConfigurationPermissionGrant(
        """
        filter the rows which have to be deleted
        """
        where: system_ConfigurationPermissionGrant_bool_exp!
    ): system_ConfigurationPermissionGrant_mutation_response
    """
    delete single row from the table: "system.ConfigurationPermissionGrant"
    """
    delete_system_ConfigurationPermissionGrant_by_pk(id: uuid!): system_ConfigurationPermissionGrant
    """
    delete single row from the table: "system.Configuration"
    """
    delete_system_Configuration_by_pk(key: system_ConfigurationKey_enum!): system_Configuration
    """
    delete data from the table: "system.SuperUserPermission"
    """
    delete_system_SuperUserPermission(
        """
        filter the rows which have to be deleted
        """
        where: system_SuperUserPermission_bool_exp!
    ): system_SuperUserPermission_mutation_response
    """
    delete data from the table: "system.SuperUserPermissionGrant"
    """
    delete_system_SuperUserPermissionGrant(
        """
        filter the rows which have to be deleted
        """
        where: system_SuperUserPermissionGrant_bool_exp!
    ): system_SuperUserPermissionGrant_mutation_response
    """
    delete single row from the table: "system.SuperUserPermissionGrant"
    """
    delete_system_SuperUserPermissionGrant_by_pk(id: uuid!): system_SuperUserPermissionGrant
    """
    delete single row from the table: "system.SuperUserPermission"
    """
    delete_system_SuperUserPermission_by_pk(name: String!): system_SuperUserPermission
    """
    delete data from the table: "video.ChannelStack"
    """
    delete_video_ChannelStack(
        """
        filter the rows which have to be deleted
        """
        where: video_ChannelStack_bool_exp!
    ): video_ChannelStack_mutation_response
    """
    delete single row from the table: "video.ChannelStack"
    """
    delete_video_ChannelStack_by_pk(id: uuid!): video_ChannelStack
    """
    delete data from the table: "video.EventVonageSession"
    """
    delete_video_EventVonageSession(
        """
        filter the rows which have to be deleted
        """
        where: video_EventVonageSession_bool_exp!
    ): video_EventVonageSession_mutation_response
    """
    delete single row from the table: "video.EventVonageSession"
    """
    delete_video_EventVonageSession_by_pk(id: uuid!): video_EventVonageSession
    """
    delete data from the table: "video.ImmediateSwitch"
    """
    delete_video_ImmediateSwitch(
        """
        filter the rows which have to be deleted
        """
        where: video_ImmediateSwitch_bool_exp!
    ): video_ImmediateSwitch_mutation_response
    """
    delete single row from the table: "video.ImmediateSwitch"
    """
    delete_video_ImmediateSwitch_by_pk(id: uuid!): video_ImmediateSwitch
    """
    delete data from the table: "video.InputType"
    """
    delete_video_InputType(
        """
        filter the rows which have to be deleted
        """
        where: video_InputType_bool_exp!
    ): video_InputType_mutation_response
    """
    delete single row from the table: "video.InputType"
    """
    delete_video_InputType_by_pk(name: String!): video_InputType
    """
    delete data from the table: "video.MediaLiveChannelStatus"
    """
    delete_video_MediaLiveChannelStatus(
        """
        filter the rows which have to be deleted
        """
        where: video_MediaLiveChannelStatus_bool_exp!
    ): video_MediaLiveChannelStatus_mutation_response
    """
    delete single row from the table: "video.MediaLiveChannelStatus"
    """
    delete_video_MediaLiveChannelStatus_by_pk(id: uuid!): video_MediaLiveChannelStatus
    """
    delete data from the table: "video.RoomRtmpInput"
    """
    delete_video_RoomRtmpInput(
        """
        filter the rows which have to be deleted
        """
        where: video_RoomRtmpInput_bool_exp!
    ): video_RoomRtmpInput_mutation_response
    """
    delete single row from the table: "video.RoomRtmpInput"
    """
    delete_video_RoomRtmpInput_by_pk(id: uuid!): video_RoomRtmpInput
    """
    delete data from the table: "video.RoomRtmpOutput"
    """
    delete_video_RoomRtmpOutput(
        """
        filter the rows which have to be deleted
        """
        where: video_RoomRtmpOutput_bool_exp!
    ): video_RoomRtmpOutput_mutation_response
    """
    delete single row from the table: "video.RoomRtmpOutput"
    """
    delete_video_RoomRtmpOutput_by_pk(id: uuid!): video_RoomRtmpOutput
    """
    delete data from the table: "video.RtmpInput"
    """
    delete_video_RtmpInput(
        """
        filter the rows which have to be deleted
        """
        where: video_RtmpInput_bool_exp!
    ): video_RtmpInput_mutation_response
    """
    delete single row from the table: "video.RtmpInput"
    """
    delete_video_RtmpInput_by_pk(name: String!): video_RtmpInput
    """
    delete data from the table: "video.TranscriptionJob"
    """
    delete_video_TranscriptionJob(
        """
        filter the rows which have to be deleted
        """
        where: video_TranscriptionJob_bool_exp!
    ): video_TranscriptionJob_mutation_response
    """
    delete single row from the table: "video.TranscriptionJob"
    """
    delete_video_TranscriptionJob_by_pk(id: uuid!): video_TranscriptionJob
    """
    delete data from the table: "video.VideoRenderJob"
    """
    delete_video_VideoRenderJob(
        """
        filter the rows which have to be deleted
        """
        where: video_VideoRenderJob_bool_exp!
    ): video_VideoRenderJob_mutation_response
    """
    delete single row from the table: "video.VideoRenderJob"
    """
    delete_video_VideoRenderJob_by_pk(id: uuid!): video_VideoRenderJob
    """
    delete data from the table: "video.VonageParticipantStream"
    """
    delete_video_VonageParticipantStream(
        """
        filter the rows which have to be deleted
        """
        where: video_VonageParticipantStream_bool_exp!
    ): video_VonageParticipantStream_mutation_response
    """
    delete single row from the table: "video.VonageParticipantStream"
    """
    delete_video_VonageParticipantStream_by_pk(id: uuid!): video_VonageParticipantStream
    """
    delete data from the table: "video.VonageRoomRecording"
    """
    delete_video_VonageRoomRecording(
        """
        filter the rows which have to be deleted
        """
        where: video_VonageRoomRecording_bool_exp!
    ): video_VonageRoomRecording_mutation_response
    """
    delete single row from the table: "video.VonageRoomRecording"
    """
    delete_video_VonageRoomRecording_by_pk(id: uuid!): video_VonageRoomRecording
    """
    delete data from the table: "video.VonageSessionLayout"
    """
    delete_video_VonageSessionLayout(
        """
        filter the rows which have to be deleted
        """
        where: video_VonageSessionLayout_bool_exp!
    ): video_VonageSessionLayout_mutation_response
    """
    delete single row from the table: "video.VonageSessionLayout"
    """
    delete_video_VonageSessionLayout_by_pk(id: uuid!): video_VonageSessionLayout
    """
    delete data from the table: "video.VonageVideoPlaybackCommand"
    """
    delete_video_VonageVideoPlaybackCommand(
        """
        filter the rows which have to be deleted
        """
        where: video_VonageVideoPlaybackCommand_bool_exp!
    ): video_VonageVideoPlaybackCommand_mutation_response
    """
    delete single row from the table: "video.VonageVideoPlaybackCommand"
    """
    delete_video_VonageVideoPlaybackCommand_by_pk(id: uuid!): video_VonageVideoPlaybackCommand
    """
    delete data from the table: "video.YouTubeUpload"
    """
    delete_video_YouTubeUpload(
        """
        filter the rows which have to be deleted
        """
        where: video_YouTubeUpload_bool_exp!
    ): video_YouTubeUpload_mutation_response
    """
    delete single row from the table: "video.YouTubeUpload"
    """
    delete_video_YouTubeUpload_by_pk(id: uuid!): video_YouTubeUpload
    getGoogleOAuthUrl(registrantId: uuid!, scopes: [String!]!): GetGoogleOAuthUrlOutput
    initialiseSuperUser: InitialiseSuperUserOutput
    """
    insert data into the table: "Email"
    """
    insert_Email(
        """
        the rows to be inserted
        """
        objects: [Email_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: Email_on_conflict
    ): Email_mutation_response
    """
    insert a single row into the table: "Email"
    """
    insert_Email_one(
        """
        the row to be inserted
        """
        object: Email_insert_input!
        """
        on conflict condition
        """
        on_conflict: Email_on_conflict
    ): Email
    """
    insert data into the table: "PushNotificationSubscription"
    """
    insert_PushNotificationSubscription(
        """
        the rows to be inserted
        """
        objects: [PushNotificationSubscription_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: PushNotificationSubscription_on_conflict
    ): PushNotificationSubscription_mutation_response
    """
    insert a single row into the table: "PushNotificationSubscription"
    """
    insert_PushNotificationSubscription_one(
        """
        the row to be inserted
        """
        object: PushNotificationSubscription_insert_input!
        """
        on conflict condition
        """
        on_conflict: PushNotificationSubscription_on_conflict
    ): PushNotificationSubscription
    """
    insert data into the table: "User"
    """
    insert_User(
        """
        the rows to be inserted
        """
        objects: [User_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: User_on_conflict
    ): User_mutation_response
    """
    insert a single row into the table: "User"
    """
    insert_User_one(
        """
        the row to be inserted
        """
        object: User_insert_input!
        """
        on conflict condition
        """
        on_conflict: User_on_conflict
    ): User
    """
    insert data into the table: "analytics.AppStats"
    """
    insert_analytics_AppStats(
        """
        the rows to be inserted
        """
        objects: [analytics_AppStats_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: analytics_AppStats_on_conflict
    ): analytics_AppStats_mutation_response
    """
    insert a single row into the table: "analytics.AppStats"
    """
    insert_analytics_AppStats_one(
        """
        the row to be inserted
        """
        object: analytics_AppStats_insert_input!
        """
        on conflict condition
        """
        on_conflict: analytics_AppStats_on_conflict
    ): analytics_AppStats
    """
    insert data into the table: "analytics.ContentElementStats"
    """
    insert_analytics_ContentElementStats(
        """
        the rows to be inserted
        """
        objects: [analytics_ContentElementStats_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: analytics_ContentElementStats_on_conflict
    ): analytics_ContentElementStats_mutation_response
    """
    insert a single row into the table: "analytics.ContentElementStats"
    """
    insert_analytics_ContentElementStats_one(
        """
        the row to be inserted
        """
        object: analytics_ContentElementStats_insert_input!
        """
        on conflict condition
        """
        on_conflict: analytics_ContentElementStats_on_conflict
    ): analytics_ContentElementStats
    """
    insert data into the table: "analytics.ContentItemStats"
    """
    insert_analytics_ContentItemStats(
        """
        the rows to be inserted
        """
        objects: [analytics_ContentItemStats_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: analytics_ContentItemStats_on_conflict
    ): analytics_ContentItemStats_mutation_response
    """
    insert a single row into the table: "analytics.ContentItemStats"
    """
    insert_analytics_ContentItemStats_one(
        """
        the row to be inserted
        """
        object: analytics_ContentItemStats_insert_input!
        """
        on conflict condition
        """
        on_conflict: analytics_ContentItemStats_on_conflict
    ): analytics_ContentItemStats
    """
    insert data into the table: "analytics.ElementTotalViews"
    """
    insert_analytics_ElementTotalViews(
        """
        the rows to be inserted
        """
        objects: [analytics_ElementTotalViews_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: analytics_ElementTotalViews_on_conflict
    ): analytics_ElementTotalViews_mutation_response
    """
    insert a single row into the table: "analytics.ElementTotalViews"
    """
    insert_analytics_ElementTotalViews_one(
        """
        the row to be inserted
        """
        object: analytics_ElementTotalViews_insert_input!
        """
        on conflict condition
        """
        on_conflict: analytics_ElementTotalViews_on_conflict
    ): analytics_ElementTotalViews
    """
    insert data into the table: "analytics.ItemTotalViews"
    """
    insert_analytics_ItemTotalViews(
        """
        the rows to be inserted
        """
        objects: [analytics_ItemTotalViews_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: analytics_ItemTotalViews_on_conflict
    ): analytics_ItemTotalViews_mutation_response
    """
    insert a single row into the table: "analytics.ItemTotalViews"
    """
    insert_analytics_ItemTotalViews_one(
        """
        the row to be inserted
        """
        object: analytics_ItemTotalViews_insert_input!
        """
        on conflict condition
        """
        on_conflict: analytics_ItemTotalViews_on_conflict
    ): analytics_ItemTotalViews
    """
    insert data into the table: "analytics.RoomPresence"
    """
    insert_analytics_RoomPresence(
        """
        the rows to be inserted
        """
        objects: [analytics_RoomPresence_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: analytics_RoomPresence_on_conflict
    ): analytics_RoomPresence_mutation_response
    """
    insert a single row into the table: "analytics.RoomPresence"
    """
    insert_analytics_RoomPresence_one(
        """
        the row to be inserted
        """
        object: analytics_RoomPresence_insert_input!
        """
        on conflict condition
        """
        on_conflict: analytics_RoomPresence_on_conflict
    ): analytics_RoomPresence
    """
    insert data into the table: "analytics.RoomStats"
    """
    insert_analytics_RoomStats(
        """
        the rows to be inserted
        """
        objects: [analytics_RoomStats_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: analytics_RoomStats_on_conflict
    ): analytics_RoomStats_mutation_response
    """
    insert a single row into the table: "analytics.RoomStats"
    """
    insert_analytics_RoomStats_one(
        """
        the row to be inserted
        """
        object: analytics_RoomStats_insert_input!
        """
        on conflict condition
        """
        on_conflict: analytics_RoomStats_on_conflict
    ): analytics_RoomStats
    """
    insert data into the table: "chat.Chat"
    """
    insert_chat_Chat(
        """
        the rows to be inserted
        """
        objects: [chat_Chat_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: chat_Chat_on_conflict
    ): chat_Chat_mutation_response
    """
    insert a single row into the table: "chat.Chat"
    """
    insert_chat_Chat_one(
        """
        the row to be inserted
        """
        object: chat_Chat_insert_input!
        """
        on conflict condition
        """
        on_conflict: chat_Chat_on_conflict
    ): chat_Chat
    """
    insert data into the table: "chat.Flag"
    """
    insert_chat_Flag(
        """
        the rows to be inserted
        """
        objects: [chat_Flag_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: chat_Flag_on_conflict
    ): chat_Flag_mutation_response
    """
    insert data into the table: "chat.FlagType"
    """
    insert_chat_FlagType(
        """
        the rows to be inserted
        """
        objects: [chat_FlagType_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: chat_FlagType_on_conflict
    ): chat_FlagType_mutation_response
    """
    insert a single row into the table: "chat.FlagType"
    """
    insert_chat_FlagType_one(
        """
        the row to be inserted
        """
        object: chat_FlagType_insert_input!
        """
        on conflict condition
        """
        on_conflict: chat_FlagType_on_conflict
    ): chat_FlagType
    """
    insert a single row into the table: "chat.Flag"
    """
    insert_chat_Flag_one(
        """
        the row to be inserted
        """
        object: chat_Flag_insert_input!
        """
        on conflict condition
        """
        on_conflict: chat_Flag_on_conflict
    ): chat_Flag
    """
    insert data into the table: "chat.Message"
    """
    insert_chat_Message(
        """
        the rows to be inserted
        """
        objects: [chat_Message_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: chat_Message_on_conflict
    ): chat_Message_mutation_response
    """
    insert data into the table: "chat.MessageType"
    """
    insert_chat_MessageType(
        """
        the rows to be inserted
        """
        objects: [chat_MessageType_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: chat_MessageType_on_conflict
    ): chat_MessageType_mutation_response
    """
    insert a single row into the table: "chat.MessageType"
    """
    insert_chat_MessageType_one(
        """
        the row to be inserted
        """
        object: chat_MessageType_insert_input!
        """
        on conflict condition
        """
        on_conflict: chat_MessageType_on_conflict
    ): chat_MessageType
    """
    insert a single row into the table: "chat.Message"
    """
    insert_chat_Message_one(
        """
        the row to be inserted
        """
        object: chat_Message_insert_input!
        """
        on conflict condition
        """
        on_conflict: chat_Message_on_conflict
    ): chat_Message
    """
    insert data into the table: "chat.Pin"
    """
    insert_chat_Pin(
        """
        the rows to be inserted
        """
        objects: [chat_Pin_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: chat_Pin_on_conflict
    ): chat_Pin_mutation_response
    """
    insert a single row into the table: "chat.Pin"
    """
    insert_chat_Pin_one(
        """
        the row to be inserted
        """
        object: chat_Pin_insert_input!
        """
        on conflict condition
        """
        on_conflict: chat_Pin_on_conflict
    ): chat_Pin
    """
    insert data into the table: "chat.Reaction"
    """
    insert_chat_Reaction(
        """
        the rows to be inserted
        """
        objects: [chat_Reaction_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: chat_Reaction_on_conflict
    ): chat_Reaction_mutation_response
    """
    insert data into the table: "chat.ReactionType"
    """
    insert_chat_ReactionType(
        """
        the rows to be inserted
        """
        objects: [chat_ReactionType_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: chat_ReactionType_on_conflict
    ): chat_ReactionType_mutation_response
    """
    insert a single row into the table: "chat.ReactionType"
    """
    insert_chat_ReactionType_one(
        """
        the row to be inserted
        """
        object: chat_ReactionType_insert_input!
        """
        on conflict condition
        """
        on_conflict: chat_ReactionType_on_conflict
    ): chat_ReactionType
    """
    insert a single row into the table: "chat.Reaction"
    """
    insert_chat_Reaction_one(
        """
        the row to be inserted
        """
        object: chat_Reaction_insert_input!
        """
        on conflict condition
        """
        on_conflict: chat_Reaction_on_conflict
    ): chat_Reaction
    """
    insert data into the table: "chat.ReadUpToIndex"
    """
    insert_chat_ReadUpToIndex(
        """
        the rows to be inserted
        """
        objects: [chat_ReadUpToIndex_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: chat_ReadUpToIndex_on_conflict
    ): chat_ReadUpToIndex_mutation_response
    """
    insert a single row into the table: "chat.ReadUpToIndex"
    """
    insert_chat_ReadUpToIndex_one(
        """
        the row to be inserted
        """
        object: chat_ReadUpToIndex_insert_input!
        """
        on conflict condition
        """
        on_conflict: chat_ReadUpToIndex_on_conflict
    ): chat_ReadUpToIndex
    """
    insert data into the table: "chat.Subscription"
    """
    insert_chat_Subscription(
        """
        the rows to be inserted
        """
        objects: [chat_Subscription_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: chat_Subscription_on_conflict
    ): chat_Subscription_mutation_response
    """
    insert a single row into the table: "chat.Subscription"
    """
    insert_chat_Subscription_one(
        """
        the row to be inserted
        """
        object: chat_Subscription_insert_input!
        """
        on conflict condition
        """
        on_conflict: chat_Subscription_on_conflict
    ): chat_Subscription
    """
    insert data into the table: "collection.Exhibition"
    """
    insert_collection_Exhibition(
        """
        the rows to be inserted
        """
        objects: [collection_Exhibition_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: collection_Exhibition_on_conflict
    ): collection_Exhibition_mutation_response
    """
    insert a single row into the table: "collection.Exhibition"
    """
    insert_collection_Exhibition_one(
        """
        the row to be inserted
        """
        object: collection_Exhibition_insert_input!
        """
        on conflict condition
        """
        on_conflict: collection_Exhibition_on_conflict
    ): collection_Exhibition
    """
    insert data into the table: "collection.ProgramPerson"
    """
    insert_collection_ProgramPerson(
        """
        the rows to be inserted
        """
        objects: [collection_ProgramPerson_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: collection_ProgramPerson_on_conflict
    ): collection_ProgramPerson_mutation_response
    """
    insert a single row into the table: "collection.ProgramPerson"
    """
    insert_collection_ProgramPerson_one(
        """
        the row to be inserted
        """
        object: collection_ProgramPerson_insert_input!
        """
        on conflict condition
        """
        on_conflict: collection_ProgramPerson_on_conflict
    ): collection_ProgramPerson
    """
    insert data into the table: "collection.Tag"
    """
    insert_collection_Tag(
        """
        the rows to be inserted
        """
        objects: [collection_Tag_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: collection_Tag_on_conflict
    ): collection_Tag_mutation_response
    """
    insert a single row into the table: "collection.Tag"
    """
    insert_collection_Tag_one(
        """
        the row to be inserted
        """
        object: collection_Tag_insert_input!
        """
        on conflict condition
        """
        on_conflict: collection_Tag_on_conflict
    ): collection_Tag
    """
    insert data into the table: "conference.Conference"
    """
    insert_conference_Conference(
        """
        the rows to be inserted
        """
        objects: [conference_Conference_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: conference_Conference_on_conflict
    ): conference_Conference_mutation_response
    """
    insert a single row into the table: "conference.Conference"
    """
    insert_conference_Conference_one(
        """
        the row to be inserted
        """
        object: conference_Conference_insert_input!
        """
        on conflict condition
        """
        on_conflict: conference_Conference_on_conflict
    ): conference_Conference
    """
    insert data into the table: "conference.Configuration"
    """
    insert_conference_Configuration(
        """
        the rows to be inserted
        """
        objects: [conference_Configuration_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: conference_Configuration_on_conflict
    ): conference_Configuration_mutation_response
    """
    insert data into the table: "conference.ConfigurationKey"
    """
    insert_conference_ConfigurationKey(
        """
        the rows to be inserted
        """
        objects: [conference_ConfigurationKey_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: conference_ConfigurationKey_on_conflict
    ): conference_ConfigurationKey_mutation_response
    """
    insert a single row into the table: "conference.ConfigurationKey"
    """
    insert_conference_ConfigurationKey_one(
        """
        the row to be inserted
        """
        object: conference_ConfigurationKey_insert_input!
        """
        on conflict condition
        """
        on_conflict: conference_ConfigurationKey_on_conflict
    ): conference_ConfigurationKey
    """
    insert a single row into the table: "conference.Configuration"
    """
    insert_conference_Configuration_one(
        """
        the row to be inserted
        """
        object: conference_Configuration_insert_input!
        """
        on conflict condition
        """
        on_conflict: conference_Configuration_on_conflict
    ): conference_Configuration
    """
    insert data into the table: "conference.DemoCode"
    """
    insert_conference_DemoCode(
        """
        the rows to be inserted
        """
        objects: [conference_DemoCode_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: conference_DemoCode_on_conflict
    ): conference_DemoCode_mutation_response
    """
    insert a single row into the table: "conference.DemoCode"
    """
    insert_conference_DemoCode_one(
        """
        the row to be inserted
        """
        object: conference_DemoCode_insert_input!
        """
        on conflict condition
        """
        on_conflict: conference_DemoCode_on_conflict
    ): conference_DemoCode
    """
    insert data into the table: "conference.Subconference"
    """
    insert_conference_Subconference(
        """
        the rows to be inserted
        """
        objects: [conference_Subconference_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: conference_Subconference_on_conflict
    ): conference_Subconference_mutation_response
    """
    insert a single row into the table: "conference.Subconference"
    """
    insert_conference_Subconference_one(
        """
        the row to be inserted
        """
        object: conference_Subconference_insert_input!
        """
        on conflict condition
        """
        on_conflict: conference_Subconference_on_conflict
    ): conference_Subconference
    """
    insert data into the table: "conference.VisibilityLevel"
    """
    insert_conference_VisibilityLevel(
        """
        the rows to be inserted
        """
        objects: [conference_VisibilityLevel_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: conference_VisibilityLevel_on_conflict
    ): conference_VisibilityLevel_mutation_response
    """
    insert a single row into the table: "conference.VisibilityLevel"
    """
    insert_conference_VisibilityLevel_one(
        """
        the row to be inserted
        """
        object: conference_VisibilityLevel_insert_input!
        """
        on conflict condition
        """
        on_conflict: conference_VisibilityLevel_on_conflict
    ): conference_VisibilityLevel
    """
    insert data into the table: "content.Element"
    """
    insert_content_Element(
        """
        the rows to be inserted
        """
        objects: [content_Element_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: content_Element_on_conflict
    ): content_Element_mutation_response
    """
    insert data into the table: "content.ElementType"
    """
    insert_content_ElementType(
        """
        the rows to be inserted
        """
        objects: [content_ElementType_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: content_ElementType_on_conflict
    ): content_ElementType_mutation_response
    """
    insert a single row into the table: "content.ElementType"
    """
    insert_content_ElementType_one(
        """
        the row to be inserted
        """
        object: content_ElementType_insert_input!
        """
        on conflict condition
        """
        on_conflict: content_ElementType_on_conflict
    ): content_ElementType
    """
    insert a single row into the table: "content.Element"
    """
    insert_content_Element_one(
        """
        the row to be inserted
        """
        object: content_Element_insert_input!
        """
        on conflict condition
        """
        on_conflict: content_Element_on_conflict
    ): content_Element
    """
    insert data into the table: "content.Item"
    """
    insert_content_Item(
        """
        the rows to be inserted
        """
        objects: [content_Item_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: content_Item_on_conflict
    ): content_Item_mutation_response
    """
    insert data into the table: "content.ItemExhibition"
    """
    insert_content_ItemExhibition(
        """
        the rows to be inserted
        """
        objects: [content_ItemExhibition_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: content_ItemExhibition_on_conflict
    ): content_ItemExhibition_mutation_response
    """
    insert a single row into the table: "content.ItemExhibition"
    """
    insert_content_ItemExhibition_one(
        """
        the row to be inserted
        """
        object: content_ItemExhibition_insert_input!
        """
        on conflict condition
        """
        on_conflict: content_ItemExhibition_on_conflict
    ): content_ItemExhibition
    """
    insert data into the table: "content.ItemProgramPerson"
    """
    insert_content_ItemProgramPerson(
        """
        the rows to be inserted
        """
        objects: [content_ItemProgramPerson_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: content_ItemProgramPerson_on_conflict
    ): content_ItemProgramPerson_mutation_response
    """
    insert a single row into the table: "content.ItemProgramPerson"
    """
    insert_content_ItemProgramPerson_one(
        """
        the row to be inserted
        """
        object: content_ItemProgramPerson_insert_input!
        """
        on conflict condition
        """
        on_conflict: content_ItemProgramPerson_on_conflict
    ): content_ItemProgramPerson
    """
    insert data into the table: "content.ItemTag"
    """
    insert_content_ItemTag(
        """
        the rows to be inserted
        """
        objects: [content_ItemTag_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: content_ItemTag_on_conflict
    ): content_ItemTag_mutation_response
    """
    insert a single row into the table: "content.ItemTag"
    """
    insert_content_ItemTag_one(
        """
        the row to be inserted
        """
        object: content_ItemTag_insert_input!
        """
        on conflict condition
        """
        on_conflict: content_ItemTag_on_conflict
    ): content_ItemTag
    """
    insert data into the table: "content.ItemType"
    """
    insert_content_ItemType(
        """
        the rows to be inserted
        """
        objects: [content_ItemType_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: content_ItemType_on_conflict
    ): content_ItemType_mutation_response
    """
    insert a single row into the table: "content.ItemType"
    """
    insert_content_ItemType_one(
        """
        the row to be inserted
        """
        object: content_ItemType_insert_input!
        """
        on conflict condition
        """
        on_conflict: content_ItemType_on_conflict
    ): content_ItemType
    """
    insert a single row into the table: "content.Item"
    """
    insert_content_Item_one(
        """
        the row to be inserted
        """
        object: content_Item_insert_input!
        """
        on conflict condition
        """
        on_conflict: content_Item_on_conflict
    ): content_Item
    """
    insert data into the table: "job_queues.ChannelStackCreateJob"
    """
    insert_job_queues_ChannelStackCreateJob(
        """
        the rows to be inserted
        """
        objects: [job_queues_ChannelStackCreateJob_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: job_queues_ChannelStackCreateJob_on_conflict
    ): job_queues_ChannelStackCreateJob_mutation_response
    """
    insert a single row into the table: "job_queues.ChannelStackCreateJob"
    """
    insert_job_queues_ChannelStackCreateJob_one(
        """
        the row to be inserted
        """
        object: job_queues_ChannelStackCreateJob_insert_input!
        """
        on conflict condition
        """
        on_conflict: job_queues_ChannelStackCreateJob_on_conflict
    ): job_queues_ChannelStackCreateJob
    """
    insert data into the table: "job_queues.ChannelStackDeleteJob"
    """
    insert_job_queues_ChannelStackDeleteJob(
        """
        the rows to be inserted
        """
        objects: [job_queues_ChannelStackDeleteJob_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: job_queues_ChannelStackDeleteJob_on_conflict
    ): job_queues_ChannelStackDeleteJob_mutation_response
    """
    insert a single row into the table: "job_queues.ChannelStackDeleteJob"
    """
    insert_job_queues_ChannelStackDeleteJob_one(
        """
        the row to be inserted
        """
        object: job_queues_ChannelStackDeleteJob_insert_input!
        """
        on conflict condition
        """
        on_conflict: job_queues_ChannelStackDeleteJob_on_conflict
    ): job_queues_ChannelStackDeleteJob
    """
    insert data into the table: "job_queues.ChannelStackUpdateJob"
    """
    insert_job_queues_ChannelStackUpdateJob(
        """
        the rows to be inserted
        """
        objects: [job_queues_ChannelStackUpdateJob_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: job_queues_ChannelStackUpdateJob_on_conflict
    ): job_queues_ChannelStackUpdateJob_mutation_response
    """
    insert a single row into the table: "job_queues.ChannelStackUpdateJob"
    """
    insert_job_queues_ChannelStackUpdateJob_one(
        """
        the row to be inserted
        """
        object: job_queues_ChannelStackUpdateJob_insert_input!
        """
        on conflict condition
        """
        on_conflict: job_queues_ChannelStackUpdateJob_on_conflict
    ): job_queues_ChannelStackUpdateJob
    """
    insert data into the table: "job_queues.CombineVideosJob"
    """
    insert_job_queues_CombineVideosJob(
        """
        the rows to be inserted
        """
        objects: [job_queues_CombineVideosJob_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: job_queues_CombineVideosJob_on_conflict
    ): job_queues_CombineVideosJob_mutation_response
    """
    insert a single row into the table: "job_queues.CombineVideosJob"
    """
    insert_job_queues_CombineVideosJob_one(
        """
        the row to be inserted
        """
        object: job_queues_CombineVideosJob_insert_input!
        """
        on conflict condition
        """
        on_conflict: job_queues_CombineVideosJob_on_conflict
    ): job_queues_CombineVideosJob
    """
    insert data into the table: "job_queues.CustomEmailJob"
    """
    insert_job_queues_CustomEmailJob(
        """
        the rows to be inserted
        """
        objects: [job_queues_CustomEmailJob_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: job_queues_CustomEmailJob_on_conflict
    ): job_queues_CustomEmailJob_mutation_response
    """
    insert a single row into the table: "job_queues.CustomEmailJob"
    """
    insert_job_queues_CustomEmailJob_one(
        """
        the row to be inserted
        """
        object: job_queues_CustomEmailJob_insert_input!
        """
        on conflict condition
        """
        on_conflict: job_queues_CustomEmailJob_on_conflict
    ): job_queues_CustomEmailJob
    """
    insert data into the table: "job_queues.ImportJob"
    """
    insert_job_queues_ImportJob(
        """
        the rows to be inserted
        """
        objects: [job_queues_ImportJob_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: job_queues_ImportJob_on_conflict
    ): job_queues_ImportJob_mutation_response
    """
    insert data into the table: "job_queues.ImportJobOutput"
    """
    insert_job_queues_ImportJobOutput(
        """
        the rows to be inserted
        """
        objects: [job_queues_ImportJobOutput_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: job_queues_ImportJobOutput_on_conflict
    ): job_queues_ImportJobOutput_mutation_response
    """
    insert a single row into the table: "job_queues.ImportJobOutput"
    """
    insert_job_queues_ImportJobOutput_one(
        """
        the row to be inserted
        """
        object: job_queues_ImportJobOutput_insert_input!
        """
        on conflict condition
        """
        on_conflict: job_queues_ImportJobOutput_on_conflict
    ): job_queues_ImportJobOutput
    """
    insert a single row into the table: "job_queues.ImportJob"
    """
    insert_job_queues_ImportJob_one(
        """
        the row to be inserted
        """
        object: job_queues_ImportJob_insert_input!
        """
        on conflict condition
        """
        on_conflict: job_queues_ImportJob_on_conflict
    ): job_queues_ImportJob
    """
    insert data into the table: "job_queues.InvitationEmailJob"
    """
    insert_job_queues_InvitationEmailJob(
        """
        the rows to be inserted
        """
        objects: [job_queues_InvitationEmailJob_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: job_queues_InvitationEmailJob_on_conflict
    ): job_queues_InvitationEmailJob_mutation_response
    """
    insert a single row into the table: "job_queues.InvitationEmailJob"
    """
    insert_job_queues_InvitationEmailJob_one(
        """
        the row to be inserted
        """
        object: job_queues_InvitationEmailJob_insert_input!
        """
        on conflict condition
        """
        on_conflict: job_queues_InvitationEmailJob_on_conflict
    ): job_queues_InvitationEmailJob
    """
    insert data into the table: "job_queues.JobStatus"
    """
    insert_job_queues_JobStatus(
        """
        the rows to be inserted
        """
        objects: [job_queues_JobStatus_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: job_queues_JobStatus_on_conflict
    ): job_queues_JobStatus_mutation_response
    """
    insert a single row into the table: "job_queues.JobStatus"
    """
    insert_job_queues_JobStatus_one(
        """
        the row to be inserted
        """
        object: job_queues_JobStatus_insert_input!
        """
        on conflict condition
        """
        on_conflict: job_queues_JobStatus_on_conflict
    ): job_queues_JobStatus
    """
    insert data into the table: "job_queues.MediaPackageHarvestJob"
    """
    insert_job_queues_MediaPackageHarvestJob(
        """
        the rows to be inserted
        """
        objects: [job_queues_MediaPackageHarvestJob_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: job_queues_MediaPackageHarvestJob_on_conflict
    ): job_queues_MediaPackageHarvestJob_mutation_response
    """
    insert a single row into the table: "job_queues.MediaPackageHarvestJob"
    """
    insert_job_queues_MediaPackageHarvestJob_one(
        """
        the row to be inserted
        """
        object: job_queues_MediaPackageHarvestJob_insert_input!
        """
        on conflict condition
        """
        on_conflict: job_queues_MediaPackageHarvestJob_on_conflict
    ): job_queues_MediaPackageHarvestJob
    """
    insert data into the table: "job_queues.PrepareJob"
    """
    insert_job_queues_PrepareJob(
        """
        the rows to be inserted
        """
        objects: [job_queues_PrepareJob_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: job_queues_PrepareJob_on_conflict
    ): job_queues_PrepareJob_mutation_response
    """
    insert a single row into the table: "job_queues.PrepareJob"
    """
    insert_job_queues_PrepareJob_one(
        """
        the row to be inserted
        """
        object: job_queues_PrepareJob_insert_input!
        """
        on conflict condition
        """
        on_conflict: job_queues_PrepareJob_on_conflict
    ): job_queues_PrepareJob
    """
    insert data into the table: "job_queues.PublishVideoJob"
    """
    insert_job_queues_PublishVideoJob(
        """
        the rows to be inserted
        """
        objects: [job_queues_PublishVideoJob_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: job_queues_PublishVideoJob_on_conflict
    ): job_queues_PublishVideoJob_mutation_response
    """
    insert a single row into the table: "job_queues.PublishVideoJob"
    """
    insert_job_queues_PublishVideoJob_one(
        """
        the row to be inserted
        """
        object: job_queues_PublishVideoJob_insert_input!
        """
        on conflict condition
        """
        on_conflict: job_queues_PublishVideoJob_on_conflict
    ): job_queues_PublishVideoJob
    """
    insert data into the table: "job_queues.SubmissionRequestEmailJob"
    """
    insert_job_queues_SubmissionRequestEmailJob(
        """
        the rows to be inserted
        """
        objects: [job_queues_SubmissionRequestEmailJob_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: job_queues_SubmissionRequestEmailJob_on_conflict
    ): job_queues_SubmissionRequestEmailJob_mutation_response
    """
    insert a single row into the table: "job_queues.SubmissionRequestEmailJob"
    """
    insert_job_queues_SubmissionRequestEmailJob_one(
        """
        the row to be inserted
        """
        object: job_queues_SubmissionRequestEmailJob_insert_input!
        """
        on conflict condition
        """
        on_conflict: job_queues_SubmissionRequestEmailJob_on_conflict
    ): job_queues_SubmissionRequestEmailJob
    """
    insert data into the table: "job_queues.UploadYouTubeVideoJob"
    """
    insert_job_queues_UploadYouTubeVideoJob(
        """
        the rows to be inserted
        """
        objects: [job_queues_UploadYouTubeVideoJob_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: job_queues_UploadYouTubeVideoJob_on_conflict
    ): job_queues_UploadYouTubeVideoJob_mutation_response
    """
    insert a single row into the table: "job_queues.UploadYouTubeVideoJob"
    """
    insert_job_queues_UploadYouTubeVideoJob_one(
        """
        the row to be inserted
        """
        object: job_queues_UploadYouTubeVideoJob_insert_input!
        """
        on conflict condition
        """
        on_conflict: job_queues_UploadYouTubeVideoJob_on_conflict
    ): job_queues_UploadYouTubeVideoJob
    """
    insert data into the table: "registrant.GoogleAccount"
    """
    insert_registrant_GoogleAccount(
        """
        the rows to be inserted
        """
        objects: [registrant_GoogleAccount_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: registrant_GoogleAccount_on_conflict
    ): registrant_GoogleAccount_mutation_response
    """
    insert a single row into the table: "registrant.GoogleAccount"
    """
    insert_registrant_GoogleAccount_one(
        """
        the row to be inserted
        """
        object: registrant_GoogleAccount_insert_input!
        """
        on conflict condition
        """
        on_conflict: registrant_GoogleAccount_on_conflict
    ): registrant_GoogleAccount
    """
    insert data into the table: "registrant.Group"
    """
    insert_registrant_Group(
        """
        the rows to be inserted
        """
        objects: [registrant_Group_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: registrant_Group_on_conflict
    ): registrant_Group_mutation_response
    """
    insert data into the table: "registrant.GroupRegistrant"
    """
    insert_registrant_GroupRegistrant(
        """
        the rows to be inserted
        """
        objects: [registrant_GroupRegistrant_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: registrant_GroupRegistrant_on_conflict
    ): registrant_GroupRegistrant_mutation_response
    """
    insert a single row into the table: "registrant.GroupRegistrant"
    """
    insert_registrant_GroupRegistrant_one(
        """
        the row to be inserted
        """
        object: registrant_GroupRegistrant_insert_input!
        """
        on conflict condition
        """
        on_conflict: registrant_GroupRegistrant_on_conflict
    ): registrant_GroupRegistrant
    """
    insert a single row into the table: "registrant.Group"
    """
    insert_registrant_Group_one(
        """
        the row to be inserted
        """
        object: registrant_Group_insert_input!
        """
        on conflict condition
        """
        on_conflict: registrant_Group_on_conflict
    ): registrant_Group
    """
    insert data into the table: "registrant.Invitation"
    """
    insert_registrant_Invitation(
        """
        the rows to be inserted
        """
        objects: [registrant_Invitation_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: registrant_Invitation_on_conflict
    ): registrant_Invitation_mutation_response
    """
    insert a single row into the table: "registrant.Invitation"
    """
    insert_registrant_Invitation_one(
        """
        the row to be inserted
        """
        object: registrant_Invitation_insert_input!
        """
        on conflict condition
        """
        on_conflict: registrant_Invitation_on_conflict
    ): registrant_Invitation
    """
    insert data into the table: "registrant.Profile"
    """
    insert_registrant_Profile(
        """
        the rows to be inserted
        """
        objects: [registrant_Profile_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: registrant_Profile_on_conflict
    ): registrant_Profile_mutation_response
    """
    insert a single row into the table: "registrant.Profile"
    """
    insert_registrant_Profile_one(
        """
        the row to be inserted
        """
        object: registrant_Profile_insert_input!
        """
        on conflict condition
        """
        on_conflict: registrant_Profile_on_conflict
    ): registrant_Profile
    """
    insert data into the table: "registrant.Registrant"
    """
    insert_registrant_Registrant(
        """
        the rows to be inserted
        """
        objects: [registrant_Registrant_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: registrant_Registrant_on_conflict
    ): registrant_Registrant_mutation_response
    """
    insert data into the table: "registrant.RegistrantRole"
    """
    insert_registrant_RegistrantRole(
        """
        the rows to be inserted
        """
        objects: [registrant_RegistrantRole_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: registrant_RegistrantRole_on_conflict
    ): registrant_RegistrantRole_mutation_response
    """
    insert a single row into the table: "registrant.RegistrantRole"
    """
    insert_registrant_RegistrantRole_one(
        """
        the row to be inserted
        """
        object: registrant_RegistrantRole_insert_input!
        """
        on conflict condition
        """
        on_conflict: registrant_RegistrantRole_on_conflict
    ): registrant_RegistrantRole
    """
    insert a single row into the table: "registrant.Registrant"
    """
    insert_registrant_Registrant_one(
        """
        the row to be inserted
        """
        object: registrant_Registrant_insert_input!
        """
        on conflict condition
        """
        on_conflict: registrant_Registrant_on_conflict
    ): registrant_Registrant
    """
    insert data into the table: "registrant.SavedVonageRoomRecording"
    """
    insert_registrant_SavedVonageRoomRecording(
        """
        the rows to be inserted
        """
        objects: [registrant_SavedVonageRoomRecording_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: registrant_SavedVonageRoomRecording_on_conflict
    ): registrant_SavedVonageRoomRecording_mutation_response
    """
    insert a single row into the table: "registrant.SavedVonageRoomRecording"
    """
    insert_registrant_SavedVonageRoomRecording_one(
        """
        the row to be inserted
        """
        object: registrant_SavedVonageRoomRecording_insert_input!
        """
        on conflict condition
        """
        on_conflict: registrant_SavedVonageRoomRecording_on_conflict
    ): registrant_SavedVonageRoomRecording
    """
    insert data into the table: "registrant.SubconferenceMembership"
    """
    insert_registrant_SubconferenceMembership(
        """
        the rows to be inserted
        """
        objects: [registrant_SubconferenceMembership_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: registrant_SubconferenceMembership_on_conflict
    ): registrant_SubconferenceMembership_mutation_response
    """
    insert a single row into the table: "registrant.SubconferenceMembership"
    """
    insert_registrant_SubconferenceMembership_one(
        """
        the row to be inserted
        """
        object: registrant_SubconferenceMembership_insert_input!
        """
        on conflict condition
        """
        on_conflict: registrant_SubconferenceMembership_on_conflict
    ): registrant_SubconferenceMembership
    """
    insert data into the table: "room.Backend"
    """
    insert_room_Backend(
        """
        the rows to be inserted
        """
        objects: [room_Backend_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: room_Backend_on_conflict
    ): room_Backend_mutation_response
    """
    insert a single row into the table: "room.Backend"
    """
    insert_room_Backend_one(
        """
        the row to be inserted
        """
        object: room_Backend_insert_input!
        """
        on conflict condition
        """
        on_conflict: room_Backend_on_conflict
    ): room_Backend
    """
    insert data into the table: "room.ChimeMeeting"
    """
    insert_room_ChimeMeeting(
        """
        the rows to be inserted
        """
        objects: [room_ChimeMeeting_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: room_ChimeMeeting_on_conflict
    ): room_ChimeMeeting_mutation_response
    """
    insert a single row into the table: "room.ChimeMeeting"
    """
    insert_room_ChimeMeeting_one(
        """
        the row to be inserted
        """
        object: room_ChimeMeeting_insert_input!
        """
        on conflict condition
        """
        on_conflict: room_ChimeMeeting_on_conflict
    ): room_ChimeMeeting
    """
    insert data into the table: "room.ManagementMode"
    """
    insert_room_ManagementMode(
        """
        the rows to be inserted
        """
        objects: [room_ManagementMode_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: room_ManagementMode_on_conflict
    ): room_ManagementMode_mutation_response
    """
    insert a single row into the table: "room.ManagementMode"
    """
    insert_room_ManagementMode_one(
        """
        the row to be inserted
        """
        object: room_ManagementMode_insert_input!
        """
        on conflict condition
        """
        on_conflict: room_ManagementMode_on_conflict
    ): room_ManagementMode
    """
    insert data into the table: "room.Mode"
    """
    insert_room_Mode(
        """
        the rows to be inserted
        """
        objects: [room_Mode_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: room_Mode_on_conflict
    ): room_Mode_mutation_response
    """
    insert a single row into the table: "room.Mode"
    """
    insert_room_Mode_one(
        """
        the row to be inserted
        """
        object: room_Mode_insert_input!
        """
        on conflict condition
        """
        on_conflict: room_Mode_on_conflict
    ): room_Mode
    """
    insert data into the table: "room.Participant"
    """
    insert_room_Participant(
        """
        the rows to be inserted
        """
        objects: [room_Participant_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: room_Participant_on_conflict
    ): room_Participant_mutation_response
    """
    insert a single row into the table: "room.Participant"
    """
    insert_room_Participant_one(
        """
        the row to be inserted
        """
        object: room_Participant_insert_input!
        """
        on conflict condition
        """
        on_conflict: room_Participant_on_conflict
    ): room_Participant
    """
    insert data into the table: "room.PersonRole"
    """
    insert_room_PersonRole(
        """
        the rows to be inserted
        """
        objects: [room_PersonRole_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: room_PersonRole_on_conflict
    ): room_PersonRole_mutation_response
    """
    insert a single row into the table: "room.PersonRole"
    """
    insert_room_PersonRole_one(
        """
        the row to be inserted
        """
        object: room_PersonRole_insert_input!
        """
        on conflict condition
        """
        on_conflict: room_PersonRole_on_conflict
    ): room_PersonRole
    """
    insert data into the table: "room.Room"
    """
    insert_room_Room(
        """
        the rows to be inserted
        """
        objects: [room_Room_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: room_Room_on_conflict
    ): room_Room_mutation_response
    """
    insert data into the table: "room.RoomGroupMembership"
    """
    insert_room_RoomGroupMembership(
        """
        the rows to be inserted
        """
        objects: [room_RoomGroupMembership_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: room_RoomGroupMembership_on_conflict
    ): room_RoomGroupMembership_mutation_response
    """
    insert a single row into the table: "room.RoomGroupMembership"
    """
    insert_room_RoomGroupMembership_one(
        """
        the row to be inserted
        """
        object: room_RoomGroupMembership_insert_input!
        """
        on conflict condition
        """
        on_conflict: room_RoomGroupMembership_on_conflict
    ): room_RoomGroupMembership
    """
    insert data into the table: "room.RoomMembership"
    """
    insert_room_RoomMembership(
        """
        the rows to be inserted
        """
        objects: [room_RoomMembership_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: room_RoomMembership_on_conflict
    ): room_RoomMembership_mutation_response
    """
    insert a single row into the table: "room.RoomMembership"
    """
    insert_room_RoomMembership_one(
        """
        the row to be inserted
        """
        object: room_RoomMembership_insert_input!
        """
        on conflict condition
        """
        on_conflict: room_RoomMembership_on_conflict
    ): room_RoomMembership
    """
    insert a single row into the table: "room.Room"
    """
    insert_room_Room_one(
        """
        the row to be inserted
        """
        object: room_Room_insert_input!
        """
        on conflict condition
        """
        on_conflict: room_Room_on_conflict
    ): room_Room
    """
    insert data into the table: "room.ShuffleAlgorithm"
    """
    insert_room_ShuffleAlgorithm(
        """
        the rows to be inserted
        """
        objects: [room_ShuffleAlgorithm_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: room_ShuffleAlgorithm_on_conflict
    ): room_ShuffleAlgorithm_mutation_response
    """
    insert a single row into the table: "room.ShuffleAlgorithm"
    """
    insert_room_ShuffleAlgorithm_one(
        """
        the row to be inserted
        """
        object: room_ShuffleAlgorithm_insert_input!
        """
        on conflict condition
        """
        on_conflict: room_ShuffleAlgorithm_on_conflict
    ): room_ShuffleAlgorithm
    """
    insert data into the table: "room.ShufflePeriod"
    """
    insert_room_ShufflePeriod(
        """
        the rows to be inserted
        """
        objects: [room_ShufflePeriod_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: room_ShufflePeriod_on_conflict
    ): room_ShufflePeriod_mutation_response
    """
    insert a single row into the table: "room.ShufflePeriod"
    """
    insert_room_ShufflePeriod_one(
        """
        the row to be inserted
        """
        object: room_ShufflePeriod_insert_input!
        """
        on conflict condition
        """
        on_conflict: room_ShufflePeriod_on_conflict
    ): room_ShufflePeriod
    """
    insert data into the table: "room.ShuffleQueueEntry"
    """
    insert_room_ShuffleQueueEntry(
        """
        the rows to be inserted
        """
        objects: [room_ShuffleQueueEntry_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: room_ShuffleQueueEntry_on_conflict
    ): room_ShuffleQueueEntry_mutation_response
    """
    insert a single row into the table: "room.ShuffleQueueEntry"
    """
    insert_room_ShuffleQueueEntry_one(
        """
        the row to be inserted
        """
        object: room_ShuffleQueueEntry_insert_input!
        """
        on conflict condition
        """
        on_conflict: room_ShuffleQueueEntry_on_conflict
    ): room_ShuffleQueueEntry
    """
    insert data into the table: "room.ShuffleRoom"
    """
    insert_room_ShuffleRoom(
        """
        the rows to be inserted
        """
        objects: [room_ShuffleRoom_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: room_ShuffleRoom_on_conflict
    ): room_ShuffleRoom_mutation_response
    """
    insert a single row into the table: "room.ShuffleRoom"
    """
    insert_room_ShuffleRoom_one(
        """
        the row to be inserted
        """
        object: room_ShuffleRoom_insert_input!
        """
        on conflict condition
        """
        on_conflict: room_ShuffleRoom_on_conflict
    ): room_ShuffleRoom
    """
    insert data into the table: "schedule.Continuation"
    """
    insert_schedule_Continuation(
        """
        the rows to be inserted
        """
        objects: [schedule_Continuation_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: schedule_Continuation_on_conflict
    ): schedule_Continuation_mutation_response
    """
    insert a single row into the table: "schedule.Continuation"
    """
    insert_schedule_Continuation_one(
        """
        the row to be inserted
        """
        object: schedule_Continuation_insert_input!
        """
        on conflict condition
        """
        on_conflict: schedule_Continuation_on_conflict
    ): schedule_Continuation
    """
    insert data into the table: "schedule.CurrentEvents"
    """
    insert_schedule_CurrentEvents(
        """
        the rows to be inserted
        """
        objects: [schedule_CurrentEvents_insert_input!]!
    ): schedule_CurrentEvents_mutation_response
    """
    insert a single row into the table: "schedule.CurrentEvents"
    """
    insert_schedule_CurrentEvents_one(
        """
        the row to be inserted
        """
        object: schedule_CurrentEvents_insert_input!
    ): schedule_CurrentEvents
    """
    insert data into the table: "schedule.Event"
    """
    insert_schedule_Event(
        """
        the rows to be inserted
        """
        objects: [schedule_Event_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: schedule_Event_on_conflict
    ): schedule_Event_mutation_response
    """
    insert data into the table: "schedule.EventProgramPerson"
    """
    insert_schedule_EventProgramPerson(
        """
        the rows to be inserted
        """
        objects: [schedule_EventProgramPerson_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: schedule_EventProgramPerson_on_conflict
    ): schedule_EventProgramPerson_mutation_response
    """
    insert data into the table: "schedule.EventProgramPersonRole"
    """
    insert_schedule_EventProgramPersonRole(
        """
        the rows to be inserted
        """
        objects: [schedule_EventProgramPersonRole_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: schedule_EventProgramPersonRole_on_conflict
    ): schedule_EventProgramPersonRole_mutation_response
    """
    insert a single row into the table: "schedule.EventProgramPersonRole"
    """
    insert_schedule_EventProgramPersonRole_one(
        """
        the row to be inserted
        """
        object: schedule_EventProgramPersonRole_insert_input!
        """
        on conflict condition
        """
        on_conflict: schedule_EventProgramPersonRole_on_conflict
    ): schedule_EventProgramPersonRole
    """
    insert a single row into the table: "schedule.EventProgramPerson"
    """
    insert_schedule_EventProgramPerson_one(
        """
        the row to be inserted
        """
        object: schedule_EventProgramPerson_insert_input!
        """
        on conflict condition
        """
        on_conflict: schedule_EventProgramPerson_on_conflict
    ): schedule_EventProgramPerson
    """
    insert a single row into the table: "schedule.Event"
    """
    insert_schedule_Event_one(
        """
        the row to be inserted
        """
        object: schedule_Event_insert_input!
        """
        on conflict condition
        """
        on_conflict: schedule_Event_on_conflict
    ): schedule_Event
    """
    insert data into the table: "schedule.StarredEvent"
    """
    insert_schedule_StarredEvent(
        """
        the rows to be inserted
        """
        objects: [schedule_StarredEvent_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: schedule_StarredEvent_on_conflict
    ): schedule_StarredEvent_mutation_response
    """
    insert a single row into the table: "schedule.StarredEvent"
    """
    insert_schedule_StarredEvent_one(
        """
        the row to be inserted
        """
        object: schedule_StarredEvent_insert_input!
        """
        on conflict condition
        """
        on_conflict: schedule_StarredEvent_on_conflict
    ): schedule_StarredEvent
    """
    insert data into the table: "sponsor.Tier"
    """
    insert_sponsor_Tier(
        """
        the rows to be inserted
        """
        objects: [sponsor_Tier_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: sponsor_Tier_on_conflict
    ): sponsor_Tier_mutation_response
    """
    insert data into the table: "sponsor.TierMember"
    """
    insert_sponsor_TierMember(
        """
        the rows to be inserted
        """
        objects: [sponsor_TierMember_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: sponsor_TierMember_on_conflict
    ): sponsor_TierMember_mutation_response
    """
    insert a single row into the table: "sponsor.TierMember"
    """
    insert_sponsor_TierMember_one(
        """
        the row to be inserted
        """
        object: sponsor_TierMember_insert_input!
        """
        on conflict condition
        """
        on_conflict: sponsor_TierMember_on_conflict
    ): sponsor_TierMember
    """
    insert a single row into the table: "sponsor.Tier"
    """
    insert_sponsor_Tier_one(
        """
        the row to be inserted
        """
        object: sponsor_Tier_insert_input!
        """
        on conflict condition
        """
        on_conflict: sponsor_Tier_on_conflict
    ): sponsor_Tier
    """
    insert data into the table: "system.Configuration"
    """
    insert_system_Configuration(
        """
        the rows to be inserted
        """
        objects: [system_Configuration_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: system_Configuration_on_conflict
    ): system_Configuration_mutation_response
    """
    insert data into the table: "system.ConfigurationKey"
    """
    insert_system_ConfigurationKey(
        """
        the rows to be inserted
        """
        objects: [system_ConfigurationKey_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: system_ConfigurationKey_on_conflict
    ): system_ConfigurationKey_mutation_response
    """
    insert a single row into the table: "system.ConfigurationKey"
    """
    insert_system_ConfigurationKey_one(
        """
        the row to be inserted
        """
        object: system_ConfigurationKey_insert_input!
        """
        on conflict condition
        """
        on_conflict: system_ConfigurationKey_on_conflict
    ): system_ConfigurationKey
    """
    insert data into the table: "system.ConfigurationPermissionGrant"
    """
    insert_system_ConfigurationPermissionGrant(
        """
        the rows to be inserted
        """
        objects: [system_ConfigurationPermissionGrant_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: system_ConfigurationPermissionGrant_on_conflict
    ): system_ConfigurationPermissionGrant_mutation_response
    """
    insert a single row into the table: "system.ConfigurationPermissionGrant"
    """
    insert_system_ConfigurationPermissionGrant_one(
        """
        the row to be inserted
        """
        object: system_ConfigurationPermissionGrant_insert_input!
        """
        on conflict condition
        """
        on_conflict: system_ConfigurationPermissionGrant_on_conflict
    ): system_ConfigurationPermissionGrant
    """
    insert a single row into the table: "system.Configuration"
    """
    insert_system_Configuration_one(
        """
        the row to be inserted
        """
        object: system_Configuration_insert_input!
        """
        on conflict condition
        """
        on_conflict: system_Configuration_on_conflict
    ): system_Configuration
    """
    insert data into the table: "system.SuperUserPermission"
    """
    insert_system_SuperUserPermission(
        """
        the rows to be inserted
        """
        objects: [system_SuperUserPermission_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: system_SuperUserPermission_on_conflict
    ): system_SuperUserPermission_mutation_response
    """
    insert data into the table: "system.SuperUserPermissionGrant"
    """
    insert_system_SuperUserPermissionGrant(
        """
        the rows to be inserted
        """
        objects: [system_SuperUserPermissionGrant_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: system_SuperUserPermissionGrant_on_conflict
    ): system_SuperUserPermissionGrant_mutation_response
    """
    insert a single row into the table: "system.SuperUserPermissionGrant"
    """
    insert_system_SuperUserPermissionGrant_one(
        """
        the row to be inserted
        """
        object: system_SuperUserPermissionGrant_insert_input!
        """
        on conflict condition
        """
        on_conflict: system_SuperUserPermissionGrant_on_conflict
    ): system_SuperUserPermissionGrant
    """
    insert a single row into the table: "system.SuperUserPermission"
    """
    insert_system_SuperUserPermission_one(
        """
        the row to be inserted
        """
        object: system_SuperUserPermission_insert_input!
        """
        on conflict condition
        """
        on_conflict: system_SuperUserPermission_on_conflict
    ): system_SuperUserPermission
    """
    insert data into the table: "video.ChannelStack"
    """
    insert_video_ChannelStack(
        """
        the rows to be inserted
        """
        objects: [video_ChannelStack_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: video_ChannelStack_on_conflict
    ): video_ChannelStack_mutation_response
    """
    insert a single row into the table: "video.ChannelStack"
    """
    insert_video_ChannelStack_one(
        """
        the row to be inserted
        """
        object: video_ChannelStack_insert_input!
        """
        on conflict condition
        """
        on_conflict: video_ChannelStack_on_conflict
    ): video_ChannelStack
    """
    insert data into the table: "video.EventVonageSession"
    """
    insert_video_EventVonageSession(
        """
        the rows to be inserted
        """
        objects: [video_EventVonageSession_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: video_EventVonageSession_on_conflict
    ): video_EventVonageSession_mutation_response
    """
    insert a single row into the table: "video.EventVonageSession"
    """
    insert_video_EventVonageSession_one(
        """
        the row to be inserted
        """
        object: video_EventVonageSession_insert_input!
        """
        on conflict condition
        """
        on_conflict: video_EventVonageSession_on_conflict
    ): video_EventVonageSession
    """
    insert data into the table: "video.ImmediateSwitch"
    """
    insert_video_ImmediateSwitch(
        """
        the rows to be inserted
        """
        objects: [video_ImmediateSwitch_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: video_ImmediateSwitch_on_conflict
    ): video_ImmediateSwitch_mutation_response
    """
    insert a single row into the table: "video.ImmediateSwitch"
    """
    insert_video_ImmediateSwitch_one(
        """
        the row to be inserted
        """
        object: video_ImmediateSwitch_insert_input!
        """
        on conflict condition
        """
        on_conflict: video_ImmediateSwitch_on_conflict
    ): video_ImmediateSwitch
    """
    insert data into the table: "video.InputType"
    """
    insert_video_InputType(
        """
        the rows to be inserted
        """
        objects: [video_InputType_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: video_InputType_on_conflict
    ): video_InputType_mutation_response
    """
    insert a single row into the table: "video.InputType"
    """
    insert_video_InputType_one(
        """
        the row to be inserted
        """
        object: video_InputType_insert_input!
        """
        on conflict condition
        """
        on_conflict: video_InputType_on_conflict
    ): video_InputType
    """
    insert data into the table: "video.MediaLiveChannelStatus"
    """
    insert_video_MediaLiveChannelStatus(
        """
        the rows to be inserted
        """
        objects: [video_MediaLiveChannelStatus_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: video_MediaLiveChannelStatus_on_conflict
    ): video_MediaLiveChannelStatus_mutation_response
    """
    insert a single row into the table: "video.MediaLiveChannelStatus"
    """
    insert_video_MediaLiveChannelStatus_one(
        """
        the row to be inserted
        """
        object: video_MediaLiveChannelStatus_insert_input!
        """
        on conflict condition
        """
        on_conflict: video_MediaLiveChannelStatus_on_conflict
    ): video_MediaLiveChannelStatus
    """
    insert data into the table: "video.RoomRtmpInput"
    """
    insert_video_RoomRtmpInput(
        """
        the rows to be inserted
        """
        objects: [video_RoomRtmpInput_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: video_RoomRtmpInput_on_conflict
    ): video_RoomRtmpInput_mutation_response
    """
    insert a single row into the table: "video.RoomRtmpInput"
    """
    insert_video_RoomRtmpInput_one(
        """
        the row to be inserted
        """
        object: video_RoomRtmpInput_insert_input!
        """
        on conflict condition
        """
        on_conflict: video_RoomRtmpInput_on_conflict
    ): video_RoomRtmpInput
    """
    insert data into the table: "video.RoomRtmpOutput"
    """
    insert_video_RoomRtmpOutput(
        """
        the rows to be inserted
        """
        objects: [video_RoomRtmpOutput_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: video_RoomRtmpOutput_on_conflict
    ): video_RoomRtmpOutput_mutation_response
    """
    insert a single row into the table: "video.RoomRtmpOutput"
    """
    insert_video_RoomRtmpOutput_one(
        """
        the row to be inserted
        """
        object: video_RoomRtmpOutput_insert_input!
        """
        on conflict condition
        """
        on_conflict: video_RoomRtmpOutput_on_conflict
    ): video_RoomRtmpOutput
    """
    insert data into the table: "video.RtmpInput"
    """
    insert_video_RtmpInput(
        """
        the rows to be inserted
        """
        objects: [video_RtmpInput_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: video_RtmpInput_on_conflict
    ): video_RtmpInput_mutation_response
    """
    insert a single row into the table: "video.RtmpInput"
    """
    insert_video_RtmpInput_one(
        """
        the row to be inserted
        """
        object: video_RtmpInput_insert_input!
        """
        on conflict condition
        """
        on_conflict: video_RtmpInput_on_conflict
    ): video_RtmpInput
    """
    insert data into the table: "video.TranscriptionJob"
    """
    insert_video_TranscriptionJob(
        """
        the rows to be inserted
        """
        objects: [video_TranscriptionJob_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: video_TranscriptionJob_on_conflict
    ): video_TranscriptionJob_mutation_response
    """
    insert a single row into the table: "video.TranscriptionJob"
    """
    insert_video_TranscriptionJob_one(
        """
        the row to be inserted
        """
        object: video_TranscriptionJob_insert_input!
        """
        on conflict condition
        """
        on_conflict: video_TranscriptionJob_on_conflict
    ): video_TranscriptionJob
    """
    insert data into the table: "video.VideoRenderJob"
    """
    insert_video_VideoRenderJob(
        """
        the rows to be inserted
        """
        objects: [video_VideoRenderJob_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: video_VideoRenderJob_on_conflict
    ): video_VideoRenderJob_mutation_response
    """
    insert a single row into the table: "video.VideoRenderJob"
    """
    insert_video_VideoRenderJob_one(
        """
        the row to be inserted
        """
        object: video_VideoRenderJob_insert_input!
        """
        on conflict condition
        """
        on_conflict: video_VideoRenderJob_on_conflict
    ): video_VideoRenderJob
    """
    insert data into the table: "video.VonageParticipantStream"
    """
    insert_video_VonageParticipantStream(
        """
        the rows to be inserted
        """
        objects: [video_VonageParticipantStream_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: video_VonageParticipantStream_on_conflict
    ): video_VonageParticipantStream_mutation_response
    """
    insert a single row into the table: "video.VonageParticipantStream"
    """
    insert_video_VonageParticipantStream_one(
        """
        the row to be inserted
        """
        object: video_VonageParticipantStream_insert_input!
        """
        on conflict condition
        """
        on_conflict: video_VonageParticipantStream_on_conflict
    ): video_VonageParticipantStream
    """
    insert data into the table: "video.VonageRoomRecording"
    """
    insert_video_VonageRoomRecording(
        """
        the rows to be inserted
        """
        objects: [video_VonageRoomRecording_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: video_VonageRoomRecording_on_conflict
    ): video_VonageRoomRecording_mutation_response
    """
    insert a single row into the table: "video.VonageRoomRecording"
    """
    insert_video_VonageRoomRecording_one(
        """
        the row to be inserted
        """
        object: video_VonageRoomRecording_insert_input!
        """
        on conflict condition
        """
        on_conflict: video_VonageRoomRecording_on_conflict
    ): video_VonageRoomRecording
    """
    insert data into the table: "video.VonageSessionLayout"
    """
    insert_video_VonageSessionLayout(
        """
        the rows to be inserted
        """
        objects: [video_VonageSessionLayout_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: video_VonageSessionLayout_on_conflict
    ): video_VonageSessionLayout_mutation_response
    """
    insert a single row into the table: "video.VonageSessionLayout"
    """
    insert_video_VonageSessionLayout_one(
        """
        the row to be inserted
        """
        object: video_VonageSessionLayout_insert_input!
        """
        on conflict condition
        """
        on_conflict: video_VonageSessionLayout_on_conflict
    ): video_VonageSessionLayout
    """
    insert data into the table: "video.VonageVideoPlaybackCommand"
    """
    insert_video_VonageVideoPlaybackCommand(
        """
        the rows to be inserted
        """
        objects: [video_VonageVideoPlaybackCommand_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: video_VonageVideoPlaybackCommand_on_conflict
    ): video_VonageVideoPlaybackCommand_mutation_response
    """
    insert a single row into the table: "video.VonageVideoPlaybackCommand"
    """
    insert_video_VonageVideoPlaybackCommand_one(
        """
        the row to be inserted
        """
        object: video_VonageVideoPlaybackCommand_insert_input!
        """
        on conflict condition
        """
        on_conflict: video_VonageVideoPlaybackCommand_on_conflict
    ): video_VonageVideoPlaybackCommand
    """
    insert data into the table: "video.YouTubeUpload"
    """
    insert_video_YouTubeUpload(
        """
        the rows to be inserted
        """
        objects: [video_YouTubeUpload_insert_input!]!
        """
        on conflict condition
        """
        on_conflict: video_YouTubeUpload_on_conflict
    ): video_YouTubeUpload_mutation_response
    """
    insert a single row into the table: "video.YouTubeUpload"
    """
    insert_video_YouTubeUpload_one(
        """
        the row to be inserted
        """
        object: video_YouTubeUpload_insert_input!
        """
        on conflict condition
        """
        on_conflict: video_YouTubeUpload_on_conflict
    ): video_YouTubeUpload
    invitationConfirmCurrent(inviteCode: uuid!): ConfirmInvitationOutput
    joinEventVonageSession(eventId: uuid!, registrantId: uuid!): JoinEventVonageSessionOutput
    joinRoomChimeSession(registrantId: uuid!, roomId: uuid!): JoinRoomChimeSessionOutput
    joinRoomVonageSession(registrantId: uuid!, roomId: uuid!): JoinRoomVonageSessionOutput
    notifyEventEnded(eventId: uuid!): NotifyEventEnded!
    notifyEventStarted(eventId: uuid!): NotifyEventStarted!
    presence_Flush: PresenceFlushOutput!
    refreshYouTubeData(registrantGoogleAccountId: uuid!, registrantId: uuid!): RefreshYouTubeDataOutput
    stopEventBroadcast(eventId: uuid!): StopEventBroadcastOutput
    submitGoogleOAuthCode(code: String!, state: String!): SubmitGoogleOAuthCodeOutput
    submitUploadableElement(data: jsonb!, elementId: uuid!, magicToken: String!): SubmitUploadableElementOutput
    toggleVonageRecordingState(recordingActive: Boolean!, vonageSessionId: String!): ToggleVonageRecordingStateOutput
    updateProfilePhoto(registrantId: uuid!, s3URL: String): UpdateProfilePhotoResponse
    updateSubtitles(elementId: String!, magicToken: String!, subtitleText: String!): SubmitUpdatedSubtitlesOutput
    """
    update data of the table: "Email"
    """
    update_Email(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: Email_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: Email_set_input
        """
        filter the rows which have to be updated
        """
        where: Email_bool_exp!
    ): Email_mutation_response
    """
    update single row of the table: "Email"
    """
    update_Email_by_pk(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: Email_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: Email_set_input
        pk_columns: Email_pk_columns_input!
    ): Email
    """
    update data of the table: "PushNotificationSubscription"
    """
    update_PushNotificationSubscription(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: PushNotificationSubscription_set_input
        """
        filter the rows which have to be updated
        """
        where: PushNotificationSubscription_bool_exp!
    ): PushNotificationSubscription_mutation_response
    """
    update single row of the table: "PushNotificationSubscription"
    """
    update_PushNotificationSubscription_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: PushNotificationSubscription_set_input
        pk_columns: PushNotificationSubscription_pk_columns_input!
    ): PushNotificationSubscription
    """
    update data of the table: "User"
    """
    update_User(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: User_set_input
        """
        filter the rows which have to be updated
        """
        where: User_bool_exp!
    ): User_mutation_response
    """
    update single row of the table: "User"
    """
    update_User_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: User_set_input
        pk_columns: User_pk_columns_input!
    ): User
    """
    update data of the table: "analytics.AppStats"
    """
    update_analytics_AppStats(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: analytics_AppStats_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: analytics_AppStats_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: analytics_AppStats_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: analytics_AppStats_delete_key_input
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: analytics_AppStats_inc_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: analytics_AppStats_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: analytics_AppStats_set_input
        """
        filter the rows which have to be updated
        """
        where: analytics_AppStats_bool_exp!
    ): analytics_AppStats_mutation_response
    """
    update single row of the table: "analytics.AppStats"
    """
    update_analytics_AppStats_by_pk(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: analytics_AppStats_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: analytics_AppStats_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: analytics_AppStats_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: analytics_AppStats_delete_key_input
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: analytics_AppStats_inc_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: analytics_AppStats_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: analytics_AppStats_set_input
        pk_columns: analytics_AppStats_pk_columns_input!
    ): analytics_AppStats
    """
    update data of the table: "analytics.ContentElementStats"
    """
    update_analytics_ContentElementStats(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: analytics_ContentElementStats_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: analytics_ContentElementStats_set_input
        """
        filter the rows which have to be updated
        """
        where: analytics_ContentElementStats_bool_exp!
    ): analytics_ContentElementStats_mutation_response
    """
    update single row of the table: "analytics.ContentElementStats"
    """
    update_analytics_ContentElementStats_by_pk(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: analytics_ContentElementStats_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: analytics_ContentElementStats_set_input
        pk_columns: analytics_ContentElementStats_pk_columns_input!
    ): analytics_ContentElementStats
    """
    update data of the table: "analytics.ContentItemStats"
    """
    update_analytics_ContentItemStats(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: analytics_ContentItemStats_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: analytics_ContentItemStats_set_input
        """
        filter the rows which have to be updated
        """
        where: analytics_ContentItemStats_bool_exp!
    ): analytics_ContentItemStats_mutation_response
    """
    update single row of the table: "analytics.ContentItemStats"
    """
    update_analytics_ContentItemStats_by_pk(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: analytics_ContentItemStats_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: analytics_ContentItemStats_set_input
        pk_columns: analytics_ContentItemStats_pk_columns_input!
    ): analytics_ContentItemStats
    """
    update data of the table: "analytics.ElementTotalViews"
    """
    update_analytics_ElementTotalViews(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: analytics_ElementTotalViews_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: analytics_ElementTotalViews_set_input
        """
        filter the rows which have to be updated
        """
        where: analytics_ElementTotalViews_bool_exp!
    ): analytics_ElementTotalViews_mutation_response
    """
    update single row of the table: "analytics.ElementTotalViews"
    """
    update_analytics_ElementTotalViews_by_pk(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: analytics_ElementTotalViews_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: analytics_ElementTotalViews_set_input
        pk_columns: analytics_ElementTotalViews_pk_columns_input!
    ): analytics_ElementTotalViews
    """
    update data of the table: "analytics.ItemTotalViews"
    """
    update_analytics_ItemTotalViews(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: analytics_ItemTotalViews_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: analytics_ItemTotalViews_set_input
        """
        filter the rows which have to be updated
        """
        where: analytics_ItemTotalViews_bool_exp!
    ): analytics_ItemTotalViews_mutation_response
    """
    update single row of the table: "analytics.ItemTotalViews"
    """
    update_analytics_ItemTotalViews_by_pk(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: analytics_ItemTotalViews_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: analytics_ItemTotalViews_set_input
        pk_columns: analytics_ItemTotalViews_pk_columns_input!
    ): analytics_ItemTotalViews
    """
    update data of the table: "analytics.RoomPresence"
    """
    update_analytics_RoomPresence(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: analytics_RoomPresence_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: analytics_RoomPresence_set_input
        """
        filter the rows which have to be updated
        """
        where: analytics_RoomPresence_bool_exp!
    ): analytics_RoomPresence_mutation_response
    """
    update single row of the table: "analytics.RoomPresence"
    """
    update_analytics_RoomPresence_by_pk(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: analytics_RoomPresence_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: analytics_RoomPresence_set_input
        pk_columns: analytics_RoomPresence_pk_columns_input!
    ): analytics_RoomPresence
    """
    update data of the table: "analytics.RoomStats"
    """
    update_analytics_RoomStats(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: analytics_RoomStats_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: analytics_RoomStats_set_input
        """
        filter the rows which have to be updated
        """
        where: analytics_RoomStats_bool_exp!
    ): analytics_RoomStats_mutation_response
    """
    update single row of the table: "analytics.RoomStats"
    """
    update_analytics_RoomStats_by_pk(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: analytics_RoomStats_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: analytics_RoomStats_set_input
        pk_columns: analytics_RoomStats_pk_columns_input!
    ): analytics_RoomStats
    """
    update data of the table: "chat.Chat"
    """
    update_chat_Chat(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: chat_Chat_set_input
        """
        filter the rows which have to be updated
        """
        where: chat_Chat_bool_exp!
    ): chat_Chat_mutation_response
    """
    update single row of the table: "chat.Chat"
    """
    update_chat_Chat_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: chat_Chat_set_input
        pk_columns: chat_Chat_pk_columns_input!
    ): chat_Chat
    """
    update data of the table: "chat.Flag"
    """
    update_chat_Flag(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: chat_Flag_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: chat_Flag_set_input
        """
        filter the rows which have to be updated
        """
        where: chat_Flag_bool_exp!
    ): chat_Flag_mutation_response
    """
    update data of the table: "chat.FlagType"
    """
    update_chat_FlagType(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: chat_FlagType_set_input
        """
        filter the rows which have to be updated
        """
        where: chat_FlagType_bool_exp!
    ): chat_FlagType_mutation_response
    """
    update single row of the table: "chat.FlagType"
    """
    update_chat_FlagType_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: chat_FlagType_set_input
        pk_columns: chat_FlagType_pk_columns_input!
    ): chat_FlagType
    """
    update single row of the table: "chat.Flag"
    """
    update_chat_Flag_by_pk(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: chat_Flag_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: chat_Flag_set_input
        pk_columns: chat_Flag_pk_columns_input!
    ): chat_Flag
    """
    update data of the table: "chat.Message"
    """
    update_chat_Message(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: chat_Message_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: chat_Message_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: chat_Message_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: chat_Message_delete_key_input
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: chat_Message_inc_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: chat_Message_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: chat_Message_set_input
        """
        filter the rows which have to be updated
        """
        where: chat_Message_bool_exp!
    ): chat_Message_mutation_response
    """
    update data of the table: "chat.MessageType"
    """
    update_chat_MessageType(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: chat_MessageType_set_input
        """
        filter the rows which have to be updated
        """
        where: chat_MessageType_bool_exp!
    ): chat_MessageType_mutation_response
    """
    update single row of the table: "chat.MessageType"
    """
    update_chat_MessageType_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: chat_MessageType_set_input
        pk_columns: chat_MessageType_pk_columns_input!
    ): chat_MessageType
    """
    update single row of the table: "chat.Message"
    """
    update_chat_Message_by_pk(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: chat_Message_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: chat_Message_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: chat_Message_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: chat_Message_delete_key_input
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: chat_Message_inc_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: chat_Message_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: chat_Message_set_input
        pk_columns: chat_Message_pk_columns_input!
    ): chat_Message
    """
    update data of the table: "chat.Pin"
    """
    update_chat_Pin(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: chat_Pin_set_input
        """
        filter the rows which have to be updated
        """
        where: chat_Pin_bool_exp!
    ): chat_Pin_mutation_response
    """
    update single row of the table: "chat.Pin"
    """
    update_chat_Pin_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: chat_Pin_set_input
        pk_columns: chat_Pin_pk_columns_input!
    ): chat_Pin
    """
    update data of the table: "chat.Reaction"
    """
    update_chat_Reaction(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: chat_Reaction_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: chat_Reaction_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: chat_Reaction_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: chat_Reaction_delete_key_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: chat_Reaction_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: chat_Reaction_set_input
        """
        filter the rows which have to be updated
        """
        where: chat_Reaction_bool_exp!
    ): chat_Reaction_mutation_response
    """
    update data of the table: "chat.ReactionType"
    """
    update_chat_ReactionType(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: chat_ReactionType_set_input
        """
        filter the rows which have to be updated
        """
        where: chat_ReactionType_bool_exp!
    ): chat_ReactionType_mutation_response
    """
    update single row of the table: "chat.ReactionType"
    """
    update_chat_ReactionType_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: chat_ReactionType_set_input
        pk_columns: chat_ReactionType_pk_columns_input!
    ): chat_ReactionType
    """
    update single row of the table: "chat.Reaction"
    """
    update_chat_Reaction_by_pk(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: chat_Reaction_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: chat_Reaction_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: chat_Reaction_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: chat_Reaction_delete_key_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: chat_Reaction_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: chat_Reaction_set_input
        pk_columns: chat_Reaction_pk_columns_input!
    ): chat_Reaction
    """
    update data of the table: "chat.ReadUpToIndex"
    """
    update_chat_ReadUpToIndex(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: chat_ReadUpToIndex_set_input
        """
        filter the rows which have to be updated
        """
        where: chat_ReadUpToIndex_bool_exp!
    ): chat_ReadUpToIndex_mutation_response
    """
    update single row of the table: "chat.ReadUpToIndex"
    """
    update_chat_ReadUpToIndex_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: chat_ReadUpToIndex_set_input
        pk_columns: chat_ReadUpToIndex_pk_columns_input!
    ): chat_ReadUpToIndex
    """
    update data of the table: "chat.Subscription"
    """
    update_chat_Subscription(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: chat_Subscription_set_input
        """
        filter the rows which have to be updated
        """
        where: chat_Subscription_bool_exp!
    ): chat_Subscription_mutation_response
    """
    update single row of the table: "chat.Subscription"
    """
    update_chat_Subscription_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: chat_Subscription_set_input
        pk_columns: chat_Subscription_pk_columns_input!
    ): chat_Subscription
    """
    update data of the table: "collection.Exhibition"
    """
    update_collection_Exhibition(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: collection_Exhibition_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: collection_Exhibition_set_input
        """
        filter the rows which have to be updated
        """
        where: collection_Exhibition_bool_exp!
    ): collection_Exhibition_mutation_response
    """
    update single row of the table: "collection.Exhibition"
    """
    update_collection_Exhibition_by_pk(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: collection_Exhibition_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: collection_Exhibition_set_input
        pk_columns: collection_Exhibition_pk_columns_input!
    ): collection_Exhibition
    """
    update data of the table: "collection.ProgramPerson"
    """
    update_collection_ProgramPerson(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: collection_ProgramPerson_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: collection_ProgramPerson_set_input
        """
        filter the rows which have to be updated
        """
        where: collection_ProgramPerson_bool_exp!
    ): collection_ProgramPerson_mutation_response
    """
    update single row of the table: "collection.ProgramPerson"
    """
    update_collection_ProgramPerson_by_pk(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: collection_ProgramPerson_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: collection_ProgramPerson_set_input
        pk_columns: collection_ProgramPerson_pk_columns_input!
    ): collection_ProgramPerson
    """
    update data of the table: "collection.Tag"
    """
    update_collection_Tag(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: collection_Tag_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: collection_Tag_set_input
        """
        filter the rows which have to be updated
        """
        where: collection_Tag_bool_exp!
    ): collection_Tag_mutation_response
    """
    update single row of the table: "collection.Tag"
    """
    update_collection_Tag_by_pk(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: collection_Tag_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: collection_Tag_set_input
        pk_columns: collection_Tag_pk_columns_input!
    ): collection_Tag
    """
    update data of the table: "conference.Conference"
    """
    update_conference_Conference(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: conference_Conference_set_input
        """
        filter the rows which have to be updated
        """
        where: conference_Conference_bool_exp!
    ): conference_Conference_mutation_response
    """
    update single row of the table: "conference.Conference"
    """
    update_conference_Conference_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: conference_Conference_set_input
        pk_columns: conference_Conference_pk_columns_input!
    ): conference_Conference
    """
    update data of the table: "conference.Configuration"
    """
    update_conference_Configuration(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: conference_Configuration_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: conference_Configuration_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: conference_Configuration_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: conference_Configuration_delete_key_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: conference_Configuration_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: conference_Configuration_set_input
        """
        filter the rows which have to be updated
        """
        where: conference_Configuration_bool_exp!
    ): conference_Configuration_mutation_response
    """
    update data of the table: "conference.ConfigurationKey"
    """
    update_conference_ConfigurationKey(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: conference_ConfigurationKey_set_input
        """
        filter the rows which have to be updated
        """
        where: conference_ConfigurationKey_bool_exp!
    ): conference_ConfigurationKey_mutation_response
    """
    update single row of the table: "conference.ConfigurationKey"
    """
    update_conference_ConfigurationKey_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: conference_ConfigurationKey_set_input
        pk_columns: conference_ConfigurationKey_pk_columns_input!
    ): conference_ConfigurationKey
    """
    update single row of the table: "conference.Configuration"
    """
    update_conference_Configuration_by_pk(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: conference_Configuration_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: conference_Configuration_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: conference_Configuration_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: conference_Configuration_delete_key_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: conference_Configuration_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: conference_Configuration_set_input
        pk_columns: conference_Configuration_pk_columns_input!
    ): conference_Configuration
    """
    update data of the table: "conference.DemoCode"
    """
    update_conference_DemoCode(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: conference_DemoCode_set_input
        """
        filter the rows which have to be updated
        """
        where: conference_DemoCode_bool_exp!
    ): conference_DemoCode_mutation_response
    """
    update single row of the table: "conference.DemoCode"
    """
    update_conference_DemoCode_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: conference_DemoCode_set_input
        pk_columns: conference_DemoCode_pk_columns_input!
    ): conference_DemoCode
    """
    update data of the table: "conference.Subconference"
    """
    update_conference_Subconference(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: conference_Subconference_set_input
        """
        filter the rows which have to be updated
        """
        where: conference_Subconference_bool_exp!
    ): conference_Subconference_mutation_response
    """
    update single row of the table: "conference.Subconference"
    """
    update_conference_Subconference_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: conference_Subconference_set_input
        pk_columns: conference_Subconference_pk_columns_input!
    ): conference_Subconference
    """
    update data of the table: "conference.VisibilityLevel"
    """
    update_conference_VisibilityLevel(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: conference_VisibilityLevel_set_input
        """
        filter the rows which have to be updated
        """
        where: conference_VisibilityLevel_bool_exp!
    ): conference_VisibilityLevel_mutation_response
    """
    update single row of the table: "conference.VisibilityLevel"
    """
    update_conference_VisibilityLevel_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: conference_VisibilityLevel_set_input
        pk_columns: conference_VisibilityLevel_pk_columns_input!
    ): conference_VisibilityLevel
    """
    update data of the table: "content.Element"
    """
    update_content_Element(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: content_Element_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: content_Element_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: content_Element_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: content_Element_delete_key_input
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: content_Element_inc_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: content_Element_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: content_Element_set_input
        """
        filter the rows which have to be updated
        """
        where: content_Element_bool_exp!
    ): content_Element_mutation_response
    """
    update data of the table: "content.ElementType"
    """
    update_content_ElementType(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: content_ElementType_set_input
        """
        filter the rows which have to be updated
        """
        where: content_ElementType_bool_exp!
    ): content_ElementType_mutation_response
    """
    update single row of the table: "content.ElementType"
    """
    update_content_ElementType_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: content_ElementType_set_input
        pk_columns: content_ElementType_pk_columns_input!
    ): content_ElementType
    """
    update single row of the table: "content.Element"
    """
    update_content_Element_by_pk(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: content_Element_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: content_Element_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: content_Element_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: content_Element_delete_key_input
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: content_Element_inc_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: content_Element_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: content_Element_set_input
        pk_columns: content_Element_pk_columns_input!
    ): content_Element
    """
    update data of the table: "content.Item"
    """
    update_content_Item(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: content_Item_set_input
        """
        filter the rows which have to be updated
        """
        where: content_Item_bool_exp!
    ): content_Item_mutation_response
    """
    update data of the table: "content.ItemExhibition"
    """
    update_content_ItemExhibition(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: content_ItemExhibition_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: content_ItemExhibition_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: content_ItemExhibition_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: content_ItemExhibition_delete_key_input
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: content_ItemExhibition_inc_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: content_ItemExhibition_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: content_ItemExhibition_set_input
        """
        filter the rows which have to be updated
        """
        where: content_ItemExhibition_bool_exp!
    ): content_ItemExhibition_mutation_response
    """
    update single row of the table: "content.ItemExhibition"
    """
    update_content_ItemExhibition_by_pk(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: content_ItemExhibition_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: content_ItemExhibition_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: content_ItemExhibition_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: content_ItemExhibition_delete_key_input
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: content_ItemExhibition_inc_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: content_ItemExhibition_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: content_ItemExhibition_set_input
        pk_columns: content_ItemExhibition_pk_columns_input!
    ): content_ItemExhibition
    """
    update data of the table: "content.ItemProgramPerson"
    """
    update_content_ItemProgramPerson(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: content_ItemProgramPerson_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: content_ItemProgramPerson_set_input
        """
        filter the rows which have to be updated
        """
        where: content_ItemProgramPerson_bool_exp!
    ): content_ItemProgramPerson_mutation_response
    """
    update single row of the table: "content.ItemProgramPerson"
    """
    update_content_ItemProgramPerson_by_pk(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: content_ItemProgramPerson_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: content_ItemProgramPerson_set_input
        pk_columns: content_ItemProgramPerson_pk_columns_input!
    ): content_ItemProgramPerson
    """
    update data of the table: "content.ItemTag"
    """
    update_content_ItemTag(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: content_ItemTag_set_input
        """
        filter the rows which have to be updated
        """
        where: content_ItemTag_bool_exp!
    ): content_ItemTag_mutation_response
    """
    update single row of the table: "content.ItemTag"
    """
    update_content_ItemTag_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: content_ItemTag_set_input
        pk_columns: content_ItemTag_pk_columns_input!
    ): content_ItemTag
    """
    update data of the table: "content.ItemType"
    """
    update_content_ItemType(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: content_ItemType_set_input
        """
        filter the rows which have to be updated
        """
        where: content_ItemType_bool_exp!
    ): content_ItemType_mutation_response
    """
    update single row of the table: "content.ItemType"
    """
    update_content_ItemType_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: content_ItemType_set_input
        pk_columns: content_ItemType_pk_columns_input!
    ): content_ItemType
    """
    update single row of the table: "content.Item"
    """
    update_content_Item_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: content_Item_set_input
        pk_columns: content_Item_pk_columns_input!
    ): content_Item
    """
    update data of the table: "job_queues.ChannelStackCreateJob"
    """
    update_job_queues_ChannelStackCreateJob(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: job_queues_ChannelStackCreateJob_set_input
        """
        filter the rows which have to be updated
        """
        where: job_queues_ChannelStackCreateJob_bool_exp!
    ): job_queues_ChannelStackCreateJob_mutation_response
    """
    update single row of the table: "job_queues.ChannelStackCreateJob"
    """
    update_job_queues_ChannelStackCreateJob_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: job_queues_ChannelStackCreateJob_set_input
        pk_columns: job_queues_ChannelStackCreateJob_pk_columns_input!
    ): job_queues_ChannelStackCreateJob
    """
    update data of the table: "job_queues.ChannelStackDeleteJob"
    """
    update_job_queues_ChannelStackDeleteJob(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: job_queues_ChannelStackDeleteJob_set_input
        """
        filter the rows which have to be updated
        """
        where: job_queues_ChannelStackDeleteJob_bool_exp!
    ): job_queues_ChannelStackDeleteJob_mutation_response
    """
    update single row of the table: "job_queues.ChannelStackDeleteJob"
    """
    update_job_queues_ChannelStackDeleteJob_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: job_queues_ChannelStackDeleteJob_set_input
        pk_columns: job_queues_ChannelStackDeleteJob_pk_columns_input!
    ): job_queues_ChannelStackDeleteJob
    """
    update data of the table: "job_queues.ChannelStackUpdateJob"
    """
    update_job_queues_ChannelStackUpdateJob(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: job_queues_ChannelStackUpdateJob_set_input
        """
        filter the rows which have to be updated
        """
        where: job_queues_ChannelStackUpdateJob_bool_exp!
    ): job_queues_ChannelStackUpdateJob_mutation_response
    """
    update single row of the table: "job_queues.ChannelStackUpdateJob"
    """
    update_job_queues_ChannelStackUpdateJob_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: job_queues_ChannelStackUpdateJob_set_input
        pk_columns: job_queues_ChannelStackUpdateJob_pk_columns_input!
    ): job_queues_ChannelStackUpdateJob
    """
    update data of the table: "job_queues.CombineVideosJob"
    """
    update_job_queues_CombineVideosJob(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: job_queues_CombineVideosJob_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: job_queues_CombineVideosJob_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: job_queues_CombineVideosJob_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: job_queues_CombineVideosJob_delete_key_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: job_queues_CombineVideosJob_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: job_queues_CombineVideosJob_set_input
        """
        filter the rows which have to be updated
        """
        where: job_queues_CombineVideosJob_bool_exp!
    ): job_queues_CombineVideosJob_mutation_response
    """
    update single row of the table: "job_queues.CombineVideosJob"
    """
    update_job_queues_CombineVideosJob_by_pk(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: job_queues_CombineVideosJob_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: job_queues_CombineVideosJob_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: job_queues_CombineVideosJob_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: job_queues_CombineVideosJob_delete_key_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: job_queues_CombineVideosJob_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: job_queues_CombineVideosJob_set_input
        pk_columns: job_queues_CombineVideosJob_pk_columns_input!
    ): job_queues_CombineVideosJob
    """
    update data of the table: "job_queues.CustomEmailJob"
    """
    update_job_queues_CustomEmailJob(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: job_queues_CustomEmailJob_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: job_queues_CustomEmailJob_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: job_queues_CustomEmailJob_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: job_queues_CustomEmailJob_delete_key_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: job_queues_CustomEmailJob_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: job_queues_CustomEmailJob_set_input
        """
        filter the rows which have to be updated
        """
        where: job_queues_CustomEmailJob_bool_exp!
    ): job_queues_CustomEmailJob_mutation_response
    """
    update single row of the table: "job_queues.CustomEmailJob"
    """
    update_job_queues_CustomEmailJob_by_pk(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: job_queues_CustomEmailJob_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: job_queues_CustomEmailJob_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: job_queues_CustomEmailJob_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: job_queues_CustomEmailJob_delete_key_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: job_queues_CustomEmailJob_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: job_queues_CustomEmailJob_set_input
        pk_columns: job_queues_CustomEmailJob_pk_columns_input!
    ): job_queues_CustomEmailJob
    """
    update data of the table: "job_queues.ImportJob"
    """
    update_job_queues_ImportJob(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: job_queues_ImportJob_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: job_queues_ImportJob_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: job_queues_ImportJob_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: job_queues_ImportJob_delete_key_input
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: job_queues_ImportJob_inc_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: job_queues_ImportJob_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: job_queues_ImportJob_set_input
        """
        filter the rows which have to be updated
        """
        where: job_queues_ImportJob_bool_exp!
    ): job_queues_ImportJob_mutation_response
    """
    update data of the table: "job_queues.ImportJobOutput"
    """
    update_job_queues_ImportJobOutput(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: job_queues_ImportJobOutput_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: job_queues_ImportJobOutput_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: job_queues_ImportJobOutput_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: job_queues_ImportJobOutput_delete_key_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: job_queues_ImportJobOutput_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: job_queues_ImportJobOutput_set_input
        """
        filter the rows which have to be updated
        """
        where: job_queues_ImportJobOutput_bool_exp!
    ): job_queues_ImportJobOutput_mutation_response
    """
    update single row of the table: "job_queues.ImportJobOutput"
    """
    update_job_queues_ImportJobOutput_by_pk(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: job_queues_ImportJobOutput_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: job_queues_ImportJobOutput_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: job_queues_ImportJobOutput_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: job_queues_ImportJobOutput_delete_key_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: job_queues_ImportJobOutput_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: job_queues_ImportJobOutput_set_input
        pk_columns: job_queues_ImportJobOutput_pk_columns_input!
    ): job_queues_ImportJobOutput
    """
    update single row of the table: "job_queues.ImportJob"
    """
    update_job_queues_ImportJob_by_pk(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: job_queues_ImportJob_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: job_queues_ImportJob_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: job_queues_ImportJob_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: job_queues_ImportJob_delete_key_input
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: job_queues_ImportJob_inc_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: job_queues_ImportJob_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: job_queues_ImportJob_set_input
        pk_columns: job_queues_ImportJob_pk_columns_input!
    ): job_queues_ImportJob
    """
    update data of the table: "job_queues.InvitationEmailJob"
    """
    update_job_queues_InvitationEmailJob(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: job_queues_InvitationEmailJob_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: job_queues_InvitationEmailJob_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: job_queues_InvitationEmailJob_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: job_queues_InvitationEmailJob_delete_key_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: job_queues_InvitationEmailJob_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: job_queues_InvitationEmailJob_set_input
        """
        filter the rows which have to be updated
        """
        where: job_queues_InvitationEmailJob_bool_exp!
    ): job_queues_InvitationEmailJob_mutation_response
    """
    update single row of the table: "job_queues.InvitationEmailJob"
    """
    update_job_queues_InvitationEmailJob_by_pk(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: job_queues_InvitationEmailJob_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: job_queues_InvitationEmailJob_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: job_queues_InvitationEmailJob_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: job_queues_InvitationEmailJob_delete_key_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: job_queues_InvitationEmailJob_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: job_queues_InvitationEmailJob_set_input
        pk_columns: job_queues_InvitationEmailJob_pk_columns_input!
    ): job_queues_InvitationEmailJob
    """
    update data of the table: "job_queues.JobStatus"
    """
    update_job_queues_JobStatus(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: job_queues_JobStatus_set_input
        """
        filter the rows which have to be updated
        """
        where: job_queues_JobStatus_bool_exp!
    ): job_queues_JobStatus_mutation_response
    """
    update single row of the table: "job_queues.JobStatus"
    """
    update_job_queues_JobStatus_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: job_queues_JobStatus_set_input
        pk_columns: job_queues_JobStatus_pk_columns_input!
    ): job_queues_JobStatus
    """
    update data of the table: "job_queues.MediaPackageHarvestJob"
    """
    update_job_queues_MediaPackageHarvestJob(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: job_queues_MediaPackageHarvestJob_set_input
        """
        filter the rows which have to be updated
        """
        where: job_queues_MediaPackageHarvestJob_bool_exp!
    ): job_queues_MediaPackageHarvestJob_mutation_response
    """
    update single row of the table: "job_queues.MediaPackageHarvestJob"
    """
    update_job_queues_MediaPackageHarvestJob_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: job_queues_MediaPackageHarvestJob_set_input
        pk_columns: job_queues_MediaPackageHarvestJob_pk_columns_input!
    ): job_queues_MediaPackageHarvestJob
    """
    update data of the table: "job_queues.PrepareJob"
    """
    update_job_queues_PrepareJob(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: job_queues_PrepareJob_set_input
        """
        filter the rows which have to be updated
        """
        where: job_queues_PrepareJob_bool_exp!
    ): job_queues_PrepareJob_mutation_response
    """
    update single row of the table: "job_queues.PrepareJob"
    """
    update_job_queues_PrepareJob_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: job_queues_PrepareJob_set_input
        pk_columns: job_queues_PrepareJob_pk_columns_input!
    ): job_queues_PrepareJob
    """
    update data of the table: "job_queues.PublishVideoJob"
    """
    update_job_queues_PublishVideoJob(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: job_queues_PublishVideoJob_set_input
        """
        filter the rows which have to be updated
        """
        where: job_queues_PublishVideoJob_bool_exp!
    ): job_queues_PublishVideoJob_mutation_response
    """
    update single row of the table: "job_queues.PublishVideoJob"
    """
    update_job_queues_PublishVideoJob_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: job_queues_PublishVideoJob_set_input
        pk_columns: job_queues_PublishVideoJob_pk_columns_input!
    ): job_queues_PublishVideoJob
    """
    update data of the table: "job_queues.SubmissionRequestEmailJob"
    """
    update_job_queues_SubmissionRequestEmailJob(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: job_queues_SubmissionRequestEmailJob_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: job_queues_SubmissionRequestEmailJob_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: job_queues_SubmissionRequestEmailJob_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: job_queues_SubmissionRequestEmailJob_delete_key_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: job_queues_SubmissionRequestEmailJob_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: job_queues_SubmissionRequestEmailJob_set_input
        """
        filter the rows which have to be updated
        """
        where: job_queues_SubmissionRequestEmailJob_bool_exp!
    ): job_queues_SubmissionRequestEmailJob_mutation_response
    """
    update single row of the table: "job_queues.SubmissionRequestEmailJob"
    """
    update_job_queues_SubmissionRequestEmailJob_by_pk(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: job_queues_SubmissionRequestEmailJob_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: job_queues_SubmissionRequestEmailJob_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: job_queues_SubmissionRequestEmailJob_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: job_queues_SubmissionRequestEmailJob_delete_key_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: job_queues_SubmissionRequestEmailJob_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: job_queues_SubmissionRequestEmailJob_set_input
        pk_columns: job_queues_SubmissionRequestEmailJob_pk_columns_input!
    ): job_queues_SubmissionRequestEmailJob
    """
    update data of the table: "job_queues.UploadYouTubeVideoJob"
    """
    update_job_queues_UploadYouTubeVideoJob(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: job_queues_UploadYouTubeVideoJob_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: job_queues_UploadYouTubeVideoJob_set_input
        """
        filter the rows which have to be updated
        """
        where: job_queues_UploadYouTubeVideoJob_bool_exp!
    ): job_queues_UploadYouTubeVideoJob_mutation_response
    """
    update single row of the table: "job_queues.UploadYouTubeVideoJob"
    """
    update_job_queues_UploadYouTubeVideoJob_by_pk(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: job_queues_UploadYouTubeVideoJob_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: job_queues_UploadYouTubeVideoJob_set_input
        pk_columns: job_queues_UploadYouTubeVideoJob_pk_columns_input!
    ): job_queues_UploadYouTubeVideoJob
    """
    update data of the table: "registrant.GoogleAccount"
    """
    update_registrant_GoogleAccount(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: registrant_GoogleAccount_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: registrant_GoogleAccount_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: registrant_GoogleAccount_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: registrant_GoogleAccount_delete_key_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: registrant_GoogleAccount_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: registrant_GoogleAccount_set_input
        """
        filter the rows which have to be updated
        """
        where: registrant_GoogleAccount_bool_exp!
    ): registrant_GoogleAccount_mutation_response
    """
    update single row of the table: "registrant.GoogleAccount"
    """
    update_registrant_GoogleAccount_by_pk(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: registrant_GoogleAccount_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: registrant_GoogleAccount_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: registrant_GoogleAccount_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: registrant_GoogleAccount_delete_key_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: registrant_GoogleAccount_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: registrant_GoogleAccount_set_input
        pk_columns: registrant_GoogleAccount_pk_columns_input!
    ): registrant_GoogleAccount
    """
    update data of the table: "registrant.Group"
    """
    update_registrant_Group(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: registrant_Group_set_input
        """
        filter the rows which have to be updated
        """
        where: registrant_Group_bool_exp!
    ): registrant_Group_mutation_response
    """
    update data of the table: "registrant.GroupRegistrant"
    """
    update_registrant_GroupRegistrant(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: registrant_GroupRegistrant_set_input
        """
        filter the rows which have to be updated
        """
        where: registrant_GroupRegistrant_bool_exp!
    ): registrant_GroupRegistrant_mutation_response
    """
    update single row of the table: "registrant.GroupRegistrant"
    """
    update_registrant_GroupRegistrant_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: registrant_GroupRegistrant_set_input
        pk_columns: registrant_GroupRegistrant_pk_columns_input!
    ): registrant_GroupRegistrant
    """
    update single row of the table: "registrant.Group"
    """
    update_registrant_Group_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: registrant_Group_set_input
        pk_columns: registrant_Group_pk_columns_input!
    ): registrant_Group
    """
    update data of the table: "registrant.Invitation"
    """
    update_registrant_Invitation(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: registrant_Invitation_set_input
        """
        filter the rows which have to be updated
        """
        where: registrant_Invitation_bool_exp!
    ): registrant_Invitation_mutation_response
    """
    update single row of the table: "registrant.Invitation"
    """
    update_registrant_Invitation_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: registrant_Invitation_set_input
        pk_columns: registrant_Invitation_pk_columns_input!
    ): registrant_Invitation
    """
    update data of the table: "registrant.Profile"
    """
    update_registrant_Profile(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: registrant_Profile_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: registrant_Profile_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: registrant_Profile_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: registrant_Profile_delete_key_input
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: registrant_Profile_inc_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: registrant_Profile_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: registrant_Profile_set_input
        """
        filter the rows which have to be updated
        """
        where: registrant_Profile_bool_exp!
    ): registrant_Profile_mutation_response
    """
    update single row of the table: "registrant.Profile"
    """
    update_registrant_Profile_by_pk(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: registrant_Profile_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: registrant_Profile_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: registrant_Profile_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: registrant_Profile_delete_key_input
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: registrant_Profile_inc_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: registrant_Profile_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: registrant_Profile_set_input
        pk_columns: registrant_Profile_pk_columns_input!
    ): registrant_Profile
    """
    update data of the table: "registrant.Registrant"
    """
    update_registrant_Registrant(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: registrant_Registrant_set_input
        """
        filter the rows which have to be updated
        """
        where: registrant_Registrant_bool_exp!
    ): registrant_Registrant_mutation_response
    """
    update data of the table: "registrant.RegistrantRole"
    """
    update_registrant_RegistrantRole(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: registrant_RegistrantRole_set_input
        """
        filter the rows which have to be updated
        """
        where: registrant_RegistrantRole_bool_exp!
    ): registrant_RegistrantRole_mutation_response
    """
    update single row of the table: "registrant.RegistrantRole"
    """
    update_registrant_RegistrantRole_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: registrant_RegistrantRole_set_input
        pk_columns: registrant_RegistrantRole_pk_columns_input!
    ): registrant_RegistrantRole
    """
    update single row of the table: "registrant.Registrant"
    """
    update_registrant_Registrant_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: registrant_Registrant_set_input
        pk_columns: registrant_Registrant_pk_columns_input!
    ): registrant_Registrant
    """
    update data of the table: "registrant.SavedVonageRoomRecording"
    """
    update_registrant_SavedVonageRoomRecording(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: registrant_SavedVonageRoomRecording_set_input
        """
        filter the rows which have to be updated
        """
        where: registrant_SavedVonageRoomRecording_bool_exp!
    ): registrant_SavedVonageRoomRecording_mutation_response
    """
    update single row of the table: "registrant.SavedVonageRoomRecording"
    """
    update_registrant_SavedVonageRoomRecording_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: registrant_SavedVonageRoomRecording_set_input
        pk_columns: registrant_SavedVonageRoomRecording_pk_columns_input!
    ): registrant_SavedVonageRoomRecording
    """
    update data of the table: "registrant.SubconferenceMembership"
    """
    update_registrant_SubconferenceMembership(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: registrant_SubconferenceMembership_set_input
        """
        filter the rows which have to be updated
        """
        where: registrant_SubconferenceMembership_bool_exp!
    ): registrant_SubconferenceMembership_mutation_response
    """
    update single row of the table: "registrant.SubconferenceMembership"
    """
    update_registrant_SubconferenceMembership_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: registrant_SubconferenceMembership_set_input
        pk_columns: registrant_SubconferenceMembership_pk_columns_input!
    ): registrant_SubconferenceMembership
    """
    update data of the table: "room.Backend"
    """
    update_room_Backend(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: room_Backend_set_input
        """
        filter the rows which have to be updated
        """
        where: room_Backend_bool_exp!
    ): room_Backend_mutation_response
    """
    update single row of the table: "room.Backend"
    """
    update_room_Backend_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: room_Backend_set_input
        pk_columns: room_Backend_pk_columns_input!
    ): room_Backend
    """
    update data of the table: "room.ChimeMeeting"
    """
    update_room_ChimeMeeting(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: room_ChimeMeeting_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: room_ChimeMeeting_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: room_ChimeMeeting_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: room_ChimeMeeting_delete_key_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: room_ChimeMeeting_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: room_ChimeMeeting_set_input
        """
        filter the rows which have to be updated
        """
        where: room_ChimeMeeting_bool_exp!
    ): room_ChimeMeeting_mutation_response
    """
    update single row of the table: "room.ChimeMeeting"
    """
    update_room_ChimeMeeting_by_pk(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: room_ChimeMeeting_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: room_ChimeMeeting_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: room_ChimeMeeting_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: room_ChimeMeeting_delete_key_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: room_ChimeMeeting_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: room_ChimeMeeting_set_input
        pk_columns: room_ChimeMeeting_pk_columns_input!
    ): room_ChimeMeeting
    """
    update data of the table: "room.ManagementMode"
    """
    update_room_ManagementMode(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: room_ManagementMode_set_input
        """
        filter the rows which have to be updated
        """
        where: room_ManagementMode_bool_exp!
    ): room_ManagementMode_mutation_response
    """
    update single row of the table: "room.ManagementMode"
    """
    update_room_ManagementMode_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: room_ManagementMode_set_input
        pk_columns: room_ManagementMode_pk_columns_input!
    ): room_ManagementMode
    """
    update data of the table: "room.Mode"
    """
    update_room_Mode(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: room_Mode_set_input
        """
        filter the rows which have to be updated
        """
        where: room_Mode_bool_exp!
    ): room_Mode_mutation_response
    """
    update single row of the table: "room.Mode"
    """
    update_room_Mode_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: room_Mode_set_input
        pk_columns: room_Mode_pk_columns_input!
    ): room_Mode
    """
    update data of the table: "room.Participant"
    """
    update_room_Participant(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: room_Participant_set_input
        """
        filter the rows which have to be updated
        """
        where: room_Participant_bool_exp!
    ): room_Participant_mutation_response
    """
    update single row of the table: "room.Participant"
    """
    update_room_Participant_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: room_Participant_set_input
        pk_columns: room_Participant_pk_columns_input!
    ): room_Participant
    """
    update data of the table: "room.PersonRole"
    """
    update_room_PersonRole(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: room_PersonRole_set_input
        """
        filter the rows which have to be updated
        """
        where: room_PersonRole_bool_exp!
    ): room_PersonRole_mutation_response
    """
    update single row of the table: "room.PersonRole"
    """
    update_room_PersonRole_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: room_PersonRole_set_input
        pk_columns: room_PersonRole_pk_columns_input!
    ): room_PersonRole
    """
    update data of the table: "room.Room"
    """
    update_room_Room(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: room_Room_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: room_Room_set_input
        """
        filter the rows which have to be updated
        """
        where: room_Room_bool_exp!
    ): room_Room_mutation_response
    """
    update data of the table: "room.RoomGroupMembership"
    """
    update_room_RoomGroupMembership(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: room_RoomGroupMembership_set_input
        """
        filter the rows which have to be updated
        """
        where: room_RoomGroupMembership_bool_exp!
    ): room_RoomGroupMembership_mutation_response
    """
    update single row of the table: "room.RoomGroupMembership"
    """
    update_room_RoomGroupMembership_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: room_RoomGroupMembership_set_input
        pk_columns: room_RoomGroupMembership_pk_columns_input!
    ): room_RoomGroupMembership
    """
    update data of the table: "room.RoomMembership"
    """
    update_room_RoomMembership(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: room_RoomMembership_set_input
        """
        filter the rows which have to be updated
        """
        where: room_RoomMembership_bool_exp!
    ): room_RoomMembership_mutation_response
    """
    update single row of the table: "room.RoomMembership"
    """
    update_room_RoomMembership_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: room_RoomMembership_set_input
        pk_columns: room_RoomMembership_pk_columns_input!
    ): room_RoomMembership
    """
    update single row of the table: "room.Room"
    """
    update_room_Room_by_pk(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: room_Room_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: room_Room_set_input
        pk_columns: room_Room_pk_columns_input!
    ): room_Room
    """
    update data of the table: "room.ShuffleAlgorithm"
    """
    update_room_ShuffleAlgorithm(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: room_ShuffleAlgorithm_set_input
        """
        filter the rows which have to be updated
        """
        where: room_ShuffleAlgorithm_bool_exp!
    ): room_ShuffleAlgorithm_mutation_response
    """
    update single row of the table: "room.ShuffleAlgorithm"
    """
    update_room_ShuffleAlgorithm_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: room_ShuffleAlgorithm_set_input
        pk_columns: room_ShuffleAlgorithm_pk_columns_input!
    ): room_ShuffleAlgorithm
    """
    update data of the table: "room.ShufflePeriod"
    """
    update_room_ShufflePeriod(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: room_ShufflePeriod_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: room_ShufflePeriod_set_input
        """
        filter the rows which have to be updated
        """
        where: room_ShufflePeriod_bool_exp!
    ): room_ShufflePeriod_mutation_response
    """
    update single row of the table: "room.ShufflePeriod"
    """
    update_room_ShufflePeriod_by_pk(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: room_ShufflePeriod_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: room_ShufflePeriod_set_input
        pk_columns: room_ShufflePeriod_pk_columns_input!
    ): room_ShufflePeriod
    """
    update data of the table: "room.ShuffleQueueEntry"
    """
    update_room_ShuffleQueueEntry(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: room_ShuffleQueueEntry_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: room_ShuffleQueueEntry_set_input
        """
        filter the rows which have to be updated
        """
        where: room_ShuffleQueueEntry_bool_exp!
    ): room_ShuffleQueueEntry_mutation_response
    """
    update single row of the table: "room.ShuffleQueueEntry"
    """
    update_room_ShuffleQueueEntry_by_pk(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: room_ShuffleQueueEntry_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: room_ShuffleQueueEntry_set_input
        pk_columns: room_ShuffleQueueEntry_pk_columns_input!
    ): room_ShuffleQueueEntry
    """
    update data of the table: "room.ShuffleRoom"
    """
    update_room_ShuffleRoom(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: room_ShuffleRoom_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: room_ShuffleRoom_set_input
        """
        filter the rows which have to be updated
        """
        where: room_ShuffleRoom_bool_exp!
    ): room_ShuffleRoom_mutation_response
    """
    update single row of the table: "room.ShuffleRoom"
    """
    update_room_ShuffleRoom_by_pk(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: room_ShuffleRoom_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: room_ShuffleRoom_set_input
        pk_columns: room_ShuffleRoom_pk_columns_input!
    ): room_ShuffleRoom
    """
    update data of the table: "schedule.Continuation"
    """
    update_schedule_Continuation(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: schedule_Continuation_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: schedule_Continuation_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: schedule_Continuation_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: schedule_Continuation_delete_key_input
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: schedule_Continuation_inc_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: schedule_Continuation_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: schedule_Continuation_set_input
        """
        filter the rows which have to be updated
        """
        where: schedule_Continuation_bool_exp!
    ): schedule_Continuation_mutation_response
    """
    update single row of the table: "schedule.Continuation"
    """
    update_schedule_Continuation_by_pk(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: schedule_Continuation_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: schedule_Continuation_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: schedule_Continuation_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: schedule_Continuation_delete_key_input
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: schedule_Continuation_inc_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: schedule_Continuation_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: schedule_Continuation_set_input
        pk_columns: schedule_Continuation_pk_columns_input!
    ): schedule_Continuation
    """
    update data of the table: "schedule.CurrentEvents"
    """
    update_schedule_CurrentEvents(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: schedule_CurrentEvents_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: schedule_CurrentEvents_set_input
        """
        filter the rows which have to be updated
        """
        where: schedule_CurrentEvents_bool_exp!
    ): schedule_CurrentEvents_mutation_response
    """
    update data of the table: "schedule.Event"
    """
    update_schedule_Event(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: schedule_Event_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: schedule_Event_set_input
        """
        filter the rows which have to be updated
        """
        where: schedule_Event_bool_exp!
    ): schedule_Event_mutation_response
    """
    update data of the table: "schedule.EventProgramPerson"
    """
    update_schedule_EventProgramPerson(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: schedule_EventProgramPerson_set_input
        """
        filter the rows which have to be updated
        """
        where: schedule_EventProgramPerson_bool_exp!
    ): schedule_EventProgramPerson_mutation_response
    """
    update data of the table: "schedule.EventProgramPersonRole"
    """
    update_schedule_EventProgramPersonRole(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: schedule_EventProgramPersonRole_set_input
        """
        filter the rows which have to be updated
        """
        where: schedule_EventProgramPersonRole_bool_exp!
    ): schedule_EventProgramPersonRole_mutation_response
    """
    update single row of the table: "schedule.EventProgramPersonRole"
    """
    update_schedule_EventProgramPersonRole_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: schedule_EventProgramPersonRole_set_input
        pk_columns: schedule_EventProgramPersonRole_pk_columns_input!
    ): schedule_EventProgramPersonRole
    """
    update single row of the table: "schedule.EventProgramPerson"
    """
    update_schedule_EventProgramPerson_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: schedule_EventProgramPerson_set_input
        pk_columns: schedule_EventProgramPerson_pk_columns_input!
    ): schedule_EventProgramPerson
    """
    update single row of the table: "schedule.Event"
    """
    update_schedule_Event_by_pk(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: schedule_Event_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: schedule_Event_set_input
        pk_columns: schedule_Event_pk_columns_input!
    ): schedule_Event
    """
    update data of the table: "schedule.StarredEvent"
    """
    update_schedule_StarredEvent(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: schedule_StarredEvent_set_input
        """
        filter the rows which have to be updated
        """
        where: schedule_StarredEvent_bool_exp!
    ): schedule_StarredEvent_mutation_response
    """
    update single row of the table: "schedule.StarredEvent"
    """
    update_schedule_StarredEvent_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: schedule_StarredEvent_set_input
        pk_columns: schedule_StarredEvent_pk_columns_input!
    ): schedule_StarredEvent
    """
    update data of the table: "sponsor.Tier"
    """
    update_sponsor_Tier(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: sponsor_Tier_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: sponsor_Tier_set_input
        """
        filter the rows which have to be updated
        """
        where: sponsor_Tier_bool_exp!
    ): sponsor_Tier_mutation_response
    """
    update data of the table: "sponsor.TierMember"
    """
    update_sponsor_TierMember(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: sponsor_TierMember_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: sponsor_TierMember_set_input
        """
        filter the rows which have to be updated
        """
        where: sponsor_TierMember_bool_exp!
    ): sponsor_TierMember_mutation_response
    """
    update single row of the table: "sponsor.TierMember"
    """
    update_sponsor_TierMember_by_pk(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: sponsor_TierMember_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: sponsor_TierMember_set_input
        pk_columns: sponsor_TierMember_pk_columns_input!
    ): sponsor_TierMember
    """
    update single row of the table: "sponsor.Tier"
    """
    update_sponsor_Tier_by_pk(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: sponsor_Tier_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: sponsor_Tier_set_input
        pk_columns: sponsor_Tier_pk_columns_input!
    ): sponsor_Tier
    """
    update data of the table: "system.Configuration"
    """
    update_system_Configuration(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: system_Configuration_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: system_Configuration_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: system_Configuration_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: system_Configuration_delete_key_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: system_Configuration_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: system_Configuration_set_input
        """
        filter the rows which have to be updated
        """
        where: system_Configuration_bool_exp!
    ): system_Configuration_mutation_response
    """
    update data of the table: "system.ConfigurationKey"
    """
    update_system_ConfigurationKey(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: system_ConfigurationKey_set_input
        """
        filter the rows which have to be updated
        """
        where: system_ConfigurationKey_bool_exp!
    ): system_ConfigurationKey_mutation_response
    """
    update single row of the table: "system.ConfigurationKey"
    """
    update_system_ConfigurationKey_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: system_ConfigurationKey_set_input
        pk_columns: system_ConfigurationKey_pk_columns_input!
    ): system_ConfigurationKey
    """
    update data of the table: "system.ConfigurationPermissionGrant"
    """
    update_system_ConfigurationPermissionGrant(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: system_ConfigurationPermissionGrant_set_input
        """
        filter the rows which have to be updated
        """
        where: system_ConfigurationPermissionGrant_bool_exp!
    ): system_ConfigurationPermissionGrant_mutation_response
    """
    update single row of the table: "system.ConfigurationPermissionGrant"
    """
    update_system_ConfigurationPermissionGrant_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: system_ConfigurationPermissionGrant_set_input
        pk_columns: system_ConfigurationPermissionGrant_pk_columns_input!
    ): system_ConfigurationPermissionGrant
    """
    update single row of the table: "system.Configuration"
    """
    update_system_Configuration_by_pk(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: system_Configuration_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: system_Configuration_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: system_Configuration_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: system_Configuration_delete_key_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: system_Configuration_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: system_Configuration_set_input
        pk_columns: system_Configuration_pk_columns_input!
    ): system_Configuration
    """
    update data of the table: "system.SuperUserPermission"
    """
    update_system_SuperUserPermission(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: system_SuperUserPermission_set_input
        """
        filter the rows which have to be updated
        """
        where: system_SuperUserPermission_bool_exp!
    ): system_SuperUserPermission_mutation_response
    """
    update data of the table: "system.SuperUserPermissionGrant"
    """
    update_system_SuperUserPermissionGrant(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: system_SuperUserPermissionGrant_set_input
        """
        filter the rows which have to be updated
        """
        where: system_SuperUserPermissionGrant_bool_exp!
    ): system_SuperUserPermissionGrant_mutation_response
    """
    update single row of the table: "system.SuperUserPermissionGrant"
    """
    update_system_SuperUserPermissionGrant_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: system_SuperUserPermissionGrant_set_input
        pk_columns: system_SuperUserPermissionGrant_pk_columns_input!
    ): system_SuperUserPermissionGrant
    """
    update single row of the table: "system.SuperUserPermission"
    """
    update_system_SuperUserPermission_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: system_SuperUserPermission_set_input
        pk_columns: system_SuperUserPermission_pk_columns_input!
    ): system_SuperUserPermission
    """
    update data of the table: "video.ChannelStack"
    """
    update_video_ChannelStack(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: video_ChannelStack_set_input
        """
        filter the rows which have to be updated
        """
        where: video_ChannelStack_bool_exp!
    ): video_ChannelStack_mutation_response
    """
    update single row of the table: "video.ChannelStack"
    """
    update_video_ChannelStack_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: video_ChannelStack_set_input
        pk_columns: video_ChannelStack_pk_columns_input!
    ): video_ChannelStack
    """
    update data of the table: "video.EventVonageSession"
    """
    update_video_EventVonageSession(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: video_EventVonageSession_set_input
        """
        filter the rows which have to be updated
        """
        where: video_EventVonageSession_bool_exp!
    ): video_EventVonageSession_mutation_response
    """
    update single row of the table: "video.EventVonageSession"
    """
    update_video_EventVonageSession_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: video_EventVonageSession_set_input
        pk_columns: video_EventVonageSession_pk_columns_input!
    ): video_EventVonageSession
    """
    update data of the table: "video.ImmediateSwitch"
    """
    update_video_ImmediateSwitch(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: video_ImmediateSwitch_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: video_ImmediateSwitch_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: video_ImmediateSwitch_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: video_ImmediateSwitch_delete_key_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: video_ImmediateSwitch_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: video_ImmediateSwitch_set_input
        """
        filter the rows which have to be updated
        """
        where: video_ImmediateSwitch_bool_exp!
    ): video_ImmediateSwitch_mutation_response
    """
    update single row of the table: "video.ImmediateSwitch"
    """
    update_video_ImmediateSwitch_by_pk(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: video_ImmediateSwitch_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: video_ImmediateSwitch_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: video_ImmediateSwitch_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: video_ImmediateSwitch_delete_key_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: video_ImmediateSwitch_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: video_ImmediateSwitch_set_input
        pk_columns: video_ImmediateSwitch_pk_columns_input!
    ): video_ImmediateSwitch
    """
    update data of the table: "video.InputType"
    """
    update_video_InputType(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: video_InputType_set_input
        """
        filter the rows which have to be updated
        """
        where: video_InputType_bool_exp!
    ): video_InputType_mutation_response
    """
    update single row of the table: "video.InputType"
    """
    update_video_InputType_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: video_InputType_set_input
        pk_columns: video_InputType_pk_columns_input!
    ): video_InputType
    """
    update data of the table: "video.MediaLiveChannelStatus"
    """
    update_video_MediaLiveChannelStatus(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: video_MediaLiveChannelStatus_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: video_MediaLiveChannelStatus_set_input
        """
        filter the rows which have to be updated
        """
        where: video_MediaLiveChannelStatus_bool_exp!
    ): video_MediaLiveChannelStatus_mutation_response
    """
    update single row of the table: "video.MediaLiveChannelStatus"
    """
    update_video_MediaLiveChannelStatus_by_pk(
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: video_MediaLiveChannelStatus_inc_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: video_MediaLiveChannelStatus_set_input
        pk_columns: video_MediaLiveChannelStatus_pk_columns_input!
    ): video_MediaLiveChannelStatus
    """
    update data of the table: "video.RoomRtmpInput"
    """
    update_video_RoomRtmpInput(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: video_RoomRtmpInput_set_input
        """
        filter the rows which have to be updated
        """
        where: video_RoomRtmpInput_bool_exp!
    ): video_RoomRtmpInput_mutation_response
    """
    update single row of the table: "video.RoomRtmpInput"
    """
    update_video_RoomRtmpInput_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: video_RoomRtmpInput_set_input
        pk_columns: video_RoomRtmpInput_pk_columns_input!
    ): video_RoomRtmpInput
    """
    update data of the table: "video.RoomRtmpOutput"
    """
    update_video_RoomRtmpOutput(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: video_RoomRtmpOutput_set_input
        """
        filter the rows which have to be updated
        """
        where: video_RoomRtmpOutput_bool_exp!
    ): video_RoomRtmpOutput_mutation_response
    """
    update single row of the table: "video.RoomRtmpOutput"
    """
    update_video_RoomRtmpOutput_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: video_RoomRtmpOutput_set_input
        pk_columns: video_RoomRtmpOutput_pk_columns_input!
    ): video_RoomRtmpOutput
    """
    update data of the table: "video.RtmpInput"
    """
    update_video_RtmpInput(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: video_RtmpInput_set_input
        """
        filter the rows which have to be updated
        """
        where: video_RtmpInput_bool_exp!
    ): video_RtmpInput_mutation_response
    """
    update single row of the table: "video.RtmpInput"
    """
    update_video_RtmpInput_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: video_RtmpInput_set_input
        pk_columns: video_RtmpInput_pk_columns_input!
    ): video_RtmpInput
    """
    update data of the table: "video.TranscriptionJob"
    """
    update_video_TranscriptionJob(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: video_TranscriptionJob_set_input
        """
        filter the rows which have to be updated
        """
        where: video_TranscriptionJob_bool_exp!
    ): video_TranscriptionJob_mutation_response
    """
    update single row of the table: "video.TranscriptionJob"
    """
    update_video_TranscriptionJob_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: video_TranscriptionJob_set_input
        pk_columns: video_TranscriptionJob_pk_columns_input!
    ): video_TranscriptionJob
    """
    update data of the table: "video.VideoRenderJob"
    """
    update_video_VideoRenderJob(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: video_VideoRenderJob_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: video_VideoRenderJob_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: video_VideoRenderJob_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: video_VideoRenderJob_delete_key_input
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: video_VideoRenderJob_inc_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: video_VideoRenderJob_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: video_VideoRenderJob_set_input
        """
        filter the rows which have to be updated
        """
        where: video_VideoRenderJob_bool_exp!
    ): video_VideoRenderJob_mutation_response
    """
    update single row of the table: "video.VideoRenderJob"
    """
    update_video_VideoRenderJob_by_pk(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: video_VideoRenderJob_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: video_VideoRenderJob_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: video_VideoRenderJob_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: video_VideoRenderJob_delete_key_input
        """
        increments the numeric columns with given value of the filtered values
        """
        _inc: video_VideoRenderJob_inc_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: video_VideoRenderJob_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: video_VideoRenderJob_set_input
        pk_columns: video_VideoRenderJob_pk_columns_input!
    ): video_VideoRenderJob
    """
    update data of the table: "video.VonageParticipantStream"
    """
    update_video_VonageParticipantStream(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: video_VonageParticipantStream_set_input
        """
        filter the rows which have to be updated
        """
        where: video_VonageParticipantStream_bool_exp!
    ): video_VonageParticipantStream_mutation_response
    """
    update single row of the table: "video.VonageParticipantStream"
    """
    update_video_VonageParticipantStream_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: video_VonageParticipantStream_set_input
        pk_columns: video_VonageParticipantStream_pk_columns_input!
    ): video_VonageParticipantStream
    """
    update data of the table: "video.VonageRoomRecording"
    """
    update_video_VonageRoomRecording(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: video_VonageRoomRecording_set_input
        """
        filter the rows which have to be updated
        """
        where: video_VonageRoomRecording_bool_exp!
    ): video_VonageRoomRecording_mutation_response
    """
    update single row of the table: "video.VonageRoomRecording"
    """
    update_video_VonageRoomRecording_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: video_VonageRoomRecording_set_input
        pk_columns: video_VonageRoomRecording_pk_columns_input!
    ): video_VonageRoomRecording
    """
    update data of the table: "video.VonageSessionLayout"
    """
    update_video_VonageSessionLayout(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: video_VonageSessionLayout_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: video_VonageSessionLayout_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: video_VonageSessionLayout_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: video_VonageSessionLayout_delete_key_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: video_VonageSessionLayout_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: video_VonageSessionLayout_set_input
        """
        filter the rows which have to be updated
        """
        where: video_VonageSessionLayout_bool_exp!
    ): video_VonageSessionLayout_mutation_response
    """
    update single row of the table: "video.VonageSessionLayout"
    """
    update_video_VonageSessionLayout_by_pk(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: video_VonageSessionLayout_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: video_VonageSessionLayout_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: video_VonageSessionLayout_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: video_VonageSessionLayout_delete_key_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: video_VonageSessionLayout_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: video_VonageSessionLayout_set_input
        pk_columns: video_VonageSessionLayout_pk_columns_input!
    ): video_VonageSessionLayout
    """
    update data of the table: "video.VonageVideoPlaybackCommand"
    """
    update_video_VonageVideoPlaybackCommand(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: video_VonageVideoPlaybackCommand_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: video_VonageVideoPlaybackCommand_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: video_VonageVideoPlaybackCommand_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: video_VonageVideoPlaybackCommand_delete_key_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: video_VonageVideoPlaybackCommand_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: video_VonageVideoPlaybackCommand_set_input
        """
        filter the rows which have to be updated
        """
        where: video_VonageVideoPlaybackCommand_bool_exp!
    ): video_VonageVideoPlaybackCommand_mutation_response
    """
    update single row of the table: "video.VonageVideoPlaybackCommand"
    """
    update_video_VonageVideoPlaybackCommand_by_pk(
        """
        append existing jsonb value of filtered columns with new jsonb value
        """
        _append: video_VonageVideoPlaybackCommand_append_input
        """
        delete the field or element with specified path (for JSON arrays, negative integers count from the end)
        """
        _delete_at_path: video_VonageVideoPlaybackCommand_delete_at_path_input
        """
        delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
        """
        _delete_elem: video_VonageVideoPlaybackCommand_delete_elem_input
        """
        delete key/value pair or string element. key/value pairs are matched based on their key value
        """
        _delete_key: video_VonageVideoPlaybackCommand_delete_key_input
        """
        prepend existing jsonb value of filtered columns with new jsonb value
        """
        _prepend: video_VonageVideoPlaybackCommand_prepend_input
        """
        sets the columns of the filtered rows to the given values
        """
        _set: video_VonageVideoPlaybackCommand_set_input
        pk_columns: video_VonageVideoPlaybackCommand_pk_columns_input!
    ): video_VonageVideoPlaybackCommand
    """
    update data of the table: "video.YouTubeUpload"
    """
    update_video_YouTubeUpload(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: video_YouTubeUpload_set_input
        """
        filter the rows which have to be updated
        """
        where: video_YouTubeUpload_bool_exp!
    ): video_YouTubeUpload_mutation_response
    """
    update single row of the table: "video.YouTubeUpload"
    """
    update_video_YouTubeUpload_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: video_YouTubeUpload_set_input
        pk_columns: video_YouTubeUpload_pk_columns_input!
    ): video_YouTubeUpload
}

scalar name

"""
Boolean expression to compare columns of type "name". All fields are combined with logical 'AND'.
"""
input name_comparison_exp {
    _eq: name
    _gt: name
    _gte: name
    _in: [name!]
    _is_null: Boolean
    _lt: name
    _lte: name
    _neq: name
    _nin: [name!]
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
    _eq: numeric
    _gt: numeric
    _gte: numeric
    _in: [numeric!]
    _is_null: Boolean
    _lt: numeric
    _lte: numeric
    _neq: numeric
    _nin: [numeric!]
}

"""
column ordering options
"""
enum order_by {
    """
    in ascending order, nulls last
    """
    asc
    """
    in ascending order, nulls first
    """
    asc_nulls_first
    """
    in ascending order, nulls last
    """
    asc_nulls_last
    """
    in descending order, nulls first
    """
    desc
    """
    in descending order, nulls first
    """
    desc_nulls_first
    """
    in descending order, nulls last
    """
    desc_nulls_last
}

type query_root {
    """
    fetch data from the table: "Email"
    """
    Email(
        """
        distinct select on columns
        """
        distinct_on: [Email_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [Email_order_by!]
        """
        filter the rows returned
        """
        where: Email_bool_exp
    ): [Email!]!
    """
    fetch aggregated fields from the table: "Email"
    """
    Email_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [Email_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [Email_order_by!]
        """
        filter the rows returned
        """
        where: Email_bool_exp
    ): Email_aggregate!
    """
    fetch data from the table: "Email" using primary key columns
    """
    Email_by_pk(id: uuid!): Email
    """
    fetch data from the table: "ForeignKeyIntrospection"
    """
    ForeignKeyIntrospection(
        """
        distinct select on columns
        """
        distinct_on: [ForeignKeyIntrospection_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [ForeignKeyIntrospection_order_by!]
        """
        filter the rows returned
        """
        where: ForeignKeyIntrospection_bool_exp
    ): [ForeignKeyIntrospection!]!
    """
    fetch aggregated fields from the table: "ForeignKeyIntrospection"
    """
    ForeignKeyIntrospection_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [ForeignKeyIntrospection_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [ForeignKeyIntrospection_order_by!]
        """
        filter the rows returned
        """
        where: ForeignKeyIntrospection_bool_exp
    ): ForeignKeyIntrospection_aggregate!
    """
    fetch data from the table: "PushNotificationSubscription"
    """
    PushNotificationSubscription(
        """
        distinct select on columns
        """
        distinct_on: [PushNotificationSubscription_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [PushNotificationSubscription_order_by!]
        """
        filter the rows returned
        """
        where: PushNotificationSubscription_bool_exp
    ): [PushNotificationSubscription!]!
    """
    fetch aggregated fields from the table: "PushNotificationSubscription"
    """
    PushNotificationSubscription_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [PushNotificationSubscription_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [PushNotificationSubscription_order_by!]
        """
        filter the rows returned
        """
        where: PushNotificationSubscription_bool_exp
    ): PushNotificationSubscription_aggregate!
    """
    fetch data from the table: "PushNotificationSubscription" using primary key columns
    """
    PushNotificationSubscription_by_pk(endpoint: String!): PushNotificationSubscription
    """
    fetch data from the table: "User"
    """
    User(
        """
        distinct select on columns
        """
        distinct_on: [User_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [User_order_by!]
        """
        filter the rows returned
        """
        where: User_bool_exp
    ): [User!]!
    """
    fetch aggregated fields from the table: "User"
    """
    User_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [User_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [User_order_by!]
        """
        filter the rows returned
        """
        where: User_bool_exp
    ): User_aggregate!
    """
    fetch data from the table: "User" using primary key columns
    """
    User_by_pk(id: String!): User
    """
    fetch data from the table: "analytics.AppStats"
    """
    analytics_AppStats(
        """
        distinct select on columns
        """
        distinct_on: [analytics_AppStats_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_AppStats_order_by!]
        """
        filter the rows returned
        """
        where: analytics_AppStats_bool_exp
    ): [analytics_AppStats!]!
    """
    fetch aggregated fields from the table: "analytics.AppStats"
    """
    analytics_AppStats_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [analytics_AppStats_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_AppStats_order_by!]
        """
        filter the rows returned
        """
        where: analytics_AppStats_bool_exp
    ): analytics_AppStats_aggregate!
    """
    fetch data from the table: "analytics.AppStats" using primary key columns
    """
    analytics_AppStats_by_pk(id: Int!): analytics_AppStats
    """
    fetch data from the table: "analytics.CompletedRegistrations"
    """
    analytics_CompletedRegistrations(
        """
        distinct select on columns
        """
        distinct_on: [analytics_CompletedRegistrations_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_CompletedRegistrations_order_by!]
        """
        filter the rows returned
        """
        where: analytics_CompletedRegistrations_bool_exp
    ): [analytics_CompletedRegistrations!]!
    """
    fetch aggregated fields from the table: "analytics.CompletedRegistrations"
    """
    analytics_CompletedRegistrations_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [analytics_CompletedRegistrations_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_CompletedRegistrations_order_by!]
        """
        filter the rows returned
        """
        where: analytics_CompletedRegistrations_bool_exp
    ): analytics_CompletedRegistrations_aggregate!
    """
    fetch data from the table: "analytics.ContentElementStats"
    """
    analytics_ContentElementStats(
        """
        distinct select on columns
        """
        distinct_on: [analytics_ContentElementStats_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_ContentElementStats_order_by!]
        """
        filter the rows returned
        """
        where: analytics_ContentElementStats_bool_exp
    ): [analytics_ContentElementStats!]!
    """
    fetch aggregated fields from the table: "analytics.ContentElementStats"
    """
    analytics_ContentElementStats_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [analytics_ContentElementStats_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_ContentElementStats_order_by!]
        """
        filter the rows returned
        """
        where: analytics_ContentElementStats_bool_exp
    ): analytics_ContentElementStats_aggregate!
    """
    fetch data from the table: "analytics.ContentElementStats" using primary key columns
    """
    analytics_ContentElementStats_by_pk(id: uuid!): analytics_ContentElementStats
    """
    fetch data from the table: "analytics.ContentItemStats"
    """
    analytics_ContentItemStats(
        """
        distinct select on columns
        """
        distinct_on: [analytics_ContentItemStats_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_ContentItemStats_order_by!]
        """
        filter the rows returned
        """
        where: analytics_ContentItemStats_bool_exp
    ): [analytics_ContentItemStats!]!
    """
    fetch aggregated fields from the table: "analytics.ContentItemStats"
    """
    analytics_ContentItemStats_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [analytics_ContentItemStats_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_ContentItemStats_order_by!]
        """
        filter the rows returned
        """
        where: analytics_ContentItemStats_bool_exp
    ): analytics_ContentItemStats_aggregate!
    """
    fetch data from the table: "analytics.ContentItemStats" using primary key columns
    """
    analytics_ContentItemStats_by_pk(id: uuid!): analytics_ContentItemStats
    """
    fetch data from the table: "analytics.ElementTotalViews"
    """
    analytics_ElementTotalViews(
        """
        distinct select on columns
        """
        distinct_on: [analytics_ElementTotalViews_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_ElementTotalViews_order_by!]
        """
        filter the rows returned
        """
        where: analytics_ElementTotalViews_bool_exp
    ): [analytics_ElementTotalViews!]!
    """
    fetch aggregated fields from the table: "analytics.ElementTotalViews"
    """
    analytics_ElementTotalViews_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [analytics_ElementTotalViews_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_ElementTotalViews_order_by!]
        """
        filter the rows returned
        """
        where: analytics_ElementTotalViews_bool_exp
    ): analytics_ElementTotalViews_aggregate!
    """
    fetch data from the table: "analytics.ElementTotalViews" using primary key columns
    """
    analytics_ElementTotalViews_by_pk(elementId: uuid!): analytics_ElementTotalViews
    """
    fetch data from the table: "analytics.ItemTotalViews"
    """
    analytics_ItemTotalViews(
        """
        distinct select on columns
        """
        distinct_on: [analytics_ItemTotalViews_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_ItemTotalViews_order_by!]
        """
        filter the rows returned
        """
        where: analytics_ItemTotalViews_bool_exp
    ): [analytics_ItemTotalViews!]!
    """
    fetch aggregated fields from the table: "analytics.ItemTotalViews"
    """
    analytics_ItemTotalViews_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [analytics_ItemTotalViews_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_ItemTotalViews_order_by!]
        """
        filter the rows returned
        """
        where: analytics_ItemTotalViews_bool_exp
    ): analytics_ItemTotalViews_aggregate!
    """
    fetch data from the table: "analytics.ItemTotalViews" using primary key columns
    """
    analytics_ItemTotalViews_by_pk(itemId: uuid!): analytics_ItemTotalViews
    """
    fetch data from the table: "analytics.RoomPresence"
    """
    analytics_RoomPresence(
        """
        distinct select on columns
        """
        distinct_on: [analytics_RoomPresence_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_RoomPresence_order_by!]
        """
        filter the rows returned
        """
        where: analytics_RoomPresence_bool_exp
    ): [analytics_RoomPresence!]!
    """
    fetch aggregated fields from the table: "analytics.RoomPresence"
    """
    analytics_RoomPresence_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [analytics_RoomPresence_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_RoomPresence_order_by!]
        """
        filter the rows returned
        """
        where: analytics_RoomPresence_bool_exp
    ): analytics_RoomPresence_aggregate!
    """
    fetch data from the table: "analytics.RoomPresence" using primary key columns
    """
    analytics_RoomPresence_by_pk(id: uuid!): analytics_RoomPresence
    """
    fetch data from the table: "analytics.RoomStats"
    """
    analytics_RoomStats(
        """
        distinct select on columns
        """
        distinct_on: [analytics_RoomStats_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_RoomStats_order_by!]
        """
        filter the rows returned
        """
        where: analytics_RoomStats_bool_exp
    ): [analytics_RoomStats!]!
    """
    fetch aggregated fields from the table: "analytics.RoomStats"
    """
    analytics_RoomStats_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [analytics_RoomStats_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_RoomStats_order_by!]
        """
        filter the rows returned
        """
        where: analytics_RoomStats_bool_exp
    ): analytics_RoomStats_aggregate!
    """
    fetch data from the table: "analytics.RoomStats" using primary key columns
    """
    analytics_RoomStats_by_pk(id: uuid!): analytics_RoomStats
    """
    fetch data from the table: "chat.Chat"
    """
    chat_Chat(
        """
        distinct select on columns
        """
        distinct_on: [chat_Chat_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Chat_order_by!]
        """
        filter the rows returned
        """
        where: chat_Chat_bool_exp
    ): [chat_Chat!]!
    """
    fetch aggregated fields from the table: "chat.Chat"
    """
    chat_Chat_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [chat_Chat_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Chat_order_by!]
        """
        filter the rows returned
        """
        where: chat_Chat_bool_exp
    ): chat_Chat_aggregate!
    """
    fetch data from the table: "chat.Chat" using primary key columns
    """
    chat_Chat_by_pk(id: uuid!): chat_Chat
    """
    fetch data from the table: "chat.Flag"
    """
    chat_Flag(
        """
        distinct select on columns
        """
        distinct_on: [chat_Flag_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Flag_order_by!]
        """
        filter the rows returned
        """
        where: chat_Flag_bool_exp
    ): [chat_Flag!]!
    """
    fetch data from the table: "chat.FlagType"
    """
    chat_FlagType(
        """
        distinct select on columns
        """
        distinct_on: [chat_FlagType_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_FlagType_order_by!]
        """
        filter the rows returned
        """
        where: chat_FlagType_bool_exp
    ): [chat_FlagType!]!
    """
    fetch aggregated fields from the table: "chat.FlagType"
    """
    chat_FlagType_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [chat_FlagType_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_FlagType_order_by!]
        """
        filter the rows returned
        """
        where: chat_FlagType_bool_exp
    ): chat_FlagType_aggregate!
    """
    fetch data from the table: "chat.FlagType" using primary key columns
    """
    chat_FlagType_by_pk(name: String!): chat_FlagType
    """
    fetch aggregated fields from the table: "chat.Flag"
    """
    chat_Flag_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [chat_Flag_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Flag_order_by!]
        """
        filter the rows returned
        """
        where: chat_Flag_bool_exp
    ): chat_Flag_aggregate!
    """
    fetch data from the table: "chat.Flag" using primary key columns
    """
    chat_Flag_by_pk(id: Int!): chat_Flag
    """
    fetch data from the table: "chat.Message"
    """
    chat_Message(
        """
        distinct select on columns
        """
        distinct_on: [chat_Message_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Message_order_by!]
        """
        filter the rows returned
        """
        where: chat_Message_bool_exp
    ): [chat_Message!]!
    """
    fetch data from the table: "chat.MessageType"
    """
    chat_MessageType(
        """
        distinct select on columns
        """
        distinct_on: [chat_MessageType_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_MessageType_order_by!]
        """
        filter the rows returned
        """
        where: chat_MessageType_bool_exp
    ): [chat_MessageType!]!
    """
    fetch aggregated fields from the table: "chat.MessageType"
    """
    chat_MessageType_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [chat_MessageType_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_MessageType_order_by!]
        """
        filter the rows returned
        """
        where: chat_MessageType_bool_exp
    ): chat_MessageType_aggregate!
    """
    fetch data from the table: "chat.MessageType" using primary key columns
    """
    chat_MessageType_by_pk(name: String!): chat_MessageType
    """
    fetch aggregated fields from the table: "chat.Message"
    """
    chat_Message_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [chat_Message_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Message_order_by!]
        """
        filter the rows returned
        """
        where: chat_Message_bool_exp
    ): chat_Message_aggregate!
    """
    fetch data from the table: "chat.Message" using primary key columns
    """
    chat_Message_by_pk(id: Int!): chat_Message
    """
    fetch data from the table: "chat.Pin"
    """
    chat_Pin(
        """
        distinct select on columns
        """
        distinct_on: [chat_Pin_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Pin_order_by!]
        """
        filter the rows returned
        """
        where: chat_Pin_bool_exp
    ): [chat_Pin!]!
    """
    fetch aggregated fields from the table: "chat.Pin"
    """
    chat_Pin_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [chat_Pin_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Pin_order_by!]
        """
        filter the rows returned
        """
        where: chat_Pin_bool_exp
    ): chat_Pin_aggregate!
    """
    fetch data from the table: "chat.Pin" using primary key columns
    """
    chat_Pin_by_pk(chatId: uuid!, registrantId: uuid!): chat_Pin
    """
    fetch data from the table: "chat.Reaction"
    """
    chat_Reaction(
        """
        distinct select on columns
        """
        distinct_on: [chat_Reaction_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Reaction_order_by!]
        """
        filter the rows returned
        """
        where: chat_Reaction_bool_exp
    ): [chat_Reaction!]!
    """
    fetch data from the table: "chat.ReactionType"
    """
    chat_ReactionType(
        """
        distinct select on columns
        """
        distinct_on: [chat_ReactionType_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_ReactionType_order_by!]
        """
        filter the rows returned
        """
        where: chat_ReactionType_bool_exp
    ): [chat_ReactionType!]!
    """
    fetch aggregated fields from the table: "chat.ReactionType"
    """
    chat_ReactionType_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [chat_ReactionType_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_ReactionType_order_by!]
        """
        filter the rows returned
        """
        where: chat_ReactionType_bool_exp
    ): chat_ReactionType_aggregate!
    """
    fetch data from the table: "chat.ReactionType" using primary key columns
    """
    chat_ReactionType_by_pk(name: String!): chat_ReactionType
    """
    fetch aggregated fields from the table: "chat.Reaction"
    """
    chat_Reaction_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [chat_Reaction_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Reaction_order_by!]
        """
        filter the rows returned
        """
        where: chat_Reaction_bool_exp
    ): chat_Reaction_aggregate!
    """
    fetch data from the table: "chat.Reaction" using primary key columns
    """
    chat_Reaction_by_pk(sId: uuid!): chat_Reaction
    """
    fetch data from the table: "chat.ReadUpToIndex"
    """
    chat_ReadUpToIndex(
        """
        distinct select on columns
        """
        distinct_on: [chat_ReadUpToIndex_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_ReadUpToIndex_order_by!]
        """
        filter the rows returned
        """
        where: chat_ReadUpToIndex_bool_exp
    ): [chat_ReadUpToIndex!]!
    """
    fetch aggregated fields from the table: "chat.ReadUpToIndex"
    """
    chat_ReadUpToIndex_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [chat_ReadUpToIndex_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_ReadUpToIndex_order_by!]
        """
        filter the rows returned
        """
        where: chat_ReadUpToIndex_bool_exp
    ): chat_ReadUpToIndex_aggregate!
    """
    fetch data from the table: "chat.ReadUpToIndex" using primary key columns
    """
    chat_ReadUpToIndex_by_pk(chatId: uuid!, registrantId: uuid!): chat_ReadUpToIndex
    """
    fetch data from the table: "chat.Subscription"
    """
    chat_Subscription(
        """
        distinct select on columns
        """
        distinct_on: [chat_Subscription_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Subscription_order_by!]
        """
        filter the rows returned
        """
        where: chat_Subscription_bool_exp
    ): [chat_Subscription!]!
    """
    fetch aggregated fields from the table: "chat.Subscription"
    """
    chat_Subscription_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [chat_Subscription_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Subscription_order_by!]
        """
        filter the rows returned
        """
        where: chat_Subscription_bool_exp
    ): chat_Subscription_aggregate!
    """
    fetch data from the table: "chat.Subscription" using primary key columns
    """
    chat_Subscription_by_pk(chatId: uuid!, registrantId: uuid!): chat_Subscription
    """
    fetch data from the table: "collection.Exhibition"
    """
    collection_Exhibition(
        """
        distinct select on columns
        """
        distinct_on: [collection_Exhibition_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [collection_Exhibition_order_by!]
        """
        filter the rows returned
        """
        where: collection_Exhibition_bool_exp
    ): [collection_Exhibition!]!
    """
    fetch aggregated fields from the table: "collection.Exhibition"
    """
    collection_Exhibition_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [collection_Exhibition_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [collection_Exhibition_order_by!]
        """
        filter the rows returned
        """
        where: collection_Exhibition_bool_exp
    ): collection_Exhibition_aggregate!
    """
    fetch data from the table: "collection.Exhibition" using primary key columns
    """
    collection_Exhibition_by_pk(id: uuid!): collection_Exhibition
    """
    fetch data from the table: "collection.ProgramPerson"
    """
    collection_ProgramPerson(
        """
        distinct select on columns
        """
        distinct_on: [collection_ProgramPerson_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [collection_ProgramPerson_order_by!]
        """
        filter the rows returned
        """
        where: collection_ProgramPerson_bool_exp
    ): [collection_ProgramPerson!]!
    """
    fetch aggregated fields from the table: "collection.ProgramPerson"
    """
    collection_ProgramPerson_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [collection_ProgramPerson_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [collection_ProgramPerson_order_by!]
        """
        filter the rows returned
        """
        where: collection_ProgramPerson_bool_exp
    ): collection_ProgramPerson_aggregate!
    """
    fetch data from the table: "collection.ProgramPerson" using primary key columns
    """
    collection_ProgramPerson_by_pk(id: uuid!): collection_ProgramPerson
    """
    fetch data from the table: "collection.Tag"
    """
    collection_Tag(
        """
        distinct select on columns
        """
        distinct_on: [collection_Tag_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [collection_Tag_order_by!]
        """
        filter the rows returned
        """
        where: collection_Tag_bool_exp
    ): [collection_Tag!]!
    """
    fetch aggregated fields from the table: "collection.Tag"
    """
    collection_Tag_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [collection_Tag_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [collection_Tag_order_by!]
        """
        filter the rows returned
        """
        where: collection_Tag_bool_exp
    ): collection_Tag_aggregate!
    """
    fetch data from the table: "collection.Tag" using primary key columns
    """
    collection_Tag_by_pk(id: uuid!): collection_Tag
    """
    execute function "collection.searchProgramPerson" which returns "collection.ProgramPerson"
    """
    collection_searchProgramPerson(
        """
        input parameters for function "collection.searchProgramPerson"
        """
        args: collection_searchProgramPerson_args!
        """
        distinct select on columns
        """
        distinct_on: [collection_ProgramPerson_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [collection_ProgramPerson_order_by!]
        """
        filter the rows returned
        """
        where: collection_ProgramPerson_bool_exp
    ): [collection_ProgramPerson!]!
    """
    execute function "collection.searchProgramPerson" and query aggregates on result of table type "collection.ProgramPerson"
    """
    collection_searchProgramPerson_aggregate(
        """
        input parameters for function "collection.searchProgramPerson"
        """
        args: collection_searchProgramPerson_args!
        """
        distinct select on columns
        """
        distinct_on: [collection_ProgramPerson_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [collection_ProgramPerson_order_by!]
        """
        filter the rows returned
        """
        where: collection_ProgramPerson_bool_exp
    ): collection_ProgramPerson_aggregate!
    """
    fetch data from the table: "conference.Conference"
    """
    conference_Conference(
        """
        distinct select on columns
        """
        distinct_on: [conference_Conference_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [conference_Conference_order_by!]
        """
        filter the rows returned
        """
        where: conference_Conference_bool_exp
    ): [conference_Conference!]!
    """
    fetch aggregated fields from the table: "conference.Conference"
    """
    conference_Conference_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [conference_Conference_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [conference_Conference_order_by!]
        """
        filter the rows returned
        """
        where: conference_Conference_bool_exp
    ): conference_Conference_aggregate!
    """
    fetch data from the table: "conference.Conference" using primary key columns
    """
    conference_Conference_by_pk(id: uuid!): conference_Conference
    """
    fetch data from the table: "conference.Configuration"
    """
    conference_Configuration(
        """
        distinct select on columns
        """
        distinct_on: [conference_Configuration_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [conference_Configuration_order_by!]
        """
        filter the rows returned
        """
        where: conference_Configuration_bool_exp
    ): [conference_Configuration!]!
    """
    fetch data from the table: "conference.ConfigurationKey"
    """
    conference_ConfigurationKey(
        """
        distinct select on columns
        """
        distinct_on: [conference_ConfigurationKey_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [conference_ConfigurationKey_order_by!]
        """
        filter the rows returned
        """
        where: conference_ConfigurationKey_bool_exp
    ): [conference_ConfigurationKey!]!
    """
    fetch aggregated fields from the table: "conference.ConfigurationKey"
    """
    conference_ConfigurationKey_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [conference_ConfigurationKey_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [conference_ConfigurationKey_order_by!]
        """
        filter the rows returned
        """
        where: conference_ConfigurationKey_bool_exp
    ): conference_ConfigurationKey_aggregate!
    """
    fetch data from the table: "conference.ConfigurationKey" using primary key columns
    """
    conference_ConfigurationKey_by_pk(name: String!): conference_ConfigurationKey
    """
    fetch aggregated fields from the table: "conference.Configuration"
    """
    conference_Configuration_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [conference_Configuration_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [conference_Configuration_order_by!]
        """
        filter the rows returned
        """
        where: conference_Configuration_bool_exp
    ): conference_Configuration_aggregate!
    """
    fetch data from the table: "conference.Configuration" using primary key columns
    """
    conference_Configuration_by_pk(
        conferenceId: uuid!
        key: conference_ConfigurationKey_enum!
    ): conference_Configuration
    """
    fetch data from the table: "conference.DemoCode"
    """
    conference_DemoCode(
        """
        distinct select on columns
        """
        distinct_on: [conference_DemoCode_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [conference_DemoCode_order_by!]
        """
        filter the rows returned
        """
        where: conference_DemoCode_bool_exp
    ): [conference_DemoCode!]!
    """
    fetch aggregated fields from the table: "conference.DemoCode"
    """
    conference_DemoCode_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [conference_DemoCode_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [conference_DemoCode_order_by!]
        """
        filter the rows returned
        """
        where: conference_DemoCode_bool_exp
    ): conference_DemoCode_aggregate!
    """
    fetch data from the table: "conference.DemoCode" using primary key columns
    """
    conference_DemoCode_by_pk(id: uuid!): conference_DemoCode
    """
    fetch data from the table: "conference.Subconference"
    """
    conference_Subconference(
        """
        distinct select on columns
        """
        distinct_on: [conference_Subconference_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [conference_Subconference_order_by!]
        """
        filter the rows returned
        """
        where: conference_Subconference_bool_exp
    ): [conference_Subconference!]!
    """
    fetch aggregated fields from the table: "conference.Subconference"
    """
    conference_Subconference_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [conference_Subconference_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [conference_Subconference_order_by!]
        """
        filter the rows returned
        """
        where: conference_Subconference_bool_exp
    ): conference_Subconference_aggregate!
    """
    fetch data from the table: "conference.Subconference" using primary key columns
    """
    conference_Subconference_by_pk(id: uuid!): conference_Subconference
    """
    fetch data from the table: "conference.VisibilityLevel"
    """
    conference_VisibilityLevel(
        """
        distinct select on columns
        """
        distinct_on: [conference_VisibilityLevel_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [conference_VisibilityLevel_order_by!]
        """
        filter the rows returned
        """
        where: conference_VisibilityLevel_bool_exp
    ): [conference_VisibilityLevel!]!
    """
    fetch aggregated fields from the table: "conference.VisibilityLevel"
    """
    conference_VisibilityLevel_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [conference_VisibilityLevel_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [conference_VisibilityLevel_order_by!]
        """
        filter the rows returned
        """
        where: conference_VisibilityLevel_bool_exp
    ): conference_VisibilityLevel_aggregate!
    """
    fetch data from the table: "conference.VisibilityLevel" using primary key columns
    """
    conference_VisibilityLevel_by_pk(name: String!): conference_VisibilityLevel
    """
    fetch data from the table: "content.Element"
    """
    content_Element(
        """
        distinct select on columns
        """
        distinct_on: [content_Element_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_Element_order_by!]
        """
        filter the rows returned
        """
        where: content_Element_bool_exp
    ): [content_Element!]!
    """
    fetch data from the table: "content.ElementType"
    """
    content_ElementType(
        """
        distinct select on columns
        """
        distinct_on: [content_ElementType_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_ElementType_order_by!]
        """
        filter the rows returned
        """
        where: content_ElementType_bool_exp
    ): [content_ElementType!]!
    """
    fetch aggregated fields from the table: "content.ElementType"
    """
    content_ElementType_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [content_ElementType_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_ElementType_order_by!]
        """
        filter the rows returned
        """
        where: content_ElementType_bool_exp
    ): content_ElementType_aggregate!
    """
    fetch data from the table: "content.ElementType" using primary key columns
    """
    content_ElementType_by_pk(name: String!): content_ElementType
    """
    fetch aggregated fields from the table: "content.Element"
    """
    content_Element_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [content_Element_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_Element_order_by!]
        """
        filter the rows returned
        """
        where: content_Element_bool_exp
    ): content_Element_aggregate!
    """
    fetch data from the table: "content.Element" using primary key columns
    """
    content_Element_by_pk(id: uuid!): content_Element
    """
    fetch data from the table: "content.Item"
    """
    content_Item(
        """
        distinct select on columns
        """
        distinct_on: [content_Item_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_Item_order_by!]
        """
        filter the rows returned
        """
        where: content_Item_bool_exp
    ): [content_Item!]!
    """
    fetch data from the table: "content.ItemExhibition"
    """
    content_ItemExhibition(
        """
        distinct select on columns
        """
        distinct_on: [content_ItemExhibition_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_ItemExhibition_order_by!]
        """
        filter the rows returned
        """
        where: content_ItemExhibition_bool_exp
    ): [content_ItemExhibition!]!
    """
    fetch aggregated fields from the table: "content.ItemExhibition"
    """
    content_ItemExhibition_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [content_ItemExhibition_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_ItemExhibition_order_by!]
        """
        filter the rows returned
        """
        where: content_ItemExhibition_bool_exp
    ): content_ItemExhibition_aggregate!
    """
    fetch data from the table: "content.ItemExhibition" using primary key columns
    """
    content_ItemExhibition_by_pk(id: uuid!): content_ItemExhibition
    """
    fetch data from the table: "content.ItemProgramPerson"
    """
    content_ItemProgramPerson(
        """
        distinct select on columns
        """
        distinct_on: [content_ItemProgramPerson_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_ItemProgramPerson_order_by!]
        """
        filter the rows returned
        """
        where: content_ItemProgramPerson_bool_exp
    ): [content_ItemProgramPerson!]!
    """
    fetch aggregated fields from the table: "content.ItemProgramPerson"
    """
    content_ItemProgramPerson_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [content_ItemProgramPerson_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_ItemProgramPerson_order_by!]
        """
        filter the rows returned
        """
        where: content_ItemProgramPerson_bool_exp
    ): content_ItemProgramPerson_aggregate!
    """
    fetch data from the table: "content.ItemProgramPerson" using primary key columns
    """
    content_ItemProgramPerson_by_pk(id: uuid!): content_ItemProgramPerson
    """
    fetch data from the table: "content.ItemTag"
    """
    content_ItemTag(
        """
        distinct select on columns
        """
        distinct_on: [content_ItemTag_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_ItemTag_order_by!]
        """
        filter the rows returned
        """
        where: content_ItemTag_bool_exp
    ): [content_ItemTag!]!
    """
    fetch aggregated fields from the table: "content.ItemTag"
    """
    content_ItemTag_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [content_ItemTag_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_ItemTag_order_by!]
        """
        filter the rows returned
        """
        where: content_ItemTag_bool_exp
    ): content_ItemTag_aggregate!
    """
    fetch data from the table: "content.ItemTag" using primary key columns
    """
    content_ItemTag_by_pk(id: uuid!): content_ItemTag
    """
    fetch data from the table: "content.ItemType"
    """
    content_ItemType(
        """
        distinct select on columns
        """
        distinct_on: [content_ItemType_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_ItemType_order_by!]
        """
        filter the rows returned
        """
        where: content_ItemType_bool_exp
    ): [content_ItemType!]!
    """
    fetch aggregated fields from the table: "content.ItemType"
    """
    content_ItemType_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [content_ItemType_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_ItemType_order_by!]
        """
        filter the rows returned
        """
        where: content_ItemType_bool_exp
    ): content_ItemType_aggregate!
    """
    fetch data from the table: "content.ItemType" using primary key columns
    """
    content_ItemType_by_pk(name: String!): content_ItemType
    """
    fetch aggregated fields from the table: "content.Item"
    """
    content_Item_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [content_Item_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_Item_order_by!]
        """
        filter the rows returned
        """
        where: content_Item_bool_exp
    ): content_Item_aggregate!
    """
    fetch data from the table: "content.Item" using primary key columns
    """
    content_Item_by_pk(id: uuid!): content_Item
    """
    execute function "content.searchItems" which returns "content.Item"
    """
    content_searchItems(
        """
        input parameters for function "content.searchItems"
        """
        args: content_searchItems_args!
        """
        distinct select on columns
        """
        distinct_on: [content_Item_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_Item_order_by!]
        """
        filter the rows returned
        """
        where: content_Item_bool_exp
    ): [content_Item!]!
    """
    execute function "content.searchItems" and query aggregates on result of table type "content.Item"
    """
    content_searchItems_aggregate(
        """
        input parameters for function "content.searchItems"
        """
        args: content_searchItems_args!
        """
        distinct select on columns
        """
        distinct_on: [content_Item_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_Item_order_by!]
        """
        filter the rows returned
        """
        where: content_Item_bool_exp
    ): content_Item_aggregate!
    getSlug(url: String!): GetSlugOutput!
    getUploadAgreement: GetUploadAgreementOutput
    """
    fetch data from the table: "job_queues.ChannelStackCreateJob"
    """
    job_queues_ChannelStackCreateJob(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_ChannelStackCreateJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_ChannelStackCreateJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_ChannelStackCreateJob_bool_exp
    ): [job_queues_ChannelStackCreateJob!]!
    """
    fetch aggregated fields from the table: "job_queues.ChannelStackCreateJob"
    """
    job_queues_ChannelStackCreateJob_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_ChannelStackCreateJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_ChannelStackCreateJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_ChannelStackCreateJob_bool_exp
    ): job_queues_ChannelStackCreateJob_aggregate!
    """
    fetch data from the table: "job_queues.ChannelStackCreateJob" using primary key columns
    """
    job_queues_ChannelStackCreateJob_by_pk(id: uuid!): job_queues_ChannelStackCreateJob
    """
    fetch data from the table: "job_queues.ChannelStackDeleteJob"
    """
    job_queues_ChannelStackDeleteJob(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_ChannelStackDeleteJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_ChannelStackDeleteJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_ChannelStackDeleteJob_bool_exp
    ): [job_queues_ChannelStackDeleteJob!]!
    """
    fetch aggregated fields from the table: "job_queues.ChannelStackDeleteJob"
    """
    job_queues_ChannelStackDeleteJob_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_ChannelStackDeleteJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_ChannelStackDeleteJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_ChannelStackDeleteJob_bool_exp
    ): job_queues_ChannelStackDeleteJob_aggregate!
    """
    fetch data from the table: "job_queues.ChannelStackDeleteJob" using primary key columns
    """
    job_queues_ChannelStackDeleteJob_by_pk(id: uuid!): job_queues_ChannelStackDeleteJob
    """
    fetch data from the table: "job_queues.ChannelStackUpdateJob"
    """
    job_queues_ChannelStackUpdateJob(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_ChannelStackUpdateJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_ChannelStackUpdateJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_ChannelStackUpdateJob_bool_exp
    ): [job_queues_ChannelStackUpdateJob!]!
    """
    fetch aggregated fields from the table: "job_queues.ChannelStackUpdateJob"
    """
    job_queues_ChannelStackUpdateJob_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_ChannelStackUpdateJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_ChannelStackUpdateJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_ChannelStackUpdateJob_bool_exp
    ): job_queues_ChannelStackUpdateJob_aggregate!
    """
    fetch data from the table: "job_queues.ChannelStackUpdateJob" using primary key columns
    """
    job_queues_ChannelStackUpdateJob_by_pk(id: uuid!): job_queues_ChannelStackUpdateJob
    """
    fetch data from the table: "job_queues.CombineVideosJob"
    """
    job_queues_CombineVideosJob(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_CombineVideosJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_CombineVideosJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_CombineVideosJob_bool_exp
    ): [job_queues_CombineVideosJob!]!
    """
    fetch aggregated fields from the table: "job_queues.CombineVideosJob"
    """
    job_queues_CombineVideosJob_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_CombineVideosJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_CombineVideosJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_CombineVideosJob_bool_exp
    ): job_queues_CombineVideosJob_aggregate!
    """
    fetch data from the table: "job_queues.CombineVideosJob" using primary key columns
    """
    job_queues_CombineVideosJob_by_pk(id: uuid!): job_queues_CombineVideosJob
    """
    fetch data from the table: "job_queues.CustomEmailJob"
    """
    job_queues_CustomEmailJob(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_CustomEmailJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_CustomEmailJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_CustomEmailJob_bool_exp
    ): [job_queues_CustomEmailJob!]!
    """
    fetch aggregated fields from the table: "job_queues.CustomEmailJob"
    """
    job_queues_CustomEmailJob_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_CustomEmailJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_CustomEmailJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_CustomEmailJob_bool_exp
    ): job_queues_CustomEmailJob_aggregate!
    """
    fetch data from the table: "job_queues.CustomEmailJob" using primary key columns
    """
    job_queues_CustomEmailJob_by_pk(id: uuid!): job_queues_CustomEmailJob
    """
    fetch data from the table: "job_queues.ImportJob"
    """
    job_queues_ImportJob(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_ImportJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_ImportJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_ImportJob_bool_exp
    ): [job_queues_ImportJob!]!
    """
    fetch data from the table: "job_queues.ImportJobOutput"
    """
    job_queues_ImportJobOutput(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_ImportJobOutput_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_ImportJobOutput_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_ImportJobOutput_bool_exp
    ): [job_queues_ImportJobOutput!]!
    """
    fetch aggregated fields from the table: "job_queues.ImportJobOutput"
    """
    job_queues_ImportJobOutput_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_ImportJobOutput_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_ImportJobOutput_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_ImportJobOutput_bool_exp
    ): job_queues_ImportJobOutput_aggregate!
    """
    fetch data from the table: "job_queues.ImportJobOutput" using primary key columns
    """
    job_queues_ImportJobOutput_by_pk(id: uuid!): job_queues_ImportJobOutput
    """
    fetch aggregated fields from the table: "job_queues.ImportJob"
    """
    job_queues_ImportJob_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_ImportJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_ImportJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_ImportJob_bool_exp
    ): job_queues_ImportJob_aggregate!
    """
    fetch data from the table: "job_queues.ImportJob" using primary key columns
    """
    job_queues_ImportJob_by_pk(id: uuid!): job_queues_ImportJob
    """
    fetch data from the table: "job_queues.InvitationEmailJob"
    """
    job_queues_InvitationEmailJob(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_InvitationEmailJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_InvitationEmailJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_InvitationEmailJob_bool_exp
    ): [job_queues_InvitationEmailJob!]!
    """
    fetch aggregated fields from the table: "job_queues.InvitationEmailJob"
    """
    job_queues_InvitationEmailJob_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_InvitationEmailJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_InvitationEmailJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_InvitationEmailJob_bool_exp
    ): job_queues_InvitationEmailJob_aggregate!
    """
    fetch data from the table: "job_queues.InvitationEmailJob" using primary key columns
    """
    job_queues_InvitationEmailJob_by_pk(id: uuid!): job_queues_InvitationEmailJob
    """
    fetch data from the table: "job_queues.JobStatus"
    """
    job_queues_JobStatus(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_JobStatus_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_JobStatus_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_JobStatus_bool_exp
    ): [job_queues_JobStatus!]!
    """
    fetch aggregated fields from the table: "job_queues.JobStatus"
    """
    job_queues_JobStatus_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_JobStatus_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_JobStatus_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_JobStatus_bool_exp
    ): job_queues_JobStatus_aggregate!
    """
    fetch data from the table: "job_queues.JobStatus" using primary key columns
    """
    job_queues_JobStatus_by_pk(name: String!): job_queues_JobStatus
    """
    fetch data from the table: "job_queues.MediaPackageHarvestJob"
    """
    job_queues_MediaPackageHarvestJob(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_MediaPackageHarvestJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_MediaPackageHarvestJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_MediaPackageHarvestJob_bool_exp
    ): [job_queues_MediaPackageHarvestJob!]!
    """
    fetch aggregated fields from the table: "job_queues.MediaPackageHarvestJob"
    """
    job_queues_MediaPackageHarvestJob_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_MediaPackageHarvestJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_MediaPackageHarvestJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_MediaPackageHarvestJob_bool_exp
    ): job_queues_MediaPackageHarvestJob_aggregate!
    """
    fetch data from the table: "job_queues.MediaPackageHarvestJob" using primary key columns
    """
    job_queues_MediaPackageHarvestJob_by_pk(id: uuid!): job_queues_MediaPackageHarvestJob
    """
    fetch data from the table: "job_queues.PrepareJob"
    """
    job_queues_PrepareJob(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_PrepareJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_PrepareJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_PrepareJob_bool_exp
    ): [job_queues_PrepareJob!]!
    """
    fetch aggregated fields from the table: "job_queues.PrepareJob"
    """
    job_queues_PrepareJob_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_PrepareJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_PrepareJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_PrepareJob_bool_exp
    ): job_queues_PrepareJob_aggregate!
    """
    fetch data from the table: "job_queues.PrepareJob" using primary key columns
    """
    job_queues_PrepareJob_by_pk(id: uuid!): job_queues_PrepareJob
    """
    fetch data from the table: "job_queues.PublishVideoJob"
    """
    job_queues_PublishVideoJob(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_PublishVideoJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_PublishVideoJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_PublishVideoJob_bool_exp
    ): [job_queues_PublishVideoJob!]!
    """
    fetch aggregated fields from the table: "job_queues.PublishVideoJob"
    """
    job_queues_PublishVideoJob_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_PublishVideoJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_PublishVideoJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_PublishVideoJob_bool_exp
    ): job_queues_PublishVideoJob_aggregate!
    """
    fetch data from the table: "job_queues.PublishVideoJob" using primary key columns
    """
    job_queues_PublishVideoJob_by_pk(id: uuid!): job_queues_PublishVideoJob
    """
    fetch data from the table: "job_queues.SubmissionRequestEmailJob"
    """
    job_queues_SubmissionRequestEmailJob(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_SubmissionRequestEmailJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_SubmissionRequestEmailJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_SubmissionRequestEmailJob_bool_exp
    ): [job_queues_SubmissionRequestEmailJob!]!
    """
    fetch aggregated fields from the table: "job_queues.SubmissionRequestEmailJob"
    """
    job_queues_SubmissionRequestEmailJob_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_SubmissionRequestEmailJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_SubmissionRequestEmailJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_SubmissionRequestEmailJob_bool_exp
    ): job_queues_SubmissionRequestEmailJob_aggregate!
    """
    fetch data from the table: "job_queues.SubmissionRequestEmailJob" using primary key columns
    """
    job_queues_SubmissionRequestEmailJob_by_pk(id: uuid!): job_queues_SubmissionRequestEmailJob
    """
    fetch data from the table: "job_queues.UploadYouTubeVideoJob"
    """
    job_queues_UploadYouTubeVideoJob(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_UploadYouTubeVideoJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_UploadYouTubeVideoJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_UploadYouTubeVideoJob_bool_exp
    ): [job_queues_UploadYouTubeVideoJob!]!
    """
    fetch aggregated fields from the table: "job_queues.UploadYouTubeVideoJob"
    """
    job_queues_UploadYouTubeVideoJob_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_UploadYouTubeVideoJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_UploadYouTubeVideoJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_UploadYouTubeVideoJob_bool_exp
    ): job_queues_UploadYouTubeVideoJob_aggregate!
    """
    fetch data from the table: "job_queues.UploadYouTubeVideoJob" using primary key columns
    """
    job_queues_UploadYouTubeVideoJob_by_pk(id: uuid!): job_queues_UploadYouTubeVideoJob
    presence_Summary: PresenceSummaryOutput
    """
    fetch data from the table: "registrant.GoogleAccount"
    """
    registrant_GoogleAccount(
        """
        distinct select on columns
        """
        distinct_on: [registrant_GoogleAccount_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_GoogleAccount_order_by!]
        """
        filter the rows returned
        """
        where: registrant_GoogleAccount_bool_exp
    ): [registrant_GoogleAccount!]!
    """
    fetch aggregated fields from the table: "registrant.GoogleAccount"
    """
    registrant_GoogleAccount_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [registrant_GoogleAccount_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_GoogleAccount_order_by!]
        """
        filter the rows returned
        """
        where: registrant_GoogleAccount_bool_exp
    ): registrant_GoogleAccount_aggregate!
    """
    fetch data from the table: "registrant.GoogleAccount" using primary key columns
    """
    registrant_GoogleAccount_by_pk(id: uuid!): registrant_GoogleAccount
    """
    fetch data from the table: "registrant.Group"
    """
    registrant_Group(
        """
        distinct select on columns
        """
        distinct_on: [registrant_Group_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_Group_order_by!]
        """
        filter the rows returned
        """
        where: registrant_Group_bool_exp
    ): [registrant_Group!]!
    """
    fetch data from the table: "registrant.GroupRegistrant"
    """
    registrant_GroupRegistrant(
        """
        distinct select on columns
        """
        distinct_on: [registrant_GroupRegistrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_GroupRegistrant_order_by!]
        """
        filter the rows returned
        """
        where: registrant_GroupRegistrant_bool_exp
    ): [registrant_GroupRegistrant!]!
    """
    fetch aggregated fields from the table: "registrant.GroupRegistrant"
    """
    registrant_GroupRegistrant_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [registrant_GroupRegistrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_GroupRegistrant_order_by!]
        """
        filter the rows returned
        """
        where: registrant_GroupRegistrant_bool_exp
    ): registrant_GroupRegistrant_aggregate!
    """
    fetch data from the table: "registrant.GroupRegistrant" using primary key columns
    """
    registrant_GroupRegistrant_by_pk(id: uuid!): registrant_GroupRegistrant
    """
    fetch aggregated fields from the table: "registrant.Group"
    """
    registrant_Group_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [registrant_Group_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_Group_order_by!]
        """
        filter the rows returned
        """
        where: registrant_Group_bool_exp
    ): registrant_Group_aggregate!
    """
    fetch data from the table: "registrant.Group" using primary key columns
    """
    registrant_Group_by_pk(id: uuid!): registrant_Group
    """
    fetch data from the table: "registrant.Invitation"
    """
    registrant_Invitation(
        """
        distinct select on columns
        """
        distinct_on: [registrant_Invitation_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_Invitation_order_by!]
        """
        filter the rows returned
        """
        where: registrant_Invitation_bool_exp
    ): [registrant_Invitation!]!
    """
    fetch aggregated fields from the table: "registrant.Invitation"
    """
    registrant_Invitation_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [registrant_Invitation_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_Invitation_order_by!]
        """
        filter the rows returned
        """
        where: registrant_Invitation_bool_exp
    ): registrant_Invitation_aggregate!
    """
    fetch data from the table: "registrant.Invitation" using primary key columns
    """
    registrant_Invitation_by_pk(id: uuid!): registrant_Invitation
    """
    fetch data from the table: "registrant.Profile"
    """
    registrant_Profile(
        """
        distinct select on columns
        """
        distinct_on: [registrant_Profile_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_Profile_order_by!]
        """
        filter the rows returned
        """
        where: registrant_Profile_bool_exp
    ): [registrant_Profile!]!
    """
    fetch data from the table: "registrant.ProfileBadges"
    """
    registrant_ProfileBadges(
        """
        distinct select on columns
        """
        distinct_on: [registrant_ProfileBadges_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_ProfileBadges_order_by!]
        """
        filter the rows returned
        """
        where: registrant_ProfileBadges_bool_exp
    ): [registrant_ProfileBadges!]!
    """
    fetch aggregated fields from the table: "registrant.ProfileBadges"
    """
    registrant_ProfileBadges_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [registrant_ProfileBadges_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_ProfileBadges_order_by!]
        """
        filter the rows returned
        """
        where: registrant_ProfileBadges_bool_exp
    ): registrant_ProfileBadges_aggregate!
    """
    fetch aggregated fields from the table: "registrant.Profile"
    """
    registrant_Profile_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [registrant_Profile_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_Profile_order_by!]
        """
        filter the rows returned
        """
        where: registrant_Profile_bool_exp
    ): registrant_Profile_aggregate!
    """
    fetch data from the table: "registrant.Profile" using primary key columns
    """
    registrant_Profile_by_pk(registrantId: uuid!): registrant_Profile
    """
    fetch data from the table: "registrant.Registrant"
    """
    registrant_Registrant(
        """
        distinct select on columns
        """
        distinct_on: [registrant_Registrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_Registrant_order_by!]
        """
        filter the rows returned
        """
        where: registrant_Registrant_bool_exp
    ): [registrant_Registrant!]!
    """
    fetch data from the table: "registrant.RegistrantRole"
    """
    registrant_RegistrantRole(
        """
        distinct select on columns
        """
        distinct_on: [registrant_RegistrantRole_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_RegistrantRole_order_by!]
        """
        filter the rows returned
        """
        where: registrant_RegistrantRole_bool_exp
    ): [registrant_RegistrantRole!]!
    """
    fetch aggregated fields from the table: "registrant.RegistrantRole"
    """
    registrant_RegistrantRole_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [registrant_RegistrantRole_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_RegistrantRole_order_by!]
        """
        filter the rows returned
        """
        where: registrant_RegistrantRole_bool_exp
    ): registrant_RegistrantRole_aggregate!
    """
    fetch data from the table: "registrant.RegistrantRole" using primary key columns
    """
    registrant_RegistrantRole_by_pk(name: String!): registrant_RegistrantRole
    """
    fetch aggregated fields from the table: "registrant.Registrant"
    """
    registrant_Registrant_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [registrant_Registrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_Registrant_order_by!]
        """
        filter the rows returned
        """
        where: registrant_Registrant_bool_exp
    ): registrant_Registrant_aggregate!
    """
    fetch data from the table: "registrant.Registrant" using primary key columns
    """
    registrant_Registrant_by_pk(id: uuid!): registrant_Registrant
    """
    fetch data from the table: "registrant.SavedVonageRoomRecording"
    """
    registrant_SavedVonageRoomRecording(
        """
        distinct select on columns
        """
        distinct_on: [registrant_SavedVonageRoomRecording_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_SavedVonageRoomRecording_order_by!]
        """
        filter the rows returned
        """
        where: registrant_SavedVonageRoomRecording_bool_exp
    ): [registrant_SavedVonageRoomRecording!]!
    """
    fetch aggregated fields from the table: "registrant.SavedVonageRoomRecording"
    """
    registrant_SavedVonageRoomRecording_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [registrant_SavedVonageRoomRecording_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_SavedVonageRoomRecording_order_by!]
        """
        filter the rows returned
        """
        where: registrant_SavedVonageRoomRecording_bool_exp
    ): registrant_SavedVonageRoomRecording_aggregate!
    """
    fetch data from the table: "registrant.SavedVonageRoomRecording" using primary key columns
    """
    registrant_SavedVonageRoomRecording_by_pk(id: uuid!): registrant_SavedVonageRoomRecording
    """
    fetch data from the table: "registrant.SubconferenceMembership"
    """
    registrant_SubconferenceMembership(
        """
        distinct select on columns
        """
        distinct_on: [registrant_SubconferenceMembership_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_SubconferenceMembership_order_by!]
        """
        filter the rows returned
        """
        where: registrant_SubconferenceMembership_bool_exp
    ): [registrant_SubconferenceMembership!]!
    """
    fetch aggregated fields from the table: "registrant.SubconferenceMembership"
    """
    registrant_SubconferenceMembership_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [registrant_SubconferenceMembership_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_SubconferenceMembership_order_by!]
        """
        filter the rows returned
        """
        where: registrant_SubconferenceMembership_bool_exp
    ): registrant_SubconferenceMembership_aggregate!
    """
    fetch data from the table: "registrant.SubconferenceMembership" using primary key columns
    """
    registrant_SubconferenceMembership_by_pk(id: uuid!): registrant_SubconferenceMembership
    """
    execute function "registrant.searchRegistrants" which returns "registrant.Registrant"
    """
    registrant_searchRegistrants(
        """
        input parameters for function "registrant.searchRegistrants"
        """
        args: registrant_searchRegistrants_args!
        """
        distinct select on columns
        """
        distinct_on: [registrant_Registrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_Registrant_order_by!]
        """
        filter the rows returned
        """
        where: registrant_Registrant_bool_exp
    ): [registrant_Registrant!]!
    """
    execute function "registrant.searchRegistrants" and query aggregates on result of table type "registrant.Registrant"
    """
    registrant_searchRegistrants_aggregate(
        """
        input parameters for function "registrant.searchRegistrants"
        """
        args: registrant_searchRegistrants_args!
        """
        distinct select on columns
        """
        distinct_on: [registrant_Registrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_Registrant_order_by!]
        """
        filter the rows returned
        """
        where: registrant_Registrant_bool_exp
    ): registrant_Registrant_aggregate!
    """
    fetch data from the table: "room.Backend"
    """
    room_Backend(
        """
        distinct select on columns
        """
        distinct_on: [room_Backend_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_Backend_order_by!]
        """
        filter the rows returned
        """
        where: room_Backend_bool_exp
    ): [room_Backend!]!
    """
    fetch aggregated fields from the table: "room.Backend"
    """
    room_Backend_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_Backend_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_Backend_order_by!]
        """
        filter the rows returned
        """
        where: room_Backend_bool_exp
    ): room_Backend_aggregate!
    """
    fetch data from the table: "room.Backend" using primary key columns
    """
    room_Backend_by_pk(name: String!): room_Backend
    """
    fetch data from the table: "room.ChimeMeeting"
    """
    room_ChimeMeeting(
        """
        distinct select on columns
        """
        distinct_on: [room_ChimeMeeting_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_ChimeMeeting_order_by!]
        """
        filter the rows returned
        """
        where: room_ChimeMeeting_bool_exp
    ): [room_ChimeMeeting!]!
    """
    fetch aggregated fields from the table: "room.ChimeMeeting"
    """
    room_ChimeMeeting_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_ChimeMeeting_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_ChimeMeeting_order_by!]
        """
        filter the rows returned
        """
        where: room_ChimeMeeting_bool_exp
    ): room_ChimeMeeting_aggregate!
    """
    fetch data from the table: "room.ChimeMeeting" using primary key columns
    """
    room_ChimeMeeting_by_pk(id: uuid!): room_ChimeMeeting
    """
    fetch data from the table: "room.LivestreamDurations"
    """
    room_LivestreamDurations(
        """
        distinct select on columns
        """
        distinct_on: [room_LivestreamDurations_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_LivestreamDurations_order_by!]
        """
        filter the rows returned
        """
        where: room_LivestreamDurations_bool_exp
    ): [room_LivestreamDurations!]!
    """
    fetch aggregated fields from the table: "room.LivestreamDurations"
    """
    room_LivestreamDurations_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_LivestreamDurations_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_LivestreamDurations_order_by!]
        """
        filter the rows returned
        """
        where: room_LivestreamDurations_bool_exp
    ): room_LivestreamDurations_aggregate!
    """
    fetch data from the table: "room.ManagementMode"
    """
    room_ManagementMode(
        """
        distinct select on columns
        """
        distinct_on: [room_ManagementMode_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_ManagementMode_order_by!]
        """
        filter the rows returned
        """
        where: room_ManagementMode_bool_exp
    ): [room_ManagementMode!]!
    """
    fetch aggregated fields from the table: "room.ManagementMode"
    """
    room_ManagementMode_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_ManagementMode_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_ManagementMode_order_by!]
        """
        filter the rows returned
        """
        where: room_ManagementMode_bool_exp
    ): room_ManagementMode_aggregate!
    """
    fetch data from the table: "room.ManagementMode" using primary key columns
    """
    room_ManagementMode_by_pk(name: String!): room_ManagementMode
    """
    fetch data from the table: "room.Mode"
    """
    room_Mode(
        """
        distinct select on columns
        """
        distinct_on: [room_Mode_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_Mode_order_by!]
        """
        filter the rows returned
        """
        where: room_Mode_bool_exp
    ): [room_Mode!]!
    """
    fetch aggregated fields from the table: "room.Mode"
    """
    room_Mode_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_Mode_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_Mode_order_by!]
        """
        filter the rows returned
        """
        where: room_Mode_bool_exp
    ): room_Mode_aggregate!
    """
    fetch data from the table: "room.Mode" using primary key columns
    """
    room_Mode_by_pk(name: String!): room_Mode
    """
    fetch data from the table: "room.Participant"
    """
    room_Participant(
        """
        distinct select on columns
        """
        distinct_on: [room_Participant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_Participant_order_by!]
        """
        filter the rows returned
        """
        where: room_Participant_bool_exp
    ): [room_Participant!]!
    """
    fetch aggregated fields from the table: "room.Participant"
    """
    room_Participant_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_Participant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_Participant_order_by!]
        """
        filter the rows returned
        """
        where: room_Participant_bool_exp
    ): room_Participant_aggregate!
    """
    fetch data from the table: "room.Participant" using primary key columns
    """
    room_Participant_by_pk(id: uuid!): room_Participant
    """
    fetch data from the table: "room.PersonRole"
    """
    room_PersonRole(
        """
        distinct select on columns
        """
        distinct_on: [room_PersonRole_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_PersonRole_order_by!]
        """
        filter the rows returned
        """
        where: room_PersonRole_bool_exp
    ): [room_PersonRole!]!
    """
    fetch aggregated fields from the table: "room.PersonRole"
    """
    room_PersonRole_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_PersonRole_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_PersonRole_order_by!]
        """
        filter the rows returned
        """
        where: room_PersonRole_bool_exp
    ): room_PersonRole_aggregate!
    """
    fetch data from the table: "room.PersonRole" using primary key columns
    """
    room_PersonRole_by_pk(name: String!): room_PersonRole
    """
    fetch data from the table: "room.Room"
    """
    room_Room(
        """
        distinct select on columns
        """
        distinct_on: [room_Room_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_Room_order_by!]
        """
        filter the rows returned
        """
        where: room_Room_bool_exp
    ): [room_Room!]!
    """
    fetch data from the table: "room.RoomGroupMembership"
    """
    room_RoomGroupMembership(
        """
        distinct select on columns
        """
        distinct_on: [room_RoomGroupMembership_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_RoomGroupMembership_order_by!]
        """
        filter the rows returned
        """
        where: room_RoomGroupMembership_bool_exp
    ): [room_RoomGroupMembership!]!
    """
    fetch aggregated fields from the table: "room.RoomGroupMembership"
    """
    room_RoomGroupMembership_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_RoomGroupMembership_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_RoomGroupMembership_order_by!]
        """
        filter the rows returned
        """
        where: room_RoomGroupMembership_bool_exp
    ): room_RoomGroupMembership_aggregate!
    """
    fetch data from the table: "room.RoomGroupMembership" using primary key columns
    """
    room_RoomGroupMembership_by_pk(id: uuid!): room_RoomGroupMembership
    """
    fetch data from the table: "room.RoomMembership"
    """
    room_RoomMembership(
        """
        distinct select on columns
        """
        distinct_on: [room_RoomMembership_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_RoomMembership_order_by!]
        """
        filter the rows returned
        """
        where: room_RoomMembership_bool_exp
    ): [room_RoomMembership!]!
    """
    fetch aggregated fields from the table: "room.RoomMembership"
    """
    room_RoomMembership_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_RoomMembership_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_RoomMembership_order_by!]
        """
        filter the rows returned
        """
        where: room_RoomMembership_bool_exp
    ): room_RoomMembership_aggregate!
    """
    fetch data from the table: "room.RoomMembership" using primary key columns
    """
    room_RoomMembership_by_pk(id: uuid!): room_RoomMembership
    """
    fetch aggregated fields from the table: "room.Room"
    """
    room_Room_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_Room_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_Room_order_by!]
        """
        filter the rows returned
        """
        where: room_Room_bool_exp
    ): room_Room_aggregate!
    """
    fetch data from the table: "room.Room" using primary key columns
    """
    room_Room_by_pk(id: uuid!): room_Room
    """
    fetch data from the table: "room.ShuffleAlgorithm"
    """
    room_ShuffleAlgorithm(
        """
        distinct select on columns
        """
        distinct_on: [room_ShuffleAlgorithm_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_ShuffleAlgorithm_order_by!]
        """
        filter the rows returned
        """
        where: room_ShuffleAlgorithm_bool_exp
    ): [room_ShuffleAlgorithm!]!
    """
    fetch aggregated fields from the table: "room.ShuffleAlgorithm"
    """
    room_ShuffleAlgorithm_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_ShuffleAlgorithm_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_ShuffleAlgorithm_order_by!]
        """
        filter the rows returned
        """
        where: room_ShuffleAlgorithm_bool_exp
    ): room_ShuffleAlgorithm_aggregate!
    """
    fetch data from the table: "room.ShuffleAlgorithm" using primary key columns
    """
    room_ShuffleAlgorithm_by_pk(name: String!): room_ShuffleAlgorithm
    """
    fetch data from the table: "room.ShufflePeriod"
    """
    room_ShufflePeriod(
        """
        distinct select on columns
        """
        distinct_on: [room_ShufflePeriod_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_ShufflePeriod_order_by!]
        """
        filter the rows returned
        """
        where: room_ShufflePeriod_bool_exp
    ): [room_ShufflePeriod!]!
    """
    fetch aggregated fields from the table: "room.ShufflePeriod"
    """
    room_ShufflePeriod_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_ShufflePeriod_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_ShufflePeriod_order_by!]
        """
        filter the rows returned
        """
        where: room_ShufflePeriod_bool_exp
    ): room_ShufflePeriod_aggregate!
    """
    fetch data from the table: "room.ShufflePeriod" using primary key columns
    """
    room_ShufflePeriod_by_pk(id: uuid!): room_ShufflePeriod
    """
    fetch data from the table: "room.ShuffleQueueEntry"
    """
    room_ShuffleQueueEntry(
        """
        distinct select on columns
        """
        distinct_on: [room_ShuffleQueueEntry_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_ShuffleQueueEntry_order_by!]
        """
        filter the rows returned
        """
        where: room_ShuffleQueueEntry_bool_exp
    ): [room_ShuffleQueueEntry!]!
    """
    fetch aggregated fields from the table: "room.ShuffleQueueEntry"
    """
    room_ShuffleQueueEntry_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_ShuffleQueueEntry_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_ShuffleQueueEntry_order_by!]
        """
        filter the rows returned
        """
        where: room_ShuffleQueueEntry_bool_exp
    ): room_ShuffleQueueEntry_aggregate!
    """
    fetch data from the table: "room.ShuffleQueueEntry" using primary key columns
    """
    room_ShuffleQueueEntry_by_pk(id: bigint!): room_ShuffleQueueEntry
    """
    fetch data from the table: "room.ShuffleRoom"
    """
    room_ShuffleRoom(
        """
        distinct select on columns
        """
        distinct_on: [room_ShuffleRoom_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_ShuffleRoom_order_by!]
        """
        filter the rows returned
        """
        where: room_ShuffleRoom_bool_exp
    ): [room_ShuffleRoom!]!
    """
    fetch aggregated fields from the table: "room.ShuffleRoom"
    """
    room_ShuffleRoom_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_ShuffleRoom_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_ShuffleRoom_order_by!]
        """
        filter the rows returned
        """
        where: room_ShuffleRoom_bool_exp
    ): room_ShuffleRoom_aggregate!
    """
    fetch data from the table: "room.ShuffleRoom" using primary key columns
    """
    room_ShuffleRoom_by_pk(id: bigint!): room_ShuffleRoom
    """
    fetch data from the table: "schedule.Continuation"
    """
    schedule_Continuation(
        """
        distinct select on columns
        """
        distinct_on: [schedule_Continuation_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_Continuation_order_by!]
        """
        filter the rows returned
        """
        where: schedule_Continuation_bool_exp
    ): [schedule_Continuation!]!
    """
    fetch aggregated fields from the table: "schedule.Continuation"
    """
    schedule_Continuation_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [schedule_Continuation_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_Continuation_order_by!]
        """
        filter the rows returned
        """
        where: schedule_Continuation_bool_exp
    ): schedule_Continuation_aggregate!
    """
    fetch data from the table: "schedule.Continuation" using primary key columns
    """
    schedule_Continuation_by_pk(id: uuid!): schedule_Continuation
    """
    fetch data from the table: "schedule.CurrentEvents"
    """
    schedule_CurrentEvents(
        """
        distinct select on columns
        """
        distinct_on: [schedule_CurrentEvents_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_CurrentEvents_order_by!]
        """
        filter the rows returned
        """
        where: schedule_CurrentEvents_bool_exp
    ): [schedule_CurrentEvents!]!
    """
    fetch aggregated fields from the table: "schedule.CurrentEvents"
    """
    schedule_CurrentEvents_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [schedule_CurrentEvents_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_CurrentEvents_order_by!]
        """
        filter the rows returned
        """
        where: schedule_CurrentEvents_bool_exp
    ): schedule_CurrentEvents_aggregate!
    """
    fetch data from the table: "schedule.Event"
    """
    schedule_Event(
        """
        distinct select on columns
        """
        distinct_on: [schedule_Event_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_Event_order_by!]
        """
        filter the rows returned
        """
        where: schedule_Event_bool_exp
    ): [schedule_Event!]!
    """
    fetch data from the table: "schedule.EventProgramPerson"
    """
    schedule_EventProgramPerson(
        """
        distinct select on columns
        """
        distinct_on: [schedule_EventProgramPerson_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_EventProgramPerson_order_by!]
        """
        filter the rows returned
        """
        where: schedule_EventProgramPerson_bool_exp
    ): [schedule_EventProgramPerson!]!
    """
    fetch data from the table: "schedule.EventProgramPersonRole"
    """
    schedule_EventProgramPersonRole(
        """
        distinct select on columns
        """
        distinct_on: [schedule_EventProgramPersonRole_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_EventProgramPersonRole_order_by!]
        """
        filter the rows returned
        """
        where: schedule_EventProgramPersonRole_bool_exp
    ): [schedule_EventProgramPersonRole!]!
    """
    fetch aggregated fields from the table: "schedule.EventProgramPersonRole"
    """
    schedule_EventProgramPersonRole_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [schedule_EventProgramPersonRole_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_EventProgramPersonRole_order_by!]
        """
        filter the rows returned
        """
        where: schedule_EventProgramPersonRole_bool_exp
    ): schedule_EventProgramPersonRole_aggregate!
    """
    fetch data from the table: "schedule.EventProgramPersonRole" using primary key columns
    """
    schedule_EventProgramPersonRole_by_pk(name: String!): schedule_EventProgramPersonRole
    """
    fetch aggregated fields from the table: "schedule.EventProgramPerson"
    """
    schedule_EventProgramPerson_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [schedule_EventProgramPerson_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_EventProgramPerson_order_by!]
        """
        filter the rows returned
        """
        where: schedule_EventProgramPerson_bool_exp
    ): schedule_EventProgramPerson_aggregate!
    """
    fetch data from the table: "schedule.EventProgramPerson" using primary key columns
    """
    schedule_EventProgramPerson_by_pk(id: uuid!): schedule_EventProgramPerson
    """
    fetch aggregated fields from the table: "schedule.Event"
    """
    schedule_Event_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [schedule_Event_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_Event_order_by!]
        """
        filter the rows returned
        """
        where: schedule_Event_bool_exp
    ): schedule_Event_aggregate!
    """
    fetch data from the table: "schedule.Event" using primary key columns
    """
    schedule_Event_by_pk(id: uuid!): schedule_Event
    """
    fetch data from the table: "schedule.OverlappingEvents"
    """
    schedule_OverlappingEvents(
        """
        distinct select on columns
        """
        distinct_on: [schedule_OverlappingEvents_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_OverlappingEvents_order_by!]
        """
        filter the rows returned
        """
        where: schedule_OverlappingEvents_bool_exp
    ): [schedule_OverlappingEvents!]!
    """
    fetch aggregated fields from the table: "schedule.OverlappingEvents"
    """
    schedule_OverlappingEvents_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [schedule_OverlappingEvents_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_OverlappingEvents_order_by!]
        """
        filter the rows returned
        """
        where: schedule_OverlappingEvents_bool_exp
    ): schedule_OverlappingEvents_aggregate!
    """
    fetch data from the table: "schedule.StarredEvent"
    """
    schedule_StarredEvent(
        """
        distinct select on columns
        """
        distinct_on: [schedule_StarredEvent_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_StarredEvent_order_by!]
        """
        filter the rows returned
        """
        where: schedule_StarredEvent_bool_exp
    ): [schedule_StarredEvent!]!
    """
    fetch aggregated fields from the table: "schedule.StarredEvent"
    """
    schedule_StarredEvent_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [schedule_StarredEvent_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_StarredEvent_order_by!]
        """
        filter the rows returned
        """
        where: schedule_StarredEvent_bool_exp
    ): schedule_StarredEvent_aggregate!
    """
    fetch data from the table: "schedule.StarredEvent" using primary key columns
    """
    schedule_StarredEvent_by_pk(id: uuid!): schedule_StarredEvent
    """
    execute function "schedule.searchEvents" which returns "schedule.Event"
    """
    schedule_searchEvents(
        """
        input parameters for function "schedule.searchEvents"
        """
        args: schedule_searchEvents_args!
        """
        distinct select on columns
        """
        distinct_on: [schedule_Event_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_Event_order_by!]
        """
        filter the rows returned
        """
        where: schedule_Event_bool_exp
    ): [schedule_Event!]!
    """
    execute function "schedule.searchEvents" and query aggregates on result of table type "schedule.Event"
    """
    schedule_searchEvents_aggregate(
        """
        input parameters for function "schedule.searchEvents"
        """
        args: schedule_searchEvents_args!
        """
        distinct select on columns
        """
        distinct_on: [schedule_Event_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_Event_order_by!]
        """
        filter the rows returned
        """
        where: schedule_Event_bool_exp
    ): schedule_Event_aggregate!
    """
    fetch data from the table: "sponsor.Tier"
    """
    sponsor_Tier(
        """
        distinct select on columns
        """
        distinct_on: [sponsor_Tier_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [sponsor_Tier_order_by!]
        """
        filter the rows returned
        """
        where: sponsor_Tier_bool_exp
    ): [sponsor_Tier!]!
    """
    fetch data from the table: "sponsor.TierMember"
    """
    sponsor_TierMember(
        """
        distinct select on columns
        """
        distinct_on: [sponsor_TierMember_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [sponsor_TierMember_order_by!]
        """
        filter the rows returned
        """
        where: sponsor_TierMember_bool_exp
    ): [sponsor_TierMember!]!
    """
    fetch aggregated fields from the table: "sponsor.TierMember"
    """
    sponsor_TierMember_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [sponsor_TierMember_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [sponsor_TierMember_order_by!]
        """
        filter the rows returned
        """
        where: sponsor_TierMember_bool_exp
    ): sponsor_TierMember_aggregate!
    """
    fetch data from the table: "sponsor.TierMember" using primary key columns
    """
    sponsor_TierMember_by_pk(id: uuid!): sponsor_TierMember
    """
    fetch aggregated fields from the table: "sponsor.Tier"
    """
    sponsor_Tier_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [sponsor_Tier_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [sponsor_Tier_order_by!]
        """
        filter the rows returned
        """
        where: sponsor_Tier_bool_exp
    ): sponsor_Tier_aggregate!
    """
    fetch data from the table: "sponsor.Tier" using primary key columns
    """
    sponsor_Tier_by_pk(id: uuid!): sponsor_Tier
    """
    fetch data from the table: "system.Configuration"
    """
    system_Configuration(
        """
        distinct select on columns
        """
        distinct_on: [system_Configuration_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [system_Configuration_order_by!]
        """
        filter the rows returned
        """
        where: system_Configuration_bool_exp
    ): [system_Configuration!]!
    """
    fetch data from the table: "system.ConfigurationKey"
    """
    system_ConfigurationKey(
        """
        distinct select on columns
        """
        distinct_on: [system_ConfigurationKey_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [system_ConfigurationKey_order_by!]
        """
        filter the rows returned
        """
        where: system_ConfigurationKey_bool_exp
    ): [system_ConfigurationKey!]!
    """
    fetch aggregated fields from the table: "system.ConfigurationKey"
    """
    system_ConfigurationKey_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [system_ConfigurationKey_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [system_ConfigurationKey_order_by!]
        """
        filter the rows returned
        """
        where: system_ConfigurationKey_bool_exp
    ): system_ConfigurationKey_aggregate!
    """
    fetch data from the table: "system.ConfigurationKey" using primary key columns
    """
    system_ConfigurationKey_by_pk(name: String!): system_ConfigurationKey
    """
    fetch data from the table: "system.ConfigurationPermissionGrant"
    """
    system_ConfigurationPermissionGrant(
        """
        distinct select on columns
        """
        distinct_on: [system_ConfigurationPermissionGrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [system_ConfigurationPermissionGrant_order_by!]
        """
        filter the rows returned
        """
        where: system_ConfigurationPermissionGrant_bool_exp
    ): [system_ConfigurationPermissionGrant!]!
    """
    fetch aggregated fields from the table: "system.ConfigurationPermissionGrant"
    """
    system_ConfigurationPermissionGrant_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [system_ConfigurationPermissionGrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [system_ConfigurationPermissionGrant_order_by!]
        """
        filter the rows returned
        """
        where: system_ConfigurationPermissionGrant_bool_exp
    ): system_ConfigurationPermissionGrant_aggregate!
    """
    fetch data from the table: "system.ConfigurationPermissionGrant" using primary key columns
    """
    system_ConfigurationPermissionGrant_by_pk(id: uuid!): system_ConfigurationPermissionGrant
    """
    fetch aggregated fields from the table: "system.Configuration"
    """
    system_Configuration_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [system_Configuration_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [system_Configuration_order_by!]
        """
        filter the rows returned
        """
        where: system_Configuration_bool_exp
    ): system_Configuration_aggregate!
    """
    fetch data from the table: "system.Configuration" using primary key columns
    """
    system_Configuration_by_pk(key: system_ConfigurationKey_enum!): system_Configuration
    """
    fetch data from the table: "system.SuperUserPermission"
    """
    system_SuperUserPermission(
        """
        distinct select on columns
        """
        distinct_on: [system_SuperUserPermission_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [system_SuperUserPermission_order_by!]
        """
        filter the rows returned
        """
        where: system_SuperUserPermission_bool_exp
    ): [system_SuperUserPermission!]!
    """
    fetch data from the table: "system.SuperUserPermissionGrant"
    """
    system_SuperUserPermissionGrant(
        """
        distinct select on columns
        """
        distinct_on: [system_SuperUserPermissionGrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [system_SuperUserPermissionGrant_order_by!]
        """
        filter the rows returned
        """
        where: system_SuperUserPermissionGrant_bool_exp
    ): [system_SuperUserPermissionGrant!]!
    """
    fetch aggregated fields from the table: "system.SuperUserPermissionGrant"
    """
    system_SuperUserPermissionGrant_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [system_SuperUserPermissionGrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [system_SuperUserPermissionGrant_order_by!]
        """
        filter the rows returned
        """
        where: system_SuperUserPermissionGrant_bool_exp
    ): system_SuperUserPermissionGrant_aggregate!
    """
    fetch data from the table: "system.SuperUserPermissionGrant" using primary key columns
    """
    system_SuperUserPermissionGrant_by_pk(id: uuid!): system_SuperUserPermissionGrant
    """
    fetch aggregated fields from the table: "system.SuperUserPermission"
    """
    system_SuperUserPermission_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [system_SuperUserPermission_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [system_SuperUserPermission_order_by!]
        """
        filter the rows returned
        """
        where: system_SuperUserPermission_bool_exp
    ): system_SuperUserPermission_aggregate!
    """
    fetch data from the table: "system.SuperUserPermission" using primary key columns
    """
    system_SuperUserPermission_by_pk(name: String!): system_SuperUserPermission
    """
    fetch data from the table: "system.SuperUserState"
    """
    system_SuperUserState(
        """
        distinct select on columns
        """
        distinct_on: [system_SuperUserState_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [system_SuperUserState_order_by!]
        """
        filter the rows returned
        """
        where: system_SuperUserState_bool_exp
    ): [system_SuperUserState!]!
    """
    fetch aggregated fields from the table: "system.SuperUserState"
    """
    system_SuperUserState_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [system_SuperUserState_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [system_SuperUserState_order_by!]
        """
        filter the rows returned
        """
        where: system_SuperUserState_bool_exp
    ): system_SuperUserState_aggregate!
    transcribeGeneratePresignedUrl(languageCode: String!, sampleRate: String!): TranscribeGeneratePresignedUrlOutput!
    vapidPublicKey: VAPIDPublicKeyOutput!
    """
    fetch data from the table: "video.ChannelStack"
    """
    video_ChannelStack(
        """
        distinct select on columns
        """
        distinct_on: [video_ChannelStack_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_ChannelStack_order_by!]
        """
        filter the rows returned
        """
        where: video_ChannelStack_bool_exp
    ): [video_ChannelStack!]!
    """
    fetch aggregated fields from the table: "video.ChannelStack"
    """
    video_ChannelStack_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_ChannelStack_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_ChannelStack_order_by!]
        """
        filter the rows returned
        """
        where: video_ChannelStack_bool_exp
    ): video_ChannelStack_aggregate!
    """
    fetch data from the table: "video.ChannelStack" using primary key columns
    """
    video_ChannelStack_by_pk(id: uuid!): video_ChannelStack
    """
    fetch data from the table: "video.EventVonageSession"
    """
    video_EventVonageSession(
        """
        distinct select on columns
        """
        distinct_on: [video_EventVonageSession_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_EventVonageSession_order_by!]
        """
        filter the rows returned
        """
        where: video_EventVonageSession_bool_exp
    ): [video_EventVonageSession!]!
    """
    fetch aggregated fields from the table: "video.EventVonageSession"
    """
    video_EventVonageSession_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_EventVonageSession_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_EventVonageSession_order_by!]
        """
        filter the rows returned
        """
        where: video_EventVonageSession_bool_exp
    ): video_EventVonageSession_aggregate!
    """
    fetch data from the table: "video.EventVonageSession" using primary key columns
    """
    video_EventVonageSession_by_pk(id: uuid!): video_EventVonageSession
    """
    fetch data from the table: "video.ImmediateSwitch"
    """
    video_ImmediateSwitch(
        """
        distinct select on columns
        """
        distinct_on: [video_ImmediateSwitch_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_ImmediateSwitch_order_by!]
        """
        filter the rows returned
        """
        where: video_ImmediateSwitch_bool_exp
    ): [video_ImmediateSwitch!]!
    """
    fetch aggregated fields from the table: "video.ImmediateSwitch"
    """
    video_ImmediateSwitch_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_ImmediateSwitch_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_ImmediateSwitch_order_by!]
        """
        filter the rows returned
        """
        where: video_ImmediateSwitch_bool_exp
    ): video_ImmediateSwitch_aggregate!
    """
    fetch data from the table: "video.ImmediateSwitch" using primary key columns
    """
    video_ImmediateSwitch_by_pk(id: uuid!): video_ImmediateSwitch
    """
    fetch data from the table: "video.InputType"
    """
    video_InputType(
        """
        distinct select on columns
        """
        distinct_on: [video_InputType_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_InputType_order_by!]
        """
        filter the rows returned
        """
        where: video_InputType_bool_exp
    ): [video_InputType!]!
    """
    fetch aggregated fields from the table: "video.InputType"
    """
    video_InputType_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_InputType_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_InputType_order_by!]
        """
        filter the rows returned
        """
        where: video_InputType_bool_exp
    ): video_InputType_aggregate!
    """
    fetch data from the table: "video.InputType" using primary key columns
    """
    video_InputType_by_pk(name: String!): video_InputType
    """
    fetch data from the table: "video.MediaLiveChannelStatus"
    """
    video_MediaLiveChannelStatus(
        """
        distinct select on columns
        """
        distinct_on: [video_MediaLiveChannelStatus_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_MediaLiveChannelStatus_order_by!]
        """
        filter the rows returned
        """
        where: video_MediaLiveChannelStatus_bool_exp
    ): [video_MediaLiveChannelStatus!]!
    """
    fetch aggregated fields from the table: "video.MediaLiveChannelStatus"
    """
    video_MediaLiveChannelStatus_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_MediaLiveChannelStatus_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_MediaLiveChannelStatus_order_by!]
        """
        filter the rows returned
        """
        where: video_MediaLiveChannelStatus_bool_exp
    ): video_MediaLiveChannelStatus_aggregate!
    """
    fetch data from the table: "video.MediaLiveChannelStatus" using primary key columns
    """
    video_MediaLiveChannelStatus_by_pk(id: uuid!): video_MediaLiveChannelStatus
    """
    fetch data from the table: "video.RoomRtmpInput"
    """
    video_RoomRtmpInput(
        """
        distinct select on columns
        """
        distinct_on: [video_RoomRtmpInput_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_RoomRtmpInput_order_by!]
        """
        filter the rows returned
        """
        where: video_RoomRtmpInput_bool_exp
    ): [video_RoomRtmpInput!]!
    """
    fetch aggregated fields from the table: "video.RoomRtmpInput"
    """
    video_RoomRtmpInput_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_RoomRtmpInput_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_RoomRtmpInput_order_by!]
        """
        filter the rows returned
        """
        where: video_RoomRtmpInput_bool_exp
    ): video_RoomRtmpInput_aggregate!
    """
    fetch data from the table: "video.RoomRtmpInput" using primary key columns
    """
    video_RoomRtmpInput_by_pk(id: uuid!): video_RoomRtmpInput
    """
    fetch data from the table: "video.RoomRtmpOutput"
    """
    video_RoomRtmpOutput(
        """
        distinct select on columns
        """
        distinct_on: [video_RoomRtmpOutput_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_RoomRtmpOutput_order_by!]
        """
        filter the rows returned
        """
        where: video_RoomRtmpOutput_bool_exp
    ): [video_RoomRtmpOutput!]!
    """
    fetch aggregated fields from the table: "video.RoomRtmpOutput"
    """
    video_RoomRtmpOutput_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_RoomRtmpOutput_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_RoomRtmpOutput_order_by!]
        """
        filter the rows returned
        """
        where: video_RoomRtmpOutput_bool_exp
    ): video_RoomRtmpOutput_aggregate!
    """
    fetch data from the table: "video.RoomRtmpOutput" using primary key columns
    """
    video_RoomRtmpOutput_by_pk(id: uuid!): video_RoomRtmpOutput
    """
    fetch data from the table: "video.RtmpInput"
    """
    video_RtmpInput(
        """
        distinct select on columns
        """
        distinct_on: [video_RtmpInput_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_RtmpInput_order_by!]
        """
        filter the rows returned
        """
        where: video_RtmpInput_bool_exp
    ): [video_RtmpInput!]!
    """
    fetch aggregated fields from the table: "video.RtmpInput"
    """
    video_RtmpInput_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_RtmpInput_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_RtmpInput_order_by!]
        """
        filter the rows returned
        """
        where: video_RtmpInput_bool_exp
    ): video_RtmpInput_aggregate!
    """
    fetch data from the table: "video.RtmpInput" using primary key columns
    """
    video_RtmpInput_by_pk(name: String!): video_RtmpInput
    """
    fetch data from the table: "video.TranscriptionJob"
    """
    video_TranscriptionJob(
        """
        distinct select on columns
        """
        distinct_on: [video_TranscriptionJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_TranscriptionJob_order_by!]
        """
        filter the rows returned
        """
        where: video_TranscriptionJob_bool_exp
    ): [video_TranscriptionJob!]!
    """
    fetch aggregated fields from the table: "video.TranscriptionJob"
    """
    video_TranscriptionJob_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_TranscriptionJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_TranscriptionJob_order_by!]
        """
        filter the rows returned
        """
        where: video_TranscriptionJob_bool_exp
    ): video_TranscriptionJob_aggregate!
    """
    fetch data from the table: "video.TranscriptionJob" using primary key columns
    """
    video_TranscriptionJob_by_pk(id: uuid!): video_TranscriptionJob
    """
    fetch data from the table: "video.VideoRenderJob"
    """
    video_VideoRenderJob(
        """
        distinct select on columns
        """
        distinct_on: [video_VideoRenderJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_VideoRenderJob_order_by!]
        """
        filter the rows returned
        """
        where: video_VideoRenderJob_bool_exp
    ): [video_VideoRenderJob!]!
    """
    fetch aggregated fields from the table: "video.VideoRenderJob"
    """
    video_VideoRenderJob_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_VideoRenderJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_VideoRenderJob_order_by!]
        """
        filter the rows returned
        """
        where: video_VideoRenderJob_bool_exp
    ): video_VideoRenderJob_aggregate!
    """
    fetch data from the table: "video.VideoRenderJob" using primary key columns
    """
    video_VideoRenderJob_by_pk(id: uuid!): video_VideoRenderJob
    """
    fetch data from the table: "video.VonageParticipantStream"
    """
    video_VonageParticipantStream(
        """
        distinct select on columns
        """
        distinct_on: [video_VonageParticipantStream_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_VonageParticipantStream_order_by!]
        """
        filter the rows returned
        """
        where: video_VonageParticipantStream_bool_exp
    ): [video_VonageParticipantStream!]!
    """
    fetch aggregated fields from the table: "video.VonageParticipantStream"
    """
    video_VonageParticipantStream_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_VonageParticipantStream_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_VonageParticipantStream_order_by!]
        """
        filter the rows returned
        """
        where: video_VonageParticipantStream_bool_exp
    ): video_VonageParticipantStream_aggregate!
    """
    fetch data from the table: "video.VonageParticipantStream" using primary key columns
    """
    video_VonageParticipantStream_by_pk(id: uuid!): video_VonageParticipantStream
    """
    fetch data from the table: "video.VonageRoomRecording"
    """
    video_VonageRoomRecording(
        """
        distinct select on columns
        """
        distinct_on: [video_VonageRoomRecording_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_VonageRoomRecording_order_by!]
        """
        filter the rows returned
        """
        where: video_VonageRoomRecording_bool_exp
    ): [video_VonageRoomRecording!]!
    """
    fetch aggregated fields from the table: "video.VonageRoomRecording"
    """
    video_VonageRoomRecording_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_VonageRoomRecording_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_VonageRoomRecording_order_by!]
        """
        filter the rows returned
        """
        where: video_VonageRoomRecording_bool_exp
    ): video_VonageRoomRecording_aggregate!
    """
    fetch data from the table: "video.VonageRoomRecording" using primary key columns
    """
    video_VonageRoomRecording_by_pk(id: uuid!): video_VonageRoomRecording
    """
    fetch data from the table: "video.VonageSessionLayout"
    """
    video_VonageSessionLayout(
        """
        distinct select on columns
        """
        distinct_on: [video_VonageSessionLayout_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_VonageSessionLayout_order_by!]
        """
        filter the rows returned
        """
        where: video_VonageSessionLayout_bool_exp
    ): [video_VonageSessionLayout!]!
    """
    fetch aggregated fields from the table: "video.VonageSessionLayout"
    """
    video_VonageSessionLayout_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_VonageSessionLayout_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_VonageSessionLayout_order_by!]
        """
        filter the rows returned
        """
        where: video_VonageSessionLayout_bool_exp
    ): video_VonageSessionLayout_aggregate!
    """
    fetch data from the table: "video.VonageSessionLayout" using primary key columns
    """
    video_VonageSessionLayout_by_pk(id: uuid!): video_VonageSessionLayout
    """
    fetch data from the table: "video.VonageVideoPlaybackCommand"
    """
    video_VonageVideoPlaybackCommand(
        """
        distinct select on columns
        """
        distinct_on: [video_VonageVideoPlaybackCommand_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_VonageVideoPlaybackCommand_order_by!]
        """
        filter the rows returned
        """
        where: video_VonageVideoPlaybackCommand_bool_exp
    ): [video_VonageVideoPlaybackCommand!]!
    """
    fetch aggregated fields from the table: "video.VonageVideoPlaybackCommand"
    """
    video_VonageVideoPlaybackCommand_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_VonageVideoPlaybackCommand_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_VonageVideoPlaybackCommand_order_by!]
        """
        filter the rows returned
        """
        where: video_VonageVideoPlaybackCommand_bool_exp
    ): video_VonageVideoPlaybackCommand_aggregate!
    """
    fetch data from the table: "video.VonageVideoPlaybackCommand" using primary key columns
    """
    video_VonageVideoPlaybackCommand_by_pk(id: uuid!): video_VonageVideoPlaybackCommand
    """
    fetch data from the table: "video.YouTubeUpload"
    """
    video_YouTubeUpload(
        """
        distinct select on columns
        """
        distinct_on: [video_YouTubeUpload_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_YouTubeUpload_order_by!]
        """
        filter the rows returned
        """
        where: video_YouTubeUpload_bool_exp
    ): [video_YouTubeUpload!]!
    """
    fetch aggregated fields from the table: "video.YouTubeUpload"
    """
    video_YouTubeUpload_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_YouTubeUpload_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_YouTubeUpload_order_by!]
        """
        filter the rows returned
        """
        where: video_YouTubeUpload_bool_exp
    ): video_YouTubeUpload_aggregate!
    """
    fetch data from the table: "video.YouTubeUpload" using primary key columns
    """
    video_YouTubeUpload_by_pk(id: uuid!): video_YouTubeUpload
}

"""
columns and relationships of "registrant.GoogleAccount"
"""
type registrant_GoogleAccount {
    """
    An object relationship
    """
    conference: conference_Conference!
    conferenceId: uuid!
    createdAt: timestamptz!
    googleAccountEmail: String!
    id: uuid!
    """
    An object relationship
    """
    registrant: registrant_Registrant!
    registrantId: uuid!
    tokenData(
        """
        JSON select path
        """
        path: String
    ): jsonb!
    updatedAt: timestamptz!
    youTubeData(
        """
        JSON select path
        """
        path: String
    ): jsonb
}

"""
aggregated selection of "registrant.GoogleAccount"
"""
type registrant_GoogleAccount_aggregate {
    aggregate: registrant_GoogleAccount_aggregate_fields
    nodes: [registrant_GoogleAccount!]!
}

"""
aggregate fields of "registrant.GoogleAccount"
"""
type registrant_GoogleAccount_aggregate_fields {
    count(columns: [registrant_GoogleAccount_select_column!], distinct: Boolean): Int!
    max: registrant_GoogleAccount_max_fields
    min: registrant_GoogleAccount_min_fields
}

"""
append existing jsonb value of filtered columns with new jsonb value
"""
input registrant_GoogleAccount_append_input {
    tokenData: jsonb
    youTubeData: jsonb
}

"""
Boolean expression to filter rows from the table "registrant.GoogleAccount". All fields are combined with a logical 'AND'.
"""
input registrant_GoogleAccount_bool_exp {
    _and: [registrant_GoogleAccount_bool_exp!]
    _not: registrant_GoogleAccount_bool_exp
    _or: [registrant_GoogleAccount_bool_exp!]
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    createdAt: timestamptz_comparison_exp
    googleAccountEmail: String_comparison_exp
    id: uuid_comparison_exp
    registrant: registrant_Registrant_bool_exp
    registrantId: uuid_comparison_exp
    tokenData: jsonb_comparison_exp
    updatedAt: timestamptz_comparison_exp
    youTubeData: jsonb_comparison_exp
}

"""
unique or primary key constraints on table "registrant.GoogleAccount"
"""
enum registrant_GoogleAccount_constraint {
    """
    unique or primary key constraint
    """
    GoogleAccount_pkey
    """
    unique or primary key constraint
    """
    GoogleAccount_registrantId_googleAccountEmail_key
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input registrant_GoogleAccount_delete_at_path_input {
    tokenData: [String!]
    youTubeData: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input registrant_GoogleAccount_delete_elem_input {
    tokenData: Int
    youTubeData: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input registrant_GoogleAccount_delete_key_input {
    tokenData: String
    youTubeData: String
}

"""
input type for inserting data into table "registrant.GoogleAccount"
"""
input registrant_GoogleAccount_insert_input {
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    createdAt: timestamptz
    googleAccountEmail: String
    id: uuid
    registrant: registrant_Registrant_obj_rel_insert_input
    registrantId: uuid
    tokenData: jsonb
    updatedAt: timestamptz
    youTubeData: jsonb
}

"""
aggregate max on columns
"""
type registrant_GoogleAccount_max_fields {
    conferenceId: uuid
    createdAt: timestamptz
    googleAccountEmail: String
    id: uuid
    registrantId: uuid
    updatedAt: timestamptz
}

"""
aggregate min on columns
"""
type registrant_GoogleAccount_min_fields {
    conferenceId: uuid
    createdAt: timestamptz
    googleAccountEmail: String
    id: uuid
    registrantId: uuid
    updatedAt: timestamptz
}

"""
response of any mutation on the table "registrant.GoogleAccount"
"""
type registrant_GoogleAccount_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [registrant_GoogleAccount!]!
}

"""
input type for inserting object relation for remote table "registrant.GoogleAccount"
"""
input registrant_GoogleAccount_obj_rel_insert_input {
    data: registrant_GoogleAccount_insert_input!
    """
    on conflict condition
    """
    on_conflict: registrant_GoogleAccount_on_conflict
}

"""
on conflict condition type for table "registrant.GoogleAccount"
"""
input registrant_GoogleAccount_on_conflict {
    constraint: registrant_GoogleAccount_constraint!
    update_columns: [registrant_GoogleAccount_update_column!]! = []
    where: registrant_GoogleAccount_bool_exp
}

"""
Ordering options when selecting data from "registrant.GoogleAccount".
"""
input registrant_GoogleAccount_order_by {
    conference: conference_Conference_order_by
    conferenceId: order_by
    createdAt: order_by
    googleAccountEmail: order_by
    id: order_by
    registrant: registrant_Registrant_order_by
    registrantId: order_by
    tokenData: order_by
    updatedAt: order_by
    youTubeData: order_by
}

"""
primary key columns input for table: registrant_GoogleAccount
"""
input registrant_GoogleAccount_pk_columns_input {
    id: uuid!
}

"""
prepend existing jsonb value of filtered columns with new jsonb value
"""
input registrant_GoogleAccount_prepend_input {
    tokenData: jsonb
    youTubeData: jsonb
}

"""
select columns of table "registrant.GoogleAccount"
"""
enum registrant_GoogleAccount_select_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    googleAccountEmail
    """
    column name
    """
    id
    """
    column name
    """
    registrantId
    """
    column name
    """
    tokenData
    """
    column name
    """
    updatedAt
    """
    column name
    """
    youTubeData
}

"""
input type for updating data in table "registrant.GoogleAccount"
"""
input registrant_GoogleAccount_set_input {
    conferenceId: uuid
    createdAt: timestamptz
    googleAccountEmail: String
    id: uuid
    registrantId: uuid
    tokenData: jsonb
    updatedAt: timestamptz
    youTubeData: jsonb
}

"""
update columns of table "registrant.GoogleAccount"
"""
enum registrant_GoogleAccount_update_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    googleAccountEmail
    """
    column name
    """
    id
    """
    column name
    """
    registrantId
    """
    column name
    """
    tokenData
    """
    column name
    """
    updatedAt
    """
    column name
    """
    youTubeData
}

"""
columns and relationships of "registrant.Group"
"""
type registrant_Group {
    """
    An object relationship
    """
    conference: conference_Conference!
    conferenceId: uuid!
    createdAt: timestamptz!
    """
    An array relationship
    """
    groupRegistrants(
        """
        distinct select on columns
        """
        distinct_on: [registrant_GroupRegistrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_GroupRegistrant_order_by!]
        """
        filter the rows returned
        """
        where: registrant_GroupRegistrant_bool_exp
    ): [registrant_GroupRegistrant!]!
    """
    An aggregate relationship
    """
    groupRegistrants_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [registrant_GroupRegistrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_GroupRegistrant_order_by!]
        """
        filter the rows returned
        """
        where: registrant_GroupRegistrant_bool_exp
    ): registrant_GroupRegistrant_aggregate!
    id: uuid!
    name: String!
    """
    An object relationship
    """
    subconference: conference_Subconference
    subconferenceId: uuid
    updatedAt: timestamptz!
}

"""
columns and relationships of "registrant.GroupRegistrant"
"""
type registrant_GroupRegistrant {
    createdAt: timestamptz!
    """
    An object relationship
    """
    group: registrant_Group!
    groupId: uuid!
    id: uuid!
    """
    An object relationship
    """
    registrant: registrant_Registrant!
    registrantId: uuid!
    updatedAt: timestamptz!
}

"""
aggregated selection of "registrant.GroupRegistrant"
"""
type registrant_GroupRegistrant_aggregate {
    aggregate: registrant_GroupRegistrant_aggregate_fields
    nodes: [registrant_GroupRegistrant!]!
}

"""
aggregate fields of "registrant.GroupRegistrant"
"""
type registrant_GroupRegistrant_aggregate_fields {
    count(columns: [registrant_GroupRegistrant_select_column!], distinct: Boolean): Int!
    max: registrant_GroupRegistrant_max_fields
    min: registrant_GroupRegistrant_min_fields
}

"""
order by aggregate values of table "registrant.GroupRegistrant"
"""
input registrant_GroupRegistrant_aggregate_order_by {
    count: order_by
    max: registrant_GroupRegistrant_max_order_by
    min: registrant_GroupRegistrant_min_order_by
}

"""
input type for inserting array relation for remote table "registrant.GroupRegistrant"
"""
input registrant_GroupRegistrant_arr_rel_insert_input {
    data: [registrant_GroupRegistrant_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: registrant_GroupRegistrant_on_conflict
}

"""
Boolean expression to filter rows from the table "registrant.GroupRegistrant". All fields are combined with a logical 'AND'.
"""
input registrant_GroupRegistrant_bool_exp {
    _and: [registrant_GroupRegistrant_bool_exp!]
    _not: registrant_GroupRegistrant_bool_exp
    _or: [registrant_GroupRegistrant_bool_exp!]
    createdAt: timestamptz_comparison_exp
    group: registrant_Group_bool_exp
    groupId: uuid_comparison_exp
    id: uuid_comparison_exp
    registrant: registrant_Registrant_bool_exp
    registrantId: uuid_comparison_exp
    updatedAt: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "registrant.GroupRegistrant"
"""
enum registrant_GroupRegistrant_constraint {
    """
    unique or primary key constraint
    """
    GroupRegistrant_groupId_registrantId_key
    """
    unique or primary key constraint
    """
    GroupRegistrant_pkey
}

"""
input type for inserting data into table "registrant.GroupRegistrant"
"""
input registrant_GroupRegistrant_insert_input {
    createdAt: timestamptz
    group: registrant_Group_obj_rel_insert_input
    groupId: uuid
    id: uuid
    registrant: registrant_Registrant_obj_rel_insert_input
    registrantId: uuid
    updatedAt: timestamptz
}

"""
aggregate max on columns
"""
type registrant_GroupRegistrant_max_fields {
    createdAt: timestamptz
    groupId: uuid
    id: uuid
    registrantId: uuid
    updatedAt: timestamptz
}

"""
order by max() on columns of table "registrant.GroupRegistrant"
"""
input registrant_GroupRegistrant_max_order_by {
    createdAt: order_by
    groupId: order_by
    id: order_by
    registrantId: order_by
    updatedAt: order_by
}

"""
aggregate min on columns
"""
type registrant_GroupRegistrant_min_fields {
    createdAt: timestamptz
    groupId: uuid
    id: uuid
    registrantId: uuid
    updatedAt: timestamptz
}

"""
order by min() on columns of table "registrant.GroupRegistrant"
"""
input registrant_GroupRegistrant_min_order_by {
    createdAt: order_by
    groupId: order_by
    id: order_by
    registrantId: order_by
    updatedAt: order_by
}

"""
response of any mutation on the table "registrant.GroupRegistrant"
"""
type registrant_GroupRegistrant_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [registrant_GroupRegistrant!]!
}

"""
on conflict condition type for table "registrant.GroupRegistrant"
"""
input registrant_GroupRegistrant_on_conflict {
    constraint: registrant_GroupRegistrant_constraint!
    update_columns: [registrant_GroupRegistrant_update_column!]! = []
    where: registrant_GroupRegistrant_bool_exp
}

"""
Ordering options when selecting data from "registrant.GroupRegistrant".
"""
input registrant_GroupRegistrant_order_by {
    createdAt: order_by
    group: registrant_Group_order_by
    groupId: order_by
    id: order_by
    registrant: registrant_Registrant_order_by
    registrantId: order_by
    updatedAt: order_by
}

"""
primary key columns input for table: registrant_GroupRegistrant
"""
input registrant_GroupRegistrant_pk_columns_input {
    id: uuid!
}

"""
select columns of table "registrant.GroupRegistrant"
"""
enum registrant_GroupRegistrant_select_column {
    """
    column name
    """
    createdAt
    """
    column name
    """
    groupId
    """
    column name
    """
    id
    """
    column name
    """
    registrantId
    """
    column name
    """
    updatedAt
}

"""
input type for updating data in table "registrant.GroupRegistrant"
"""
input registrant_GroupRegistrant_set_input {
    createdAt: timestamptz
    groupId: uuid
    id: uuid
    registrantId: uuid
    updatedAt: timestamptz
}

"""
update columns of table "registrant.GroupRegistrant"
"""
enum registrant_GroupRegistrant_update_column {
    """
    column name
    """
    createdAt
    """
    column name
    """
    groupId
    """
    column name
    """
    id
    """
    column name
    """
    registrantId
    """
    column name
    """
    updatedAt
}

"""
aggregated selection of "registrant.Group"
"""
type registrant_Group_aggregate {
    aggregate: registrant_Group_aggregate_fields
    nodes: [registrant_Group!]!
}

"""
aggregate fields of "registrant.Group"
"""
type registrant_Group_aggregate_fields {
    count(columns: [registrant_Group_select_column!], distinct: Boolean): Int!
    max: registrant_Group_max_fields
    min: registrant_Group_min_fields
}

"""
Boolean expression to filter rows from the table "registrant.Group". All fields are combined with a logical 'AND'.
"""
input registrant_Group_bool_exp {
    _and: [registrant_Group_bool_exp!]
    _not: registrant_Group_bool_exp
    _or: [registrant_Group_bool_exp!]
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    createdAt: timestamptz_comparison_exp
    groupRegistrants: registrant_GroupRegistrant_bool_exp
    id: uuid_comparison_exp
    name: String_comparison_exp
    subconference: conference_Subconference_bool_exp
    subconferenceId: uuid_comparison_exp
    updatedAt: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "registrant.Group"
"""
enum registrant_Group_constraint {
    """
    unique or primary key constraint
    """
    Group_conferenceId_name_key
    """
    unique or primary key constraint
    """
    Group_pkey
}

"""
input type for inserting data into table "registrant.Group"
"""
input registrant_Group_insert_input {
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    createdAt: timestamptz
    groupRegistrants: registrant_GroupRegistrant_arr_rel_insert_input
    id: uuid
    name: String
    subconference: conference_Subconference_obj_rel_insert_input
    subconferenceId: uuid
    updatedAt: timestamptz
}

"""
aggregate max on columns
"""
type registrant_Group_max_fields {
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    name: String
    subconferenceId: uuid
    updatedAt: timestamptz
}

"""
aggregate min on columns
"""
type registrant_Group_min_fields {
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    name: String
    subconferenceId: uuid
    updatedAt: timestamptz
}

"""
response of any mutation on the table "registrant.Group"
"""
type registrant_Group_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [registrant_Group!]!
}

"""
input type for inserting object relation for remote table "registrant.Group"
"""
input registrant_Group_obj_rel_insert_input {
    data: registrant_Group_insert_input!
    """
    on conflict condition
    """
    on_conflict: registrant_Group_on_conflict
}

"""
on conflict condition type for table "registrant.Group"
"""
input registrant_Group_on_conflict {
    constraint: registrant_Group_constraint!
    update_columns: [registrant_Group_update_column!]! = []
    where: registrant_Group_bool_exp
}

"""
Ordering options when selecting data from "registrant.Group".
"""
input registrant_Group_order_by {
    conference: conference_Conference_order_by
    conferenceId: order_by
    createdAt: order_by
    groupRegistrants_aggregate: registrant_GroupRegistrant_aggregate_order_by
    id: order_by
    name: order_by
    subconference: conference_Subconference_order_by
    subconferenceId: order_by
    updatedAt: order_by
}

"""
primary key columns input for table: registrant_Group
"""
input registrant_Group_pk_columns_input {
    id: uuid!
}

"""
select columns of table "registrant.Group"
"""
enum registrant_Group_select_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    id
    """
    column name
    """
    name
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updatedAt
}

"""
input type for updating data in table "registrant.Group"
"""
input registrant_Group_set_input {
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    name: String
    subconferenceId: uuid
    updatedAt: timestamptz
}

"""
update columns of table "registrant.Group"
"""
enum registrant_Group_update_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    id
    """
    column name
    """
    name
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updatedAt
}

"""
columns and relationships of "registrant.Invitation"
"""
type registrant_Invitation {
    conferenceId: uuid!
    confirmationCode: uuid
    createdAt: timestamptz!
    """
    An array relationship
    """
    emails(
        """
        distinct select on columns
        """
        distinct_on: [Email_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [Email_order_by!]
        """
        filter the rows returned
        """
        where: Email_bool_exp
    ): [Email!]!
    """
    An aggregate relationship
    """
    emails_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [Email_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [Email_order_by!]
        """
        filter the rows returned
        """
        where: Email_bool_exp
    ): Email_aggregate!
    """
    A computed field, executes function "registrant.invitationHash"
    """
    hash: String
    id: uuid!
    inviteCode: uuid!
    invitedEmailAddress: String!
    linkToUserId: String
    """
    An object relationship
    """
    registrant: registrant_Registrant!
    registrantId: uuid!
    updatedAt: timestamptz!
    """
    An object relationship
    """
    user: User
}

"""
aggregated selection of "registrant.Invitation"
"""
type registrant_Invitation_aggregate {
    aggregate: registrant_Invitation_aggregate_fields
    nodes: [registrant_Invitation!]!
}

"""
aggregate fields of "registrant.Invitation"
"""
type registrant_Invitation_aggregate_fields {
    count(columns: [registrant_Invitation_select_column!], distinct: Boolean): Int!
    max: registrant_Invitation_max_fields
    min: registrant_Invitation_min_fields
}

"""
order by aggregate values of table "registrant.Invitation"
"""
input registrant_Invitation_aggregate_order_by {
    count: order_by
    max: registrant_Invitation_max_order_by
    min: registrant_Invitation_min_order_by
}

"""
input type for inserting array relation for remote table "registrant.Invitation"
"""
input registrant_Invitation_arr_rel_insert_input {
    data: [registrant_Invitation_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: registrant_Invitation_on_conflict
}

"""
Boolean expression to filter rows from the table "registrant.Invitation". All fields are combined with a logical 'AND'.
"""
input registrant_Invitation_bool_exp {
    _and: [registrant_Invitation_bool_exp!]
    _not: registrant_Invitation_bool_exp
    _or: [registrant_Invitation_bool_exp!]
    conferenceId: uuid_comparison_exp
    confirmationCode: uuid_comparison_exp
    createdAt: timestamptz_comparison_exp
    emails: Email_bool_exp
    hash: String_comparison_exp
    id: uuid_comparison_exp
    inviteCode: uuid_comparison_exp
    invitedEmailAddress: String_comparison_exp
    linkToUserId: String_comparison_exp
    registrant: registrant_Registrant_bool_exp
    registrantId: uuid_comparison_exp
    updatedAt: timestamptz_comparison_exp
    user: User_bool_exp
}

"""
unique or primary key constraints on table "registrant.Invitation"
"""
enum registrant_Invitation_constraint {
    """
    unique or primary key constraint
    """
    Invitation_confirmationCode_key
    """
    unique or primary key constraint
    """
    Invitation_inviteCode_key
    """
    unique or primary key constraint
    """
    Invitation_invitedEmailAddress_conferenceId_key
    """
    unique or primary key constraint
    """
    Invitation_pkey
    """
    unique or primary key constraint
    """
    Invitation_registrantId_key
}

"""
input type for inserting data into table "registrant.Invitation"
"""
input registrant_Invitation_insert_input {
    conferenceId: uuid
    confirmationCode: uuid
    createdAt: timestamptz
    emails: Email_arr_rel_insert_input
    id: uuid
    inviteCode: uuid
    invitedEmailAddress: String
    linkToUserId: String
    registrant: registrant_Registrant_obj_rel_insert_input
    registrantId: uuid
    updatedAt: timestamptz
    user: User_obj_rel_insert_input
}

"""
aggregate max on columns
"""
type registrant_Invitation_max_fields {
    conferenceId: uuid
    confirmationCode: uuid
    createdAt: timestamptz
    id: uuid
    inviteCode: uuid
    invitedEmailAddress: String
    linkToUserId: String
    registrantId: uuid
    updatedAt: timestamptz
}

"""
order by max() on columns of table "registrant.Invitation"
"""
input registrant_Invitation_max_order_by {
    conferenceId: order_by
    confirmationCode: order_by
    createdAt: order_by
    id: order_by
    inviteCode: order_by
    invitedEmailAddress: order_by
    linkToUserId: order_by
    registrantId: order_by
    updatedAt: order_by
}

"""
aggregate min on columns
"""
type registrant_Invitation_min_fields {
    conferenceId: uuid
    confirmationCode: uuid
    createdAt: timestamptz
    id: uuid
    inviteCode: uuid
    invitedEmailAddress: String
    linkToUserId: String
    registrantId: uuid
    updatedAt: timestamptz
}

"""
order by min() on columns of table "registrant.Invitation"
"""
input registrant_Invitation_min_order_by {
    conferenceId: order_by
    confirmationCode: order_by
    createdAt: order_by
    id: order_by
    inviteCode: order_by
    invitedEmailAddress: order_by
    linkToUserId: order_by
    registrantId: order_by
    updatedAt: order_by
}

"""
response of any mutation on the table "registrant.Invitation"
"""
type registrant_Invitation_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [registrant_Invitation!]!
}

"""
input type for inserting object relation for remote table "registrant.Invitation"
"""
input registrant_Invitation_obj_rel_insert_input {
    data: registrant_Invitation_insert_input!
    """
    on conflict condition
    """
    on_conflict: registrant_Invitation_on_conflict
}

"""
on conflict condition type for table "registrant.Invitation"
"""
input registrant_Invitation_on_conflict {
    constraint: registrant_Invitation_constraint!
    update_columns: [registrant_Invitation_update_column!]! = []
    where: registrant_Invitation_bool_exp
}

"""
Ordering options when selecting data from "registrant.Invitation".
"""
input registrant_Invitation_order_by {
    conferenceId: order_by
    confirmationCode: order_by
    createdAt: order_by
    emails_aggregate: Email_aggregate_order_by
    hash: order_by
    id: order_by
    inviteCode: order_by
    invitedEmailAddress: order_by
    linkToUserId: order_by
    registrant: registrant_Registrant_order_by
    registrantId: order_by
    updatedAt: order_by
    user: User_order_by
}

"""
primary key columns input for table: registrant_Invitation
"""
input registrant_Invitation_pk_columns_input {
    id: uuid!
}

"""
select columns of table "registrant.Invitation"
"""
enum registrant_Invitation_select_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    confirmationCode
    """
    column name
    """
    createdAt
    """
    column name
    """
    id
    """
    column name
    """
    inviteCode
    """
    column name
    """
    invitedEmailAddress
    """
    column name
    """
    linkToUserId
    """
    column name
    """
    registrantId
    """
    column name
    """
    updatedAt
}

"""
input type for updating data in table "registrant.Invitation"
"""
input registrant_Invitation_set_input {
    conferenceId: uuid
    confirmationCode: uuid
    createdAt: timestamptz
    id: uuid
    inviteCode: uuid
    invitedEmailAddress: String
    linkToUserId: String
    registrantId: uuid
    updatedAt: timestamptz
}

"""
update columns of table "registrant.Invitation"
"""
enum registrant_Invitation_update_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    confirmationCode
    """
    column name
    """
    createdAt
    """
    column name
    """
    id
    """
    column name
    """
    inviteCode
    """
    column name
    """
    invitedEmailAddress
    """
    column name
    """
    linkToUserId
    """
    column name
    """
    registrantId
    """
    column name
    """
    updatedAt
}

"""
columns and relationships of "registrant.Profile"
"""
type registrant_Profile {
    affiliation: String
    affiliationURL: String
    badges(
        """
        JSON select path
        """
        path: String
    ): jsonb
    bio: String
    country: String
    created_at: timestamptz!
    github: String
    hasBeenEdited: Boolean!
    photoS3BucketName: String
    photoS3BucketRegion: String
    photoS3ObjectName: String
    photoURL_50x50: String
    photoURL_350x350: String
    pronouns(
        """
        JSON select path
        """
        path: String
    ): jsonb
    """
    An object relationship
    """
    registrant: registrant_Registrant!
    registrantId: uuid!
    timezoneUTCOffset: Float
    twitter: String
    updated_at: timestamptz!
    website: String
}

"""
columns and relationships of "registrant.ProfileBadges"
"""
type registrant_ProfileBadges {
    colour: String
    name: String
    """
    An object relationship
    """
    registrant: registrant_Registrant
    registrantId: uuid
}

"""
aggregated selection of "registrant.ProfileBadges"
"""
type registrant_ProfileBadges_aggregate {
    aggregate: registrant_ProfileBadges_aggregate_fields
    nodes: [registrant_ProfileBadges!]!
}

"""
aggregate fields of "registrant.ProfileBadges"
"""
type registrant_ProfileBadges_aggregate_fields {
    count(columns: [registrant_ProfileBadges_select_column!], distinct: Boolean): Int!
    max: registrant_ProfileBadges_max_fields
    min: registrant_ProfileBadges_min_fields
}

"""
order by aggregate values of table "registrant.ProfileBadges"
"""
input registrant_ProfileBadges_aggregate_order_by {
    count: order_by
    max: registrant_ProfileBadges_max_order_by
    min: registrant_ProfileBadges_min_order_by
}

"""
input type for inserting array relation for remote table "registrant.ProfileBadges"
"""
input registrant_ProfileBadges_arr_rel_insert_input {
    data: [registrant_ProfileBadges_insert_input!]!
}

"""
Boolean expression to filter rows from the table "registrant.ProfileBadges". All fields are combined with a logical 'AND'.
"""
input registrant_ProfileBadges_bool_exp {
    _and: [registrant_ProfileBadges_bool_exp!]
    _not: registrant_ProfileBadges_bool_exp
    _or: [registrant_ProfileBadges_bool_exp!]
    colour: String_comparison_exp
    name: String_comparison_exp
    registrant: registrant_Registrant_bool_exp
    registrantId: uuid_comparison_exp
}

"""
input type for inserting data into table "registrant.ProfileBadges"
"""
input registrant_ProfileBadges_insert_input {
    colour: String
    name: String
    registrant: registrant_Registrant_obj_rel_insert_input
    registrantId: uuid
}

"""
aggregate max on columns
"""
type registrant_ProfileBadges_max_fields {
    colour: String
    name: String
    registrantId: uuid
}

"""
order by max() on columns of table "registrant.ProfileBadges"
"""
input registrant_ProfileBadges_max_order_by {
    colour: order_by
    name: order_by
    registrantId: order_by
}

"""
aggregate min on columns
"""
type registrant_ProfileBadges_min_fields {
    colour: String
    name: String
    registrantId: uuid
}

"""
order by min() on columns of table "registrant.ProfileBadges"
"""
input registrant_ProfileBadges_min_order_by {
    colour: order_by
    name: order_by
    registrantId: order_by
}

"""
Ordering options when selecting data from "registrant.ProfileBadges".
"""
input registrant_ProfileBadges_order_by {
    colour: order_by
    name: order_by
    registrant: registrant_Registrant_order_by
    registrantId: order_by
}

"""
select columns of table "registrant.ProfileBadges"
"""
enum registrant_ProfileBadges_select_column {
    """
    column name
    """
    colour
    """
    column name
    """
    name
    """
    column name
    """
    registrantId
}

"""
aggregated selection of "registrant.Profile"
"""
type registrant_Profile_aggregate {
    aggregate: registrant_Profile_aggregate_fields
    nodes: [registrant_Profile!]!
}

"""
aggregate fields of "registrant.Profile"
"""
type registrant_Profile_aggregate_fields {
    avg: registrant_Profile_avg_fields
    count(columns: [registrant_Profile_select_column!], distinct: Boolean): Int!
    max: registrant_Profile_max_fields
    min: registrant_Profile_min_fields
    stddev: registrant_Profile_stddev_fields
    stddev_pop: registrant_Profile_stddev_pop_fields
    stddev_samp: registrant_Profile_stddev_samp_fields
    sum: registrant_Profile_sum_fields
    var_pop: registrant_Profile_var_pop_fields
    var_samp: registrant_Profile_var_samp_fields
    variance: registrant_Profile_variance_fields
}

"""
append existing jsonb value of filtered columns with new jsonb value
"""
input registrant_Profile_append_input {
    badges: jsonb
    pronouns: jsonb
}

"""
aggregate avg on columns
"""
type registrant_Profile_avg_fields {
    timezoneUTCOffset: Float
}

"""
Boolean expression to filter rows from the table "registrant.Profile". All fields are combined with a logical 'AND'.
"""
input registrant_Profile_bool_exp {
    _and: [registrant_Profile_bool_exp!]
    _not: registrant_Profile_bool_exp
    _or: [registrant_Profile_bool_exp!]
    affiliation: String_comparison_exp
    affiliationURL: String_comparison_exp
    badges: jsonb_comparison_exp
    bio: String_comparison_exp
    country: String_comparison_exp
    created_at: timestamptz_comparison_exp
    github: String_comparison_exp
    hasBeenEdited: Boolean_comparison_exp
    photoS3BucketName: String_comparison_exp
    photoS3BucketRegion: String_comparison_exp
    photoS3ObjectName: String_comparison_exp
    photoURL_50x50: String_comparison_exp
    photoURL_350x350: String_comparison_exp
    pronouns: jsonb_comparison_exp
    registrant: registrant_Registrant_bool_exp
    registrantId: uuid_comparison_exp
    timezoneUTCOffset: Float_comparison_exp
    twitter: String_comparison_exp
    updated_at: timestamptz_comparison_exp
    website: String_comparison_exp
}

"""
unique or primary key constraints on table "registrant.Profile"
"""
enum registrant_Profile_constraint {
    """
    unique or primary key constraint
    """
    Profile_pkey
    """
    unique or primary key constraint
    """
    Profile_registrantId_key
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input registrant_Profile_delete_at_path_input {
    badges: [String!]
    pronouns: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input registrant_Profile_delete_elem_input {
    badges: Int
    pronouns: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input registrant_Profile_delete_key_input {
    badges: String
    pronouns: String
}

"""
input type for incrementing numeric columns in table "registrant.Profile"
"""
input registrant_Profile_inc_input {
    timezoneUTCOffset: Float
}

"""
input type for inserting data into table "registrant.Profile"
"""
input registrant_Profile_insert_input {
    affiliation: String
    affiliationURL: String
    badges: jsonb
    bio: String
    country: String
    created_at: timestamptz
    github: String
    hasBeenEdited: Boolean
    photoS3BucketName: String
    photoS3BucketRegion: String
    photoS3ObjectName: String
    photoURL_50x50: String
    photoURL_350x350: String
    pronouns: jsonb
    registrant: registrant_Registrant_obj_rel_insert_input
    registrantId: uuid
    timezoneUTCOffset: Float
    twitter: String
    updated_at: timestamptz
    website: String
}

"""
aggregate max on columns
"""
type registrant_Profile_max_fields {
    affiliation: String
    affiliationURL: String
    bio: String
    country: String
    created_at: timestamptz
    github: String
    photoS3BucketName: String
    photoS3BucketRegion: String
    photoS3ObjectName: String
    photoURL_50x50: String
    photoURL_350x350: String
    registrantId: uuid
    timezoneUTCOffset: Float
    twitter: String
    updated_at: timestamptz
    website: String
}

"""
aggregate min on columns
"""
type registrant_Profile_min_fields {
    affiliation: String
    affiliationURL: String
    bio: String
    country: String
    created_at: timestamptz
    github: String
    photoS3BucketName: String
    photoS3BucketRegion: String
    photoS3ObjectName: String
    photoURL_50x50: String
    photoURL_350x350: String
    registrantId: uuid
    timezoneUTCOffset: Float
    twitter: String
    updated_at: timestamptz
    website: String
}

"""
response of any mutation on the table "registrant.Profile"
"""
type registrant_Profile_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [registrant_Profile!]!
}

"""
input type for inserting object relation for remote table "registrant.Profile"
"""
input registrant_Profile_obj_rel_insert_input {
    data: registrant_Profile_insert_input!
    """
    on conflict condition
    """
    on_conflict: registrant_Profile_on_conflict
}

"""
on conflict condition type for table "registrant.Profile"
"""
input registrant_Profile_on_conflict {
    constraint: registrant_Profile_constraint!
    update_columns: [registrant_Profile_update_column!]! = []
    where: registrant_Profile_bool_exp
}

"""
Ordering options when selecting data from "registrant.Profile".
"""
input registrant_Profile_order_by {
    affiliation: order_by
    affiliationURL: order_by
    badges: order_by
    bio: order_by
    country: order_by
    created_at: order_by
    github: order_by
    hasBeenEdited: order_by
    photoS3BucketName: order_by
    photoS3BucketRegion: order_by
    photoS3ObjectName: order_by
    photoURL_50x50: order_by
    photoURL_350x350: order_by
    pronouns: order_by
    registrant: registrant_Registrant_order_by
    registrantId: order_by
    timezoneUTCOffset: order_by
    twitter: order_by
    updated_at: order_by
    website: order_by
}

"""
primary key columns input for table: registrant_Profile
"""
input registrant_Profile_pk_columns_input {
    registrantId: uuid!
}

"""
prepend existing jsonb value of filtered columns with new jsonb value
"""
input registrant_Profile_prepend_input {
    badges: jsonb
    pronouns: jsonb
}

"""
select columns of table "registrant.Profile"
"""
enum registrant_Profile_select_column {
    """
    column name
    """
    affiliation
    """
    column name
    """
    affiliationURL
    """
    column name
    """
    badges
    """
    column name
    """
    bio
    """
    column name
    """
    country
    """
    column name
    """
    created_at
    """
    column name
    """
    github
    """
    column name
    """
    hasBeenEdited
    """
    column name
    """
    photoS3BucketName
    """
    column name
    """
    photoS3BucketRegion
    """
    column name
    """
    photoS3ObjectName
    """
    column name
    """
    photoURL_50x50
    """
    column name
    """
    photoURL_350x350
    """
    column name
    """
    pronouns
    """
    column name
    """
    registrantId
    """
    column name
    """
    timezoneUTCOffset
    """
    column name
    """
    twitter
    """
    column name
    """
    updated_at
    """
    column name
    """
    website
}

"""
input type for updating data in table "registrant.Profile"
"""
input registrant_Profile_set_input {
    affiliation: String
    affiliationURL: String
    badges: jsonb
    bio: String
    country: String
    created_at: timestamptz
    github: String
    hasBeenEdited: Boolean
    photoS3BucketName: String
    photoS3BucketRegion: String
    photoS3ObjectName: String
    photoURL_50x50: String
    photoURL_350x350: String
    pronouns: jsonb
    registrantId: uuid
    timezoneUTCOffset: Float
    twitter: String
    updated_at: timestamptz
    website: String
}

"""
aggregate stddev on columns
"""
type registrant_Profile_stddev_fields {
    timezoneUTCOffset: Float
}

"""
aggregate stddev_pop on columns
"""
type registrant_Profile_stddev_pop_fields {
    timezoneUTCOffset: Float
}

"""
aggregate stddev_samp on columns
"""
type registrant_Profile_stddev_samp_fields {
    timezoneUTCOffset: Float
}

"""
aggregate sum on columns
"""
type registrant_Profile_sum_fields {
    timezoneUTCOffset: Float
}

"""
update columns of table "registrant.Profile"
"""
enum registrant_Profile_update_column {
    """
    column name
    """
    affiliation
    """
    column name
    """
    affiliationURL
    """
    column name
    """
    badges
    """
    column name
    """
    bio
    """
    column name
    """
    country
    """
    column name
    """
    created_at
    """
    column name
    """
    github
    """
    column name
    """
    hasBeenEdited
    """
    column name
    """
    photoS3BucketName
    """
    column name
    """
    photoS3BucketRegion
    """
    column name
    """
    photoS3ObjectName
    """
    column name
    """
    photoURL_50x50
    """
    column name
    """
    photoURL_350x350
    """
    column name
    """
    pronouns
    """
    column name
    """
    registrantId
    """
    column name
    """
    timezoneUTCOffset
    """
    column name
    """
    twitter
    """
    column name
    """
    updated_at
    """
    column name
    """
    website
}

"""
aggregate var_pop on columns
"""
type registrant_Profile_var_pop_fields {
    timezoneUTCOffset: Float
}

"""
aggregate var_samp on columns
"""
type registrant_Profile_var_samp_fields {
    timezoneUTCOffset: Float
}

"""
aggregate variance on columns
"""
type registrant_Profile_variance_fields {
    timezoneUTCOffset: Float
}

"""
columns and relationships of "registrant.Registrant"
"""
type registrant_Registrant {
    """
    An array relationship
    """
    badges(
        """
        distinct select on columns
        """
        distinct_on: [registrant_ProfileBadges_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_ProfileBadges_order_by!]
        """
        filter the rows returned
        """
        where: registrant_ProfileBadges_bool_exp
    ): [registrant_ProfileBadges!]!
    """
    An aggregate relationship
    """
    badges_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [registrant_ProfileBadges_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_ProfileBadges_order_by!]
        """
        filter the rows returned
        """
        where: registrant_ProfileBadges_bool_exp
    ): registrant_ProfileBadges_aggregate!
    """
    An object relationship
    """
    conference: conference_Conference!
    conferenceId: uuid!
    conferenceRole: registrant_RegistrantRole_enum!
    createdAt: timestamptz!
    displayName: String!
    """
    An array relationship
    """
    groupRegistrants(
        """
        distinct select on columns
        """
        distinct_on: [registrant_GroupRegistrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_GroupRegistrant_order_by!]
        """
        filter the rows returned
        """
        where: registrant_GroupRegistrant_bool_exp
    ): [registrant_GroupRegistrant!]!
    """
    An aggregate relationship
    """
    groupRegistrants_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [registrant_GroupRegistrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_GroupRegistrant_order_by!]
        """
        filter the rows returned
        """
        where: registrant_GroupRegistrant_bool_exp
    ): registrant_GroupRegistrant_aggregate!
    id: uuid!
    """
    An object relationship
    """
    invitation: registrant_Invitation
    """
    A computed field, executes function "registrant.InvitationEmailStatus"
    """
    invitationStatus(
        """
        JSON select path
        """
        path: String
    ): jsonb
    """
    A computed field, executes function "registrant.HasBeenInvited"
    """
    inviteSent: Boolean
    """
    An object relationship
    """
    profile: registrant_Profile
    """
    An array relationship
    """
    programPeople(
        """
        distinct select on columns
        """
        distinct_on: [collection_ProgramPerson_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [collection_ProgramPerson_order_by!]
        """
        filter the rows returned
        """
        where: collection_ProgramPerson_bool_exp
    ): [collection_ProgramPerson!]!
    """
    An aggregate relationship
    """
    programPeople_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [collection_ProgramPerson_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [collection_ProgramPerson_order_by!]
        """
        filter the rows returned
        """
        where: collection_ProgramPerson_bool_exp
    ): collection_ProgramPerson_aggregate!
    """
    An array relationship
    """
    roomParticipants(
        """
        distinct select on columns
        """
        distinct_on: [room_Participant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_Participant_order_by!]
        """
        filter the rows returned
        """
        where: room_Participant_bool_exp
    ): [room_Participant!]!
    """
    An aggregate relationship
    """
    roomParticipants_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_Participant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_Participant_order_by!]
        """
        filter the rows returned
        """
        where: room_Participant_bool_exp
    ): room_Participant_aggregate!
    """
    An array relationship
    """
    subconferenceMemberships(
        """
        distinct select on columns
        """
        distinct_on: [registrant_SubconferenceMembership_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_SubconferenceMembership_order_by!]
        """
        filter the rows returned
        """
        where: registrant_SubconferenceMembership_bool_exp
    ): [registrant_SubconferenceMembership!]!
    """
    An aggregate relationship
    """
    subconferenceMemberships_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [registrant_SubconferenceMembership_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_SubconferenceMembership_order_by!]
        """
        filter the rows returned
        """
        where: registrant_SubconferenceMembership_bool_exp
    ): registrant_SubconferenceMembership_aggregate!
    updatedAt: timestamptz!
    """
    An object relationship
    """
    user: User
    userId: String
}

"""
columns and relationships of "registrant.RegistrantRole"
"""
type registrant_RegistrantRole {
    description: String
    name: String!
}

"""
aggregated selection of "registrant.RegistrantRole"
"""
type registrant_RegistrantRole_aggregate {
    aggregate: registrant_RegistrantRole_aggregate_fields
    nodes: [registrant_RegistrantRole!]!
}

"""
aggregate fields of "registrant.RegistrantRole"
"""
type registrant_RegistrantRole_aggregate_fields {
    count(columns: [registrant_RegistrantRole_select_column!], distinct: Boolean): Int!
    max: registrant_RegistrantRole_max_fields
    min: registrant_RegistrantRole_min_fields
}

"""
Boolean expression to filter rows from the table "registrant.RegistrantRole". All fields are combined with a logical 'AND'.
"""
input registrant_RegistrantRole_bool_exp {
    _and: [registrant_RegistrantRole_bool_exp!]
    _not: registrant_RegistrantRole_bool_exp
    _or: [registrant_RegistrantRole_bool_exp!]
    description: String_comparison_exp
    name: String_comparison_exp
}

"""
unique or primary key constraints on table "registrant.RegistrantRole"
"""
enum registrant_RegistrantRole_constraint {
    """
    unique or primary key constraint
    """
    RegistrantRole_pkey
}

enum registrant_RegistrantRole_enum {
    ATTENDEE
    MODERATOR
    ORGANIZER
}

"""
Boolean expression to compare columns of type "registrant_RegistrantRole_enum". All fields are combined with logical 'AND'.
"""
input registrant_RegistrantRole_enum_comparison_exp {
    _eq: registrant_RegistrantRole_enum
    _in: [registrant_RegistrantRole_enum!]
    _is_null: Boolean
    _neq: registrant_RegistrantRole_enum
    _nin: [registrant_RegistrantRole_enum!]
}

"""
input type for inserting data into table "registrant.RegistrantRole"
"""
input registrant_RegistrantRole_insert_input {
    description: String
    name: String
}

"""
aggregate max on columns
"""
type registrant_RegistrantRole_max_fields {
    description: String
    name: String
}

"""
aggregate min on columns
"""
type registrant_RegistrantRole_min_fields {
    description: String
    name: String
}

"""
response of any mutation on the table "registrant.RegistrantRole"
"""
type registrant_RegistrantRole_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [registrant_RegistrantRole!]!
}

"""
on conflict condition type for table "registrant.RegistrantRole"
"""
input registrant_RegistrantRole_on_conflict {
    constraint: registrant_RegistrantRole_constraint!
    update_columns: [registrant_RegistrantRole_update_column!]! = []
    where: registrant_RegistrantRole_bool_exp
}

"""
Ordering options when selecting data from "registrant.RegistrantRole".
"""
input registrant_RegistrantRole_order_by {
    description: order_by
    name: order_by
}

"""
primary key columns input for table: registrant_RegistrantRole
"""
input registrant_RegistrantRole_pk_columns_input {
    name: String!
}

"""
select columns of table "registrant.RegistrantRole"
"""
enum registrant_RegistrantRole_select_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
input type for updating data in table "registrant.RegistrantRole"
"""
input registrant_RegistrantRole_set_input {
    description: String
    name: String
}

"""
update columns of table "registrant.RegistrantRole"
"""
enum registrant_RegistrantRole_update_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
aggregated selection of "registrant.Registrant"
"""
type registrant_Registrant_aggregate {
    aggregate: registrant_Registrant_aggregate_fields
    nodes: [registrant_Registrant!]!
}

"""
aggregate fields of "registrant.Registrant"
"""
type registrant_Registrant_aggregate_fields {
    count(columns: [registrant_Registrant_select_column!], distinct: Boolean): Int!
    max: registrant_Registrant_max_fields
    min: registrant_Registrant_min_fields
}

"""
order by aggregate values of table "registrant.Registrant"
"""
input registrant_Registrant_aggregate_order_by {
    count: order_by
    max: registrant_Registrant_max_order_by
    min: registrant_Registrant_min_order_by
}

"""
input type for inserting array relation for remote table "registrant.Registrant"
"""
input registrant_Registrant_arr_rel_insert_input {
    data: [registrant_Registrant_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: registrant_Registrant_on_conflict
}

"""
Boolean expression to filter rows from the table "registrant.Registrant". All fields are combined with a logical 'AND'.
"""
input registrant_Registrant_bool_exp {
    _and: [registrant_Registrant_bool_exp!]
    _not: registrant_Registrant_bool_exp
    _or: [registrant_Registrant_bool_exp!]
    badges: registrant_ProfileBadges_bool_exp
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    conferenceRole: registrant_RegistrantRole_enum_comparison_exp
    createdAt: timestamptz_comparison_exp
    displayName: String_comparison_exp
    groupRegistrants: registrant_GroupRegistrant_bool_exp
    id: uuid_comparison_exp
    invitation: registrant_Invitation_bool_exp
    invitationStatus: jsonb_comparison_exp
    inviteSent: Boolean_comparison_exp
    profile: registrant_Profile_bool_exp
    programPeople: collection_ProgramPerson_bool_exp
    roomParticipants: room_Participant_bool_exp
    subconferenceMemberships: registrant_SubconferenceMembership_bool_exp
    updatedAt: timestamptz_comparison_exp
    user: User_bool_exp
    userId: String_comparison_exp
}

"""
unique or primary key constraints on table "registrant.Registrant"
"""
enum registrant_Registrant_constraint {
    """
    unique or primary key constraint
    """
    Registrant_conferenceId_userId_key
    """
    unique or primary key constraint
    """
    Registrant_pkey
}

"""
input type for inserting data into table "registrant.Registrant"
"""
input registrant_Registrant_insert_input {
    badges: registrant_ProfileBadges_arr_rel_insert_input
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    conferenceRole: registrant_RegistrantRole_enum
    createdAt: timestamptz
    displayName: String
    groupRegistrants: registrant_GroupRegistrant_arr_rel_insert_input
    id: uuid
    invitation: registrant_Invitation_obj_rel_insert_input
    profile: registrant_Profile_obj_rel_insert_input
    programPeople: collection_ProgramPerson_arr_rel_insert_input
    roomParticipants: room_Participant_arr_rel_insert_input
    subconferenceMemberships: registrant_SubconferenceMembership_arr_rel_insert_input
    updatedAt: timestamptz
    user: User_obj_rel_insert_input
    userId: String
}

"""
aggregate max on columns
"""
type registrant_Registrant_max_fields {
    conferenceId: uuid
    createdAt: timestamptz
    displayName: String
    id: uuid
    updatedAt: timestamptz
    userId: String
}

"""
order by max() on columns of table "registrant.Registrant"
"""
input registrant_Registrant_max_order_by {
    conferenceId: order_by
    createdAt: order_by
    displayName: order_by
    id: order_by
    updatedAt: order_by
    userId: order_by
}

"""
aggregate min on columns
"""
type registrant_Registrant_min_fields {
    conferenceId: uuid
    createdAt: timestamptz
    displayName: String
    id: uuid
    updatedAt: timestamptz
    userId: String
}

"""
order by min() on columns of table "registrant.Registrant"
"""
input registrant_Registrant_min_order_by {
    conferenceId: order_by
    createdAt: order_by
    displayName: order_by
    id: order_by
    updatedAt: order_by
    userId: order_by
}

"""
response of any mutation on the table "registrant.Registrant"
"""
type registrant_Registrant_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [registrant_Registrant!]!
}

"""
input type for inserting object relation for remote table "registrant.Registrant"
"""
input registrant_Registrant_obj_rel_insert_input {
    data: registrant_Registrant_insert_input!
    """
    on conflict condition
    """
    on_conflict: registrant_Registrant_on_conflict
}

"""
on conflict condition type for table "registrant.Registrant"
"""
input registrant_Registrant_on_conflict {
    constraint: registrant_Registrant_constraint!
    update_columns: [registrant_Registrant_update_column!]! = []
    where: registrant_Registrant_bool_exp
}

"""
Ordering options when selecting data from "registrant.Registrant".
"""
input registrant_Registrant_order_by {
    badges_aggregate: registrant_ProfileBadges_aggregate_order_by
    conference: conference_Conference_order_by
    conferenceId: order_by
    conferenceRole: order_by
    createdAt: order_by
    displayName: order_by
    groupRegistrants_aggregate: registrant_GroupRegistrant_aggregate_order_by
    id: order_by
    invitation: registrant_Invitation_order_by
    invitationStatus: order_by
    inviteSent: order_by
    profile: registrant_Profile_order_by
    programPeople_aggregate: collection_ProgramPerson_aggregate_order_by
    roomParticipants_aggregate: room_Participant_aggregate_order_by
    subconferenceMemberships_aggregate: registrant_SubconferenceMembership_aggregate_order_by
    updatedAt: order_by
    user: User_order_by
    userId: order_by
}

"""
primary key columns input for table: registrant_Registrant
"""
input registrant_Registrant_pk_columns_input {
    id: uuid!
}

"""
select columns of table "registrant.Registrant"
"""
enum registrant_Registrant_select_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    conferenceRole
    """
    column name
    """
    createdAt
    """
    column name
    """
    displayName
    """
    column name
    """
    id
    """
    column name
    """
    updatedAt
    """
    column name
    """
    userId
}

"""
input type for updating data in table "registrant.Registrant"
"""
input registrant_Registrant_set_input {
    conferenceId: uuid
    conferenceRole: registrant_RegistrantRole_enum
    createdAt: timestamptz
    displayName: String
    id: uuid
    updatedAt: timestamptz
    userId: String
}

"""
update columns of table "registrant.Registrant"
"""
enum registrant_Registrant_update_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    conferenceRole
    """
    column name
    """
    createdAt
    """
    column name
    """
    displayName
    """
    column name
    """
    id
    """
    column name
    """
    updatedAt
    """
    column name
    """
    userId
}

"""
columns and relationships of "registrant.SavedVonageRoomRecording"
"""
type registrant_SavedVonageRoomRecording {
    created_at: timestamptz!
    id: uuid!
    isHidden: Boolean!
    """
    An object relationship
    """
    recording: video_VonageRoomRecording!
    recordingId: uuid!
    """
    An object relationship
    """
    registrant: registrant_Registrant!
    registrantId: uuid!
    updated_at: timestamptz!
}

"""
aggregated selection of "registrant.SavedVonageRoomRecording"
"""
type registrant_SavedVonageRoomRecording_aggregate {
    aggregate: registrant_SavedVonageRoomRecording_aggregate_fields
    nodes: [registrant_SavedVonageRoomRecording!]!
}

"""
aggregate fields of "registrant.SavedVonageRoomRecording"
"""
type registrant_SavedVonageRoomRecording_aggregate_fields {
    count(columns: [registrant_SavedVonageRoomRecording_select_column!], distinct: Boolean): Int!
    max: registrant_SavedVonageRoomRecording_max_fields
    min: registrant_SavedVonageRoomRecording_min_fields
}

"""
order by aggregate values of table "registrant.SavedVonageRoomRecording"
"""
input registrant_SavedVonageRoomRecording_aggregate_order_by {
    count: order_by
    max: registrant_SavedVonageRoomRecording_max_order_by
    min: registrant_SavedVonageRoomRecording_min_order_by
}

"""
input type for inserting array relation for remote table "registrant.SavedVonageRoomRecording"
"""
input registrant_SavedVonageRoomRecording_arr_rel_insert_input {
    data: [registrant_SavedVonageRoomRecording_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: registrant_SavedVonageRoomRecording_on_conflict
}

"""
Boolean expression to filter rows from the table "registrant.SavedVonageRoomRecording". All fields are combined with a logical 'AND'.
"""
input registrant_SavedVonageRoomRecording_bool_exp {
    _and: [registrant_SavedVonageRoomRecording_bool_exp!]
    _not: registrant_SavedVonageRoomRecording_bool_exp
    _or: [registrant_SavedVonageRoomRecording_bool_exp!]
    created_at: timestamptz_comparison_exp
    id: uuid_comparison_exp
    isHidden: Boolean_comparison_exp
    recording: video_VonageRoomRecording_bool_exp
    recordingId: uuid_comparison_exp
    registrant: registrant_Registrant_bool_exp
    registrantId: uuid_comparison_exp
    updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "registrant.SavedVonageRoomRecording"
"""
enum registrant_SavedVonageRoomRecording_constraint {
    """
    unique or primary key constraint
    """
    SavedVonageRoomRecording_pkey
    """
    unique or primary key constraint
    """
    SavedVonageRoomRecording_recordingId_registrantId_key
}

"""
input type for inserting data into table "registrant.SavedVonageRoomRecording"
"""
input registrant_SavedVonageRoomRecording_insert_input {
    created_at: timestamptz
    id: uuid
    isHidden: Boolean
    recording: video_VonageRoomRecording_obj_rel_insert_input
    recordingId: uuid
    registrant: registrant_Registrant_obj_rel_insert_input
    registrantId: uuid
    updated_at: timestamptz
}

"""
aggregate max on columns
"""
type registrant_SavedVonageRoomRecording_max_fields {
    created_at: timestamptz
    id: uuid
    recordingId: uuid
    registrantId: uuid
    updated_at: timestamptz
}

"""
order by max() on columns of table "registrant.SavedVonageRoomRecording"
"""
input registrant_SavedVonageRoomRecording_max_order_by {
    created_at: order_by
    id: order_by
    recordingId: order_by
    registrantId: order_by
    updated_at: order_by
}

"""
aggregate min on columns
"""
type registrant_SavedVonageRoomRecording_min_fields {
    created_at: timestamptz
    id: uuid
    recordingId: uuid
    registrantId: uuid
    updated_at: timestamptz
}

"""
order by min() on columns of table "registrant.SavedVonageRoomRecording"
"""
input registrant_SavedVonageRoomRecording_min_order_by {
    created_at: order_by
    id: order_by
    recordingId: order_by
    registrantId: order_by
    updated_at: order_by
}

"""
response of any mutation on the table "registrant.SavedVonageRoomRecording"
"""
type registrant_SavedVonageRoomRecording_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [registrant_SavedVonageRoomRecording!]!
}

"""
on conflict condition type for table "registrant.SavedVonageRoomRecording"
"""
input registrant_SavedVonageRoomRecording_on_conflict {
    constraint: registrant_SavedVonageRoomRecording_constraint!
    update_columns: [registrant_SavedVonageRoomRecording_update_column!]! = []
    where: registrant_SavedVonageRoomRecording_bool_exp
}

"""
Ordering options when selecting data from "registrant.SavedVonageRoomRecording".
"""
input registrant_SavedVonageRoomRecording_order_by {
    created_at: order_by
    id: order_by
    isHidden: order_by
    recording: video_VonageRoomRecording_order_by
    recordingId: order_by
    registrant: registrant_Registrant_order_by
    registrantId: order_by
    updated_at: order_by
}

"""
primary key columns input for table: registrant_SavedVonageRoomRecording
"""
input registrant_SavedVonageRoomRecording_pk_columns_input {
    id: uuid!
}

"""
select columns of table "registrant.SavedVonageRoomRecording"
"""
enum registrant_SavedVonageRoomRecording_select_column {
    """
    column name
    """
    created_at
    """
    column name
    """
    id
    """
    column name
    """
    isHidden
    """
    column name
    """
    recordingId
    """
    column name
    """
    registrantId
    """
    column name
    """
    updated_at
}

"""
input type for updating data in table "registrant.SavedVonageRoomRecording"
"""
input registrant_SavedVonageRoomRecording_set_input {
    created_at: timestamptz
    id: uuid
    isHidden: Boolean
    recordingId: uuid
    registrantId: uuid
    updated_at: timestamptz
}

"""
update columns of table "registrant.SavedVonageRoomRecording"
"""
enum registrant_SavedVonageRoomRecording_update_column {
    """
    column name
    """
    created_at
    """
    column name
    """
    id
    """
    column name
    """
    isHidden
    """
    column name
    """
    recordingId
    """
    column name
    """
    registrantId
    """
    column name
    """
    updated_at
}

"""
columns and relationships of "registrant.SubconferenceMembership"
"""
type registrant_SubconferenceMembership {
    created_at: timestamptz!
    id: uuid!
    """
    An object relationship
    """
    registrant: registrant_Registrant!
    registrantId: uuid!
    role: registrant_RegistrantRole_enum!
    """
    An object relationship
    """
    subconference: conference_Subconference!
    subconferenceId: uuid!
    updated_at: timestamptz!
}

"""
aggregated selection of "registrant.SubconferenceMembership"
"""
type registrant_SubconferenceMembership_aggregate {
    aggregate: registrant_SubconferenceMembership_aggregate_fields
    nodes: [registrant_SubconferenceMembership!]!
}

"""
aggregate fields of "registrant.SubconferenceMembership"
"""
type registrant_SubconferenceMembership_aggregate_fields {
    count(columns: [registrant_SubconferenceMembership_select_column!], distinct: Boolean): Int!
    max: registrant_SubconferenceMembership_max_fields
    min: registrant_SubconferenceMembership_min_fields
}

"""
order by aggregate values of table "registrant.SubconferenceMembership"
"""
input registrant_SubconferenceMembership_aggregate_order_by {
    count: order_by
    max: registrant_SubconferenceMembership_max_order_by
    min: registrant_SubconferenceMembership_min_order_by
}

"""
input type for inserting array relation for remote table "registrant.SubconferenceMembership"
"""
input registrant_SubconferenceMembership_arr_rel_insert_input {
    data: [registrant_SubconferenceMembership_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: registrant_SubconferenceMembership_on_conflict
}

"""
Boolean expression to filter rows from the table "registrant.SubconferenceMembership". All fields are combined with a logical 'AND'.
"""
input registrant_SubconferenceMembership_bool_exp {
    _and: [registrant_SubconferenceMembership_bool_exp!]
    _not: registrant_SubconferenceMembership_bool_exp
    _or: [registrant_SubconferenceMembership_bool_exp!]
    created_at: timestamptz_comparison_exp
    id: uuid_comparison_exp
    registrant: registrant_Registrant_bool_exp
    registrantId: uuid_comparison_exp
    role: registrant_RegistrantRole_enum_comparison_exp
    subconference: conference_Subconference_bool_exp
    subconferenceId: uuid_comparison_exp
    updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "registrant.SubconferenceMembership"
"""
enum registrant_SubconferenceMembership_constraint {
    """
    unique or primary key constraint
    """
    SubconferenceMembership_pkey
    """
    unique or primary key constraint
    """
    SubconferenceMembership_subconferenceId_registrantId_key
}

"""
input type for inserting data into table "registrant.SubconferenceMembership"
"""
input registrant_SubconferenceMembership_insert_input {
    created_at: timestamptz
    id: uuid
    registrant: registrant_Registrant_obj_rel_insert_input
    registrantId: uuid
    role: registrant_RegistrantRole_enum
    subconference: conference_Subconference_obj_rel_insert_input
    subconferenceId: uuid
    updated_at: timestamptz
}

"""
aggregate max on columns
"""
type registrant_SubconferenceMembership_max_fields {
    created_at: timestamptz
    id: uuid
    registrantId: uuid
    subconferenceId: uuid
    updated_at: timestamptz
}

"""
order by max() on columns of table "registrant.SubconferenceMembership"
"""
input registrant_SubconferenceMembership_max_order_by {
    created_at: order_by
    id: order_by
    registrantId: order_by
    subconferenceId: order_by
    updated_at: order_by
}

"""
aggregate min on columns
"""
type registrant_SubconferenceMembership_min_fields {
    created_at: timestamptz
    id: uuid
    registrantId: uuid
    subconferenceId: uuid
    updated_at: timestamptz
}

"""
order by min() on columns of table "registrant.SubconferenceMembership"
"""
input registrant_SubconferenceMembership_min_order_by {
    created_at: order_by
    id: order_by
    registrantId: order_by
    subconferenceId: order_by
    updated_at: order_by
}

"""
response of any mutation on the table "registrant.SubconferenceMembership"
"""
type registrant_SubconferenceMembership_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [registrant_SubconferenceMembership!]!
}

"""
on conflict condition type for table "registrant.SubconferenceMembership"
"""
input registrant_SubconferenceMembership_on_conflict {
    constraint: registrant_SubconferenceMembership_constraint!
    update_columns: [registrant_SubconferenceMembership_update_column!]! = []
    where: registrant_SubconferenceMembership_bool_exp
}

"""
Ordering options when selecting data from "registrant.SubconferenceMembership".
"""
input registrant_SubconferenceMembership_order_by {
    created_at: order_by
    id: order_by
    registrant: registrant_Registrant_order_by
    registrantId: order_by
    role: order_by
    subconference: conference_Subconference_order_by
    subconferenceId: order_by
    updated_at: order_by
}

"""
primary key columns input for table: registrant_SubconferenceMembership
"""
input registrant_SubconferenceMembership_pk_columns_input {
    id: uuid!
}

"""
select columns of table "registrant.SubconferenceMembership"
"""
enum registrant_SubconferenceMembership_select_column {
    """
    column name
    """
    created_at
    """
    column name
    """
    id
    """
    column name
    """
    registrantId
    """
    column name
    """
    role
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updated_at
}

"""
input type for updating data in table "registrant.SubconferenceMembership"
"""
input registrant_SubconferenceMembership_set_input {
    created_at: timestamptz
    id: uuid
    registrantId: uuid
    role: registrant_RegistrantRole_enum
    subconferenceId: uuid
    updated_at: timestamptz
}

"""
update columns of table "registrant.SubconferenceMembership"
"""
enum registrant_SubconferenceMembership_update_column {
    """
    column name
    """
    created_at
    """
    column name
    """
    id
    """
    column name
    """
    registrantId
    """
    column name
    """
    role
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updated_at
}

input registrant_searchRegistrants_args {
    conferenceid: uuid
    search: String
}

"""
columns and relationships of "room.Backend"
"""
type room_Backend {
    description: String!
    name: String!
}

"""
aggregated selection of "room.Backend"
"""
type room_Backend_aggregate {
    aggregate: room_Backend_aggregate_fields
    nodes: [room_Backend!]!
}

"""
aggregate fields of "room.Backend"
"""
type room_Backend_aggregate_fields {
    count(columns: [room_Backend_select_column!], distinct: Boolean): Int!
    max: room_Backend_max_fields
    min: room_Backend_min_fields
}

"""
Boolean expression to filter rows from the table "room.Backend". All fields are combined with a logical 'AND'.
"""
input room_Backend_bool_exp {
    _and: [room_Backend_bool_exp!]
    _not: room_Backend_bool_exp
    _or: [room_Backend_bool_exp!]
    description: String_comparison_exp
    name: String_comparison_exp
}

"""
unique or primary key constraints on table "room.Backend"
"""
enum room_Backend_constraint {
    """
    unique or primary key constraint
    """
    VideoRoomBackend_pkey
}

enum room_Backend_enum {
    """
    AWS Chime SDK
    """
    CHIME
    """
    Vonage Video API
    """
    VONAGE
}

"""
Boolean expression to compare columns of type "room_Backend_enum". All fields are combined with logical 'AND'.
"""
input room_Backend_enum_comparison_exp {
    _eq: room_Backend_enum
    _in: [room_Backend_enum!]
    _is_null: Boolean
    _neq: room_Backend_enum
    _nin: [room_Backend_enum!]
}

"""
input type for inserting data into table "room.Backend"
"""
input room_Backend_insert_input {
    description: String
    name: String
}

"""
aggregate max on columns
"""
type room_Backend_max_fields {
    description: String
    name: String
}

"""
aggregate min on columns
"""
type room_Backend_min_fields {
    description: String
    name: String
}

"""
response of any mutation on the table "room.Backend"
"""
type room_Backend_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [room_Backend!]!
}

"""
on conflict condition type for table "room.Backend"
"""
input room_Backend_on_conflict {
    constraint: room_Backend_constraint!
    update_columns: [room_Backend_update_column!]! = []
    where: room_Backend_bool_exp
}

"""
Ordering options when selecting data from "room.Backend".
"""
input room_Backend_order_by {
    description: order_by
    name: order_by
}

"""
primary key columns input for table: room_Backend
"""
input room_Backend_pk_columns_input {
    name: String!
}

"""
select columns of table "room.Backend"
"""
enum room_Backend_select_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
input type for updating data in table "room.Backend"
"""
input room_Backend_set_input {
    description: String
    name: String
}

"""
update columns of table "room.Backend"
"""
enum room_Backend_update_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
columns and relationships of "room.ChimeMeeting"
"""
type room_ChimeMeeting {
    chimeMeetingData(
        """
        JSON select path
        """
        path: String
    ): jsonb!
    chimeMeetingId: String!
    """
    An object relationship
    """
    conference: conference_Conference
    conferenceId: uuid!
    createdAt: timestamptz!
    id: uuid!
    """
    An object relationship
    """
    room: room_Room
    roomId: uuid!
    subconferenceId: uuid
    updatedAt: timestamptz!
}

"""
aggregated selection of "room.ChimeMeeting"
"""
type room_ChimeMeeting_aggregate {
    aggregate: room_ChimeMeeting_aggregate_fields
    nodes: [room_ChimeMeeting!]!
}

"""
aggregate fields of "room.ChimeMeeting"
"""
type room_ChimeMeeting_aggregate_fields {
    count(columns: [room_ChimeMeeting_select_column!], distinct: Boolean): Int!
    max: room_ChimeMeeting_max_fields
    min: room_ChimeMeeting_min_fields
}

"""
append existing jsonb value of filtered columns with new jsonb value
"""
input room_ChimeMeeting_append_input {
    chimeMeetingData: jsonb
}

"""
Boolean expression to filter rows from the table "room.ChimeMeeting". All fields are combined with a logical 'AND'.
"""
input room_ChimeMeeting_bool_exp {
    _and: [room_ChimeMeeting_bool_exp!]
    _not: room_ChimeMeeting_bool_exp
    _or: [room_ChimeMeeting_bool_exp!]
    chimeMeetingData: jsonb_comparison_exp
    chimeMeetingId: String_comparison_exp
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    createdAt: timestamptz_comparison_exp
    id: uuid_comparison_exp
    room: room_Room_bool_exp
    roomId: uuid_comparison_exp
    subconferenceId: uuid_comparison_exp
    updatedAt: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "room.ChimeMeeting"
"""
enum room_ChimeMeeting_constraint {
    """
    unique or primary key constraint
    """
    ChimeMeeting_pkey
    """
    unique or primary key constraint
    """
    ChimeMeeting_roomId_key
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input room_ChimeMeeting_delete_at_path_input {
    chimeMeetingData: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input room_ChimeMeeting_delete_elem_input {
    chimeMeetingData: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input room_ChimeMeeting_delete_key_input {
    chimeMeetingData: String
}

"""
input type for inserting data into table "room.ChimeMeeting"
"""
input room_ChimeMeeting_insert_input {
    chimeMeetingData: jsonb
    chimeMeetingId: String
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    room: room_Room_obj_rel_insert_input
    roomId: uuid
    subconferenceId: uuid
    updatedAt: timestamptz
}

"""
aggregate max on columns
"""
type room_ChimeMeeting_max_fields {
    chimeMeetingId: String
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    roomId: uuid
    subconferenceId: uuid
    updatedAt: timestamptz
}

"""
aggregate min on columns
"""
type room_ChimeMeeting_min_fields {
    chimeMeetingId: String
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    roomId: uuid
    subconferenceId: uuid
    updatedAt: timestamptz
}

"""
response of any mutation on the table "room.ChimeMeeting"
"""
type room_ChimeMeeting_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [room_ChimeMeeting!]!
}

"""
input type for inserting object relation for remote table "room.ChimeMeeting"
"""
input room_ChimeMeeting_obj_rel_insert_input {
    data: room_ChimeMeeting_insert_input!
    """
    on conflict condition
    """
    on_conflict: room_ChimeMeeting_on_conflict
}

"""
on conflict condition type for table "room.ChimeMeeting"
"""
input room_ChimeMeeting_on_conflict {
    constraint: room_ChimeMeeting_constraint!
    update_columns: [room_ChimeMeeting_update_column!]! = []
    where: room_ChimeMeeting_bool_exp
}

"""
Ordering options when selecting data from "room.ChimeMeeting".
"""
input room_ChimeMeeting_order_by {
    chimeMeetingData: order_by
    chimeMeetingId: order_by
    conference: conference_Conference_order_by
    conferenceId: order_by
    createdAt: order_by
    id: order_by
    room: room_Room_order_by
    roomId: order_by
    subconferenceId: order_by
    updatedAt: order_by
}

"""
primary key columns input for table: room_ChimeMeeting
"""
input room_ChimeMeeting_pk_columns_input {
    id: uuid!
}

"""
prepend existing jsonb value of filtered columns with new jsonb value
"""
input room_ChimeMeeting_prepend_input {
    chimeMeetingData: jsonb
}

"""
select columns of table "room.ChimeMeeting"
"""
enum room_ChimeMeeting_select_column {
    """
    column name
    """
    chimeMeetingData
    """
    column name
    """
    chimeMeetingId
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    id
    """
    column name
    """
    roomId
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updatedAt
}

"""
input type for updating data in table "room.ChimeMeeting"
"""
input room_ChimeMeeting_set_input {
    chimeMeetingData: jsonb
    chimeMeetingId: String
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    roomId: uuid
    subconferenceId: uuid
    updatedAt: timestamptz
}

"""
update columns of table "room.ChimeMeeting"
"""
enum room_ChimeMeeting_update_column {
    """
    column name
    """
    chimeMeetingData
    """
    column name
    """
    chimeMeetingId
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    id
    """
    column name
    """
    roomId
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updatedAt
}

"""
columns and relationships of "room.LivestreamDurations"
"""
type room_LivestreamDurations {
    """
    An object relationship
    """
    conference: conference_Conference
    conferenceId: uuid
    """
    An object relationship
    """
    room: room_Room
    roomId: uuid
    subconferenceId: uuid
    sum: bigint
}

"""
aggregated selection of "room.LivestreamDurations"
"""
type room_LivestreamDurations_aggregate {
    aggregate: room_LivestreamDurations_aggregate_fields
    nodes: [room_LivestreamDurations!]!
}

"""
aggregate fields of "room.LivestreamDurations"
"""
type room_LivestreamDurations_aggregate_fields {
    avg: room_LivestreamDurations_avg_fields
    count(columns: [room_LivestreamDurations_select_column!], distinct: Boolean): Int!
    max: room_LivestreamDurations_max_fields
    min: room_LivestreamDurations_min_fields
    stddev: room_LivestreamDurations_stddev_fields
    stddev_pop: room_LivestreamDurations_stddev_pop_fields
    stddev_samp: room_LivestreamDurations_stddev_samp_fields
    sum: room_LivestreamDurations_sum_fields
    var_pop: room_LivestreamDurations_var_pop_fields
    var_samp: room_LivestreamDurations_var_samp_fields
    variance: room_LivestreamDurations_variance_fields
}

"""
aggregate avg on columns
"""
type room_LivestreamDurations_avg_fields {
    sum: Float
}

"""
Boolean expression to filter rows from the table "room.LivestreamDurations". All fields are combined with a logical 'AND'.
"""
input room_LivestreamDurations_bool_exp {
    _and: [room_LivestreamDurations_bool_exp!]
    _not: room_LivestreamDurations_bool_exp
    _or: [room_LivestreamDurations_bool_exp!]
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    room: room_Room_bool_exp
    roomId: uuid_comparison_exp
    subconferenceId: uuid_comparison_exp
    sum: bigint_comparison_exp
}

"""
input type for inserting data into table "room.LivestreamDurations"
"""
input room_LivestreamDurations_insert_input {
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    room: room_Room_obj_rel_insert_input
    roomId: uuid
    subconferenceId: uuid
    sum: bigint
}

"""
aggregate max on columns
"""
type room_LivestreamDurations_max_fields {
    conferenceId: uuid
    roomId: uuid
    subconferenceId: uuid
    sum: bigint
}

"""
aggregate min on columns
"""
type room_LivestreamDurations_min_fields {
    conferenceId: uuid
    roomId: uuid
    subconferenceId: uuid
    sum: bigint
}

"""
input type for inserting object relation for remote table "room.LivestreamDurations"
"""
input room_LivestreamDurations_obj_rel_insert_input {
    data: room_LivestreamDurations_insert_input!
}

"""
Ordering options when selecting data from "room.LivestreamDurations".
"""
input room_LivestreamDurations_order_by {
    conference: conference_Conference_order_by
    conferenceId: order_by
    room: room_Room_order_by
    roomId: order_by
    subconferenceId: order_by
    sum: order_by
}

"""
select columns of table "room.LivestreamDurations"
"""
enum room_LivestreamDurations_select_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    roomId
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    sum
}

"""
aggregate stddev on columns
"""
type room_LivestreamDurations_stddev_fields {
    sum: Float
}

"""
aggregate stddev_pop on columns
"""
type room_LivestreamDurations_stddev_pop_fields {
    sum: Float
}

"""
aggregate stddev_samp on columns
"""
type room_LivestreamDurations_stddev_samp_fields {
    sum: Float
}

"""
aggregate sum on columns
"""
type room_LivestreamDurations_sum_fields {
    sum: bigint
}

"""
aggregate var_pop on columns
"""
type room_LivestreamDurations_var_pop_fields {
    sum: Float
}

"""
aggregate var_samp on columns
"""
type room_LivestreamDurations_var_samp_fields {
    sum: Float
}

"""
aggregate variance on columns
"""
type room_LivestreamDurations_variance_fields {
    sum: Float
}

"""
columns and relationships of "room.ManagementMode"
"""
type room_ManagementMode {
    description: String!
    name: String!
}

"""
aggregated selection of "room.ManagementMode"
"""
type room_ManagementMode_aggregate {
    aggregate: room_ManagementMode_aggregate_fields
    nodes: [room_ManagementMode!]!
}

"""
aggregate fields of "room.ManagementMode"
"""
type room_ManagementMode_aggregate_fields {
    count(columns: [room_ManagementMode_select_column!], distinct: Boolean): Int!
    max: room_ManagementMode_max_fields
    min: room_ManagementMode_min_fields
}

"""
Boolean expression to filter rows from the table "room.ManagementMode". All fields are combined with a logical 'AND'.
"""
input room_ManagementMode_bool_exp {
    _and: [room_ManagementMode_bool_exp!]
    _not: room_ManagementMode_bool_exp
    _or: [room_ManagementMode_bool_exp!]
    description: String_comparison_exp
    name: String_comparison_exp
}

"""
unique or primary key constraints on table "room.ManagementMode"
"""
enum room_ManagementMode_constraint {
    """
    unique or primary key constraint
    """
    ManagementMode_pkey
}

enum room_ManagementMode_enum {
    """
    Room is a direct message between two attendees. No new attendees can be added.
    """
    DM
    """
    Room access is automatically controlled by the system.
    """
    MANAGED
    """
    Room is only visible to attendees who have been given access. New attendees can be added.
    """
    PRIVATE
    """
    Room is visible to all attendees at the conference.
    """
    PUBLIC
}

"""
Boolean expression to compare columns of type "room_ManagementMode_enum". All fields are combined with logical 'AND'.
"""
input room_ManagementMode_enum_comparison_exp {
    _eq: room_ManagementMode_enum
    _in: [room_ManagementMode_enum!]
    _is_null: Boolean
    _neq: room_ManagementMode_enum
    _nin: [room_ManagementMode_enum!]
}

"""
input type for inserting data into table "room.ManagementMode"
"""
input room_ManagementMode_insert_input {
    description: String
    name: String
}

"""
aggregate max on columns
"""
type room_ManagementMode_max_fields {
    description: String
    name: String
}

"""
aggregate min on columns
"""
type room_ManagementMode_min_fields {
    description: String
    name: String
}

"""
response of any mutation on the table "room.ManagementMode"
"""
type room_ManagementMode_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [room_ManagementMode!]!
}

"""
input type for inserting object relation for remote table "room.ManagementMode"
"""
input room_ManagementMode_obj_rel_insert_input {
    data: room_ManagementMode_insert_input!
    """
    on conflict condition
    """
    on_conflict: room_ManagementMode_on_conflict
}

"""
on conflict condition type for table "room.ManagementMode"
"""
input room_ManagementMode_on_conflict {
    constraint: room_ManagementMode_constraint!
    update_columns: [room_ManagementMode_update_column!]! = []
    where: room_ManagementMode_bool_exp
}

"""
Ordering options when selecting data from "room.ManagementMode".
"""
input room_ManagementMode_order_by {
    description: order_by
    name: order_by
}

"""
primary key columns input for table: room_ManagementMode
"""
input room_ManagementMode_pk_columns_input {
    name: String!
}

"""
select columns of table "room.ManagementMode"
"""
enum room_ManagementMode_select_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
input type for updating data in table "room.ManagementMode"
"""
input room_ManagementMode_set_input {
    description: String
    name: String
}

"""
update columns of table "room.ManagementMode"
"""
enum room_ManagementMode_update_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
columns and relationships of "room.Mode"
"""
type room_Mode {
    description: String!
    """
    An array relationship
    """
    events(
        """
        distinct select on columns
        """
        distinct_on: [schedule_Event_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_Event_order_by!]
        """
        filter the rows returned
        """
        where: schedule_Event_bool_exp
    ): [schedule_Event!]!
    """
    An aggregate relationship
    """
    events_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [schedule_Event_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_Event_order_by!]
        """
        filter the rows returned
        """
        where: schedule_Event_bool_exp
    ): schedule_Event_aggregate!
    name: String!
    """
    An array relationship
    """
    rooms(
        """
        distinct select on columns
        """
        distinct_on: [room_Room_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_Room_order_by!]
        """
        filter the rows returned
        """
        where: room_Room_bool_exp
    ): [room_Room!]!
    """
    An aggregate relationship
    """
    rooms_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_Room_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_Room_order_by!]
        """
        filter the rows returned
        """
        where: room_Room_bool_exp
    ): room_Room_aggregate!
}

"""
aggregated selection of "room.Mode"
"""
type room_Mode_aggregate {
    aggregate: room_Mode_aggregate_fields
    nodes: [room_Mode!]!
}

"""
aggregate fields of "room.Mode"
"""
type room_Mode_aggregate_fields {
    count(columns: [room_Mode_select_column!], distinct: Boolean): Int!
    max: room_Mode_max_fields
    min: room_Mode_min_fields
}

"""
Boolean expression to filter rows from the table "room.Mode". All fields are combined with a logical 'AND'.
"""
input room_Mode_bool_exp {
    _and: [room_Mode_bool_exp!]
    _not: room_Mode_bool_exp
    _or: [room_Mode_bool_exp!]
    description: String_comparison_exp
    events: schedule_Event_bool_exp
    name: String_comparison_exp
    rooms: room_Room_bool_exp
}

"""
unique or primary key constraints on table "room.Mode"
"""
enum room_Mode_constraint {
    """
    unique or primary key constraint
    """
    Mode_pkey
}

enum room_Mode_enum {
    """
    An exhibition hall.
    """
    EXHIBITION
    """
    An empty room.
    """
    NONE
    """
    Pre-recorded content should be played out to attendees. The breakout and Q&A video chats may also be available to relevant users.
    """
    PRERECORDED
    """
    A live presentation should be delivered in the Q&A video chat. The breakout video chat may also be available to relevant users.
    """
    PRESENTATION
    """
    A live Q&A/discussion should be delivered in the Q&A video chat. The breakout video chat may also be available to relevant users.
    """
    Q_AND_A
    """
    A shuffle queue.
    """
    SHUFFLE
    """
    Users may participate in the general video chat.
    """
    VIDEO_CHAT
    """
    An ordinary video from either a VIDEO_URL content element or a video uploaded to Clowdr.
    """
    VIDEO_PLAYER
    """
    Event is taking place in a Zoom room.
    """
    ZOOM
}

"""
Boolean expression to compare columns of type "room_Mode_enum". All fields are combined with logical 'AND'.
"""
input room_Mode_enum_comparison_exp {
    _eq: room_Mode_enum
    _in: [room_Mode_enum!]
    _is_null: Boolean
    _neq: room_Mode_enum
    _nin: [room_Mode_enum!]
}

"""
input type for inserting data into table "room.Mode"
"""
input room_Mode_insert_input {
    description: String
    events: schedule_Event_arr_rel_insert_input
    name: String
    rooms: room_Room_arr_rel_insert_input
}

"""
aggregate max on columns
"""
type room_Mode_max_fields {
    description: String
    name: String
}

"""
aggregate min on columns
"""
type room_Mode_min_fields {
    description: String
    name: String
}

"""
response of any mutation on the table "room.Mode"
"""
type room_Mode_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [room_Mode!]!
}

"""
input type for inserting object relation for remote table "room.Mode"
"""
input room_Mode_obj_rel_insert_input {
    data: room_Mode_insert_input!
    """
    on conflict condition
    """
    on_conflict: room_Mode_on_conflict
}

"""
on conflict condition type for table "room.Mode"
"""
input room_Mode_on_conflict {
    constraint: room_Mode_constraint!
    update_columns: [room_Mode_update_column!]! = []
    where: room_Mode_bool_exp
}

"""
Ordering options when selecting data from "room.Mode".
"""
input room_Mode_order_by {
    description: order_by
    events_aggregate: schedule_Event_aggregate_order_by
    name: order_by
    rooms_aggregate: room_Room_aggregate_order_by
}

"""
primary key columns input for table: room_Mode
"""
input room_Mode_pk_columns_input {
    name: String!
}

"""
select columns of table "room.Mode"
"""
enum room_Mode_select_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
input type for updating data in table "room.Mode"
"""
input room_Mode_set_input {
    description: String
    name: String
}

"""
update columns of table "room.Mode"
"""
enum room_Mode_update_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
columns and relationships of "room.Participant"
"""
type room_Participant {
    chimeRegistrantId: String
    """
    An object relationship
    """
    conference: conference_Conference!
    conferenceId: uuid!
    createdAt: timestamptz!
    id: uuid!
    """
    An object relationship
    """
    registrant: registrant_Registrant!
    registrantId: uuid!
    """
    An object relationship
    """
    room: room_Room!
    roomId: uuid!
    subconferenceId: uuid
    updatedAt: timestamptz!
    vonageConnectionId: String
}

"""
aggregated selection of "room.Participant"
"""
type room_Participant_aggregate {
    aggregate: room_Participant_aggregate_fields
    nodes: [room_Participant!]!
}

"""
aggregate fields of "room.Participant"
"""
type room_Participant_aggregate_fields {
    count(columns: [room_Participant_select_column!], distinct: Boolean): Int!
    max: room_Participant_max_fields
    min: room_Participant_min_fields
}

"""
order by aggregate values of table "room.Participant"
"""
input room_Participant_aggregate_order_by {
    count: order_by
    max: room_Participant_max_order_by
    min: room_Participant_min_order_by
}

"""
input type for inserting array relation for remote table "room.Participant"
"""
input room_Participant_arr_rel_insert_input {
    data: [room_Participant_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: room_Participant_on_conflict
}

"""
Boolean expression to filter rows from the table "room.Participant". All fields are combined with a logical 'AND'.
"""
input room_Participant_bool_exp {
    _and: [room_Participant_bool_exp!]
    _not: room_Participant_bool_exp
    _or: [room_Participant_bool_exp!]
    chimeRegistrantId: String_comparison_exp
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    createdAt: timestamptz_comparison_exp
    id: uuid_comparison_exp
    registrant: registrant_Registrant_bool_exp
    registrantId: uuid_comparison_exp
    room: room_Room_bool_exp
    roomId: uuid_comparison_exp
    subconferenceId: uuid_comparison_exp
    updatedAt: timestamptz_comparison_exp
    vonageConnectionId: String_comparison_exp
}

"""
unique or primary key constraints on table "room.Participant"
"""
enum room_Participant_constraint {
    """
    unique or primary key constraint
    """
    Participant_pkey
    """
    unique or primary key constraint
    """
    Participant_roomId_registrantId_key
}

"""
input type for inserting data into table "room.Participant"
"""
input room_Participant_insert_input {
    chimeRegistrantId: String
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    registrant: registrant_Registrant_obj_rel_insert_input
    registrantId: uuid
    room: room_Room_obj_rel_insert_input
    roomId: uuid
    subconferenceId: uuid
    updatedAt: timestamptz
    vonageConnectionId: String
}

"""
aggregate max on columns
"""
type room_Participant_max_fields {
    chimeRegistrantId: String
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    registrantId: uuid
    roomId: uuid
    subconferenceId: uuid
    updatedAt: timestamptz
    vonageConnectionId: String
}

"""
order by max() on columns of table "room.Participant"
"""
input room_Participant_max_order_by {
    chimeRegistrantId: order_by
    conferenceId: order_by
    createdAt: order_by
    id: order_by
    registrantId: order_by
    roomId: order_by
    subconferenceId: order_by
    updatedAt: order_by
    vonageConnectionId: order_by
}

"""
aggregate min on columns
"""
type room_Participant_min_fields {
    chimeRegistrantId: String
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    registrantId: uuid
    roomId: uuid
    subconferenceId: uuid
    updatedAt: timestamptz
    vonageConnectionId: String
}

"""
order by min() on columns of table "room.Participant"
"""
input room_Participant_min_order_by {
    chimeRegistrantId: order_by
    conferenceId: order_by
    createdAt: order_by
    id: order_by
    registrantId: order_by
    roomId: order_by
    subconferenceId: order_by
    updatedAt: order_by
    vonageConnectionId: order_by
}

"""
response of any mutation on the table "room.Participant"
"""
type room_Participant_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [room_Participant!]!
}

"""
on conflict condition type for table "room.Participant"
"""
input room_Participant_on_conflict {
    constraint: room_Participant_constraint!
    update_columns: [room_Participant_update_column!]! = []
    where: room_Participant_bool_exp
}

"""
Ordering options when selecting data from "room.Participant".
"""
input room_Participant_order_by {
    chimeRegistrantId: order_by
    conference: conference_Conference_order_by
    conferenceId: order_by
    createdAt: order_by
    id: order_by
    registrant: registrant_Registrant_order_by
    registrantId: order_by
    room: room_Room_order_by
    roomId: order_by
    subconferenceId: order_by
    updatedAt: order_by
    vonageConnectionId: order_by
}

"""
primary key columns input for table: room_Participant
"""
input room_Participant_pk_columns_input {
    id: uuid!
}

"""
select columns of table "room.Participant"
"""
enum room_Participant_select_column {
    """
    column name
    """
    chimeRegistrantId
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    id
    """
    column name
    """
    registrantId
    """
    column name
    """
    roomId
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updatedAt
    """
    column name
    """
    vonageConnectionId
}

"""
input type for updating data in table "room.Participant"
"""
input room_Participant_set_input {
    chimeRegistrantId: String
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    registrantId: uuid
    roomId: uuid
    subconferenceId: uuid
    updatedAt: timestamptz
    vonageConnectionId: String
}

"""
update columns of table "room.Participant"
"""
enum room_Participant_update_column {
    """
    column name
    """
    chimeRegistrantId
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    id
    """
    column name
    """
    registrantId
    """
    column name
    """
    roomId
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updatedAt
    """
    column name
    """
    vonageConnectionId
}

"""
columns and relationships of "room.PersonRole"
"""
type room_PersonRole {
    description: String!
    name: String!
}

"""
aggregated selection of "room.PersonRole"
"""
type room_PersonRole_aggregate {
    aggregate: room_PersonRole_aggregate_fields
    nodes: [room_PersonRole!]!
}

"""
aggregate fields of "room.PersonRole"
"""
type room_PersonRole_aggregate_fields {
    count(columns: [room_PersonRole_select_column!], distinct: Boolean): Int!
    max: room_PersonRole_max_fields
    min: room_PersonRole_min_fields
}

"""
Boolean expression to filter rows from the table "room.PersonRole". All fields are combined with a logical 'AND'.
"""
input room_PersonRole_bool_exp {
    _and: [room_PersonRole_bool_exp!]
    _not: room_PersonRole_bool_exp
    _or: [room_PersonRole_bool_exp!]
    description: String_comparison_exp
    name: String_comparison_exp
}

"""
unique or primary key constraints on table "room.PersonRole"
"""
enum room_PersonRole_constraint {
    """
    unique or primary key constraint
    """
    PersonRole_pkey
}

enum room_PersonRole_enum {
    """
    User has control over the room.
    """
    ADMIN
    """
    User can participate in the room.
    """
    PARTICIPANT
}

"""
Boolean expression to compare columns of type "room_PersonRole_enum". All fields are combined with logical 'AND'.
"""
input room_PersonRole_enum_comparison_exp {
    _eq: room_PersonRole_enum
    _in: [room_PersonRole_enum!]
    _is_null: Boolean
    _neq: room_PersonRole_enum
    _nin: [room_PersonRole_enum!]
}

"""
input type for inserting data into table "room.PersonRole"
"""
input room_PersonRole_insert_input {
    description: String
    name: String
}

"""
aggregate max on columns
"""
type room_PersonRole_max_fields {
    description: String
    name: String
}

"""
aggregate min on columns
"""
type room_PersonRole_min_fields {
    description: String
    name: String
}

"""
response of any mutation on the table "room.PersonRole"
"""
type room_PersonRole_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [room_PersonRole!]!
}

"""
input type for inserting object relation for remote table "room.PersonRole"
"""
input room_PersonRole_obj_rel_insert_input {
    data: room_PersonRole_insert_input!
    """
    on conflict condition
    """
    on_conflict: room_PersonRole_on_conflict
}

"""
on conflict condition type for table "room.PersonRole"
"""
input room_PersonRole_on_conflict {
    constraint: room_PersonRole_constraint!
    update_columns: [room_PersonRole_update_column!]! = []
    where: room_PersonRole_bool_exp
}

"""
Ordering options when selecting data from "room.PersonRole".
"""
input room_PersonRole_order_by {
    description: order_by
    name: order_by
}

"""
primary key columns input for table: room_PersonRole
"""
input room_PersonRole_pk_columns_input {
    name: String!
}

"""
select columns of table "room.PersonRole"
"""
enum room_PersonRole_select_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
input type for updating data in table "room.PersonRole"
"""
input room_PersonRole_set_input {
    description: String
    name: String
}

"""
update columns of table "room.PersonRole"
"""
enum room_PersonRole_update_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
columns and relationships of "room.Room"
"""
type room_Room {
    backendName: room_Backend_enum
    capacity: Int
    """
    An object relationship
    """
    channelStack: video_ChannelStack
    """
    An array relationship
    """
    channelStackCreateJobs(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_ChannelStackCreateJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_ChannelStackCreateJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_ChannelStackCreateJob_bool_exp
    ): [job_queues_ChannelStackCreateJob!]!
    """
    An aggregate relationship
    """
    channelStackCreateJobs_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_ChannelStackCreateJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_ChannelStackCreateJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_ChannelStackCreateJob_bool_exp
    ): job_queues_ChannelStackCreateJob_aggregate!
    """
    An object relationship
    """
    chat: chat_Chat
    chatId: uuid
    """
    An object relationship
    """
    chimeMeeting: room_ChimeMeeting
    colour: String!
    """
    An object relationship
    """
    conference: conference_Conference!
    conferenceId: uuid!
    created_at: timestamptz!
    """
    An array relationship
    """
    currentEvents(
        """
        distinct select on columns
        """
        distinct_on: [schedule_CurrentEvents_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_CurrentEvents_order_by!]
        """
        filter the rows returned
        """
        where: schedule_CurrentEvents_bool_exp
    ): [schedule_CurrentEvents!]!
    """
    An aggregate relationship
    """
    currentEvents_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [schedule_CurrentEvents_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_CurrentEvents_order_by!]
        """
        filter the rows returned
        """
        where: schedule_CurrentEvents_bool_exp
    ): schedule_CurrentEvents_aggregate!
    """
    An object relationship
    """
    currentMode: room_Mode!
    currentModeName: room_Mode_enum!
    """
    An array relationship
    """
    events(
        """
        distinct select on columns
        """
        distinct_on: [schedule_Event_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_Event_order_by!]
        """
        filter the rows returned
        """
        where: schedule_Event_bool_exp
    ): [schedule_Event!]!
    """
    An aggregate relationship
    """
    events_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [schedule_Event_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_Event_order_by!]
        """
        filter the rows returned
        """
        where: schedule_Event_bool_exp
    ): schedule_Event_aggregate!
    id: uuid!
    """
    A computed field, executes function "room.IsProgramRoom"
    """
    isProgramRoom: Boolean
    """
    An object relationship
    """
    item: content_Item
    itemId: uuid
    """
    An object relationship
    """
    livestreamDuration: room_LivestreamDurations
    """
    An object relationship
    """
    managementMode: room_ManagementMode!
    managementModeName: room_ManagementMode_enum!
    name: String!
    """
    An array relationship
    """
    participants(
        """
        distinct select on columns
        """
        distinct_on: [room_Participant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_Participant_order_by!]
        """
        filter the rows returned
        """
        where: room_Participant_bool_exp
    ): [room_Participant!]!
    """
    An aggregate relationship
    """
    participants_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_Participant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_Participant_order_by!]
        """
        filter the rows returned
        """
        where: room_Participant_bool_exp
    ): room_Participant_aggregate!
    """
    An array relationship
    """
    presenceCounts(
        """
        distinct select on columns
        """
        distinct_on: [analytics_RoomPresence_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_RoomPresence_order_by!]
        """
        filter the rows returned
        """
        where: analytics_RoomPresence_bool_exp
    ): [analytics_RoomPresence!]!
    """
    An aggregate relationship
    """
    presenceCounts_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [analytics_RoomPresence_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_RoomPresence_order_by!]
        """
        filter the rows returned
        """
        where: analytics_RoomPresence_bool_exp
    ): analytics_RoomPresence_aggregate!
    priority: Int!
    publicVonageSessionId: String
    """
    An array relationship
    """
    roomMemberships(
        """
        distinct select on columns
        """
        distinct_on: [room_RoomMembership_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_RoomMembership_order_by!]
        """
        filter the rows returned
        """
        where: room_RoomMembership_bool_exp
    ): [room_RoomMembership!]!
    """
    An aggregate relationship
    """
    roomMemberships_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_RoomMembership_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_RoomMembership_order_by!]
        """
        filter the rows returned
        """
        where: room_RoomMembership_bool_exp
    ): room_RoomMembership_aggregate!
    """
    An object relationship
    """
    rtmpInput: video_RoomRtmpInput
    """
    An object relationship
    """
    rtmpOutput: video_RoomRtmpOutput
    """
    An array relationship
    """
    shuffleRooms(
        """
        distinct select on columns
        """
        distinct_on: [room_ShuffleRoom_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_ShuffleRoom_order_by!]
        """
        filter the rows returned
        """
        where: room_ShuffleRoom_bool_exp
    ): [room_ShuffleRoom!]!
    """
    An aggregate relationship
    """
    shuffleRooms_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_ShuffleRoom_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_ShuffleRoom_order_by!]
        """
        filter the rows returned
        """
        where: room_ShuffleRoom_bool_exp
    ): room_ShuffleRoom_aggregate!
    """
    An array relationship
    """
    stats(
        """
        distinct select on columns
        """
        distinct_on: [analytics_RoomStats_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_RoomStats_order_by!]
        """
        filter the rows returned
        """
        where: analytics_RoomStats_bool_exp
    ): [analytics_RoomStats!]!
    """
    An aggregate relationship
    """
    stats_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [analytics_RoomStats_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_RoomStats_order_by!]
        """
        filter the rows returned
        """
        where: analytics_RoomStats_bool_exp
    ): analytics_RoomStats_aggregate!
    subconferenceId: uuid
    updated_at: timestamptz!
    """
    An array relationship
    """
    vonageParticipantStreams(
        """
        distinct select on columns
        """
        distinct_on: [video_VonageParticipantStream_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_VonageParticipantStream_order_by!]
        """
        filter the rows returned
        """
        where: video_VonageParticipantStream_bool_exp
    ): [video_VonageParticipantStream!]!
    """
    An aggregate relationship
    """
    vonageParticipantStreams_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_VonageParticipantStream_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_VonageParticipantStream_order_by!]
        """
        filter the rows returned
        """
        where: video_VonageParticipantStream_bool_exp
    ): video_VonageParticipantStream_aggregate!
    """
    An array relationship
    """
    vonageRecordings(
        """
        distinct select on columns
        """
        distinct_on: [video_VonageRoomRecording_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_VonageRoomRecording_order_by!]
        """
        filter the rows returned
        """
        where: video_VonageRoomRecording_bool_exp
    ): [video_VonageRoomRecording!]!
    """
    An aggregate relationship
    """
    vonageRecordings_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_VonageRoomRecording_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_VonageRoomRecording_order_by!]
        """
        filter the rows returned
        """
        where: video_VonageRoomRecording_bool_exp
    ): video_VonageRoomRecording_aggregate!
    """
    An object relationship
    """
    vonageSessionLayout: video_VonageSessionLayout
}

"""
columns and relationships of "room.RoomGroupMembership"
"""
type room_RoomGroupMembership {
    created_at: timestamptz!
    """
    An object relationship
    """
    group: registrant_Group!
    groupId: uuid!
    id: uuid!
    """
    An object relationship
    """
    room: room_Room!
    roomId: uuid!
    updated_at: timestamptz!
}

"""
aggregated selection of "room.RoomGroupMembership"
"""
type room_RoomGroupMembership_aggregate {
    aggregate: room_RoomGroupMembership_aggregate_fields
    nodes: [room_RoomGroupMembership!]!
}

"""
aggregate fields of "room.RoomGroupMembership"
"""
type room_RoomGroupMembership_aggregate_fields {
    count(columns: [room_RoomGroupMembership_select_column!], distinct: Boolean): Int!
    max: room_RoomGroupMembership_max_fields
    min: room_RoomGroupMembership_min_fields
}

"""
Boolean expression to filter rows from the table "room.RoomGroupMembership". All fields are combined with a logical 'AND'.
"""
input room_RoomGroupMembership_bool_exp {
    _and: [room_RoomGroupMembership_bool_exp!]
    _not: room_RoomGroupMembership_bool_exp
    _or: [room_RoomGroupMembership_bool_exp!]
    created_at: timestamptz_comparison_exp
    group: registrant_Group_bool_exp
    groupId: uuid_comparison_exp
    id: uuid_comparison_exp
    room: room_Room_bool_exp
    roomId: uuid_comparison_exp
    updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "room.RoomGroupMembership"
"""
enum room_RoomGroupMembership_constraint {
    """
    unique or primary key constraint
    """
    RoomGroupMembership_pkey
    """
    unique or primary key constraint
    """
    RoomGroupMembership_roomId_groupId_key
}

"""
input type for inserting data into table "room.RoomGroupMembership"
"""
input room_RoomGroupMembership_insert_input {
    created_at: timestamptz
    group: registrant_Group_obj_rel_insert_input
    groupId: uuid
    id: uuid
    room: room_Room_obj_rel_insert_input
    roomId: uuid
    updated_at: timestamptz
}

"""
aggregate max on columns
"""
type room_RoomGroupMembership_max_fields {
    created_at: timestamptz
    groupId: uuid
    id: uuid
    roomId: uuid
    updated_at: timestamptz
}

"""
aggregate min on columns
"""
type room_RoomGroupMembership_min_fields {
    created_at: timestamptz
    groupId: uuid
    id: uuid
    roomId: uuid
    updated_at: timestamptz
}

"""
response of any mutation on the table "room.RoomGroupMembership"
"""
type room_RoomGroupMembership_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [room_RoomGroupMembership!]!
}

"""
on conflict condition type for table "room.RoomGroupMembership"
"""
input room_RoomGroupMembership_on_conflict {
    constraint: room_RoomGroupMembership_constraint!
    update_columns: [room_RoomGroupMembership_update_column!]! = []
    where: room_RoomGroupMembership_bool_exp
}

"""
Ordering options when selecting data from "room.RoomGroupMembership".
"""
input room_RoomGroupMembership_order_by {
    created_at: order_by
    group: registrant_Group_order_by
    groupId: order_by
    id: order_by
    room: room_Room_order_by
    roomId: order_by
    updated_at: order_by
}

"""
primary key columns input for table: room_RoomGroupMembership
"""
input room_RoomGroupMembership_pk_columns_input {
    id: uuid!
}

"""
select columns of table "room.RoomGroupMembership"
"""
enum room_RoomGroupMembership_select_column {
    """
    column name
    """
    created_at
    """
    column name
    """
    groupId
    """
    column name
    """
    id
    """
    column name
    """
    roomId
    """
    column name
    """
    updated_at
}

"""
input type for updating data in table "room.RoomGroupMembership"
"""
input room_RoomGroupMembership_set_input {
    created_at: timestamptz
    groupId: uuid
    id: uuid
    roomId: uuid
    updated_at: timestamptz
}

"""
update columns of table "room.RoomGroupMembership"
"""
enum room_RoomGroupMembership_update_column {
    """
    column name
    """
    created_at
    """
    column name
    """
    groupId
    """
    column name
    """
    id
    """
    column name
    """
    roomId
    """
    column name
    """
    updated_at
}

"""
columns and relationships of "room.RoomMembership"
"""
type room_RoomMembership {
    createdAt: timestamptz!
    id: uuid!
    """
    An object relationship
    """
    personRole: room_PersonRole!
    personRoleName: room_PersonRole_enum!
    """
    An object relationship
    """
    registrant: registrant_Registrant!
    registrantId: uuid!
    """
    An object relationship
    """
    room: room_Room!
    roomId: uuid!
    updatedAt: timestamptz!
}

"""
aggregated selection of "room.RoomMembership"
"""
type room_RoomMembership_aggregate {
    aggregate: room_RoomMembership_aggregate_fields
    nodes: [room_RoomMembership!]!
}

"""
aggregate fields of "room.RoomMembership"
"""
type room_RoomMembership_aggregate_fields {
    count(columns: [room_RoomMembership_select_column!], distinct: Boolean): Int!
    max: room_RoomMembership_max_fields
    min: room_RoomMembership_min_fields
}

"""
order by aggregate values of table "room.RoomMembership"
"""
input room_RoomMembership_aggregate_order_by {
    count: order_by
    max: room_RoomMembership_max_order_by
    min: room_RoomMembership_min_order_by
}

"""
input type for inserting array relation for remote table "room.RoomMembership"
"""
input room_RoomMembership_arr_rel_insert_input {
    data: [room_RoomMembership_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: room_RoomMembership_on_conflict
}

"""
Boolean expression to filter rows from the table "room.RoomMembership". All fields are combined with a logical 'AND'.
"""
input room_RoomMembership_bool_exp {
    _and: [room_RoomMembership_bool_exp!]
    _not: room_RoomMembership_bool_exp
    _or: [room_RoomMembership_bool_exp!]
    createdAt: timestamptz_comparison_exp
    id: uuid_comparison_exp
    personRole: room_PersonRole_bool_exp
    personRoleName: room_PersonRole_enum_comparison_exp
    registrant: registrant_Registrant_bool_exp
    registrantId: uuid_comparison_exp
    room: room_Room_bool_exp
    roomId: uuid_comparison_exp
    updatedAt: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "room.RoomMembership"
"""
enum room_RoomMembership_constraint {
    """
    unique or primary key constraint
    """
    RoomPerson_pkey
    """
    unique or primary key constraint
    """
    RoomPerson_registrantId_roomId_key
}

"""
input type for inserting data into table "room.RoomMembership"
"""
input room_RoomMembership_insert_input {
    createdAt: timestamptz
    id: uuid
    personRole: room_PersonRole_obj_rel_insert_input
    personRoleName: room_PersonRole_enum
    registrant: registrant_Registrant_obj_rel_insert_input
    registrantId: uuid
    room: room_Room_obj_rel_insert_input
    roomId: uuid
    updatedAt: timestamptz
}

"""
aggregate max on columns
"""
type room_RoomMembership_max_fields {
    createdAt: timestamptz
    id: uuid
    registrantId: uuid
    roomId: uuid
    updatedAt: timestamptz
}

"""
order by max() on columns of table "room.RoomMembership"
"""
input room_RoomMembership_max_order_by {
    createdAt: order_by
    id: order_by
    registrantId: order_by
    roomId: order_by
    updatedAt: order_by
}

"""
aggregate min on columns
"""
type room_RoomMembership_min_fields {
    createdAt: timestamptz
    id: uuid
    registrantId: uuid
    roomId: uuid
    updatedAt: timestamptz
}

"""
order by min() on columns of table "room.RoomMembership"
"""
input room_RoomMembership_min_order_by {
    createdAt: order_by
    id: order_by
    registrantId: order_by
    roomId: order_by
    updatedAt: order_by
}

"""
response of any mutation on the table "room.RoomMembership"
"""
type room_RoomMembership_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [room_RoomMembership!]!
}

"""
on conflict condition type for table "room.RoomMembership"
"""
input room_RoomMembership_on_conflict {
    constraint: room_RoomMembership_constraint!
    update_columns: [room_RoomMembership_update_column!]! = []
    where: room_RoomMembership_bool_exp
}

"""
Ordering options when selecting data from "room.RoomMembership".
"""
input room_RoomMembership_order_by {
    createdAt: order_by
    id: order_by
    personRole: room_PersonRole_order_by
    personRoleName: order_by
    registrant: registrant_Registrant_order_by
    registrantId: order_by
    room: room_Room_order_by
    roomId: order_by
    updatedAt: order_by
}

"""
primary key columns input for table: room_RoomMembership
"""
input room_RoomMembership_pk_columns_input {
    id: uuid!
}

"""
select columns of table "room.RoomMembership"
"""
enum room_RoomMembership_select_column {
    """
    column name
    """
    createdAt
    """
    column name
    """
    id
    """
    column name
    """
    personRoleName
    """
    column name
    """
    registrantId
    """
    column name
    """
    roomId
    """
    column name
    """
    updatedAt
}

"""
input type for updating data in table "room.RoomMembership"
"""
input room_RoomMembership_set_input {
    createdAt: timestamptz
    id: uuid
    personRoleName: room_PersonRole_enum
    registrantId: uuid
    roomId: uuid
    updatedAt: timestamptz
}

"""
update columns of table "room.RoomMembership"
"""
enum room_RoomMembership_update_column {
    """
    column name
    """
    createdAt
    """
    column name
    """
    id
    """
    column name
    """
    personRoleName
    """
    column name
    """
    registrantId
    """
    column name
    """
    roomId
    """
    column name
    """
    updatedAt
}

"""
aggregated selection of "room.Room"
"""
type room_Room_aggregate {
    aggregate: room_Room_aggregate_fields
    nodes: [room_Room!]!
}

"""
aggregate fields of "room.Room"
"""
type room_Room_aggregate_fields {
    avg: room_Room_avg_fields
    count(columns: [room_Room_select_column!], distinct: Boolean): Int!
    max: room_Room_max_fields
    min: room_Room_min_fields
    stddev: room_Room_stddev_fields
    stddev_pop: room_Room_stddev_pop_fields
    stddev_samp: room_Room_stddev_samp_fields
    sum: room_Room_sum_fields
    var_pop: room_Room_var_pop_fields
    var_samp: room_Room_var_samp_fields
    variance: room_Room_variance_fields
}

"""
order by aggregate values of table "room.Room"
"""
input room_Room_aggregate_order_by {
    avg: room_Room_avg_order_by
    count: order_by
    max: room_Room_max_order_by
    min: room_Room_min_order_by
    stddev: room_Room_stddev_order_by
    stddev_pop: room_Room_stddev_pop_order_by
    stddev_samp: room_Room_stddev_samp_order_by
    sum: room_Room_sum_order_by
    var_pop: room_Room_var_pop_order_by
    var_samp: room_Room_var_samp_order_by
    variance: room_Room_variance_order_by
}

"""
input type for inserting array relation for remote table "room.Room"
"""
input room_Room_arr_rel_insert_input {
    data: [room_Room_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: room_Room_on_conflict
}

"""
aggregate avg on columns
"""
type room_Room_avg_fields {
    capacity: Float
    priority: Float
}

"""
order by avg() on columns of table "room.Room"
"""
input room_Room_avg_order_by {
    capacity: order_by
    priority: order_by
}

"""
Boolean expression to filter rows from the table "room.Room". All fields are combined with a logical 'AND'.
"""
input room_Room_bool_exp {
    _and: [room_Room_bool_exp!]
    _not: room_Room_bool_exp
    _or: [room_Room_bool_exp!]
    backendName: room_Backend_enum_comparison_exp
    capacity: Int_comparison_exp
    channelStack: video_ChannelStack_bool_exp
    channelStackCreateJobs: job_queues_ChannelStackCreateJob_bool_exp
    chat: chat_Chat_bool_exp
    chatId: uuid_comparison_exp
    chimeMeeting: room_ChimeMeeting_bool_exp
    colour: String_comparison_exp
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    created_at: timestamptz_comparison_exp
    currentEvents: schedule_CurrentEvents_bool_exp
    currentMode: room_Mode_bool_exp
    currentModeName: room_Mode_enum_comparison_exp
    events: schedule_Event_bool_exp
    id: uuid_comparison_exp
    isProgramRoom: Boolean_comparison_exp
    item: content_Item_bool_exp
    itemId: uuid_comparison_exp
    livestreamDuration: room_LivestreamDurations_bool_exp
    managementMode: room_ManagementMode_bool_exp
    managementModeName: room_ManagementMode_enum_comparison_exp
    name: String_comparison_exp
    participants: room_Participant_bool_exp
    presenceCounts: analytics_RoomPresence_bool_exp
    priority: Int_comparison_exp
    publicVonageSessionId: String_comparison_exp
    roomMemberships: room_RoomMembership_bool_exp
    rtmpInput: video_RoomRtmpInput_bool_exp
    rtmpOutput: video_RoomRtmpOutput_bool_exp
    shuffleRooms: room_ShuffleRoom_bool_exp
    stats: analytics_RoomStats_bool_exp
    subconferenceId: uuid_comparison_exp
    updated_at: timestamptz_comparison_exp
    vonageParticipantStreams: video_VonageParticipantStream_bool_exp
    vonageRecordings: video_VonageRoomRecording_bool_exp
    vonageSessionLayout: video_VonageSessionLayout_bool_exp
}

"""
unique or primary key constraints on table "room.Room"
"""
enum room_Room_constraint {
    """
    unique or primary key constraint
    """
    Room_chatId_key
    """
    unique or primary key constraint
    """
    Room_itemId_key
    """
    unique or primary key constraint
    """
    Room_pkey
}

"""
input type for incrementing numeric columns in table "room.Room"
"""
input room_Room_inc_input {
    capacity: Int
    priority: Int
}

"""
input type for inserting data into table "room.Room"
"""
input room_Room_insert_input {
    backendName: room_Backend_enum
    capacity: Int
    channelStack: video_ChannelStack_obj_rel_insert_input
    channelStackCreateJobs: job_queues_ChannelStackCreateJob_arr_rel_insert_input
    chat: chat_Chat_obj_rel_insert_input
    chatId: uuid
    chimeMeeting: room_ChimeMeeting_obj_rel_insert_input
    colour: String
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    created_at: timestamptz
    currentEvents: schedule_CurrentEvents_arr_rel_insert_input
    currentMode: room_Mode_obj_rel_insert_input
    currentModeName: room_Mode_enum
    events: schedule_Event_arr_rel_insert_input
    id: uuid
    item: content_Item_obj_rel_insert_input
    itemId: uuid
    livestreamDuration: room_LivestreamDurations_obj_rel_insert_input
    managementMode: room_ManagementMode_obj_rel_insert_input
    managementModeName: room_ManagementMode_enum
    name: String
    participants: room_Participant_arr_rel_insert_input
    presenceCounts: analytics_RoomPresence_arr_rel_insert_input
    priority: Int
    publicVonageSessionId: String
    roomMemberships: room_RoomMembership_arr_rel_insert_input
    rtmpInput: video_RoomRtmpInput_obj_rel_insert_input
    rtmpOutput: video_RoomRtmpOutput_obj_rel_insert_input
    shuffleRooms: room_ShuffleRoom_arr_rel_insert_input
    stats: analytics_RoomStats_arr_rel_insert_input
    subconferenceId: uuid
    updated_at: timestamptz
    vonageParticipantStreams: video_VonageParticipantStream_arr_rel_insert_input
    vonageRecordings: video_VonageRoomRecording_arr_rel_insert_input
    vonageSessionLayout: video_VonageSessionLayout_obj_rel_insert_input
}

"""
aggregate max on columns
"""
type room_Room_max_fields {
    capacity: Int
    chatId: uuid
    colour: String
    conferenceId: uuid
    created_at: timestamptz
    id: uuid
    itemId: uuid
    name: String
    priority: Int
    publicVonageSessionId: String
    subconferenceId: uuid
    updated_at: timestamptz
}

"""
order by max() on columns of table "room.Room"
"""
input room_Room_max_order_by {
    capacity: order_by
    chatId: order_by
    colour: order_by
    conferenceId: order_by
    created_at: order_by
    id: order_by
    itemId: order_by
    name: order_by
    priority: order_by
    publicVonageSessionId: order_by
    subconferenceId: order_by
    updated_at: order_by
}

"""
aggregate min on columns
"""
type room_Room_min_fields {
    capacity: Int
    chatId: uuid
    colour: String
    conferenceId: uuid
    created_at: timestamptz
    id: uuid
    itemId: uuid
    name: String
    priority: Int
    publicVonageSessionId: String
    subconferenceId: uuid
    updated_at: timestamptz
}

"""
order by min() on columns of table "room.Room"
"""
input room_Room_min_order_by {
    capacity: order_by
    chatId: order_by
    colour: order_by
    conferenceId: order_by
    created_at: order_by
    id: order_by
    itemId: order_by
    name: order_by
    priority: order_by
    publicVonageSessionId: order_by
    subconferenceId: order_by
    updated_at: order_by
}

"""
response of any mutation on the table "room.Room"
"""
type room_Room_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [room_Room!]!
}

"""
input type for inserting object relation for remote table "room.Room"
"""
input room_Room_obj_rel_insert_input {
    data: room_Room_insert_input!
    """
    on conflict condition
    """
    on_conflict: room_Room_on_conflict
}

"""
on conflict condition type for table "room.Room"
"""
input room_Room_on_conflict {
    constraint: room_Room_constraint!
    update_columns: [room_Room_update_column!]! = []
    where: room_Room_bool_exp
}

"""
Ordering options when selecting data from "room.Room".
"""
input room_Room_order_by {
    backendName: order_by
    capacity: order_by
    channelStack: video_ChannelStack_order_by
    channelStackCreateJobs_aggregate: job_queues_ChannelStackCreateJob_aggregate_order_by
    chat: chat_Chat_order_by
    chatId: order_by
    chimeMeeting: room_ChimeMeeting_order_by
    colour: order_by
    conference: conference_Conference_order_by
    conferenceId: order_by
    created_at: order_by
    currentEvents_aggregate: schedule_CurrentEvents_aggregate_order_by
    currentMode: room_Mode_order_by
    currentModeName: order_by
    events_aggregate: schedule_Event_aggregate_order_by
    id: order_by
    isProgramRoom: order_by
    item: content_Item_order_by
    itemId: order_by
    livestreamDuration: room_LivestreamDurations_order_by
    managementMode: room_ManagementMode_order_by
    managementModeName: order_by
    name: order_by
    participants_aggregate: room_Participant_aggregate_order_by
    presenceCounts_aggregate: analytics_RoomPresence_aggregate_order_by
    priority: order_by
    publicVonageSessionId: order_by
    roomMemberships_aggregate: room_RoomMembership_aggregate_order_by
    rtmpInput: video_RoomRtmpInput_order_by
    rtmpOutput: video_RoomRtmpOutput_order_by
    shuffleRooms_aggregate: room_ShuffleRoom_aggregate_order_by
    stats_aggregate: analytics_RoomStats_aggregate_order_by
    subconferenceId: order_by
    updated_at: order_by
    vonageParticipantStreams_aggregate: video_VonageParticipantStream_aggregate_order_by
    vonageRecordings_aggregate: video_VonageRoomRecording_aggregate_order_by
    vonageSessionLayout: video_VonageSessionLayout_order_by
}

"""
primary key columns input for table: room_Room
"""
input room_Room_pk_columns_input {
    id: uuid!
}

"""
select columns of table "room.Room"
"""
enum room_Room_select_column {
    """
    column name
    """
    backendName
    """
    column name
    """
    capacity
    """
    column name
    """
    chatId
    """
    column name
    """
    colour
    """
    column name
    """
    conferenceId
    """
    column name
    """
    created_at
    """
    column name
    """
    currentModeName
    """
    column name
    """
    id
    """
    column name
    """
    itemId
    """
    column name
    """
    managementModeName
    """
    column name
    """
    name
    """
    column name
    """
    priority
    """
    column name
    """
    publicVonageSessionId
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updated_at
}

"""
input type for updating data in table "room.Room"
"""
input room_Room_set_input {
    backendName: room_Backend_enum
    capacity: Int
    chatId: uuid
    colour: String
    conferenceId: uuid
    created_at: timestamptz
    currentModeName: room_Mode_enum
    id: uuid
    itemId: uuid
    managementModeName: room_ManagementMode_enum
    name: String
    priority: Int
    publicVonageSessionId: String
    subconferenceId: uuid
    updated_at: timestamptz
}

"""
aggregate stddev on columns
"""
type room_Room_stddev_fields {
    capacity: Float
    priority: Float
}

"""
order by stddev() on columns of table "room.Room"
"""
input room_Room_stddev_order_by {
    capacity: order_by
    priority: order_by
}

"""
aggregate stddev_pop on columns
"""
type room_Room_stddev_pop_fields {
    capacity: Float
    priority: Float
}

"""
order by stddev_pop() on columns of table "room.Room"
"""
input room_Room_stddev_pop_order_by {
    capacity: order_by
    priority: order_by
}

"""
aggregate stddev_samp on columns
"""
type room_Room_stddev_samp_fields {
    capacity: Float
    priority: Float
}

"""
order by stddev_samp() on columns of table "room.Room"
"""
input room_Room_stddev_samp_order_by {
    capacity: order_by
    priority: order_by
}

"""
aggregate sum on columns
"""
type room_Room_sum_fields {
    capacity: Int
    priority: Int
}

"""
order by sum() on columns of table "room.Room"
"""
input room_Room_sum_order_by {
    capacity: order_by
    priority: order_by
}

"""
update columns of table "room.Room"
"""
enum room_Room_update_column {
    """
    column name
    """
    backendName
    """
    column name
    """
    capacity
    """
    column name
    """
    chatId
    """
    column name
    """
    colour
    """
    column name
    """
    conferenceId
    """
    column name
    """
    created_at
    """
    column name
    """
    currentModeName
    """
    column name
    """
    id
    """
    column name
    """
    itemId
    """
    column name
    """
    managementModeName
    """
    column name
    """
    name
    """
    column name
    """
    priority
    """
    column name
    """
    publicVonageSessionId
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updated_at
}

"""
aggregate var_pop on columns
"""
type room_Room_var_pop_fields {
    capacity: Float
    priority: Float
}

"""
order by var_pop() on columns of table "room.Room"
"""
input room_Room_var_pop_order_by {
    capacity: order_by
    priority: order_by
}

"""
aggregate var_samp on columns
"""
type room_Room_var_samp_fields {
    capacity: Float
    priority: Float
}

"""
order by var_samp() on columns of table "room.Room"
"""
input room_Room_var_samp_order_by {
    capacity: order_by
    priority: order_by
}

"""
aggregate variance on columns
"""
type room_Room_variance_fields {
    capacity: Float
    priority: Float
}

"""
order by variance() on columns of table "room.Room"
"""
input room_Room_variance_order_by {
    capacity: order_by
    priority: order_by
}

"""
columns and relationships of "room.ShuffleAlgorithm"
"""
type room_ShuffleAlgorithm {
    description: String!
    name: String!
}

"""
aggregated selection of "room.ShuffleAlgorithm"
"""
type room_ShuffleAlgorithm_aggregate {
    aggregate: room_ShuffleAlgorithm_aggregate_fields
    nodes: [room_ShuffleAlgorithm!]!
}

"""
aggregate fields of "room.ShuffleAlgorithm"
"""
type room_ShuffleAlgorithm_aggregate_fields {
    count(columns: [room_ShuffleAlgorithm_select_column!], distinct: Boolean): Int!
    max: room_ShuffleAlgorithm_max_fields
    min: room_ShuffleAlgorithm_min_fields
}

"""
Boolean expression to filter rows from the table "room.ShuffleAlgorithm". All fields are combined with a logical 'AND'.
"""
input room_ShuffleAlgorithm_bool_exp {
    _and: [room_ShuffleAlgorithm_bool_exp!]
    _not: room_ShuffleAlgorithm_bool_exp
    _or: [room_ShuffleAlgorithm_bool_exp!]
    description: String_comparison_exp
    name: String_comparison_exp
}

"""
unique or primary key constraints on table "room.ShuffleAlgorithm"
"""
enum room_ShuffleAlgorithm_constraint {
    """
    unique or primary key constraint
    """
    ShuffleAlgorithm_pkey
}

enum room_ShuffleAlgorithm_enum {
    """
    First-come, first-served with auto-created rooms.
    """
    fcfs
    """
    First-come, first-served with a fixed set of (manually created) rooms. Limits max participants.
    """
    fcfs_fixed_rooms
    """
    No automation. Rooms and allocations controlled manually.
    """
    none
}

"""
Boolean expression to compare columns of type "room_ShuffleAlgorithm_enum". All fields are combined with logical 'AND'.
"""
input room_ShuffleAlgorithm_enum_comparison_exp {
    _eq: room_ShuffleAlgorithm_enum
    _in: [room_ShuffleAlgorithm_enum!]
    _is_null: Boolean
    _neq: room_ShuffleAlgorithm_enum
    _nin: [room_ShuffleAlgorithm_enum!]
}

"""
input type for inserting data into table "room.ShuffleAlgorithm"
"""
input room_ShuffleAlgorithm_insert_input {
    description: String
    name: String
}

"""
aggregate max on columns
"""
type room_ShuffleAlgorithm_max_fields {
    description: String
    name: String
}

"""
aggregate min on columns
"""
type room_ShuffleAlgorithm_min_fields {
    description: String
    name: String
}

"""
response of any mutation on the table "room.ShuffleAlgorithm"
"""
type room_ShuffleAlgorithm_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [room_ShuffleAlgorithm!]!
}

"""
on conflict condition type for table "room.ShuffleAlgorithm"
"""
input room_ShuffleAlgorithm_on_conflict {
    constraint: room_ShuffleAlgorithm_constraint!
    update_columns: [room_ShuffleAlgorithm_update_column!]! = []
    where: room_ShuffleAlgorithm_bool_exp
}

"""
Ordering options when selecting data from "room.ShuffleAlgorithm".
"""
input room_ShuffleAlgorithm_order_by {
    description: order_by
    name: order_by
}

"""
primary key columns input for table: room_ShuffleAlgorithm
"""
input room_ShuffleAlgorithm_pk_columns_input {
    name: String!
}

"""
select columns of table "room.ShuffleAlgorithm"
"""
enum room_ShuffleAlgorithm_select_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
input type for updating data in table "room.ShuffleAlgorithm"
"""
input room_ShuffleAlgorithm_set_input {
    description: String
    name: String
}

"""
update columns of table "room.ShuffleAlgorithm"
"""
enum room_ShuffleAlgorithm_update_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
columns and relationships of "room.ShufflePeriod"
"""
type room_ShufflePeriod {
    algorithm: room_ShuffleAlgorithm_enum!
    """
    An object relationship
    """
    conference: conference_Conference!
    conferenceId: uuid!
    created_at: timestamptz!
    endAt: timestamptz!
    """
    An array relationship
    """
    events(
        """
        distinct select on columns
        """
        distinct_on: [schedule_Event_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_Event_order_by!]
        """
        filter the rows returned
        """
        where: schedule_Event_bool_exp
    ): [schedule_Event!]!
    """
    An aggregate relationship
    """
    events_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [schedule_Event_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_Event_order_by!]
        """
        filter the rows returned
        """
        where: schedule_Event_bool_exp
    ): schedule_Event_aggregate!
    id: uuid!
    maxRegistrantsPerRoom: Int!
    name: String!
    """
    An object relationship
    """
    organiser: registrant_Registrant!
    organiserId: uuid!
    """
    An array relationship
    """
    queueEntries(
        """
        distinct select on columns
        """
        distinct_on: [room_ShuffleQueueEntry_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_ShuffleQueueEntry_order_by!]
        """
        filter the rows returned
        """
        where: room_ShuffleQueueEntry_bool_exp
    ): [room_ShuffleQueueEntry!]!
    """
    An aggregate relationship
    """
    queueEntries_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_ShuffleQueueEntry_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_ShuffleQueueEntry_order_by!]
        """
        filter the rows returned
        """
        where: room_ShuffleQueueEntry_bool_exp
    ): room_ShuffleQueueEntry_aggregate!
    roomDurationMinutes: Int!
    """
    An array relationship
    """
    shuffleRooms(
        """
        distinct select on columns
        """
        distinct_on: [room_ShuffleRoom_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_ShuffleRoom_order_by!]
        """
        filter the rows returned
        """
        where: room_ShuffleRoom_bool_exp
    ): [room_ShuffleRoom!]!
    """
    An aggregate relationship
    """
    shuffleRooms_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_ShuffleRoom_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_ShuffleRoom_order_by!]
        """
        filter the rows returned
        """
        where: room_ShuffleRoom_bool_exp
    ): room_ShuffleRoom_aggregate!
    startAt: timestamptz!
    subconferenceId: uuid
    targetRegistrantsPerRoom: Int!
    updated_at: timestamptz!
    waitRoomMaxDurationSeconds: Int!
}

"""
aggregated selection of "room.ShufflePeriod"
"""
type room_ShufflePeriod_aggregate {
    aggregate: room_ShufflePeriod_aggregate_fields
    nodes: [room_ShufflePeriod!]!
}

"""
aggregate fields of "room.ShufflePeriod"
"""
type room_ShufflePeriod_aggregate_fields {
    avg: room_ShufflePeriod_avg_fields
    count(columns: [room_ShufflePeriod_select_column!], distinct: Boolean): Int!
    max: room_ShufflePeriod_max_fields
    min: room_ShufflePeriod_min_fields
    stddev: room_ShufflePeriod_stddev_fields
    stddev_pop: room_ShufflePeriod_stddev_pop_fields
    stddev_samp: room_ShufflePeriod_stddev_samp_fields
    sum: room_ShufflePeriod_sum_fields
    var_pop: room_ShufflePeriod_var_pop_fields
    var_samp: room_ShufflePeriod_var_samp_fields
    variance: room_ShufflePeriod_variance_fields
}

"""
order by aggregate values of table "room.ShufflePeriod"
"""
input room_ShufflePeriod_aggregate_order_by {
    avg: room_ShufflePeriod_avg_order_by
    count: order_by
    max: room_ShufflePeriod_max_order_by
    min: room_ShufflePeriod_min_order_by
    stddev: room_ShufflePeriod_stddev_order_by
    stddev_pop: room_ShufflePeriod_stddev_pop_order_by
    stddev_samp: room_ShufflePeriod_stddev_samp_order_by
    sum: room_ShufflePeriod_sum_order_by
    var_pop: room_ShufflePeriod_var_pop_order_by
    var_samp: room_ShufflePeriod_var_samp_order_by
    variance: room_ShufflePeriod_variance_order_by
}

"""
input type for inserting array relation for remote table "room.ShufflePeriod"
"""
input room_ShufflePeriod_arr_rel_insert_input {
    data: [room_ShufflePeriod_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: room_ShufflePeriod_on_conflict
}

"""
aggregate avg on columns
"""
type room_ShufflePeriod_avg_fields {
    maxRegistrantsPerRoom: Float
    roomDurationMinutes: Float
    targetRegistrantsPerRoom: Float
    waitRoomMaxDurationSeconds: Float
}

"""
order by avg() on columns of table "room.ShufflePeriod"
"""
input room_ShufflePeriod_avg_order_by {
    maxRegistrantsPerRoom: order_by
    roomDurationMinutes: order_by
    targetRegistrantsPerRoom: order_by
    waitRoomMaxDurationSeconds: order_by
}

"""
Boolean expression to filter rows from the table "room.ShufflePeriod". All fields are combined with a logical 'AND'.
"""
input room_ShufflePeriod_bool_exp {
    _and: [room_ShufflePeriod_bool_exp!]
    _not: room_ShufflePeriod_bool_exp
    _or: [room_ShufflePeriod_bool_exp!]
    algorithm: room_ShuffleAlgorithm_enum_comparison_exp
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    created_at: timestamptz_comparison_exp
    endAt: timestamptz_comparison_exp
    events: schedule_Event_bool_exp
    id: uuid_comparison_exp
    maxRegistrantsPerRoom: Int_comparison_exp
    name: String_comparison_exp
    organiser: registrant_Registrant_bool_exp
    organiserId: uuid_comparison_exp
    queueEntries: room_ShuffleQueueEntry_bool_exp
    roomDurationMinutes: Int_comparison_exp
    shuffleRooms: room_ShuffleRoom_bool_exp
    startAt: timestamptz_comparison_exp
    subconferenceId: uuid_comparison_exp
    targetRegistrantsPerRoom: Int_comparison_exp
    updated_at: timestamptz_comparison_exp
    waitRoomMaxDurationSeconds: Int_comparison_exp
}

"""
unique or primary key constraints on table "room.ShufflePeriod"
"""
enum room_ShufflePeriod_constraint {
    """
    unique or primary key constraint
    """
    ShufflePeriod_pkey
}

"""
input type for incrementing numeric columns in table "room.ShufflePeriod"
"""
input room_ShufflePeriod_inc_input {
    maxRegistrantsPerRoom: Int
    roomDurationMinutes: Int
    targetRegistrantsPerRoom: Int
    waitRoomMaxDurationSeconds: Int
}

"""
input type for inserting data into table "room.ShufflePeriod"
"""
input room_ShufflePeriod_insert_input {
    algorithm: room_ShuffleAlgorithm_enum
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    created_at: timestamptz
    endAt: timestamptz
    events: schedule_Event_arr_rel_insert_input
    id: uuid
    maxRegistrantsPerRoom: Int
    name: String
    organiser: registrant_Registrant_obj_rel_insert_input
    organiserId: uuid
    queueEntries: room_ShuffleQueueEntry_arr_rel_insert_input
    roomDurationMinutes: Int
    shuffleRooms: room_ShuffleRoom_arr_rel_insert_input
    startAt: timestamptz
    subconferenceId: uuid
    targetRegistrantsPerRoom: Int
    updated_at: timestamptz
    waitRoomMaxDurationSeconds: Int
}

"""
aggregate max on columns
"""
type room_ShufflePeriod_max_fields {
    conferenceId: uuid
    created_at: timestamptz
    endAt: timestamptz
    id: uuid
    maxRegistrantsPerRoom: Int
    name: String
    organiserId: uuid
    roomDurationMinutes: Int
    startAt: timestamptz
    subconferenceId: uuid
    targetRegistrantsPerRoom: Int
    updated_at: timestamptz
    waitRoomMaxDurationSeconds: Int
}

"""
order by max() on columns of table "room.ShufflePeriod"
"""
input room_ShufflePeriod_max_order_by {
    conferenceId: order_by
    created_at: order_by
    endAt: order_by
    id: order_by
    maxRegistrantsPerRoom: order_by
    name: order_by
    organiserId: order_by
    roomDurationMinutes: order_by
    startAt: order_by
    subconferenceId: order_by
    targetRegistrantsPerRoom: order_by
    updated_at: order_by
    waitRoomMaxDurationSeconds: order_by
}

"""
aggregate min on columns
"""
type room_ShufflePeriod_min_fields {
    conferenceId: uuid
    created_at: timestamptz
    endAt: timestamptz
    id: uuid
    maxRegistrantsPerRoom: Int
    name: String
    organiserId: uuid
    roomDurationMinutes: Int
    startAt: timestamptz
    subconferenceId: uuid
    targetRegistrantsPerRoom: Int
    updated_at: timestamptz
    waitRoomMaxDurationSeconds: Int
}

"""
order by min() on columns of table "room.ShufflePeriod"
"""
input room_ShufflePeriod_min_order_by {
    conferenceId: order_by
    created_at: order_by
    endAt: order_by
    id: order_by
    maxRegistrantsPerRoom: order_by
    name: order_by
    organiserId: order_by
    roomDurationMinutes: order_by
    startAt: order_by
    subconferenceId: order_by
    targetRegistrantsPerRoom: order_by
    updated_at: order_by
    waitRoomMaxDurationSeconds: order_by
}

"""
response of any mutation on the table "room.ShufflePeriod"
"""
type room_ShufflePeriod_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [room_ShufflePeriod!]!
}

"""
input type for inserting object relation for remote table "room.ShufflePeriod"
"""
input room_ShufflePeriod_obj_rel_insert_input {
    data: room_ShufflePeriod_insert_input!
    """
    on conflict condition
    """
    on_conflict: room_ShufflePeriod_on_conflict
}

"""
on conflict condition type for table "room.ShufflePeriod"
"""
input room_ShufflePeriod_on_conflict {
    constraint: room_ShufflePeriod_constraint!
    update_columns: [room_ShufflePeriod_update_column!]! = []
    where: room_ShufflePeriod_bool_exp
}

"""
Ordering options when selecting data from "room.ShufflePeriod".
"""
input room_ShufflePeriod_order_by {
    algorithm: order_by
    conference: conference_Conference_order_by
    conferenceId: order_by
    created_at: order_by
    endAt: order_by
    events_aggregate: schedule_Event_aggregate_order_by
    id: order_by
    maxRegistrantsPerRoom: order_by
    name: order_by
    organiser: registrant_Registrant_order_by
    organiserId: order_by
    queueEntries_aggregate: room_ShuffleQueueEntry_aggregate_order_by
    roomDurationMinutes: order_by
    shuffleRooms_aggregate: room_ShuffleRoom_aggregate_order_by
    startAt: order_by
    subconferenceId: order_by
    targetRegistrantsPerRoom: order_by
    updated_at: order_by
    waitRoomMaxDurationSeconds: order_by
}

"""
primary key columns input for table: room_ShufflePeriod
"""
input room_ShufflePeriod_pk_columns_input {
    id: uuid!
}

"""
select columns of table "room.ShufflePeriod"
"""
enum room_ShufflePeriod_select_column {
    """
    column name
    """
    algorithm
    """
    column name
    """
    conferenceId
    """
    column name
    """
    created_at
    """
    column name
    """
    endAt
    """
    column name
    """
    id
    """
    column name
    """
    maxRegistrantsPerRoom
    """
    column name
    """
    name
    """
    column name
    """
    organiserId
    """
    column name
    """
    roomDurationMinutes
    """
    column name
    """
    startAt
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    targetRegistrantsPerRoom
    """
    column name
    """
    updated_at
    """
    column name
    """
    waitRoomMaxDurationSeconds
}

"""
input type for updating data in table "room.ShufflePeriod"
"""
input room_ShufflePeriod_set_input {
    algorithm: room_ShuffleAlgorithm_enum
    conferenceId: uuid
    created_at: timestamptz
    endAt: timestamptz
    id: uuid
    maxRegistrantsPerRoom: Int
    name: String
    organiserId: uuid
    roomDurationMinutes: Int
    startAt: timestamptz
    subconferenceId: uuid
    targetRegistrantsPerRoom: Int
    updated_at: timestamptz
    waitRoomMaxDurationSeconds: Int
}

"""
aggregate stddev on columns
"""
type room_ShufflePeriod_stddev_fields {
    maxRegistrantsPerRoom: Float
    roomDurationMinutes: Float
    targetRegistrantsPerRoom: Float
    waitRoomMaxDurationSeconds: Float
}

"""
order by stddev() on columns of table "room.ShufflePeriod"
"""
input room_ShufflePeriod_stddev_order_by {
    maxRegistrantsPerRoom: order_by
    roomDurationMinutes: order_by
    targetRegistrantsPerRoom: order_by
    waitRoomMaxDurationSeconds: order_by
}

"""
aggregate stddev_pop on columns
"""
type room_ShufflePeriod_stddev_pop_fields {
    maxRegistrantsPerRoom: Float
    roomDurationMinutes: Float
    targetRegistrantsPerRoom: Float
    waitRoomMaxDurationSeconds: Float
}

"""
order by stddev_pop() on columns of table "room.ShufflePeriod"
"""
input room_ShufflePeriod_stddev_pop_order_by {
    maxRegistrantsPerRoom: order_by
    roomDurationMinutes: order_by
    targetRegistrantsPerRoom: order_by
    waitRoomMaxDurationSeconds: order_by
}

"""
aggregate stddev_samp on columns
"""
type room_ShufflePeriod_stddev_samp_fields {
    maxRegistrantsPerRoom: Float
    roomDurationMinutes: Float
    targetRegistrantsPerRoom: Float
    waitRoomMaxDurationSeconds: Float
}

"""
order by stddev_samp() on columns of table "room.ShufflePeriod"
"""
input room_ShufflePeriod_stddev_samp_order_by {
    maxRegistrantsPerRoom: order_by
    roomDurationMinutes: order_by
    targetRegistrantsPerRoom: order_by
    waitRoomMaxDurationSeconds: order_by
}

"""
aggregate sum on columns
"""
type room_ShufflePeriod_sum_fields {
    maxRegistrantsPerRoom: Int
    roomDurationMinutes: Int
    targetRegistrantsPerRoom: Int
    waitRoomMaxDurationSeconds: Int
}

"""
order by sum() on columns of table "room.ShufflePeriod"
"""
input room_ShufflePeriod_sum_order_by {
    maxRegistrantsPerRoom: order_by
    roomDurationMinutes: order_by
    targetRegistrantsPerRoom: order_by
    waitRoomMaxDurationSeconds: order_by
}

"""
update columns of table "room.ShufflePeriod"
"""
enum room_ShufflePeriod_update_column {
    """
    column name
    """
    algorithm
    """
    column name
    """
    conferenceId
    """
    column name
    """
    created_at
    """
    column name
    """
    endAt
    """
    column name
    """
    id
    """
    column name
    """
    maxRegistrantsPerRoom
    """
    column name
    """
    name
    """
    column name
    """
    organiserId
    """
    column name
    """
    roomDurationMinutes
    """
    column name
    """
    startAt
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    targetRegistrantsPerRoom
    """
    column name
    """
    updated_at
    """
    column name
    """
    waitRoomMaxDurationSeconds
}

"""
aggregate var_pop on columns
"""
type room_ShufflePeriod_var_pop_fields {
    maxRegistrantsPerRoom: Float
    roomDurationMinutes: Float
    targetRegistrantsPerRoom: Float
    waitRoomMaxDurationSeconds: Float
}

"""
order by var_pop() on columns of table "room.ShufflePeriod"
"""
input room_ShufflePeriod_var_pop_order_by {
    maxRegistrantsPerRoom: order_by
    roomDurationMinutes: order_by
    targetRegistrantsPerRoom: order_by
    waitRoomMaxDurationSeconds: order_by
}

"""
aggregate var_samp on columns
"""
type room_ShufflePeriod_var_samp_fields {
    maxRegistrantsPerRoom: Float
    roomDurationMinutes: Float
    targetRegistrantsPerRoom: Float
    waitRoomMaxDurationSeconds: Float
}

"""
order by var_samp() on columns of table "room.ShufflePeriod"
"""
input room_ShufflePeriod_var_samp_order_by {
    maxRegistrantsPerRoom: order_by
    roomDurationMinutes: order_by
    targetRegistrantsPerRoom: order_by
    waitRoomMaxDurationSeconds: order_by
}

"""
aggregate variance on columns
"""
type room_ShufflePeriod_variance_fields {
    maxRegistrantsPerRoom: Float
    roomDurationMinutes: Float
    targetRegistrantsPerRoom: Float
    waitRoomMaxDurationSeconds: Float
}

"""
order by variance() on columns of table "room.ShufflePeriod"
"""
input room_ShufflePeriod_variance_order_by {
    maxRegistrantsPerRoom: order_by
    roomDurationMinutes: order_by
    targetRegistrantsPerRoom: order_by
    waitRoomMaxDurationSeconds: order_by
}

"""
columns and relationships of "room.ShuffleQueueEntry"
"""
type room_ShuffleQueueEntry {
    allocatedShuffleRoomId: Int
    created_at: timestamptz!
    id: bigint!
    isExpired: Boolean!
    """
    An object relationship
    """
    registrant: registrant_Registrant!
    registrantId: uuid!
    """
    An object relationship
    """
    shufflePeriod: room_ShufflePeriod!
    shufflePeriodId: uuid!
    """
    An object relationship
    """
    shuffleRoom: room_ShuffleRoom
    updated_at: timestamptz!
}

"""
aggregated selection of "room.ShuffleQueueEntry"
"""
type room_ShuffleQueueEntry_aggregate {
    aggregate: room_ShuffleQueueEntry_aggregate_fields
    nodes: [room_ShuffleQueueEntry!]!
}

"""
aggregate fields of "room.ShuffleQueueEntry"
"""
type room_ShuffleQueueEntry_aggregate_fields {
    avg: room_ShuffleQueueEntry_avg_fields
    count(columns: [room_ShuffleQueueEntry_select_column!], distinct: Boolean): Int!
    max: room_ShuffleQueueEntry_max_fields
    min: room_ShuffleQueueEntry_min_fields
    stddev: room_ShuffleQueueEntry_stddev_fields
    stddev_pop: room_ShuffleQueueEntry_stddev_pop_fields
    stddev_samp: room_ShuffleQueueEntry_stddev_samp_fields
    sum: room_ShuffleQueueEntry_sum_fields
    var_pop: room_ShuffleQueueEntry_var_pop_fields
    var_samp: room_ShuffleQueueEntry_var_samp_fields
    variance: room_ShuffleQueueEntry_variance_fields
}

"""
order by aggregate values of table "room.ShuffleQueueEntry"
"""
input room_ShuffleQueueEntry_aggregate_order_by {
    avg: room_ShuffleQueueEntry_avg_order_by
    count: order_by
    max: room_ShuffleQueueEntry_max_order_by
    min: room_ShuffleQueueEntry_min_order_by
    stddev: room_ShuffleQueueEntry_stddev_order_by
    stddev_pop: room_ShuffleQueueEntry_stddev_pop_order_by
    stddev_samp: room_ShuffleQueueEntry_stddev_samp_order_by
    sum: room_ShuffleQueueEntry_sum_order_by
    var_pop: room_ShuffleQueueEntry_var_pop_order_by
    var_samp: room_ShuffleQueueEntry_var_samp_order_by
    variance: room_ShuffleQueueEntry_variance_order_by
}

"""
input type for inserting array relation for remote table "room.ShuffleQueueEntry"
"""
input room_ShuffleQueueEntry_arr_rel_insert_input {
    data: [room_ShuffleQueueEntry_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: room_ShuffleQueueEntry_on_conflict
}

"""
aggregate avg on columns
"""
type room_ShuffleQueueEntry_avg_fields {
    allocatedShuffleRoomId: Float
    id: Float
}

"""
order by avg() on columns of table "room.ShuffleQueueEntry"
"""
input room_ShuffleQueueEntry_avg_order_by {
    allocatedShuffleRoomId: order_by
    id: order_by
}

"""
Boolean expression to filter rows from the table "room.ShuffleQueueEntry". All fields are combined with a logical 'AND'.
"""
input room_ShuffleQueueEntry_bool_exp {
    _and: [room_ShuffleQueueEntry_bool_exp!]
    _not: room_ShuffleQueueEntry_bool_exp
    _or: [room_ShuffleQueueEntry_bool_exp!]
    allocatedShuffleRoomId: Int_comparison_exp
    created_at: timestamptz_comparison_exp
    id: bigint_comparison_exp
    isExpired: Boolean_comparison_exp
    registrant: registrant_Registrant_bool_exp
    registrantId: uuid_comparison_exp
    shufflePeriod: room_ShufflePeriod_bool_exp
    shufflePeriodId: uuid_comparison_exp
    shuffleRoom: room_ShuffleRoom_bool_exp
    updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "room.ShuffleQueueEntry"
"""
enum room_ShuffleQueueEntry_constraint {
    """
    unique or primary key constraint
    """
    ShuffleQueueEntry_pkey
    """
    unique or primary key constraint
    """
    room_ShuffleQueueEntry_isWaiting
}

"""
input type for incrementing numeric columns in table "room.ShuffleQueueEntry"
"""
input room_ShuffleQueueEntry_inc_input {
    allocatedShuffleRoomId: Int
    id: bigint
}

"""
input type for inserting data into table "room.ShuffleQueueEntry"
"""
input room_ShuffleQueueEntry_insert_input {
    allocatedShuffleRoomId: Int
    created_at: timestamptz
    id: bigint
    isExpired: Boolean
    registrant: registrant_Registrant_obj_rel_insert_input
    registrantId: uuid
    shufflePeriod: room_ShufflePeriod_obj_rel_insert_input
    shufflePeriodId: uuid
    shuffleRoom: room_ShuffleRoom_obj_rel_insert_input
    updated_at: timestamptz
}

"""
aggregate max on columns
"""
type room_ShuffleQueueEntry_max_fields {
    allocatedShuffleRoomId: Int
    created_at: timestamptz
    id: bigint
    registrantId: uuid
    shufflePeriodId: uuid
    updated_at: timestamptz
}

"""
order by max() on columns of table "room.ShuffleQueueEntry"
"""
input room_ShuffleQueueEntry_max_order_by {
    allocatedShuffleRoomId: order_by
    created_at: order_by
    id: order_by
    registrantId: order_by
    shufflePeriodId: order_by
    updated_at: order_by
}

"""
aggregate min on columns
"""
type room_ShuffleQueueEntry_min_fields {
    allocatedShuffleRoomId: Int
    created_at: timestamptz
    id: bigint
    registrantId: uuid
    shufflePeriodId: uuid
    updated_at: timestamptz
}

"""
order by min() on columns of table "room.ShuffleQueueEntry"
"""
input room_ShuffleQueueEntry_min_order_by {
    allocatedShuffleRoomId: order_by
    created_at: order_by
    id: order_by
    registrantId: order_by
    shufflePeriodId: order_by
    updated_at: order_by
}

"""
response of any mutation on the table "room.ShuffleQueueEntry"
"""
type room_ShuffleQueueEntry_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [room_ShuffleQueueEntry!]!
}

"""
on conflict condition type for table "room.ShuffleQueueEntry"
"""
input room_ShuffleQueueEntry_on_conflict {
    constraint: room_ShuffleQueueEntry_constraint!
    update_columns: [room_ShuffleQueueEntry_update_column!]! = []
    where: room_ShuffleQueueEntry_bool_exp
}

"""
Ordering options when selecting data from "room.ShuffleQueueEntry".
"""
input room_ShuffleQueueEntry_order_by {
    allocatedShuffleRoomId: order_by
    created_at: order_by
    id: order_by
    isExpired: order_by
    registrant: registrant_Registrant_order_by
    registrantId: order_by
    shufflePeriod: room_ShufflePeriod_order_by
    shufflePeriodId: order_by
    shuffleRoom: room_ShuffleRoom_order_by
    updated_at: order_by
}

"""
primary key columns input for table: room_ShuffleQueueEntry
"""
input room_ShuffleQueueEntry_pk_columns_input {
    id: bigint!
}

"""
select columns of table "room.ShuffleQueueEntry"
"""
enum room_ShuffleQueueEntry_select_column {
    """
    column name
    """
    allocatedShuffleRoomId
    """
    column name
    """
    created_at
    """
    column name
    """
    id
    """
    column name
    """
    isExpired
    """
    column name
    """
    registrantId
    """
    column name
    """
    shufflePeriodId
    """
    column name
    """
    updated_at
}

"""
input type for updating data in table "room.ShuffleQueueEntry"
"""
input room_ShuffleQueueEntry_set_input {
    allocatedShuffleRoomId: Int
    created_at: timestamptz
    id: bigint
    isExpired: Boolean
    registrantId: uuid
    shufflePeriodId: uuid
    updated_at: timestamptz
}

"""
aggregate stddev on columns
"""
type room_ShuffleQueueEntry_stddev_fields {
    allocatedShuffleRoomId: Float
    id: Float
}

"""
order by stddev() on columns of table "room.ShuffleQueueEntry"
"""
input room_ShuffleQueueEntry_stddev_order_by {
    allocatedShuffleRoomId: order_by
    id: order_by
}

"""
aggregate stddev_pop on columns
"""
type room_ShuffleQueueEntry_stddev_pop_fields {
    allocatedShuffleRoomId: Float
    id: Float
}

"""
order by stddev_pop() on columns of table "room.ShuffleQueueEntry"
"""
input room_ShuffleQueueEntry_stddev_pop_order_by {
    allocatedShuffleRoomId: order_by
    id: order_by
}

"""
aggregate stddev_samp on columns
"""
type room_ShuffleQueueEntry_stddev_samp_fields {
    allocatedShuffleRoomId: Float
    id: Float
}

"""
order by stddev_samp() on columns of table "room.ShuffleQueueEntry"
"""
input room_ShuffleQueueEntry_stddev_samp_order_by {
    allocatedShuffleRoomId: order_by
    id: order_by
}

"""
aggregate sum on columns
"""
type room_ShuffleQueueEntry_sum_fields {
    allocatedShuffleRoomId: Int
    id: bigint
}

"""
order by sum() on columns of table "room.ShuffleQueueEntry"
"""
input room_ShuffleQueueEntry_sum_order_by {
    allocatedShuffleRoomId: order_by
    id: order_by
}

"""
update columns of table "room.ShuffleQueueEntry"
"""
enum room_ShuffleQueueEntry_update_column {
    """
    column name
    """
    allocatedShuffleRoomId
    """
    column name
    """
    created_at
    """
    column name
    """
    id
    """
    column name
    """
    isExpired
    """
    column name
    """
    registrantId
    """
    column name
    """
    shufflePeriodId
    """
    column name
    """
    updated_at
}

"""
aggregate var_pop on columns
"""
type room_ShuffleQueueEntry_var_pop_fields {
    allocatedShuffleRoomId: Float
    id: Float
}

"""
order by var_pop() on columns of table "room.ShuffleQueueEntry"
"""
input room_ShuffleQueueEntry_var_pop_order_by {
    allocatedShuffleRoomId: order_by
    id: order_by
}

"""
aggregate var_samp on columns
"""
type room_ShuffleQueueEntry_var_samp_fields {
    allocatedShuffleRoomId: Float
    id: Float
}

"""
order by var_samp() on columns of table "room.ShuffleQueueEntry"
"""
input room_ShuffleQueueEntry_var_samp_order_by {
    allocatedShuffleRoomId: order_by
    id: order_by
}

"""
aggregate variance on columns
"""
type room_ShuffleQueueEntry_variance_fields {
    allocatedShuffleRoomId: Float
    id: Float
}

"""
order by variance() on columns of table "room.ShuffleQueueEntry"
"""
input room_ShuffleQueueEntry_variance_order_by {
    allocatedShuffleRoomId: order_by
    id: order_by
}

"""
columns and relationships of "room.ShuffleRoom"
"""
type room_ShuffleRoom {
    """
    An array relationship
    """
    continuations(
        """
        distinct select on columns
        """
        distinct_on: [schedule_Continuation_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_Continuation_order_by!]
        """
        filter the rows returned
        """
        where: schedule_Continuation_bool_exp
    ): [schedule_Continuation!]!
    """
    An aggregate relationship
    """
    continuations_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [schedule_Continuation_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_Continuation_order_by!]
        """
        filter the rows returned
        """
        where: schedule_Continuation_bool_exp
    ): schedule_Continuation_aggregate!
    created_at: timestamptz!
    durationMinutes: Int!
    id: bigint!
    isEnded: Boolean!
    """
    An array relationship
    """
    queueEntries(
        """
        distinct select on columns
        """
        distinct_on: [room_ShuffleQueueEntry_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_ShuffleQueueEntry_order_by!]
        """
        filter the rows returned
        """
        where: room_ShuffleQueueEntry_bool_exp
    ): [room_ShuffleQueueEntry!]!
    """
    An aggregate relationship
    """
    queueEntries_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_ShuffleQueueEntry_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_ShuffleQueueEntry_order_by!]
        """
        filter the rows returned
        """
        where: room_ShuffleQueueEntry_bool_exp
    ): room_ShuffleQueueEntry_aggregate!
    reshuffleUponEnd: Boolean!
    """
    An object relationship
    """
    room: room_Room!
    roomId: uuid!
    """
    An object relationship
    """
    shufflePeriod: room_ShufflePeriod!
    shufflePeriodId: uuid!
    startedAt: timestamptz!
    updated_at: timestamptz!
}

"""
aggregated selection of "room.ShuffleRoom"
"""
type room_ShuffleRoom_aggregate {
    aggregate: room_ShuffleRoom_aggregate_fields
    nodes: [room_ShuffleRoom!]!
}

"""
aggregate fields of "room.ShuffleRoom"
"""
type room_ShuffleRoom_aggregate_fields {
    avg: room_ShuffleRoom_avg_fields
    count(columns: [room_ShuffleRoom_select_column!], distinct: Boolean): Int!
    max: room_ShuffleRoom_max_fields
    min: room_ShuffleRoom_min_fields
    stddev: room_ShuffleRoom_stddev_fields
    stddev_pop: room_ShuffleRoom_stddev_pop_fields
    stddev_samp: room_ShuffleRoom_stddev_samp_fields
    sum: room_ShuffleRoom_sum_fields
    var_pop: room_ShuffleRoom_var_pop_fields
    var_samp: room_ShuffleRoom_var_samp_fields
    variance: room_ShuffleRoom_variance_fields
}

"""
order by aggregate values of table "room.ShuffleRoom"
"""
input room_ShuffleRoom_aggregate_order_by {
    avg: room_ShuffleRoom_avg_order_by
    count: order_by
    max: room_ShuffleRoom_max_order_by
    min: room_ShuffleRoom_min_order_by
    stddev: room_ShuffleRoom_stddev_order_by
    stddev_pop: room_ShuffleRoom_stddev_pop_order_by
    stddev_samp: room_ShuffleRoom_stddev_samp_order_by
    sum: room_ShuffleRoom_sum_order_by
    var_pop: room_ShuffleRoom_var_pop_order_by
    var_samp: room_ShuffleRoom_var_samp_order_by
    variance: room_ShuffleRoom_variance_order_by
}

"""
input type for inserting array relation for remote table "room.ShuffleRoom"
"""
input room_ShuffleRoom_arr_rel_insert_input {
    data: [room_ShuffleRoom_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: room_ShuffleRoom_on_conflict
}

"""
aggregate avg on columns
"""
type room_ShuffleRoom_avg_fields {
    durationMinutes: Float
    id: Float
}

"""
order by avg() on columns of table "room.ShuffleRoom"
"""
input room_ShuffleRoom_avg_order_by {
    durationMinutes: order_by
    id: order_by
}

"""
Boolean expression to filter rows from the table "room.ShuffleRoom". All fields are combined with a logical 'AND'.
"""
input room_ShuffleRoom_bool_exp {
    _and: [room_ShuffleRoom_bool_exp!]
    _not: room_ShuffleRoom_bool_exp
    _or: [room_ShuffleRoom_bool_exp!]
    continuations: schedule_Continuation_bool_exp
    created_at: timestamptz_comparison_exp
    durationMinutes: Int_comparison_exp
    id: bigint_comparison_exp
    isEnded: Boolean_comparison_exp
    queueEntries: room_ShuffleQueueEntry_bool_exp
    reshuffleUponEnd: Boolean_comparison_exp
    room: room_Room_bool_exp
    roomId: uuid_comparison_exp
    shufflePeriod: room_ShufflePeriod_bool_exp
    shufflePeriodId: uuid_comparison_exp
    startedAt: timestamptz_comparison_exp
    updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "room.ShuffleRoom"
"""
enum room_ShuffleRoom_constraint {
    """
    unique or primary key constraint
    """
    ShuffleRoom_pkey
}

"""
input type for incrementing numeric columns in table "room.ShuffleRoom"
"""
input room_ShuffleRoom_inc_input {
    durationMinutes: Int
    id: bigint
}

"""
input type for inserting data into table "room.ShuffleRoom"
"""
input room_ShuffleRoom_insert_input {
    continuations: schedule_Continuation_arr_rel_insert_input
    created_at: timestamptz
    durationMinutes: Int
    id: bigint
    isEnded: Boolean
    queueEntries: room_ShuffleQueueEntry_arr_rel_insert_input
    reshuffleUponEnd: Boolean
    room: room_Room_obj_rel_insert_input
    roomId: uuid
    shufflePeriod: room_ShufflePeriod_obj_rel_insert_input
    shufflePeriodId: uuid
    startedAt: timestamptz
    updated_at: timestamptz
}

"""
aggregate max on columns
"""
type room_ShuffleRoom_max_fields {
    created_at: timestamptz
    durationMinutes: Int
    id: bigint
    roomId: uuid
    shufflePeriodId: uuid
    startedAt: timestamptz
    updated_at: timestamptz
}

"""
order by max() on columns of table "room.ShuffleRoom"
"""
input room_ShuffleRoom_max_order_by {
    created_at: order_by
    durationMinutes: order_by
    id: order_by
    roomId: order_by
    shufflePeriodId: order_by
    startedAt: order_by
    updated_at: order_by
}

"""
aggregate min on columns
"""
type room_ShuffleRoom_min_fields {
    created_at: timestamptz
    durationMinutes: Int
    id: bigint
    roomId: uuid
    shufflePeriodId: uuid
    startedAt: timestamptz
    updated_at: timestamptz
}

"""
order by min() on columns of table "room.ShuffleRoom"
"""
input room_ShuffleRoom_min_order_by {
    created_at: order_by
    durationMinutes: order_by
    id: order_by
    roomId: order_by
    shufflePeriodId: order_by
    startedAt: order_by
    updated_at: order_by
}

"""
response of any mutation on the table "room.ShuffleRoom"
"""
type room_ShuffleRoom_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [room_ShuffleRoom!]!
}

"""
input type for inserting object relation for remote table "room.ShuffleRoom"
"""
input room_ShuffleRoom_obj_rel_insert_input {
    data: room_ShuffleRoom_insert_input!
    """
    on conflict condition
    """
    on_conflict: room_ShuffleRoom_on_conflict
}

"""
on conflict condition type for table "room.ShuffleRoom"
"""
input room_ShuffleRoom_on_conflict {
    constraint: room_ShuffleRoom_constraint!
    update_columns: [room_ShuffleRoom_update_column!]! = []
    where: room_ShuffleRoom_bool_exp
}

"""
Ordering options when selecting data from "room.ShuffleRoom".
"""
input room_ShuffleRoom_order_by {
    continuations_aggregate: schedule_Continuation_aggregate_order_by
    created_at: order_by
    durationMinutes: order_by
    id: order_by
    isEnded: order_by
    queueEntries_aggregate: room_ShuffleQueueEntry_aggregate_order_by
    reshuffleUponEnd: order_by
    room: room_Room_order_by
    roomId: order_by
    shufflePeriod: room_ShufflePeriod_order_by
    shufflePeriodId: order_by
    startedAt: order_by
    updated_at: order_by
}

"""
primary key columns input for table: room_ShuffleRoom
"""
input room_ShuffleRoom_pk_columns_input {
    id: bigint!
}

"""
select columns of table "room.ShuffleRoom"
"""
enum room_ShuffleRoom_select_column {
    """
    column name
    """
    created_at
    """
    column name
    """
    durationMinutes
    """
    column name
    """
    id
    """
    column name
    """
    isEnded
    """
    column name
    """
    reshuffleUponEnd
    """
    column name
    """
    roomId
    """
    column name
    """
    shufflePeriodId
    """
    column name
    """
    startedAt
    """
    column name
    """
    updated_at
}

"""
input type for updating data in table "room.ShuffleRoom"
"""
input room_ShuffleRoom_set_input {
    created_at: timestamptz
    durationMinutes: Int
    id: bigint
    isEnded: Boolean
    reshuffleUponEnd: Boolean
    roomId: uuid
    shufflePeriodId: uuid
    startedAt: timestamptz
    updated_at: timestamptz
}

"""
aggregate stddev on columns
"""
type room_ShuffleRoom_stddev_fields {
    durationMinutes: Float
    id: Float
}

"""
order by stddev() on columns of table "room.ShuffleRoom"
"""
input room_ShuffleRoom_stddev_order_by {
    durationMinutes: order_by
    id: order_by
}

"""
aggregate stddev_pop on columns
"""
type room_ShuffleRoom_stddev_pop_fields {
    durationMinutes: Float
    id: Float
}

"""
order by stddev_pop() on columns of table "room.ShuffleRoom"
"""
input room_ShuffleRoom_stddev_pop_order_by {
    durationMinutes: order_by
    id: order_by
}

"""
aggregate stddev_samp on columns
"""
type room_ShuffleRoom_stddev_samp_fields {
    durationMinutes: Float
    id: Float
}

"""
order by stddev_samp() on columns of table "room.ShuffleRoom"
"""
input room_ShuffleRoom_stddev_samp_order_by {
    durationMinutes: order_by
    id: order_by
}

"""
aggregate sum on columns
"""
type room_ShuffleRoom_sum_fields {
    durationMinutes: Int
    id: bigint
}

"""
order by sum() on columns of table "room.ShuffleRoom"
"""
input room_ShuffleRoom_sum_order_by {
    durationMinutes: order_by
    id: order_by
}

"""
update columns of table "room.ShuffleRoom"
"""
enum room_ShuffleRoom_update_column {
    """
    column name
    """
    created_at
    """
    column name
    """
    durationMinutes
    """
    column name
    """
    id
    """
    column name
    """
    isEnded
    """
    column name
    """
    reshuffleUponEnd
    """
    column name
    """
    roomId
    """
    column name
    """
    shufflePeriodId
    """
    column name
    """
    startedAt
    """
    column name
    """
    updated_at
}

"""
aggregate var_pop on columns
"""
type room_ShuffleRoom_var_pop_fields {
    durationMinutes: Float
    id: Float
}

"""
order by var_pop() on columns of table "room.ShuffleRoom"
"""
input room_ShuffleRoom_var_pop_order_by {
    durationMinutes: order_by
    id: order_by
}

"""
aggregate var_samp on columns
"""
type room_ShuffleRoom_var_samp_fields {
    durationMinutes: Float
    id: Float
}

"""
order by var_samp() on columns of table "room.ShuffleRoom"
"""
input room_ShuffleRoom_var_samp_order_by {
    durationMinutes: order_by
    id: order_by
}

"""
aggregate variance on columns
"""
type room_ShuffleRoom_variance_fields {
    durationMinutes: Float
    id: Float
}

"""
order by variance() on columns of table "room.ShuffleRoom"
"""
input room_ShuffleRoom_variance_order_by {
    durationMinutes: order_by
    id: order_by
}

"""
A continuation from the end of an event or shuffle room to the next thing. Enables organisers to create a guided flow for attendees. It is possible to specify multiple continuations from the same point, giving attendees a choice of where to go.


columns and relationships of "schedule.Continuation"
"""
type schedule_Continuation {
    colour: String!
    defaultFor: String!
    description: String!
    """
    An object relationship
    """
    event: schedule_Event
    fromEvent: uuid
    fromShuffleQueue: uuid
    id: uuid!
    isActiveChoice: Boolean!
    priority: Int!
    """
    An object relationship
    """
    shufflePeriod: room_ShufflePeriod
    to(
        """
        JSON select path
        """
        path: String
    ): jsonb!
}

"""
aggregated selection of "schedule.Continuation"
"""
type schedule_Continuation_aggregate {
    aggregate: schedule_Continuation_aggregate_fields
    nodes: [schedule_Continuation!]!
}

"""
aggregate fields of "schedule.Continuation"
"""
type schedule_Continuation_aggregate_fields {
    avg: schedule_Continuation_avg_fields
    count(columns: [schedule_Continuation_select_column!], distinct: Boolean): Int!
    max: schedule_Continuation_max_fields
    min: schedule_Continuation_min_fields
    stddev: schedule_Continuation_stddev_fields
    stddev_pop: schedule_Continuation_stddev_pop_fields
    stddev_samp: schedule_Continuation_stddev_samp_fields
    sum: schedule_Continuation_sum_fields
    var_pop: schedule_Continuation_var_pop_fields
    var_samp: schedule_Continuation_var_samp_fields
    variance: schedule_Continuation_variance_fields
}

"""
order by aggregate values of table "schedule.Continuation"
"""
input schedule_Continuation_aggregate_order_by {
    avg: schedule_Continuation_avg_order_by
    count: order_by
    max: schedule_Continuation_max_order_by
    min: schedule_Continuation_min_order_by
    stddev: schedule_Continuation_stddev_order_by
    stddev_pop: schedule_Continuation_stddev_pop_order_by
    stddev_samp: schedule_Continuation_stddev_samp_order_by
    sum: schedule_Continuation_sum_order_by
    var_pop: schedule_Continuation_var_pop_order_by
    var_samp: schedule_Continuation_var_samp_order_by
    variance: schedule_Continuation_variance_order_by
}

"""
append existing jsonb value of filtered columns with new jsonb value
"""
input schedule_Continuation_append_input {
    to: jsonb
}

"""
input type for inserting array relation for remote table "schedule.Continuation"
"""
input schedule_Continuation_arr_rel_insert_input {
    data: [schedule_Continuation_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: schedule_Continuation_on_conflict
}

"""
aggregate avg on columns
"""
type schedule_Continuation_avg_fields {
    priority: Float
}

"""
order by avg() on columns of table "schedule.Continuation"
"""
input schedule_Continuation_avg_order_by {
    priority: order_by
}

"""
Boolean expression to filter rows from the table "schedule.Continuation". All fields are combined with a logical 'AND'.
"""
input schedule_Continuation_bool_exp {
    _and: [schedule_Continuation_bool_exp!]
    _not: schedule_Continuation_bool_exp
    _or: [schedule_Continuation_bool_exp!]
    colour: String_comparison_exp
    defaultFor: String_comparison_exp
    description: String_comparison_exp
    event: schedule_Event_bool_exp
    fromEvent: uuid_comparison_exp
    fromShuffleQueue: uuid_comparison_exp
    id: uuid_comparison_exp
    isActiveChoice: Boolean_comparison_exp
    priority: Int_comparison_exp
    shufflePeriod: room_ShufflePeriod_bool_exp
    to: jsonb_comparison_exp
}

"""
unique or primary key constraints on table "schedule.Continuation"
"""
enum schedule_Continuation_constraint {
    """
    unique or primary key constraint
    """
    Continuation_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input schedule_Continuation_delete_at_path_input {
    to: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input schedule_Continuation_delete_elem_input {
    to: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input schedule_Continuation_delete_key_input {
    to: String
}

"""
input type for incrementing numeric columns in table "schedule.Continuation"
"""
input schedule_Continuation_inc_input {
    priority: Int
}

"""
input type for inserting data into table "schedule.Continuation"
"""
input schedule_Continuation_insert_input {
    colour: String
    defaultFor: String
    description: String
    event: schedule_Event_obj_rel_insert_input
    fromEvent: uuid
    fromShuffleQueue: uuid
    id: uuid
    isActiveChoice: Boolean
    priority: Int
    shufflePeriod: room_ShufflePeriod_obj_rel_insert_input
    to: jsonb
}

"""
aggregate max on columns
"""
type schedule_Continuation_max_fields {
    colour: String
    defaultFor: String
    description: String
    fromEvent: uuid
    fromShuffleQueue: uuid
    id: uuid
    priority: Int
}

"""
order by max() on columns of table "schedule.Continuation"
"""
input schedule_Continuation_max_order_by {
    colour: order_by
    defaultFor: order_by
    description: order_by
    fromEvent: order_by
    fromShuffleQueue: order_by
    id: order_by
    priority: order_by
}

"""
aggregate min on columns
"""
type schedule_Continuation_min_fields {
    colour: String
    defaultFor: String
    description: String
    fromEvent: uuid
    fromShuffleQueue: uuid
    id: uuid
    priority: Int
}

"""
order by min() on columns of table "schedule.Continuation"
"""
input schedule_Continuation_min_order_by {
    colour: order_by
    defaultFor: order_by
    description: order_by
    fromEvent: order_by
    fromShuffleQueue: order_by
    id: order_by
    priority: order_by
}

"""
response of any mutation on the table "schedule.Continuation"
"""
type schedule_Continuation_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [schedule_Continuation!]!
}

"""
on conflict condition type for table "schedule.Continuation"
"""
input schedule_Continuation_on_conflict {
    constraint: schedule_Continuation_constraint!
    update_columns: [schedule_Continuation_update_column!]! = []
    where: schedule_Continuation_bool_exp
}

"""
Ordering options when selecting data from "schedule.Continuation".
"""
input schedule_Continuation_order_by {
    colour: order_by
    defaultFor: order_by
    description: order_by
    event: schedule_Event_order_by
    fromEvent: order_by
    fromShuffleQueue: order_by
    id: order_by
    isActiveChoice: order_by
    priority: order_by
    shufflePeriod: room_ShufflePeriod_order_by
    to: order_by
}

"""
primary key columns input for table: schedule_Continuation
"""
input schedule_Continuation_pk_columns_input {
    id: uuid!
}

"""
prepend existing jsonb value of filtered columns with new jsonb value
"""
input schedule_Continuation_prepend_input {
    to: jsonb
}

"""
select columns of table "schedule.Continuation"
"""
enum schedule_Continuation_select_column {
    """
    column name
    """
    colour
    """
    column name
    """
    defaultFor
    """
    column name
    """
    description
    """
    column name
    """
    fromEvent
    """
    column name
    """
    fromShuffleQueue
    """
    column name
    """
    id
    """
    column name
    """
    isActiveChoice
    """
    column name
    """
    priority
    """
    column name
    """
    to
}

"""
input type for updating data in table "schedule.Continuation"
"""
input schedule_Continuation_set_input {
    colour: String
    defaultFor: String
    description: String
    fromEvent: uuid
    fromShuffleQueue: uuid
    id: uuid
    isActiveChoice: Boolean
    priority: Int
    to: jsonb
}

"""
aggregate stddev on columns
"""
type schedule_Continuation_stddev_fields {
    priority: Float
}

"""
order by stddev() on columns of table "schedule.Continuation"
"""
input schedule_Continuation_stddev_order_by {
    priority: order_by
}

"""
aggregate stddev_pop on columns
"""
type schedule_Continuation_stddev_pop_fields {
    priority: Float
}

"""
order by stddev_pop() on columns of table "schedule.Continuation"
"""
input schedule_Continuation_stddev_pop_order_by {
    priority: order_by
}

"""
aggregate stddev_samp on columns
"""
type schedule_Continuation_stddev_samp_fields {
    priority: Float
}

"""
order by stddev_samp() on columns of table "schedule.Continuation"
"""
input schedule_Continuation_stddev_samp_order_by {
    priority: order_by
}

"""
aggregate sum on columns
"""
type schedule_Continuation_sum_fields {
    priority: Int
}

"""
order by sum() on columns of table "schedule.Continuation"
"""
input schedule_Continuation_sum_order_by {
    priority: order_by
}

"""
update columns of table "schedule.Continuation"
"""
enum schedule_Continuation_update_column {
    """
    column name
    """
    colour
    """
    column name
    """
    defaultFor
    """
    column name
    """
    description
    """
    column name
    """
    fromEvent
    """
    column name
    """
    fromShuffleQueue
    """
    column name
    """
    id
    """
    column name
    """
    isActiveChoice
    """
    column name
    """
    priority
    """
    column name
    """
    to
}

"""
aggregate var_pop on columns
"""
type schedule_Continuation_var_pop_fields {
    priority: Float
}

"""
order by var_pop() on columns of table "schedule.Continuation"
"""
input schedule_Continuation_var_pop_order_by {
    priority: order_by
}

"""
aggregate var_samp on columns
"""
type schedule_Continuation_var_samp_fields {
    priority: Float
}

"""
order by var_samp() on columns of table "schedule.Continuation"
"""
input schedule_Continuation_var_samp_order_by {
    priority: order_by
}

"""
aggregate variance on columns
"""
type schedule_Continuation_variance_fields {
    priority: Float
}

"""
order by variance() on columns of table "schedule.Continuation"
"""
input schedule_Continuation_variance_order_by {
    priority: order_by
}

"""
columns and relationships of "schedule.CurrentEvents"
"""
type schedule_CurrentEvents {
    conferenceId: uuid
    created_at: timestamptz
    durationSeconds: Int
    enableRecording: Boolean
    endTime: timestamptz
    """
    An array relationship
    """
    eventPeople(
        """
        distinct select on columns
        """
        distinct_on: [schedule_EventProgramPerson_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_EventProgramPerson_order_by!]
        """
        filter the rows returned
        """
        where: schedule_EventProgramPerson_bool_exp
    ): [schedule_EventProgramPerson!]!
    """
    An aggregate relationship
    """
    eventPeople_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [schedule_EventProgramPerson_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_EventProgramPerson_order_by!]
        """
        filter the rows returned
        """
        where: schedule_EventProgramPerson_bool_exp
    ): schedule_EventProgramPerson_aggregate!
    exhibitionId: uuid
    id: uuid
    intendedRoomModeName: String
    itemId: uuid
    name: String
    """
    An object relationship
    """
    room: room_Room
    roomId: uuid
    shufflePeriodId: uuid
    startTime: timestamptz
    streamTextEventId: String
    subconferenceId: uuid
    timings_updated_at: timestamptz
    updated_at: timestamptz
    visibilityLevel: String
}

"""
aggregated selection of "schedule.CurrentEvents"
"""
type schedule_CurrentEvents_aggregate {
    aggregate: schedule_CurrentEvents_aggregate_fields
    nodes: [schedule_CurrentEvents!]!
}

"""
aggregate fields of "schedule.CurrentEvents"
"""
type schedule_CurrentEvents_aggregate_fields {
    avg: schedule_CurrentEvents_avg_fields
    count(columns: [schedule_CurrentEvents_select_column!], distinct: Boolean): Int!
    max: schedule_CurrentEvents_max_fields
    min: schedule_CurrentEvents_min_fields
    stddev: schedule_CurrentEvents_stddev_fields
    stddev_pop: schedule_CurrentEvents_stddev_pop_fields
    stddev_samp: schedule_CurrentEvents_stddev_samp_fields
    sum: schedule_CurrentEvents_sum_fields
    var_pop: schedule_CurrentEvents_var_pop_fields
    var_samp: schedule_CurrentEvents_var_samp_fields
    variance: schedule_CurrentEvents_variance_fields
}

"""
order by aggregate values of table "schedule.CurrentEvents"
"""
input schedule_CurrentEvents_aggregate_order_by {
    avg: schedule_CurrentEvents_avg_order_by
    count: order_by
    max: schedule_CurrentEvents_max_order_by
    min: schedule_CurrentEvents_min_order_by
    stddev: schedule_CurrentEvents_stddev_order_by
    stddev_pop: schedule_CurrentEvents_stddev_pop_order_by
    stddev_samp: schedule_CurrentEvents_stddev_samp_order_by
    sum: schedule_CurrentEvents_sum_order_by
    var_pop: schedule_CurrentEvents_var_pop_order_by
    var_samp: schedule_CurrentEvents_var_samp_order_by
    variance: schedule_CurrentEvents_variance_order_by
}

"""
input type for inserting array relation for remote table "schedule.CurrentEvents"
"""
input schedule_CurrentEvents_arr_rel_insert_input {
    data: [schedule_CurrentEvents_insert_input!]!
}

"""
aggregate avg on columns
"""
type schedule_CurrentEvents_avg_fields {
    durationSeconds: Float
}

"""
order by avg() on columns of table "schedule.CurrentEvents"
"""
input schedule_CurrentEvents_avg_order_by {
    durationSeconds: order_by
}

"""
Boolean expression to filter rows from the table "schedule.CurrentEvents". All fields are combined with a logical 'AND'.
"""
input schedule_CurrentEvents_bool_exp {
    _and: [schedule_CurrentEvents_bool_exp!]
    _not: schedule_CurrentEvents_bool_exp
    _or: [schedule_CurrentEvents_bool_exp!]
    conferenceId: uuid_comparison_exp
    created_at: timestamptz_comparison_exp
    durationSeconds: Int_comparison_exp
    enableRecording: Boolean_comparison_exp
    endTime: timestamptz_comparison_exp
    eventPeople: schedule_EventProgramPerson_bool_exp
    exhibitionId: uuid_comparison_exp
    id: uuid_comparison_exp
    intendedRoomModeName: String_comparison_exp
    itemId: uuid_comparison_exp
    name: String_comparison_exp
    room: room_Room_bool_exp
    roomId: uuid_comparison_exp
    shufflePeriodId: uuid_comparison_exp
    startTime: timestamptz_comparison_exp
    streamTextEventId: String_comparison_exp
    subconferenceId: uuid_comparison_exp
    timings_updated_at: timestamptz_comparison_exp
    updated_at: timestamptz_comparison_exp
    visibilityLevel: String_comparison_exp
}

"""
input type for incrementing numeric columns in table "schedule.CurrentEvents"
"""
input schedule_CurrentEvents_inc_input {
    durationSeconds: Int
}

"""
input type for inserting data into table "schedule.CurrentEvents"
"""
input schedule_CurrentEvents_insert_input {
    conferenceId: uuid
    created_at: timestamptz
    durationSeconds: Int
    enableRecording: Boolean
    endTime: timestamptz
    eventPeople: schedule_EventProgramPerson_arr_rel_insert_input
    exhibitionId: uuid
    id: uuid
    intendedRoomModeName: String
    itemId: uuid
    name: String
    room: room_Room_obj_rel_insert_input
    roomId: uuid
    shufflePeriodId: uuid
    startTime: timestamptz
    streamTextEventId: String
    subconferenceId: uuid
    timings_updated_at: timestamptz
    updated_at: timestamptz
    visibilityLevel: String
}

"""
aggregate max on columns
"""
type schedule_CurrentEvents_max_fields {
    conferenceId: uuid
    created_at: timestamptz
    durationSeconds: Int
    endTime: timestamptz
    exhibitionId: uuid
    id: uuid
    intendedRoomModeName: String
    itemId: uuid
    name: String
    roomId: uuid
    shufflePeriodId: uuid
    startTime: timestamptz
    streamTextEventId: String
    subconferenceId: uuid
    timings_updated_at: timestamptz
    updated_at: timestamptz
    visibilityLevel: String
}

"""
order by max() on columns of table "schedule.CurrentEvents"
"""
input schedule_CurrentEvents_max_order_by {
    conferenceId: order_by
    created_at: order_by
    durationSeconds: order_by
    endTime: order_by
    exhibitionId: order_by
    id: order_by
    intendedRoomModeName: order_by
    itemId: order_by
    name: order_by
    roomId: order_by
    shufflePeriodId: order_by
    startTime: order_by
    streamTextEventId: order_by
    subconferenceId: order_by
    timings_updated_at: order_by
    updated_at: order_by
    visibilityLevel: order_by
}

"""
aggregate min on columns
"""
type schedule_CurrentEvents_min_fields {
    conferenceId: uuid
    created_at: timestamptz
    durationSeconds: Int
    endTime: timestamptz
    exhibitionId: uuid
    id: uuid
    intendedRoomModeName: String
    itemId: uuid
    name: String
    roomId: uuid
    shufflePeriodId: uuid
    startTime: timestamptz
    streamTextEventId: String
    subconferenceId: uuid
    timings_updated_at: timestamptz
    updated_at: timestamptz
    visibilityLevel: String
}

"""
order by min() on columns of table "schedule.CurrentEvents"
"""
input schedule_CurrentEvents_min_order_by {
    conferenceId: order_by
    created_at: order_by
    durationSeconds: order_by
    endTime: order_by
    exhibitionId: order_by
    id: order_by
    intendedRoomModeName: order_by
    itemId: order_by
    name: order_by
    roomId: order_by
    shufflePeriodId: order_by
    startTime: order_by
    streamTextEventId: order_by
    subconferenceId: order_by
    timings_updated_at: order_by
    updated_at: order_by
    visibilityLevel: order_by
}

"""
response of any mutation on the table "schedule.CurrentEvents"
"""
type schedule_CurrentEvents_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [schedule_CurrentEvents!]!
}

"""
Ordering options when selecting data from "schedule.CurrentEvents".
"""
input schedule_CurrentEvents_order_by {
    conferenceId: order_by
    created_at: order_by
    durationSeconds: order_by
    enableRecording: order_by
    endTime: order_by
    eventPeople_aggregate: schedule_EventProgramPerson_aggregate_order_by
    exhibitionId: order_by
    id: order_by
    intendedRoomModeName: order_by
    itemId: order_by
    name: order_by
    room: room_Room_order_by
    roomId: order_by
    shufflePeriodId: order_by
    startTime: order_by
    streamTextEventId: order_by
    subconferenceId: order_by
    timings_updated_at: order_by
    updated_at: order_by
    visibilityLevel: order_by
}

"""
select columns of table "schedule.CurrentEvents"
"""
enum schedule_CurrentEvents_select_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    created_at
    """
    column name
    """
    durationSeconds
    """
    column name
    """
    enableRecording
    """
    column name
    """
    endTime
    """
    column name
    """
    exhibitionId
    """
    column name
    """
    id
    """
    column name
    """
    intendedRoomModeName
    """
    column name
    """
    itemId
    """
    column name
    """
    name
    """
    column name
    """
    roomId
    """
    column name
    """
    shufflePeriodId
    """
    column name
    """
    startTime
    """
    column name
    """
    streamTextEventId
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    timings_updated_at
    """
    column name
    """
    updated_at
    """
    column name
    """
    visibilityLevel
}

"""
input type for updating data in table "schedule.CurrentEvents"
"""
input schedule_CurrentEvents_set_input {
    conferenceId: uuid
    created_at: timestamptz
    durationSeconds: Int
    enableRecording: Boolean
    endTime: timestamptz
    exhibitionId: uuid
    id: uuid
    intendedRoomModeName: String
    itemId: uuid
    name: String
    roomId: uuid
    shufflePeriodId: uuid
    startTime: timestamptz
    streamTextEventId: String
    subconferenceId: uuid
    timings_updated_at: timestamptz
    updated_at: timestamptz
    visibilityLevel: String
}

"""
aggregate stddev on columns
"""
type schedule_CurrentEvents_stddev_fields {
    durationSeconds: Float
}

"""
order by stddev() on columns of table "schedule.CurrentEvents"
"""
input schedule_CurrentEvents_stddev_order_by {
    durationSeconds: order_by
}

"""
aggregate stddev_pop on columns
"""
type schedule_CurrentEvents_stddev_pop_fields {
    durationSeconds: Float
}

"""
order by stddev_pop() on columns of table "schedule.CurrentEvents"
"""
input schedule_CurrentEvents_stddev_pop_order_by {
    durationSeconds: order_by
}

"""
aggregate stddev_samp on columns
"""
type schedule_CurrentEvents_stddev_samp_fields {
    durationSeconds: Float
}

"""
order by stddev_samp() on columns of table "schedule.CurrentEvents"
"""
input schedule_CurrentEvents_stddev_samp_order_by {
    durationSeconds: order_by
}

"""
aggregate sum on columns
"""
type schedule_CurrentEvents_sum_fields {
    durationSeconds: Int
}

"""
order by sum() on columns of table "schedule.CurrentEvents"
"""
input schedule_CurrentEvents_sum_order_by {
    durationSeconds: order_by
}

"""
aggregate var_pop on columns
"""
type schedule_CurrentEvents_var_pop_fields {
    durationSeconds: Float
}

"""
order by var_pop() on columns of table "schedule.CurrentEvents"
"""
input schedule_CurrentEvents_var_pop_order_by {
    durationSeconds: order_by
}

"""
aggregate var_samp on columns
"""
type schedule_CurrentEvents_var_samp_fields {
    durationSeconds: Float
}

"""
order by var_samp() on columns of table "schedule.CurrentEvents"
"""
input schedule_CurrentEvents_var_samp_order_by {
    durationSeconds: order_by
}

"""
aggregate variance on columns
"""
type schedule_CurrentEvents_variance_fields {
    durationSeconds: Float
}

"""
order by variance() on columns of table "schedule.CurrentEvents"
"""
input schedule_CurrentEvents_variance_order_by {
    durationSeconds: order_by
}

"""
columns and relationships of "schedule.Event"
"""
type schedule_Event {
    automaticParticipationSurvey: Boolean!
    """
    An object relationship
    """
    conference: conference_Conference!
    conferenceId: uuid!
    """
    An array relationship
    """
    continuations(
        """
        distinct select on columns
        """
        distinct_on: [schedule_Continuation_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_Continuation_order_by!]
        """
        filter the rows returned
        """
        where: schedule_Continuation_bool_exp
    ): [schedule_Continuation!]!
    """
    An aggregate relationship
    """
    continuations_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [schedule_Continuation_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_Continuation_order_by!]
        """
        filter the rows returned
        """
        where: schedule_Continuation_bool_exp
    ): schedule_Continuation_aggregate!
    createdAt: timestamptz!
    durationSeconds: Int!
    enableRecording: Boolean!
    endTime: timestamptz
    """
    An array relationship
    """
    eventPeople(
        """
        distinct select on columns
        """
        distinct_on: [schedule_EventProgramPerson_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_EventProgramPerson_order_by!]
        """
        filter the rows returned
        """
        where: schedule_EventProgramPerson_bool_exp
    ): [schedule_EventProgramPerson!]!
    """
    An aggregate relationship
    """
    eventPeople_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [schedule_EventProgramPerson_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_EventProgramPerson_order_by!]
        """
        filter the rows returned
        """
        where: schedule_EventProgramPerson_bool_exp
    ): schedule_EventProgramPerson_aggregate!
    """
    An object relationship
    """
    eventVonageSession: video_EventVonageSession
    """
    An object relationship
    """
    exhibition: collection_Exhibition
    exhibitionId: uuid
    id: uuid!
    intendedRoomModeName: room_Mode_enum!
    """
    An object relationship
    """
    item: content_Item
    itemId: uuid
    name: String!
    """
    An object relationship
    """
    room: room_Room!
    roomId: uuid!
    """
    An object relationship
    """
    roomMode: room_Mode!
    """
    A computed field, executes function "schedule.eventRoomName"
    """
    roomName: String
    """
    An object relationship
    """
    shufflePeriod: room_ShufflePeriod
    shufflePeriodId: uuid
    startTime: timestamptz!
    streamTextEventId: String
    subconferenceId: uuid
    timingsUpdatedAt: timestamptz!
    updatedAt: timestamptz!
    visibilityLevel: conference_VisibilityLevel_enum!
}

"""
columns and relationships of "schedule.EventProgramPerson"
"""
type schedule_EventProgramPerson {
    createdAt: timestamptz!
    """
    An object relationship
    """
    event: schedule_Event!
    eventId: uuid!
    """
    An object relationship
    """
    eventPersonRole: schedule_EventProgramPersonRole!
    id: uuid!
    """
    An object relationship
    """
    person: collection_ProgramPerson!
    personId: uuid!
    roleName: schedule_EventProgramPersonRole_enum!
    updatedAt: timestamptz!
}

"""
columns and relationships of "schedule.EventProgramPersonRole"
"""
type schedule_EventProgramPersonRole {
    description: String!
    """
    An array relationship
    """
    eventPeople(
        """
        distinct select on columns
        """
        distinct_on: [schedule_EventProgramPerson_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_EventProgramPerson_order_by!]
        """
        filter the rows returned
        """
        where: schedule_EventProgramPerson_bool_exp
    ): [schedule_EventProgramPerson!]!
    """
    An aggregate relationship
    """
    eventPeople_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [schedule_EventProgramPerson_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_EventProgramPerson_order_by!]
        """
        filter the rows returned
        """
        where: schedule_EventProgramPerson_bool_exp
    ): schedule_EventProgramPerson_aggregate!
    name: String!
}

"""
aggregated selection of "schedule.EventProgramPersonRole"
"""
type schedule_EventProgramPersonRole_aggregate {
    aggregate: schedule_EventProgramPersonRole_aggregate_fields
    nodes: [schedule_EventProgramPersonRole!]!
}

"""
aggregate fields of "schedule.EventProgramPersonRole"
"""
type schedule_EventProgramPersonRole_aggregate_fields {
    count(columns: [schedule_EventProgramPersonRole_select_column!], distinct: Boolean): Int!
    max: schedule_EventProgramPersonRole_max_fields
    min: schedule_EventProgramPersonRole_min_fields
}

"""
Boolean expression to filter rows from the table "schedule.EventProgramPersonRole". All fields are combined with a logical 'AND'.
"""
input schedule_EventProgramPersonRole_bool_exp {
    _and: [schedule_EventProgramPersonRole_bool_exp!]
    _not: schedule_EventProgramPersonRole_bool_exp
    _or: [schedule_EventProgramPersonRole_bool_exp!]
    description: String_comparison_exp
    eventPeople: schedule_EventProgramPerson_bool_exp
    name: String_comparison_exp
}

"""
unique or primary key constraints on table "schedule.EventProgramPersonRole"
"""
enum schedule_EventProgramPersonRole_constraint {
    """
    unique or primary key constraint
    """
    EventProgramPersonRole_pkey
}

enum schedule_EventProgramPersonRole_enum {
    """
    Chair/moderator of the event
    """
    CHAIR
    """
    Viewer who has been given access to the event (e.g. to ask a question).
    """
    PARTICIPANT
    """
    A presenter.
    """
    PRESENTER
}

"""
Boolean expression to compare columns of type "schedule_EventProgramPersonRole_enum". All fields are combined with logical 'AND'.
"""
input schedule_EventProgramPersonRole_enum_comparison_exp {
    _eq: schedule_EventProgramPersonRole_enum
    _in: [schedule_EventProgramPersonRole_enum!]
    _is_null: Boolean
    _neq: schedule_EventProgramPersonRole_enum
    _nin: [schedule_EventProgramPersonRole_enum!]
}

"""
input type for inserting data into table "schedule.EventProgramPersonRole"
"""
input schedule_EventProgramPersonRole_insert_input {
    description: String
    eventPeople: schedule_EventProgramPerson_arr_rel_insert_input
    name: String
}

"""
aggregate max on columns
"""
type schedule_EventProgramPersonRole_max_fields {
    description: String
    name: String
}

"""
aggregate min on columns
"""
type schedule_EventProgramPersonRole_min_fields {
    description: String
    name: String
}

"""
response of any mutation on the table "schedule.EventProgramPersonRole"
"""
type schedule_EventProgramPersonRole_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [schedule_EventProgramPersonRole!]!
}

"""
input type for inserting object relation for remote table "schedule.EventProgramPersonRole"
"""
input schedule_EventProgramPersonRole_obj_rel_insert_input {
    data: schedule_EventProgramPersonRole_insert_input!
    """
    on conflict condition
    """
    on_conflict: schedule_EventProgramPersonRole_on_conflict
}

"""
on conflict condition type for table "schedule.EventProgramPersonRole"
"""
input schedule_EventProgramPersonRole_on_conflict {
    constraint: schedule_EventProgramPersonRole_constraint!
    update_columns: [schedule_EventProgramPersonRole_update_column!]! = []
    where: schedule_EventProgramPersonRole_bool_exp
}

"""
Ordering options when selecting data from "schedule.EventProgramPersonRole".
"""
input schedule_EventProgramPersonRole_order_by {
    description: order_by
    eventPeople_aggregate: schedule_EventProgramPerson_aggregate_order_by
    name: order_by
}

"""
primary key columns input for table: schedule_EventProgramPersonRole
"""
input schedule_EventProgramPersonRole_pk_columns_input {
    name: String!
}

"""
select columns of table "schedule.EventProgramPersonRole"
"""
enum schedule_EventProgramPersonRole_select_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
input type for updating data in table "schedule.EventProgramPersonRole"
"""
input schedule_EventProgramPersonRole_set_input {
    description: String
    name: String
}

"""
update columns of table "schedule.EventProgramPersonRole"
"""
enum schedule_EventProgramPersonRole_update_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
aggregated selection of "schedule.EventProgramPerson"
"""
type schedule_EventProgramPerson_aggregate {
    aggregate: schedule_EventProgramPerson_aggregate_fields
    nodes: [schedule_EventProgramPerson!]!
}

"""
aggregate fields of "schedule.EventProgramPerson"
"""
type schedule_EventProgramPerson_aggregate_fields {
    count(columns: [schedule_EventProgramPerson_select_column!], distinct: Boolean): Int!
    max: schedule_EventProgramPerson_max_fields
    min: schedule_EventProgramPerson_min_fields
}

"""
order by aggregate values of table "schedule.EventProgramPerson"
"""
input schedule_EventProgramPerson_aggregate_order_by {
    count: order_by
    max: schedule_EventProgramPerson_max_order_by
    min: schedule_EventProgramPerson_min_order_by
}

"""
input type for inserting array relation for remote table "schedule.EventProgramPerson"
"""
input schedule_EventProgramPerson_arr_rel_insert_input {
    data: [schedule_EventProgramPerson_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: schedule_EventProgramPerson_on_conflict
}

"""
Boolean expression to filter rows from the table "schedule.EventProgramPerson". All fields are combined with a logical 'AND'.
"""
input schedule_EventProgramPerson_bool_exp {
    _and: [schedule_EventProgramPerson_bool_exp!]
    _not: schedule_EventProgramPerson_bool_exp
    _or: [schedule_EventProgramPerson_bool_exp!]
    createdAt: timestamptz_comparison_exp
    event: schedule_Event_bool_exp
    eventId: uuid_comparison_exp
    eventPersonRole: schedule_EventProgramPersonRole_bool_exp
    id: uuid_comparison_exp
    person: collection_ProgramPerson_bool_exp
    personId: uuid_comparison_exp
    roleName: schedule_EventProgramPersonRole_enum_comparison_exp
    updatedAt: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "schedule.EventProgramPerson"
"""
enum schedule_EventProgramPerson_constraint {
    """
    unique or primary key constraint
    """
    EventProgramPerson_eventId_personId_roleName_key
    """
    unique or primary key constraint
    """
    EventProgramPerson_pkey
}

"""
input type for inserting data into table "schedule.EventProgramPerson"
"""
input schedule_EventProgramPerson_insert_input {
    createdAt: timestamptz
    event: schedule_Event_obj_rel_insert_input
    eventId: uuid
    eventPersonRole: schedule_EventProgramPersonRole_obj_rel_insert_input
    id: uuid
    person: collection_ProgramPerson_obj_rel_insert_input
    personId: uuid
    roleName: schedule_EventProgramPersonRole_enum
    updatedAt: timestamptz
}

"""
aggregate max on columns
"""
type schedule_EventProgramPerson_max_fields {
    createdAt: timestamptz
    eventId: uuid
    id: uuid
    personId: uuid
    updatedAt: timestamptz
}

"""
order by max() on columns of table "schedule.EventProgramPerson"
"""
input schedule_EventProgramPerson_max_order_by {
    createdAt: order_by
    eventId: order_by
    id: order_by
    personId: order_by
    updatedAt: order_by
}

"""
aggregate min on columns
"""
type schedule_EventProgramPerson_min_fields {
    createdAt: timestamptz
    eventId: uuid
    id: uuid
    personId: uuid
    updatedAt: timestamptz
}

"""
order by min() on columns of table "schedule.EventProgramPerson"
"""
input schedule_EventProgramPerson_min_order_by {
    createdAt: order_by
    eventId: order_by
    id: order_by
    personId: order_by
    updatedAt: order_by
}

"""
response of any mutation on the table "schedule.EventProgramPerson"
"""
type schedule_EventProgramPerson_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [schedule_EventProgramPerson!]!
}

"""
on conflict condition type for table "schedule.EventProgramPerson"
"""
input schedule_EventProgramPerson_on_conflict {
    constraint: schedule_EventProgramPerson_constraint!
    update_columns: [schedule_EventProgramPerson_update_column!]! = []
    where: schedule_EventProgramPerson_bool_exp
}

"""
Ordering options when selecting data from "schedule.EventProgramPerson".
"""
input schedule_EventProgramPerson_order_by {
    createdAt: order_by
    event: schedule_Event_order_by
    eventId: order_by
    eventPersonRole: schedule_EventProgramPersonRole_order_by
    id: order_by
    person: collection_ProgramPerson_order_by
    personId: order_by
    roleName: order_by
    updatedAt: order_by
}

"""
primary key columns input for table: schedule_EventProgramPerson
"""
input schedule_EventProgramPerson_pk_columns_input {
    id: uuid!
}

"""
select columns of table "schedule.EventProgramPerson"
"""
enum schedule_EventProgramPerson_select_column {
    """
    column name
    """
    createdAt
    """
    column name
    """
    eventId
    """
    column name
    """
    id
    """
    column name
    """
    personId
    """
    column name
    """
    roleName
    """
    column name
    """
    updatedAt
}

"""
input type for updating data in table "schedule.EventProgramPerson"
"""
input schedule_EventProgramPerson_set_input {
    createdAt: timestamptz
    eventId: uuid
    id: uuid
    personId: uuid
    roleName: schedule_EventProgramPersonRole_enum
    updatedAt: timestamptz
}

"""
update columns of table "schedule.EventProgramPerson"
"""
enum schedule_EventProgramPerson_update_column {
    """
    column name
    """
    createdAt
    """
    column name
    """
    eventId
    """
    column name
    """
    id
    """
    column name
    """
    personId
    """
    column name
    """
    roleName
    """
    column name
    """
    updatedAt
}

"""
aggregated selection of "schedule.Event"
"""
type schedule_Event_aggregate {
    aggregate: schedule_Event_aggregate_fields
    nodes: [schedule_Event!]!
}

"""
aggregate fields of "schedule.Event"
"""
type schedule_Event_aggregate_fields {
    avg: schedule_Event_avg_fields
    count(columns: [schedule_Event_select_column!], distinct: Boolean): Int!
    max: schedule_Event_max_fields
    min: schedule_Event_min_fields
    stddev: schedule_Event_stddev_fields
    stddev_pop: schedule_Event_stddev_pop_fields
    stddev_samp: schedule_Event_stddev_samp_fields
    sum: schedule_Event_sum_fields
    var_pop: schedule_Event_var_pop_fields
    var_samp: schedule_Event_var_samp_fields
    variance: schedule_Event_variance_fields
}

"""
order by aggregate values of table "schedule.Event"
"""
input schedule_Event_aggregate_order_by {
    avg: schedule_Event_avg_order_by
    count: order_by
    max: schedule_Event_max_order_by
    min: schedule_Event_min_order_by
    stddev: schedule_Event_stddev_order_by
    stddev_pop: schedule_Event_stddev_pop_order_by
    stddev_samp: schedule_Event_stddev_samp_order_by
    sum: schedule_Event_sum_order_by
    var_pop: schedule_Event_var_pop_order_by
    var_samp: schedule_Event_var_samp_order_by
    variance: schedule_Event_variance_order_by
}

"""
input type for inserting array relation for remote table "schedule.Event"
"""
input schedule_Event_arr_rel_insert_input {
    data: [schedule_Event_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: schedule_Event_on_conflict
}

"""
aggregate avg on columns
"""
type schedule_Event_avg_fields {
    durationSeconds: Float
}

"""
order by avg() on columns of table "schedule.Event"
"""
input schedule_Event_avg_order_by {
    durationSeconds: order_by
}

"""
Boolean expression to filter rows from the table "schedule.Event". All fields are combined with a logical 'AND'.
"""
input schedule_Event_bool_exp {
    _and: [schedule_Event_bool_exp!]
    _not: schedule_Event_bool_exp
    _or: [schedule_Event_bool_exp!]
    automaticParticipationSurvey: Boolean_comparison_exp
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    continuations: schedule_Continuation_bool_exp
    createdAt: timestamptz_comparison_exp
    durationSeconds: Int_comparison_exp
    enableRecording: Boolean_comparison_exp
    endTime: timestamptz_comparison_exp
    eventPeople: schedule_EventProgramPerson_bool_exp
    eventVonageSession: video_EventVonageSession_bool_exp
    exhibition: collection_Exhibition_bool_exp
    exhibitionId: uuid_comparison_exp
    id: uuid_comparison_exp
    intendedRoomModeName: room_Mode_enum_comparison_exp
    item: content_Item_bool_exp
    itemId: uuid_comparison_exp
    name: String_comparison_exp
    room: room_Room_bool_exp
    roomId: uuid_comparison_exp
    roomMode: room_Mode_bool_exp
    roomName: String_comparison_exp
    shufflePeriod: room_ShufflePeriod_bool_exp
    shufflePeriodId: uuid_comparison_exp
    startTime: timestamptz_comparison_exp
    streamTextEventId: String_comparison_exp
    subconferenceId: uuid_comparison_exp
    timingsUpdatedAt: timestamptz_comparison_exp
    updatedAt: timestamptz_comparison_exp
    visibilityLevel: conference_VisibilityLevel_enum_comparison_exp
}

"""
unique or primary key constraints on table "schedule.Event"
"""
enum schedule_Event_constraint {
    """
    unique or primary key constraint
    """
    Event_pkey
}

"""
input type for incrementing numeric columns in table "schedule.Event"
"""
input schedule_Event_inc_input {
    durationSeconds: Int
}

"""
input type for inserting data into table "schedule.Event"
"""
input schedule_Event_insert_input {
    automaticParticipationSurvey: Boolean
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    continuations: schedule_Continuation_arr_rel_insert_input
    createdAt: timestamptz
    durationSeconds: Int
    enableRecording: Boolean
    endTime: timestamptz
    eventPeople: schedule_EventProgramPerson_arr_rel_insert_input
    eventVonageSession: video_EventVonageSession_obj_rel_insert_input
    exhibition: collection_Exhibition_obj_rel_insert_input
    exhibitionId: uuid
    id: uuid
    intendedRoomModeName: room_Mode_enum
    item: content_Item_obj_rel_insert_input
    itemId: uuid
    name: String
    room: room_Room_obj_rel_insert_input
    roomId: uuid
    roomMode: room_Mode_obj_rel_insert_input
    shufflePeriod: room_ShufflePeriod_obj_rel_insert_input
    shufflePeriodId: uuid
    startTime: timestamptz
    streamTextEventId: String
    subconferenceId: uuid
    timingsUpdatedAt: timestamptz
    updatedAt: timestamptz
    visibilityLevel: conference_VisibilityLevel_enum
}

"""
aggregate max on columns
"""
type schedule_Event_max_fields {
    conferenceId: uuid
    createdAt: timestamptz
    durationSeconds: Int
    endTime: timestamptz
    exhibitionId: uuid
    id: uuid
    itemId: uuid
    name: String
    roomId: uuid
    shufflePeriodId: uuid
    startTime: timestamptz
    streamTextEventId: String
    subconferenceId: uuid
    timingsUpdatedAt: timestamptz
    updatedAt: timestamptz
}

"""
order by max() on columns of table "schedule.Event"
"""
input schedule_Event_max_order_by {
    conferenceId: order_by
    createdAt: order_by
    durationSeconds: order_by
    endTime: order_by
    exhibitionId: order_by
    id: order_by
    itemId: order_by
    name: order_by
    roomId: order_by
    shufflePeriodId: order_by
    startTime: order_by
    streamTextEventId: order_by
    subconferenceId: order_by
    timingsUpdatedAt: order_by
    updatedAt: order_by
}

"""
aggregate min on columns
"""
type schedule_Event_min_fields {
    conferenceId: uuid
    createdAt: timestamptz
    durationSeconds: Int
    endTime: timestamptz
    exhibitionId: uuid
    id: uuid
    itemId: uuid
    name: String
    roomId: uuid
    shufflePeriodId: uuid
    startTime: timestamptz
    streamTextEventId: String
    subconferenceId: uuid
    timingsUpdatedAt: timestamptz
    updatedAt: timestamptz
}

"""
order by min() on columns of table "schedule.Event"
"""
input schedule_Event_min_order_by {
    conferenceId: order_by
    createdAt: order_by
    durationSeconds: order_by
    endTime: order_by
    exhibitionId: order_by
    id: order_by
    itemId: order_by
    name: order_by
    roomId: order_by
    shufflePeriodId: order_by
    startTime: order_by
    streamTextEventId: order_by
    subconferenceId: order_by
    timingsUpdatedAt: order_by
    updatedAt: order_by
}

"""
response of any mutation on the table "schedule.Event"
"""
type schedule_Event_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [schedule_Event!]!
}

"""
input type for inserting object relation for remote table "schedule.Event"
"""
input schedule_Event_obj_rel_insert_input {
    data: schedule_Event_insert_input!
    """
    on conflict condition
    """
    on_conflict: schedule_Event_on_conflict
}

"""
on conflict condition type for table "schedule.Event"
"""
input schedule_Event_on_conflict {
    constraint: schedule_Event_constraint!
    update_columns: [schedule_Event_update_column!]! = []
    where: schedule_Event_bool_exp
}

"""
Ordering options when selecting data from "schedule.Event".
"""
input schedule_Event_order_by {
    automaticParticipationSurvey: order_by
    conference: conference_Conference_order_by
    conferenceId: order_by
    continuations_aggregate: schedule_Continuation_aggregate_order_by
    createdAt: order_by
    durationSeconds: order_by
    enableRecording: order_by
    endTime: order_by
    eventPeople_aggregate: schedule_EventProgramPerson_aggregate_order_by
    eventVonageSession: video_EventVonageSession_order_by
    exhibition: collection_Exhibition_order_by
    exhibitionId: order_by
    id: order_by
    intendedRoomModeName: order_by
    item: content_Item_order_by
    itemId: order_by
    name: order_by
    room: room_Room_order_by
    roomId: order_by
    roomMode: room_Mode_order_by
    roomName: order_by
    shufflePeriod: room_ShufflePeriod_order_by
    shufflePeriodId: order_by
    startTime: order_by
    streamTextEventId: order_by
    subconferenceId: order_by
    timingsUpdatedAt: order_by
    updatedAt: order_by
    visibilityLevel: order_by
}

"""
primary key columns input for table: schedule_Event
"""
input schedule_Event_pk_columns_input {
    id: uuid!
}

"""
select columns of table "schedule.Event"
"""
enum schedule_Event_select_column {
    """
    column name
    """
    automaticParticipationSurvey
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    durationSeconds
    """
    column name
    """
    enableRecording
    """
    column name
    """
    endTime
    """
    column name
    """
    exhibitionId
    """
    column name
    """
    id
    """
    column name
    """
    intendedRoomModeName
    """
    column name
    """
    itemId
    """
    column name
    """
    name
    """
    column name
    """
    roomId
    """
    column name
    """
    shufflePeriodId
    """
    column name
    """
    startTime
    """
    column name
    """
    streamTextEventId
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    timingsUpdatedAt
    """
    column name
    """
    updatedAt
    """
    column name
    """
    visibilityLevel
}

"""
input type for updating data in table "schedule.Event"
"""
input schedule_Event_set_input {
    automaticParticipationSurvey: Boolean
    conferenceId: uuid
    createdAt: timestamptz
    durationSeconds: Int
    enableRecording: Boolean
    endTime: timestamptz
    exhibitionId: uuid
    id: uuid
    intendedRoomModeName: room_Mode_enum
    itemId: uuid
    name: String
    roomId: uuid
    shufflePeriodId: uuid
    startTime: timestamptz
    streamTextEventId: String
    subconferenceId: uuid
    timingsUpdatedAt: timestamptz
    updatedAt: timestamptz
    visibilityLevel: conference_VisibilityLevel_enum
}

"""
aggregate stddev on columns
"""
type schedule_Event_stddev_fields {
    durationSeconds: Float
}

"""
order by stddev() on columns of table "schedule.Event"
"""
input schedule_Event_stddev_order_by {
    durationSeconds: order_by
}

"""
aggregate stddev_pop on columns
"""
type schedule_Event_stddev_pop_fields {
    durationSeconds: Float
}

"""
order by stddev_pop() on columns of table "schedule.Event"
"""
input schedule_Event_stddev_pop_order_by {
    durationSeconds: order_by
}

"""
aggregate stddev_samp on columns
"""
type schedule_Event_stddev_samp_fields {
    durationSeconds: Float
}

"""
order by stddev_samp() on columns of table "schedule.Event"
"""
input schedule_Event_stddev_samp_order_by {
    durationSeconds: order_by
}

"""
aggregate sum on columns
"""
type schedule_Event_sum_fields {
    durationSeconds: Int
}

"""
order by sum() on columns of table "schedule.Event"
"""
input schedule_Event_sum_order_by {
    durationSeconds: order_by
}

"""
update columns of table "schedule.Event"
"""
enum schedule_Event_update_column {
    """
    column name
    """
    automaticParticipationSurvey
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    durationSeconds
    """
    column name
    """
    enableRecording
    """
    column name
    """
    endTime
    """
    column name
    """
    exhibitionId
    """
    column name
    """
    id
    """
    column name
    """
    intendedRoomModeName
    """
    column name
    """
    itemId
    """
    column name
    """
    name
    """
    column name
    """
    roomId
    """
    column name
    """
    shufflePeriodId
    """
    column name
    """
    startTime
    """
    column name
    """
    streamTextEventId
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    timingsUpdatedAt
    """
    column name
    """
    updatedAt
    """
    column name
    """
    visibilityLevel
}

"""
aggregate var_pop on columns
"""
type schedule_Event_var_pop_fields {
    durationSeconds: Float
}

"""
order by var_pop() on columns of table "schedule.Event"
"""
input schedule_Event_var_pop_order_by {
    durationSeconds: order_by
}

"""
aggregate var_samp on columns
"""
type schedule_Event_var_samp_fields {
    durationSeconds: Float
}

"""
order by var_samp() on columns of table "schedule.Event"
"""
input schedule_Event_var_samp_order_by {
    durationSeconds: order_by
}

"""
aggregate variance on columns
"""
type schedule_Event_variance_fields {
    durationSeconds: Float
}

"""
order by variance() on columns of table "schedule.Event"
"""
input schedule_Event_variance_order_by {
    durationSeconds: order_by
}

"""
columns and relationships of "schedule.OverlappingEvents"
"""
type schedule_OverlappingEvents {
    """
    An object relationship
    """
    conference: conference_Conference
    conferenceId: uuid
    """
    An object relationship
    """
    eventX: schedule_Event
    """
    An object relationship
    """
    eventY: schedule_Event
    subconferenceId: uuid
    xId: uuid
    yId: uuid
}

"""
aggregated selection of "schedule.OverlappingEvents"
"""
type schedule_OverlappingEvents_aggregate {
    aggregate: schedule_OverlappingEvents_aggregate_fields
    nodes: [schedule_OverlappingEvents!]!
}

"""
aggregate fields of "schedule.OverlappingEvents"
"""
type schedule_OverlappingEvents_aggregate_fields {
    count(columns: [schedule_OverlappingEvents_select_column!], distinct: Boolean): Int!
    max: schedule_OverlappingEvents_max_fields
    min: schedule_OverlappingEvents_min_fields
}

"""
Boolean expression to filter rows from the table "schedule.OverlappingEvents". All fields are combined with a logical 'AND'.
"""
input schedule_OverlappingEvents_bool_exp {
    _and: [schedule_OverlappingEvents_bool_exp!]
    _not: schedule_OverlappingEvents_bool_exp
    _or: [schedule_OverlappingEvents_bool_exp!]
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    eventX: schedule_Event_bool_exp
    eventY: schedule_Event_bool_exp
    subconferenceId: uuid_comparison_exp
    xId: uuid_comparison_exp
    yId: uuid_comparison_exp
}

"""
aggregate max on columns
"""
type schedule_OverlappingEvents_max_fields {
    conferenceId: uuid
    subconferenceId: uuid
    xId: uuid
    yId: uuid
}

"""
aggregate min on columns
"""
type schedule_OverlappingEvents_min_fields {
    conferenceId: uuid
    subconferenceId: uuid
    xId: uuid
    yId: uuid
}

"""
Ordering options when selecting data from "schedule.OverlappingEvents".
"""
input schedule_OverlappingEvents_order_by {
    conference: conference_Conference_order_by
    conferenceId: order_by
    eventX: schedule_Event_order_by
    eventY: schedule_Event_order_by
    subconferenceId: order_by
    xId: order_by
    yId: order_by
}

"""
select columns of table "schedule.OverlappingEvents"
"""
enum schedule_OverlappingEvents_select_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    xId
    """
    column name
    """
    yId
}

"""
columns and relationships of "schedule.StarredEvent"
"""
type schedule_StarredEvent {
    created_at: timestamptz!
    """
    An object relationship
    """
    event: schedule_Event!
    eventId: uuid!
    id: uuid!
    """
    An object relationship
    """
    registrant: registrant_Registrant
    registrantId: uuid!
    updated_at: timestamptz!
}

"""
aggregated selection of "schedule.StarredEvent"
"""
type schedule_StarredEvent_aggregate {
    aggregate: schedule_StarredEvent_aggregate_fields
    nodes: [schedule_StarredEvent!]!
}

"""
aggregate fields of "schedule.StarredEvent"
"""
type schedule_StarredEvent_aggregate_fields {
    count(columns: [schedule_StarredEvent_select_column!], distinct: Boolean): Int!
    max: schedule_StarredEvent_max_fields
    min: schedule_StarredEvent_min_fields
}

"""
Boolean expression to filter rows from the table "schedule.StarredEvent". All fields are combined with a logical 'AND'.
"""
input schedule_StarredEvent_bool_exp {
    _and: [schedule_StarredEvent_bool_exp!]
    _not: schedule_StarredEvent_bool_exp
    _or: [schedule_StarredEvent_bool_exp!]
    created_at: timestamptz_comparison_exp
    event: schedule_Event_bool_exp
    eventId: uuid_comparison_exp
    id: uuid_comparison_exp
    registrant: registrant_Registrant_bool_exp
    registrantId: uuid_comparison_exp
    updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "schedule.StarredEvent"
"""
enum schedule_StarredEvent_constraint {
    """
    unique or primary key constraint
    """
    StarredEvent_eventId_registrantId_key
    """
    unique or primary key constraint
    """
    StarredEvent_pkey
}

"""
input type for inserting data into table "schedule.StarredEvent"
"""
input schedule_StarredEvent_insert_input {
    created_at: timestamptz
    event: schedule_Event_obj_rel_insert_input
    eventId: uuid
    id: uuid
    registrant: registrant_Registrant_obj_rel_insert_input
    registrantId: uuid
    updated_at: timestamptz
}

"""
aggregate max on columns
"""
type schedule_StarredEvent_max_fields {
    created_at: timestamptz
    eventId: uuid
    id: uuid
    registrantId: uuid
    updated_at: timestamptz
}

"""
aggregate min on columns
"""
type schedule_StarredEvent_min_fields {
    created_at: timestamptz
    eventId: uuid
    id: uuid
    registrantId: uuid
    updated_at: timestamptz
}

"""
response of any mutation on the table "schedule.StarredEvent"
"""
type schedule_StarredEvent_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [schedule_StarredEvent!]!
}

"""
on conflict condition type for table "schedule.StarredEvent"
"""
input schedule_StarredEvent_on_conflict {
    constraint: schedule_StarredEvent_constraint!
    update_columns: [schedule_StarredEvent_update_column!]! = []
    where: schedule_StarredEvent_bool_exp
}

"""
Ordering options when selecting data from "schedule.StarredEvent".
"""
input schedule_StarredEvent_order_by {
    created_at: order_by
    event: schedule_Event_order_by
    eventId: order_by
    id: order_by
    registrant: registrant_Registrant_order_by
    registrantId: order_by
    updated_at: order_by
}

"""
primary key columns input for table: schedule_StarredEvent
"""
input schedule_StarredEvent_pk_columns_input {
    id: uuid!
}

"""
select columns of table "schedule.StarredEvent"
"""
enum schedule_StarredEvent_select_column {
    """
    column name
    """
    created_at
    """
    column name
    """
    eventId
    """
    column name
    """
    id
    """
    column name
    """
    registrantId
    """
    column name
    """
    updated_at
}

"""
input type for updating data in table "schedule.StarredEvent"
"""
input schedule_StarredEvent_set_input {
    created_at: timestamptz
    eventId: uuid
    id: uuid
    registrantId: uuid
    updated_at: timestamptz
}

"""
update columns of table "schedule.StarredEvent"
"""
enum schedule_StarredEvent_update_column {
    """
    column name
    """
    created_at
    """
    column name
    """
    eventId
    """
    column name
    """
    id
    """
    column name
    """
    registrantId
    """
    column name
    """
    updated_at
}

input schedule_searchEvents_args {
    conferenceId: uuid
    search: String
}

"""
columns and relationships of "sponsor.Tier"
"""
type sponsor_Tier {
    colour: String
    """
    An object relationship
    """
    conference: conference_Conference!
    conferenceId: uuid!
    created_at: timestamptz!
    description: String!
    id: uuid!
    """
    An array relationship
    """
    members(
        """
        distinct select on columns
        """
        distinct_on: [sponsor_TierMember_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [sponsor_TierMember_order_by!]
        """
        filter the rows returned
        """
        where: sponsor_TierMember_bool_exp
    ): [sponsor_TierMember!]!
    """
    An aggregate relationship
    """
    members_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [sponsor_TierMember_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [sponsor_TierMember_order_by!]
        """
        filter the rows returned
        """
        where: sponsor_TierMember_bool_exp
    ): sponsor_TierMember_aggregate!
    name: String!
    priority: Int!
    showLogos: Boolean!
    size: numeric!
    """
    An object relationship
    """
    subconference: conference_Subconference
    subconferenceId: uuid
    updated_at: timestamptz!
}

"""
columns and relationships of "sponsor.TierMember"
"""
type sponsor_TierMember {
    created_at: timestamptz!
    id: uuid!
    """
    An object relationship
    """
    item: content_Item!
    itemId: uuid!
    priority: Int
    """
    An object relationship
    """
    tier: sponsor_Tier!
    tierId: uuid!
    updated_at: timestamptz!
}

"""
aggregated selection of "sponsor.TierMember"
"""
type sponsor_TierMember_aggregate {
    aggregate: sponsor_TierMember_aggregate_fields
    nodes: [sponsor_TierMember!]!
}

"""
aggregate fields of "sponsor.TierMember"
"""
type sponsor_TierMember_aggregate_fields {
    avg: sponsor_TierMember_avg_fields
    count(columns: [sponsor_TierMember_select_column!], distinct: Boolean): Int!
    max: sponsor_TierMember_max_fields
    min: sponsor_TierMember_min_fields
    stddev: sponsor_TierMember_stddev_fields
    stddev_pop: sponsor_TierMember_stddev_pop_fields
    stddev_samp: sponsor_TierMember_stddev_samp_fields
    sum: sponsor_TierMember_sum_fields
    var_pop: sponsor_TierMember_var_pop_fields
    var_samp: sponsor_TierMember_var_samp_fields
    variance: sponsor_TierMember_variance_fields
}

"""
order by aggregate values of table "sponsor.TierMember"
"""
input sponsor_TierMember_aggregate_order_by {
    avg: sponsor_TierMember_avg_order_by
    count: order_by
    max: sponsor_TierMember_max_order_by
    min: sponsor_TierMember_min_order_by
    stddev: sponsor_TierMember_stddev_order_by
    stddev_pop: sponsor_TierMember_stddev_pop_order_by
    stddev_samp: sponsor_TierMember_stddev_samp_order_by
    sum: sponsor_TierMember_sum_order_by
    var_pop: sponsor_TierMember_var_pop_order_by
    var_samp: sponsor_TierMember_var_samp_order_by
    variance: sponsor_TierMember_variance_order_by
}

"""
input type for inserting array relation for remote table "sponsor.TierMember"
"""
input sponsor_TierMember_arr_rel_insert_input {
    data: [sponsor_TierMember_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: sponsor_TierMember_on_conflict
}

"""
aggregate avg on columns
"""
type sponsor_TierMember_avg_fields {
    priority: Float
}

"""
order by avg() on columns of table "sponsor.TierMember"
"""
input sponsor_TierMember_avg_order_by {
    priority: order_by
}

"""
Boolean expression to filter rows from the table "sponsor.TierMember". All fields are combined with a logical 'AND'.
"""
input sponsor_TierMember_bool_exp {
    _and: [sponsor_TierMember_bool_exp!]
    _not: sponsor_TierMember_bool_exp
    _or: [sponsor_TierMember_bool_exp!]
    created_at: timestamptz_comparison_exp
    id: uuid_comparison_exp
    item: content_Item_bool_exp
    itemId: uuid_comparison_exp
    priority: Int_comparison_exp
    tier: sponsor_Tier_bool_exp
    tierId: uuid_comparison_exp
    updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "sponsor.TierMember"
"""
enum sponsor_TierMember_constraint {
    """
    unique or primary key constraint
    """
    TierMember_pkey
    """
    unique or primary key constraint
    """
    TierMember_tierId_itemId_key
}

"""
input type for incrementing numeric columns in table "sponsor.TierMember"
"""
input sponsor_TierMember_inc_input {
    priority: Int
}

"""
input type for inserting data into table "sponsor.TierMember"
"""
input sponsor_TierMember_insert_input {
    created_at: timestamptz
    id: uuid
    item: content_Item_obj_rel_insert_input
    itemId: uuid
    priority: Int
    tier: sponsor_Tier_obj_rel_insert_input
    tierId: uuid
    updated_at: timestamptz
}

"""
aggregate max on columns
"""
type sponsor_TierMember_max_fields {
    created_at: timestamptz
    id: uuid
    itemId: uuid
    priority: Int
    tierId: uuid
    updated_at: timestamptz
}

"""
order by max() on columns of table "sponsor.TierMember"
"""
input sponsor_TierMember_max_order_by {
    created_at: order_by
    id: order_by
    itemId: order_by
    priority: order_by
    tierId: order_by
    updated_at: order_by
}

"""
aggregate min on columns
"""
type sponsor_TierMember_min_fields {
    created_at: timestamptz
    id: uuid
    itemId: uuid
    priority: Int
    tierId: uuid
    updated_at: timestamptz
}

"""
order by min() on columns of table "sponsor.TierMember"
"""
input sponsor_TierMember_min_order_by {
    created_at: order_by
    id: order_by
    itemId: order_by
    priority: order_by
    tierId: order_by
    updated_at: order_by
}

"""
response of any mutation on the table "sponsor.TierMember"
"""
type sponsor_TierMember_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [sponsor_TierMember!]!
}

"""
on conflict condition type for table "sponsor.TierMember"
"""
input sponsor_TierMember_on_conflict {
    constraint: sponsor_TierMember_constraint!
    update_columns: [sponsor_TierMember_update_column!]! = []
    where: sponsor_TierMember_bool_exp
}

"""
Ordering options when selecting data from "sponsor.TierMember".
"""
input sponsor_TierMember_order_by {
    created_at: order_by
    id: order_by
    item: content_Item_order_by
    itemId: order_by
    priority: order_by
    tier: sponsor_Tier_order_by
    tierId: order_by
    updated_at: order_by
}

"""
primary key columns input for table: sponsor_TierMember
"""
input sponsor_TierMember_pk_columns_input {
    id: uuid!
}

"""
select columns of table "sponsor.TierMember"
"""
enum sponsor_TierMember_select_column {
    """
    column name
    """
    created_at
    """
    column name
    """
    id
    """
    column name
    """
    itemId
    """
    column name
    """
    priority
    """
    column name
    """
    tierId
    """
    column name
    """
    updated_at
}

"""
input type for updating data in table "sponsor.TierMember"
"""
input sponsor_TierMember_set_input {
    created_at: timestamptz
    id: uuid
    itemId: uuid
    priority: Int
    tierId: uuid
    updated_at: timestamptz
}

"""
aggregate stddev on columns
"""
type sponsor_TierMember_stddev_fields {
    priority: Float
}

"""
order by stddev() on columns of table "sponsor.TierMember"
"""
input sponsor_TierMember_stddev_order_by {
    priority: order_by
}

"""
aggregate stddev_pop on columns
"""
type sponsor_TierMember_stddev_pop_fields {
    priority: Float
}

"""
order by stddev_pop() on columns of table "sponsor.TierMember"
"""
input sponsor_TierMember_stddev_pop_order_by {
    priority: order_by
}

"""
aggregate stddev_samp on columns
"""
type sponsor_TierMember_stddev_samp_fields {
    priority: Float
}

"""
order by stddev_samp() on columns of table "sponsor.TierMember"
"""
input sponsor_TierMember_stddev_samp_order_by {
    priority: order_by
}

"""
aggregate sum on columns
"""
type sponsor_TierMember_sum_fields {
    priority: Int
}

"""
order by sum() on columns of table "sponsor.TierMember"
"""
input sponsor_TierMember_sum_order_by {
    priority: order_by
}

"""
update columns of table "sponsor.TierMember"
"""
enum sponsor_TierMember_update_column {
    """
    column name
    """
    created_at
    """
    column name
    """
    id
    """
    column name
    """
    itemId
    """
    column name
    """
    priority
    """
    column name
    """
    tierId
    """
    column name
    """
    updated_at
}

"""
aggregate var_pop on columns
"""
type sponsor_TierMember_var_pop_fields {
    priority: Float
}

"""
order by var_pop() on columns of table "sponsor.TierMember"
"""
input sponsor_TierMember_var_pop_order_by {
    priority: order_by
}

"""
aggregate var_samp on columns
"""
type sponsor_TierMember_var_samp_fields {
    priority: Float
}

"""
order by var_samp() on columns of table "sponsor.TierMember"
"""
input sponsor_TierMember_var_samp_order_by {
    priority: order_by
}

"""
aggregate variance on columns
"""
type sponsor_TierMember_variance_fields {
    priority: Float
}

"""
order by variance() on columns of table "sponsor.TierMember"
"""
input sponsor_TierMember_variance_order_by {
    priority: order_by
}

"""
aggregated selection of "sponsor.Tier"
"""
type sponsor_Tier_aggregate {
    aggregate: sponsor_Tier_aggregate_fields
    nodes: [sponsor_Tier!]!
}

"""
aggregate fields of "sponsor.Tier"
"""
type sponsor_Tier_aggregate_fields {
    avg: sponsor_Tier_avg_fields
    count(columns: [sponsor_Tier_select_column!], distinct: Boolean): Int!
    max: sponsor_Tier_max_fields
    min: sponsor_Tier_min_fields
    stddev: sponsor_Tier_stddev_fields
    stddev_pop: sponsor_Tier_stddev_pop_fields
    stddev_samp: sponsor_Tier_stddev_samp_fields
    sum: sponsor_Tier_sum_fields
    var_pop: sponsor_Tier_var_pop_fields
    var_samp: sponsor_Tier_var_samp_fields
    variance: sponsor_Tier_variance_fields
}

"""
order by aggregate values of table "sponsor.Tier"
"""
input sponsor_Tier_aggregate_order_by {
    avg: sponsor_Tier_avg_order_by
    count: order_by
    max: sponsor_Tier_max_order_by
    min: sponsor_Tier_min_order_by
    stddev: sponsor_Tier_stddev_order_by
    stddev_pop: sponsor_Tier_stddev_pop_order_by
    stddev_samp: sponsor_Tier_stddev_samp_order_by
    sum: sponsor_Tier_sum_order_by
    var_pop: sponsor_Tier_var_pop_order_by
    var_samp: sponsor_Tier_var_samp_order_by
    variance: sponsor_Tier_variance_order_by
}

"""
input type for inserting array relation for remote table "sponsor.Tier"
"""
input sponsor_Tier_arr_rel_insert_input {
    data: [sponsor_Tier_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: sponsor_Tier_on_conflict
}

"""
aggregate avg on columns
"""
type sponsor_Tier_avg_fields {
    priority: Float
    size: Float
}

"""
order by avg() on columns of table "sponsor.Tier"
"""
input sponsor_Tier_avg_order_by {
    priority: order_by
    size: order_by
}

"""
Boolean expression to filter rows from the table "sponsor.Tier". All fields are combined with a logical 'AND'.
"""
input sponsor_Tier_bool_exp {
    _and: [sponsor_Tier_bool_exp!]
    _not: sponsor_Tier_bool_exp
    _or: [sponsor_Tier_bool_exp!]
    colour: String_comparison_exp
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    created_at: timestamptz_comparison_exp
    description: String_comparison_exp
    id: uuid_comparison_exp
    members: sponsor_TierMember_bool_exp
    name: String_comparison_exp
    priority: Int_comparison_exp
    showLogos: Boolean_comparison_exp
    size: numeric_comparison_exp
    subconference: conference_Subconference_bool_exp
    subconferenceId: uuid_comparison_exp
    updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "sponsor.Tier"
"""
enum sponsor_Tier_constraint {
    """
    unique or primary key constraint
    """
    Tier_conferenceId_subconferenceId_name_key
    """
    unique or primary key constraint
    """
    Tier_pkey
}

"""
input type for incrementing numeric columns in table "sponsor.Tier"
"""
input sponsor_Tier_inc_input {
    priority: Int
    size: numeric
}

"""
input type for inserting data into table "sponsor.Tier"
"""
input sponsor_Tier_insert_input {
    colour: String
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    created_at: timestamptz
    description: String
    id: uuid
    members: sponsor_TierMember_arr_rel_insert_input
    name: String
    priority: Int
    showLogos: Boolean
    size: numeric
    subconference: conference_Subconference_obj_rel_insert_input
    subconferenceId: uuid
    updated_at: timestamptz
}

"""
aggregate max on columns
"""
type sponsor_Tier_max_fields {
    colour: String
    conferenceId: uuid
    created_at: timestamptz
    description: String
    id: uuid
    name: String
    priority: Int
    size: numeric
    subconferenceId: uuid
    updated_at: timestamptz
}

"""
order by max() on columns of table "sponsor.Tier"
"""
input sponsor_Tier_max_order_by {
    colour: order_by
    conferenceId: order_by
    created_at: order_by
    description: order_by
    id: order_by
    name: order_by
    priority: order_by
    size: order_by
    subconferenceId: order_by
    updated_at: order_by
}

"""
aggregate min on columns
"""
type sponsor_Tier_min_fields {
    colour: String
    conferenceId: uuid
    created_at: timestamptz
    description: String
    id: uuid
    name: String
    priority: Int
    size: numeric
    subconferenceId: uuid
    updated_at: timestamptz
}

"""
order by min() on columns of table "sponsor.Tier"
"""
input sponsor_Tier_min_order_by {
    colour: order_by
    conferenceId: order_by
    created_at: order_by
    description: order_by
    id: order_by
    name: order_by
    priority: order_by
    size: order_by
    subconferenceId: order_by
    updated_at: order_by
}

"""
response of any mutation on the table "sponsor.Tier"
"""
type sponsor_Tier_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [sponsor_Tier!]!
}

"""
input type for inserting object relation for remote table "sponsor.Tier"
"""
input sponsor_Tier_obj_rel_insert_input {
    data: sponsor_Tier_insert_input!
    """
    on conflict condition
    """
    on_conflict: sponsor_Tier_on_conflict
}

"""
on conflict condition type for table "sponsor.Tier"
"""
input sponsor_Tier_on_conflict {
    constraint: sponsor_Tier_constraint!
    update_columns: [sponsor_Tier_update_column!]! = []
    where: sponsor_Tier_bool_exp
}

"""
Ordering options when selecting data from "sponsor.Tier".
"""
input sponsor_Tier_order_by {
    colour: order_by
    conference: conference_Conference_order_by
    conferenceId: order_by
    created_at: order_by
    description: order_by
    id: order_by
    members_aggregate: sponsor_TierMember_aggregate_order_by
    name: order_by
    priority: order_by
    showLogos: order_by
    size: order_by
    subconference: conference_Subconference_order_by
    subconferenceId: order_by
    updated_at: order_by
}

"""
primary key columns input for table: sponsor_Tier
"""
input sponsor_Tier_pk_columns_input {
    id: uuid!
}

"""
select columns of table "sponsor.Tier"
"""
enum sponsor_Tier_select_column {
    """
    column name
    """
    colour
    """
    column name
    """
    conferenceId
    """
    column name
    """
    created_at
    """
    column name
    """
    description
    """
    column name
    """
    id
    """
    column name
    """
    name
    """
    column name
    """
    priority
    """
    column name
    """
    showLogos
    """
    column name
    """
    size
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updated_at
}

"""
input type for updating data in table "sponsor.Tier"
"""
input sponsor_Tier_set_input {
    colour: String
    conferenceId: uuid
    created_at: timestamptz
    description: String
    id: uuid
    name: String
    priority: Int
    showLogos: Boolean
    size: numeric
    subconferenceId: uuid
    updated_at: timestamptz
}

"""
aggregate stddev on columns
"""
type sponsor_Tier_stddev_fields {
    priority: Float
    size: Float
}

"""
order by stddev() on columns of table "sponsor.Tier"
"""
input sponsor_Tier_stddev_order_by {
    priority: order_by
    size: order_by
}

"""
aggregate stddev_pop on columns
"""
type sponsor_Tier_stddev_pop_fields {
    priority: Float
    size: Float
}

"""
order by stddev_pop() on columns of table "sponsor.Tier"
"""
input sponsor_Tier_stddev_pop_order_by {
    priority: order_by
    size: order_by
}

"""
aggregate stddev_samp on columns
"""
type sponsor_Tier_stddev_samp_fields {
    priority: Float
    size: Float
}

"""
order by stddev_samp() on columns of table "sponsor.Tier"
"""
input sponsor_Tier_stddev_samp_order_by {
    priority: order_by
    size: order_by
}

"""
aggregate sum on columns
"""
type sponsor_Tier_sum_fields {
    priority: Int
    size: numeric
}

"""
order by sum() on columns of table "sponsor.Tier"
"""
input sponsor_Tier_sum_order_by {
    priority: order_by
    size: order_by
}

"""
update columns of table "sponsor.Tier"
"""
enum sponsor_Tier_update_column {
    """
    column name
    """
    colour
    """
    column name
    """
    conferenceId
    """
    column name
    """
    created_at
    """
    column name
    """
    description
    """
    column name
    """
    id
    """
    column name
    """
    name
    """
    column name
    """
    priority
    """
    column name
    """
    showLogos
    """
    column name
    """
    size
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updated_at
}

"""
aggregate var_pop on columns
"""
type sponsor_Tier_var_pop_fields {
    priority: Float
    size: Float
}

"""
order by var_pop() on columns of table "sponsor.Tier"
"""
input sponsor_Tier_var_pop_order_by {
    priority: order_by
    size: order_by
}

"""
aggregate var_samp on columns
"""
type sponsor_Tier_var_samp_fields {
    priority: Float
    size: Float
}

"""
order by var_samp() on columns of table "sponsor.Tier"
"""
input sponsor_Tier_var_samp_order_by {
    priority: order_by
    size: order_by
}

"""
aggregate variance on columns
"""
type sponsor_Tier_variance_fields {
    priority: Float
    size: Float
}

"""
order by variance() on columns of table "sponsor.Tier"
"""
input sponsor_Tier_variance_order_by {
    priority: order_by
    size: order_by
}

type subscription_root {
    """
    fetch data from the table: "Email"
    """
    Email(
        """
        distinct select on columns
        """
        distinct_on: [Email_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [Email_order_by!]
        """
        filter the rows returned
        """
        where: Email_bool_exp
    ): [Email!]!
    """
    fetch aggregated fields from the table: "Email"
    """
    Email_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [Email_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [Email_order_by!]
        """
        filter the rows returned
        """
        where: Email_bool_exp
    ): Email_aggregate!
    """
    fetch data from the table: "Email" using primary key columns
    """
    Email_by_pk(id: uuid!): Email
    """
    fetch data from the table: "ForeignKeyIntrospection"
    """
    ForeignKeyIntrospection(
        """
        distinct select on columns
        """
        distinct_on: [ForeignKeyIntrospection_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [ForeignKeyIntrospection_order_by!]
        """
        filter the rows returned
        """
        where: ForeignKeyIntrospection_bool_exp
    ): [ForeignKeyIntrospection!]!
    """
    fetch aggregated fields from the table: "ForeignKeyIntrospection"
    """
    ForeignKeyIntrospection_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [ForeignKeyIntrospection_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [ForeignKeyIntrospection_order_by!]
        """
        filter the rows returned
        """
        where: ForeignKeyIntrospection_bool_exp
    ): ForeignKeyIntrospection_aggregate!
    """
    fetch data from the table: "PushNotificationSubscription"
    """
    PushNotificationSubscription(
        """
        distinct select on columns
        """
        distinct_on: [PushNotificationSubscription_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [PushNotificationSubscription_order_by!]
        """
        filter the rows returned
        """
        where: PushNotificationSubscription_bool_exp
    ): [PushNotificationSubscription!]!
    """
    fetch aggregated fields from the table: "PushNotificationSubscription"
    """
    PushNotificationSubscription_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [PushNotificationSubscription_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [PushNotificationSubscription_order_by!]
        """
        filter the rows returned
        """
        where: PushNotificationSubscription_bool_exp
    ): PushNotificationSubscription_aggregate!
    """
    fetch data from the table: "PushNotificationSubscription" using primary key columns
    """
    PushNotificationSubscription_by_pk(endpoint: String!): PushNotificationSubscription
    """
    fetch data from the table: "User"
    """
    User(
        """
        distinct select on columns
        """
        distinct_on: [User_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [User_order_by!]
        """
        filter the rows returned
        """
        where: User_bool_exp
    ): [User!]!
    """
    fetch aggregated fields from the table: "User"
    """
    User_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [User_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [User_order_by!]
        """
        filter the rows returned
        """
        where: User_bool_exp
    ): User_aggregate!
    """
    fetch data from the table: "User" using primary key columns
    """
    User_by_pk(id: String!): User
    """
    fetch data from the table: "analytics.AppStats"
    """
    analytics_AppStats(
        """
        distinct select on columns
        """
        distinct_on: [analytics_AppStats_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_AppStats_order_by!]
        """
        filter the rows returned
        """
        where: analytics_AppStats_bool_exp
    ): [analytics_AppStats!]!
    """
    fetch aggregated fields from the table: "analytics.AppStats"
    """
    analytics_AppStats_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [analytics_AppStats_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_AppStats_order_by!]
        """
        filter the rows returned
        """
        where: analytics_AppStats_bool_exp
    ): analytics_AppStats_aggregate!
    """
    fetch data from the table: "analytics.AppStats" using primary key columns
    """
    analytics_AppStats_by_pk(id: Int!): analytics_AppStats
    """
    fetch data from the table: "analytics.CompletedRegistrations"
    """
    analytics_CompletedRegistrations(
        """
        distinct select on columns
        """
        distinct_on: [analytics_CompletedRegistrations_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_CompletedRegistrations_order_by!]
        """
        filter the rows returned
        """
        where: analytics_CompletedRegistrations_bool_exp
    ): [analytics_CompletedRegistrations!]!
    """
    fetch aggregated fields from the table: "analytics.CompletedRegistrations"
    """
    analytics_CompletedRegistrations_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [analytics_CompletedRegistrations_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_CompletedRegistrations_order_by!]
        """
        filter the rows returned
        """
        where: analytics_CompletedRegistrations_bool_exp
    ): analytics_CompletedRegistrations_aggregate!
    """
    fetch data from the table: "analytics.ContentElementStats"
    """
    analytics_ContentElementStats(
        """
        distinct select on columns
        """
        distinct_on: [analytics_ContentElementStats_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_ContentElementStats_order_by!]
        """
        filter the rows returned
        """
        where: analytics_ContentElementStats_bool_exp
    ): [analytics_ContentElementStats!]!
    """
    fetch aggregated fields from the table: "analytics.ContentElementStats"
    """
    analytics_ContentElementStats_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [analytics_ContentElementStats_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_ContentElementStats_order_by!]
        """
        filter the rows returned
        """
        where: analytics_ContentElementStats_bool_exp
    ): analytics_ContentElementStats_aggregate!
    """
    fetch data from the table: "analytics.ContentElementStats" using primary key columns
    """
    analytics_ContentElementStats_by_pk(id: uuid!): analytics_ContentElementStats
    """
    fetch data from the table: "analytics.ContentItemStats"
    """
    analytics_ContentItemStats(
        """
        distinct select on columns
        """
        distinct_on: [analytics_ContentItemStats_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_ContentItemStats_order_by!]
        """
        filter the rows returned
        """
        where: analytics_ContentItemStats_bool_exp
    ): [analytics_ContentItemStats!]!
    """
    fetch aggregated fields from the table: "analytics.ContentItemStats"
    """
    analytics_ContentItemStats_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [analytics_ContentItemStats_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_ContentItemStats_order_by!]
        """
        filter the rows returned
        """
        where: analytics_ContentItemStats_bool_exp
    ): analytics_ContentItemStats_aggregate!
    """
    fetch data from the table: "analytics.ContentItemStats" using primary key columns
    """
    analytics_ContentItemStats_by_pk(id: uuid!): analytics_ContentItemStats
    """
    fetch data from the table: "analytics.ElementTotalViews"
    """
    analytics_ElementTotalViews(
        """
        distinct select on columns
        """
        distinct_on: [analytics_ElementTotalViews_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_ElementTotalViews_order_by!]
        """
        filter the rows returned
        """
        where: analytics_ElementTotalViews_bool_exp
    ): [analytics_ElementTotalViews!]!
    """
    fetch aggregated fields from the table: "analytics.ElementTotalViews"
    """
    analytics_ElementTotalViews_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [analytics_ElementTotalViews_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_ElementTotalViews_order_by!]
        """
        filter the rows returned
        """
        where: analytics_ElementTotalViews_bool_exp
    ): analytics_ElementTotalViews_aggregate!
    """
    fetch data from the table: "analytics.ElementTotalViews" using primary key columns
    """
    analytics_ElementTotalViews_by_pk(elementId: uuid!): analytics_ElementTotalViews
    """
    fetch data from the table: "analytics.ItemTotalViews"
    """
    analytics_ItemTotalViews(
        """
        distinct select on columns
        """
        distinct_on: [analytics_ItemTotalViews_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_ItemTotalViews_order_by!]
        """
        filter the rows returned
        """
        where: analytics_ItemTotalViews_bool_exp
    ): [analytics_ItemTotalViews!]!
    """
    fetch aggregated fields from the table: "analytics.ItemTotalViews"
    """
    analytics_ItemTotalViews_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [analytics_ItemTotalViews_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_ItemTotalViews_order_by!]
        """
        filter the rows returned
        """
        where: analytics_ItemTotalViews_bool_exp
    ): analytics_ItemTotalViews_aggregate!
    """
    fetch data from the table: "analytics.ItemTotalViews" using primary key columns
    """
    analytics_ItemTotalViews_by_pk(itemId: uuid!): analytics_ItemTotalViews
    """
    fetch data from the table: "analytics.RoomPresence"
    """
    analytics_RoomPresence(
        """
        distinct select on columns
        """
        distinct_on: [analytics_RoomPresence_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_RoomPresence_order_by!]
        """
        filter the rows returned
        """
        where: analytics_RoomPresence_bool_exp
    ): [analytics_RoomPresence!]!
    """
    fetch aggregated fields from the table: "analytics.RoomPresence"
    """
    analytics_RoomPresence_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [analytics_RoomPresence_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_RoomPresence_order_by!]
        """
        filter the rows returned
        """
        where: analytics_RoomPresence_bool_exp
    ): analytics_RoomPresence_aggregate!
    """
    fetch data from the table: "analytics.RoomPresence" using primary key columns
    """
    analytics_RoomPresence_by_pk(id: uuid!): analytics_RoomPresence
    """
    fetch data from the table: "analytics.RoomStats"
    """
    analytics_RoomStats(
        """
        distinct select on columns
        """
        distinct_on: [analytics_RoomStats_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_RoomStats_order_by!]
        """
        filter the rows returned
        """
        where: analytics_RoomStats_bool_exp
    ): [analytics_RoomStats!]!
    """
    fetch aggregated fields from the table: "analytics.RoomStats"
    """
    analytics_RoomStats_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [analytics_RoomStats_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [analytics_RoomStats_order_by!]
        """
        filter the rows returned
        """
        where: analytics_RoomStats_bool_exp
    ): analytics_RoomStats_aggregate!
    """
    fetch data from the table: "analytics.RoomStats" using primary key columns
    """
    analytics_RoomStats_by_pk(id: uuid!): analytics_RoomStats
    """
    fetch data from the table: "chat.Chat"
    """
    chat_Chat(
        """
        distinct select on columns
        """
        distinct_on: [chat_Chat_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Chat_order_by!]
        """
        filter the rows returned
        """
        where: chat_Chat_bool_exp
    ): [chat_Chat!]!
    """
    fetch aggregated fields from the table: "chat.Chat"
    """
    chat_Chat_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [chat_Chat_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Chat_order_by!]
        """
        filter the rows returned
        """
        where: chat_Chat_bool_exp
    ): chat_Chat_aggregate!
    """
    fetch data from the table: "chat.Chat" using primary key columns
    """
    chat_Chat_by_pk(id: uuid!): chat_Chat
    """
    fetch data from the table: "chat.Flag"
    """
    chat_Flag(
        """
        distinct select on columns
        """
        distinct_on: [chat_Flag_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Flag_order_by!]
        """
        filter the rows returned
        """
        where: chat_Flag_bool_exp
    ): [chat_Flag!]!
    """
    fetch data from the table: "chat.FlagType"
    """
    chat_FlagType(
        """
        distinct select on columns
        """
        distinct_on: [chat_FlagType_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_FlagType_order_by!]
        """
        filter the rows returned
        """
        where: chat_FlagType_bool_exp
    ): [chat_FlagType!]!
    """
    fetch aggregated fields from the table: "chat.FlagType"
    """
    chat_FlagType_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [chat_FlagType_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_FlagType_order_by!]
        """
        filter the rows returned
        """
        where: chat_FlagType_bool_exp
    ): chat_FlagType_aggregate!
    """
    fetch data from the table: "chat.FlagType" using primary key columns
    """
    chat_FlagType_by_pk(name: String!): chat_FlagType
    """
    fetch aggregated fields from the table: "chat.Flag"
    """
    chat_Flag_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [chat_Flag_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Flag_order_by!]
        """
        filter the rows returned
        """
        where: chat_Flag_bool_exp
    ): chat_Flag_aggregate!
    """
    fetch data from the table: "chat.Flag" using primary key columns
    """
    chat_Flag_by_pk(id: Int!): chat_Flag
    """
    fetch data from the table: "chat.Message"
    """
    chat_Message(
        """
        distinct select on columns
        """
        distinct_on: [chat_Message_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Message_order_by!]
        """
        filter the rows returned
        """
        where: chat_Message_bool_exp
    ): [chat_Message!]!
    """
    fetch data from the table: "chat.MessageType"
    """
    chat_MessageType(
        """
        distinct select on columns
        """
        distinct_on: [chat_MessageType_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_MessageType_order_by!]
        """
        filter the rows returned
        """
        where: chat_MessageType_bool_exp
    ): [chat_MessageType!]!
    """
    fetch aggregated fields from the table: "chat.MessageType"
    """
    chat_MessageType_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [chat_MessageType_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_MessageType_order_by!]
        """
        filter the rows returned
        """
        where: chat_MessageType_bool_exp
    ): chat_MessageType_aggregate!
    """
    fetch data from the table: "chat.MessageType" using primary key columns
    """
    chat_MessageType_by_pk(name: String!): chat_MessageType
    """
    fetch aggregated fields from the table: "chat.Message"
    """
    chat_Message_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [chat_Message_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Message_order_by!]
        """
        filter the rows returned
        """
        where: chat_Message_bool_exp
    ): chat_Message_aggregate!
    """
    fetch data from the table: "chat.Message" using primary key columns
    """
    chat_Message_by_pk(id: Int!): chat_Message
    """
    fetch data from the table: "chat.Pin"
    """
    chat_Pin(
        """
        distinct select on columns
        """
        distinct_on: [chat_Pin_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Pin_order_by!]
        """
        filter the rows returned
        """
        where: chat_Pin_bool_exp
    ): [chat_Pin!]!
    """
    fetch aggregated fields from the table: "chat.Pin"
    """
    chat_Pin_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [chat_Pin_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Pin_order_by!]
        """
        filter the rows returned
        """
        where: chat_Pin_bool_exp
    ): chat_Pin_aggregate!
    """
    fetch data from the table: "chat.Pin" using primary key columns
    """
    chat_Pin_by_pk(chatId: uuid!, registrantId: uuid!): chat_Pin
    """
    fetch data from the table: "chat.Reaction"
    """
    chat_Reaction(
        """
        distinct select on columns
        """
        distinct_on: [chat_Reaction_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Reaction_order_by!]
        """
        filter the rows returned
        """
        where: chat_Reaction_bool_exp
    ): [chat_Reaction!]!
    """
    fetch data from the table: "chat.ReactionType"
    """
    chat_ReactionType(
        """
        distinct select on columns
        """
        distinct_on: [chat_ReactionType_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_ReactionType_order_by!]
        """
        filter the rows returned
        """
        where: chat_ReactionType_bool_exp
    ): [chat_ReactionType!]!
    """
    fetch aggregated fields from the table: "chat.ReactionType"
    """
    chat_ReactionType_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [chat_ReactionType_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_ReactionType_order_by!]
        """
        filter the rows returned
        """
        where: chat_ReactionType_bool_exp
    ): chat_ReactionType_aggregate!
    """
    fetch data from the table: "chat.ReactionType" using primary key columns
    """
    chat_ReactionType_by_pk(name: String!): chat_ReactionType
    """
    fetch aggregated fields from the table: "chat.Reaction"
    """
    chat_Reaction_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [chat_Reaction_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Reaction_order_by!]
        """
        filter the rows returned
        """
        where: chat_Reaction_bool_exp
    ): chat_Reaction_aggregate!
    """
    fetch data from the table: "chat.Reaction" using primary key columns
    """
    chat_Reaction_by_pk(sId: uuid!): chat_Reaction
    """
    fetch data from the table: "chat.ReadUpToIndex"
    """
    chat_ReadUpToIndex(
        """
        distinct select on columns
        """
        distinct_on: [chat_ReadUpToIndex_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_ReadUpToIndex_order_by!]
        """
        filter the rows returned
        """
        where: chat_ReadUpToIndex_bool_exp
    ): [chat_ReadUpToIndex!]!
    """
    fetch aggregated fields from the table: "chat.ReadUpToIndex"
    """
    chat_ReadUpToIndex_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [chat_ReadUpToIndex_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_ReadUpToIndex_order_by!]
        """
        filter the rows returned
        """
        where: chat_ReadUpToIndex_bool_exp
    ): chat_ReadUpToIndex_aggregate!
    """
    fetch data from the table: "chat.ReadUpToIndex" using primary key columns
    """
    chat_ReadUpToIndex_by_pk(chatId: uuid!, registrantId: uuid!): chat_ReadUpToIndex
    """
    fetch data from the table: "chat.Subscription"
    """
    chat_Subscription(
        """
        distinct select on columns
        """
        distinct_on: [chat_Subscription_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Subscription_order_by!]
        """
        filter the rows returned
        """
        where: chat_Subscription_bool_exp
    ): [chat_Subscription!]!
    """
    fetch aggregated fields from the table: "chat.Subscription"
    """
    chat_Subscription_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [chat_Subscription_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [chat_Subscription_order_by!]
        """
        filter the rows returned
        """
        where: chat_Subscription_bool_exp
    ): chat_Subscription_aggregate!
    """
    fetch data from the table: "chat.Subscription" using primary key columns
    """
    chat_Subscription_by_pk(chatId: uuid!, registrantId: uuid!): chat_Subscription
    """
    fetch data from the table: "collection.Exhibition"
    """
    collection_Exhibition(
        """
        distinct select on columns
        """
        distinct_on: [collection_Exhibition_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [collection_Exhibition_order_by!]
        """
        filter the rows returned
        """
        where: collection_Exhibition_bool_exp
    ): [collection_Exhibition!]!
    """
    fetch aggregated fields from the table: "collection.Exhibition"
    """
    collection_Exhibition_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [collection_Exhibition_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [collection_Exhibition_order_by!]
        """
        filter the rows returned
        """
        where: collection_Exhibition_bool_exp
    ): collection_Exhibition_aggregate!
    """
    fetch data from the table: "collection.Exhibition" using primary key columns
    """
    collection_Exhibition_by_pk(id: uuid!): collection_Exhibition
    """
    fetch data from the table: "collection.ProgramPerson"
    """
    collection_ProgramPerson(
        """
        distinct select on columns
        """
        distinct_on: [collection_ProgramPerson_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [collection_ProgramPerson_order_by!]
        """
        filter the rows returned
        """
        where: collection_ProgramPerson_bool_exp
    ): [collection_ProgramPerson!]!
    """
    fetch aggregated fields from the table: "collection.ProgramPerson"
    """
    collection_ProgramPerson_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [collection_ProgramPerson_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [collection_ProgramPerson_order_by!]
        """
        filter the rows returned
        """
        where: collection_ProgramPerson_bool_exp
    ): collection_ProgramPerson_aggregate!
    """
    fetch data from the table: "collection.ProgramPerson" using primary key columns
    """
    collection_ProgramPerson_by_pk(id: uuid!): collection_ProgramPerson
    """
    fetch data from the table: "collection.Tag"
    """
    collection_Tag(
        """
        distinct select on columns
        """
        distinct_on: [collection_Tag_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [collection_Tag_order_by!]
        """
        filter the rows returned
        """
        where: collection_Tag_bool_exp
    ): [collection_Tag!]!
    """
    fetch aggregated fields from the table: "collection.Tag"
    """
    collection_Tag_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [collection_Tag_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [collection_Tag_order_by!]
        """
        filter the rows returned
        """
        where: collection_Tag_bool_exp
    ): collection_Tag_aggregate!
    """
    fetch data from the table: "collection.Tag" using primary key columns
    """
    collection_Tag_by_pk(id: uuid!): collection_Tag
    """
    execute function "collection.searchProgramPerson" which returns "collection.ProgramPerson"
    """
    collection_searchProgramPerson(
        """
        input parameters for function "collection.searchProgramPerson"
        """
        args: collection_searchProgramPerson_args!
        """
        distinct select on columns
        """
        distinct_on: [collection_ProgramPerson_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [collection_ProgramPerson_order_by!]
        """
        filter the rows returned
        """
        where: collection_ProgramPerson_bool_exp
    ): [collection_ProgramPerson!]!
    """
    execute function "collection.searchProgramPerson" and query aggregates on result of table type "collection.ProgramPerson"
    """
    collection_searchProgramPerson_aggregate(
        """
        input parameters for function "collection.searchProgramPerson"
        """
        args: collection_searchProgramPerson_args!
        """
        distinct select on columns
        """
        distinct_on: [collection_ProgramPerson_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [collection_ProgramPerson_order_by!]
        """
        filter the rows returned
        """
        where: collection_ProgramPerson_bool_exp
    ): collection_ProgramPerson_aggregate!
    """
    fetch data from the table: "conference.Conference"
    """
    conference_Conference(
        """
        distinct select on columns
        """
        distinct_on: [conference_Conference_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [conference_Conference_order_by!]
        """
        filter the rows returned
        """
        where: conference_Conference_bool_exp
    ): [conference_Conference!]!
    """
    fetch aggregated fields from the table: "conference.Conference"
    """
    conference_Conference_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [conference_Conference_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [conference_Conference_order_by!]
        """
        filter the rows returned
        """
        where: conference_Conference_bool_exp
    ): conference_Conference_aggregate!
    """
    fetch data from the table: "conference.Conference" using primary key columns
    """
    conference_Conference_by_pk(id: uuid!): conference_Conference
    """
    fetch data from the table: "conference.Configuration"
    """
    conference_Configuration(
        """
        distinct select on columns
        """
        distinct_on: [conference_Configuration_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [conference_Configuration_order_by!]
        """
        filter the rows returned
        """
        where: conference_Configuration_bool_exp
    ): [conference_Configuration!]!
    """
    fetch data from the table: "conference.ConfigurationKey"
    """
    conference_ConfigurationKey(
        """
        distinct select on columns
        """
        distinct_on: [conference_ConfigurationKey_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [conference_ConfigurationKey_order_by!]
        """
        filter the rows returned
        """
        where: conference_ConfigurationKey_bool_exp
    ): [conference_ConfigurationKey!]!
    """
    fetch aggregated fields from the table: "conference.ConfigurationKey"
    """
    conference_ConfigurationKey_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [conference_ConfigurationKey_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [conference_ConfigurationKey_order_by!]
        """
        filter the rows returned
        """
        where: conference_ConfigurationKey_bool_exp
    ): conference_ConfigurationKey_aggregate!
    """
    fetch data from the table: "conference.ConfigurationKey" using primary key columns
    """
    conference_ConfigurationKey_by_pk(name: String!): conference_ConfigurationKey
    """
    fetch aggregated fields from the table: "conference.Configuration"
    """
    conference_Configuration_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [conference_Configuration_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [conference_Configuration_order_by!]
        """
        filter the rows returned
        """
        where: conference_Configuration_bool_exp
    ): conference_Configuration_aggregate!
    """
    fetch data from the table: "conference.Configuration" using primary key columns
    """
    conference_Configuration_by_pk(
        conferenceId: uuid!
        key: conference_ConfigurationKey_enum!
    ): conference_Configuration
    """
    fetch data from the table: "conference.DemoCode"
    """
    conference_DemoCode(
        """
        distinct select on columns
        """
        distinct_on: [conference_DemoCode_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [conference_DemoCode_order_by!]
        """
        filter the rows returned
        """
        where: conference_DemoCode_bool_exp
    ): [conference_DemoCode!]!
    """
    fetch aggregated fields from the table: "conference.DemoCode"
    """
    conference_DemoCode_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [conference_DemoCode_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [conference_DemoCode_order_by!]
        """
        filter the rows returned
        """
        where: conference_DemoCode_bool_exp
    ): conference_DemoCode_aggregate!
    """
    fetch data from the table: "conference.DemoCode" using primary key columns
    """
    conference_DemoCode_by_pk(id: uuid!): conference_DemoCode
    """
    fetch data from the table: "conference.Subconference"
    """
    conference_Subconference(
        """
        distinct select on columns
        """
        distinct_on: [conference_Subconference_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [conference_Subconference_order_by!]
        """
        filter the rows returned
        """
        where: conference_Subconference_bool_exp
    ): [conference_Subconference!]!
    """
    fetch aggregated fields from the table: "conference.Subconference"
    """
    conference_Subconference_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [conference_Subconference_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [conference_Subconference_order_by!]
        """
        filter the rows returned
        """
        where: conference_Subconference_bool_exp
    ): conference_Subconference_aggregate!
    """
    fetch data from the table: "conference.Subconference" using primary key columns
    """
    conference_Subconference_by_pk(id: uuid!): conference_Subconference
    """
    fetch data from the table: "conference.VisibilityLevel"
    """
    conference_VisibilityLevel(
        """
        distinct select on columns
        """
        distinct_on: [conference_VisibilityLevel_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [conference_VisibilityLevel_order_by!]
        """
        filter the rows returned
        """
        where: conference_VisibilityLevel_bool_exp
    ): [conference_VisibilityLevel!]!
    """
    fetch aggregated fields from the table: "conference.VisibilityLevel"
    """
    conference_VisibilityLevel_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [conference_VisibilityLevel_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [conference_VisibilityLevel_order_by!]
        """
        filter the rows returned
        """
        where: conference_VisibilityLevel_bool_exp
    ): conference_VisibilityLevel_aggregate!
    """
    fetch data from the table: "conference.VisibilityLevel" using primary key columns
    """
    conference_VisibilityLevel_by_pk(name: String!): conference_VisibilityLevel
    """
    fetch data from the table: "content.Element"
    """
    content_Element(
        """
        distinct select on columns
        """
        distinct_on: [content_Element_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_Element_order_by!]
        """
        filter the rows returned
        """
        where: content_Element_bool_exp
    ): [content_Element!]!
    """
    fetch data from the table: "content.ElementType"
    """
    content_ElementType(
        """
        distinct select on columns
        """
        distinct_on: [content_ElementType_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_ElementType_order_by!]
        """
        filter the rows returned
        """
        where: content_ElementType_bool_exp
    ): [content_ElementType!]!
    """
    fetch aggregated fields from the table: "content.ElementType"
    """
    content_ElementType_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [content_ElementType_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_ElementType_order_by!]
        """
        filter the rows returned
        """
        where: content_ElementType_bool_exp
    ): content_ElementType_aggregate!
    """
    fetch data from the table: "content.ElementType" using primary key columns
    """
    content_ElementType_by_pk(name: String!): content_ElementType
    """
    fetch aggregated fields from the table: "content.Element"
    """
    content_Element_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [content_Element_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_Element_order_by!]
        """
        filter the rows returned
        """
        where: content_Element_bool_exp
    ): content_Element_aggregate!
    """
    fetch data from the table: "content.Element" using primary key columns
    """
    content_Element_by_pk(id: uuid!): content_Element
    """
    fetch data from the table: "content.Item"
    """
    content_Item(
        """
        distinct select on columns
        """
        distinct_on: [content_Item_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_Item_order_by!]
        """
        filter the rows returned
        """
        where: content_Item_bool_exp
    ): [content_Item!]!
    """
    fetch data from the table: "content.ItemExhibition"
    """
    content_ItemExhibition(
        """
        distinct select on columns
        """
        distinct_on: [content_ItemExhibition_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_ItemExhibition_order_by!]
        """
        filter the rows returned
        """
        where: content_ItemExhibition_bool_exp
    ): [content_ItemExhibition!]!
    """
    fetch aggregated fields from the table: "content.ItemExhibition"
    """
    content_ItemExhibition_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [content_ItemExhibition_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_ItemExhibition_order_by!]
        """
        filter the rows returned
        """
        where: content_ItemExhibition_bool_exp
    ): content_ItemExhibition_aggregate!
    """
    fetch data from the table: "content.ItemExhibition" using primary key columns
    """
    content_ItemExhibition_by_pk(id: uuid!): content_ItemExhibition
    """
    fetch data from the table: "content.ItemProgramPerson"
    """
    content_ItemProgramPerson(
        """
        distinct select on columns
        """
        distinct_on: [content_ItemProgramPerson_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_ItemProgramPerson_order_by!]
        """
        filter the rows returned
        """
        where: content_ItemProgramPerson_bool_exp
    ): [content_ItemProgramPerson!]!
    """
    fetch aggregated fields from the table: "content.ItemProgramPerson"
    """
    content_ItemProgramPerson_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [content_ItemProgramPerson_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_ItemProgramPerson_order_by!]
        """
        filter the rows returned
        """
        where: content_ItemProgramPerson_bool_exp
    ): content_ItemProgramPerson_aggregate!
    """
    fetch data from the table: "content.ItemProgramPerson" using primary key columns
    """
    content_ItemProgramPerson_by_pk(id: uuid!): content_ItemProgramPerson
    """
    fetch data from the table: "content.ItemTag"
    """
    content_ItemTag(
        """
        distinct select on columns
        """
        distinct_on: [content_ItemTag_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_ItemTag_order_by!]
        """
        filter the rows returned
        """
        where: content_ItemTag_bool_exp
    ): [content_ItemTag!]!
    """
    fetch aggregated fields from the table: "content.ItemTag"
    """
    content_ItemTag_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [content_ItemTag_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_ItemTag_order_by!]
        """
        filter the rows returned
        """
        where: content_ItemTag_bool_exp
    ): content_ItemTag_aggregate!
    """
    fetch data from the table: "content.ItemTag" using primary key columns
    """
    content_ItemTag_by_pk(id: uuid!): content_ItemTag
    """
    fetch data from the table: "content.ItemType"
    """
    content_ItemType(
        """
        distinct select on columns
        """
        distinct_on: [content_ItemType_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_ItemType_order_by!]
        """
        filter the rows returned
        """
        where: content_ItemType_bool_exp
    ): [content_ItemType!]!
    """
    fetch aggregated fields from the table: "content.ItemType"
    """
    content_ItemType_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [content_ItemType_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_ItemType_order_by!]
        """
        filter the rows returned
        """
        where: content_ItemType_bool_exp
    ): content_ItemType_aggregate!
    """
    fetch data from the table: "content.ItemType" using primary key columns
    """
    content_ItemType_by_pk(name: String!): content_ItemType
    """
    fetch aggregated fields from the table: "content.Item"
    """
    content_Item_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [content_Item_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_Item_order_by!]
        """
        filter the rows returned
        """
        where: content_Item_bool_exp
    ): content_Item_aggregate!
    """
    fetch data from the table: "content.Item" using primary key columns
    """
    content_Item_by_pk(id: uuid!): content_Item
    """
    execute function "content.searchItems" which returns "content.Item"
    """
    content_searchItems(
        """
        input parameters for function "content.searchItems"
        """
        args: content_searchItems_args!
        """
        distinct select on columns
        """
        distinct_on: [content_Item_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_Item_order_by!]
        """
        filter the rows returned
        """
        where: content_Item_bool_exp
    ): [content_Item!]!
    """
    execute function "content.searchItems" and query aggregates on result of table type "content.Item"
    """
    content_searchItems_aggregate(
        """
        input parameters for function "content.searchItems"
        """
        args: content_searchItems_args!
        """
        distinct select on columns
        """
        distinct_on: [content_Item_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [content_Item_order_by!]
        """
        filter the rows returned
        """
        where: content_Item_bool_exp
    ): content_Item_aggregate!
    """
    fetch data from the table: "job_queues.ChannelStackCreateJob"
    """
    job_queues_ChannelStackCreateJob(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_ChannelStackCreateJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_ChannelStackCreateJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_ChannelStackCreateJob_bool_exp
    ): [job_queues_ChannelStackCreateJob!]!
    """
    fetch aggregated fields from the table: "job_queues.ChannelStackCreateJob"
    """
    job_queues_ChannelStackCreateJob_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_ChannelStackCreateJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_ChannelStackCreateJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_ChannelStackCreateJob_bool_exp
    ): job_queues_ChannelStackCreateJob_aggregate!
    """
    fetch data from the table: "job_queues.ChannelStackCreateJob" using primary key columns
    """
    job_queues_ChannelStackCreateJob_by_pk(id: uuid!): job_queues_ChannelStackCreateJob
    """
    fetch data from the table: "job_queues.ChannelStackDeleteJob"
    """
    job_queues_ChannelStackDeleteJob(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_ChannelStackDeleteJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_ChannelStackDeleteJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_ChannelStackDeleteJob_bool_exp
    ): [job_queues_ChannelStackDeleteJob!]!
    """
    fetch aggregated fields from the table: "job_queues.ChannelStackDeleteJob"
    """
    job_queues_ChannelStackDeleteJob_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_ChannelStackDeleteJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_ChannelStackDeleteJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_ChannelStackDeleteJob_bool_exp
    ): job_queues_ChannelStackDeleteJob_aggregate!
    """
    fetch data from the table: "job_queues.ChannelStackDeleteJob" using primary key columns
    """
    job_queues_ChannelStackDeleteJob_by_pk(id: uuid!): job_queues_ChannelStackDeleteJob
    """
    fetch data from the table: "job_queues.ChannelStackUpdateJob"
    """
    job_queues_ChannelStackUpdateJob(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_ChannelStackUpdateJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_ChannelStackUpdateJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_ChannelStackUpdateJob_bool_exp
    ): [job_queues_ChannelStackUpdateJob!]!
    """
    fetch aggregated fields from the table: "job_queues.ChannelStackUpdateJob"
    """
    job_queues_ChannelStackUpdateJob_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_ChannelStackUpdateJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_ChannelStackUpdateJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_ChannelStackUpdateJob_bool_exp
    ): job_queues_ChannelStackUpdateJob_aggregate!
    """
    fetch data from the table: "job_queues.ChannelStackUpdateJob" using primary key columns
    """
    job_queues_ChannelStackUpdateJob_by_pk(id: uuid!): job_queues_ChannelStackUpdateJob
    """
    fetch data from the table: "job_queues.CombineVideosJob"
    """
    job_queues_CombineVideosJob(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_CombineVideosJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_CombineVideosJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_CombineVideosJob_bool_exp
    ): [job_queues_CombineVideosJob!]!
    """
    fetch aggregated fields from the table: "job_queues.CombineVideosJob"
    """
    job_queues_CombineVideosJob_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_CombineVideosJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_CombineVideosJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_CombineVideosJob_bool_exp
    ): job_queues_CombineVideosJob_aggregate!
    """
    fetch data from the table: "job_queues.CombineVideosJob" using primary key columns
    """
    job_queues_CombineVideosJob_by_pk(id: uuid!): job_queues_CombineVideosJob
    """
    fetch data from the table: "job_queues.CustomEmailJob"
    """
    job_queues_CustomEmailJob(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_CustomEmailJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_CustomEmailJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_CustomEmailJob_bool_exp
    ): [job_queues_CustomEmailJob!]!
    """
    fetch aggregated fields from the table: "job_queues.CustomEmailJob"
    """
    job_queues_CustomEmailJob_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_CustomEmailJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_CustomEmailJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_CustomEmailJob_bool_exp
    ): job_queues_CustomEmailJob_aggregate!
    """
    fetch data from the table: "job_queues.CustomEmailJob" using primary key columns
    """
    job_queues_CustomEmailJob_by_pk(id: uuid!): job_queues_CustomEmailJob
    """
    fetch data from the table: "job_queues.ImportJob"
    """
    job_queues_ImportJob(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_ImportJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_ImportJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_ImportJob_bool_exp
    ): [job_queues_ImportJob!]!
    """
    fetch data from the table: "job_queues.ImportJobOutput"
    """
    job_queues_ImportJobOutput(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_ImportJobOutput_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_ImportJobOutput_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_ImportJobOutput_bool_exp
    ): [job_queues_ImportJobOutput!]!
    """
    fetch aggregated fields from the table: "job_queues.ImportJobOutput"
    """
    job_queues_ImportJobOutput_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_ImportJobOutput_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_ImportJobOutput_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_ImportJobOutput_bool_exp
    ): job_queues_ImportJobOutput_aggregate!
    """
    fetch data from the table: "job_queues.ImportJobOutput" using primary key columns
    """
    job_queues_ImportJobOutput_by_pk(id: uuid!): job_queues_ImportJobOutput
    """
    fetch aggregated fields from the table: "job_queues.ImportJob"
    """
    job_queues_ImportJob_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_ImportJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_ImportJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_ImportJob_bool_exp
    ): job_queues_ImportJob_aggregate!
    """
    fetch data from the table: "job_queues.ImportJob" using primary key columns
    """
    job_queues_ImportJob_by_pk(id: uuid!): job_queues_ImportJob
    """
    fetch data from the table: "job_queues.InvitationEmailJob"
    """
    job_queues_InvitationEmailJob(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_InvitationEmailJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_InvitationEmailJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_InvitationEmailJob_bool_exp
    ): [job_queues_InvitationEmailJob!]!
    """
    fetch aggregated fields from the table: "job_queues.InvitationEmailJob"
    """
    job_queues_InvitationEmailJob_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_InvitationEmailJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_InvitationEmailJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_InvitationEmailJob_bool_exp
    ): job_queues_InvitationEmailJob_aggregate!
    """
    fetch data from the table: "job_queues.InvitationEmailJob" using primary key columns
    """
    job_queues_InvitationEmailJob_by_pk(id: uuid!): job_queues_InvitationEmailJob
    """
    fetch data from the table: "job_queues.JobStatus"
    """
    job_queues_JobStatus(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_JobStatus_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_JobStatus_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_JobStatus_bool_exp
    ): [job_queues_JobStatus!]!
    """
    fetch aggregated fields from the table: "job_queues.JobStatus"
    """
    job_queues_JobStatus_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_JobStatus_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_JobStatus_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_JobStatus_bool_exp
    ): job_queues_JobStatus_aggregate!
    """
    fetch data from the table: "job_queues.JobStatus" using primary key columns
    """
    job_queues_JobStatus_by_pk(name: String!): job_queues_JobStatus
    """
    fetch data from the table: "job_queues.MediaPackageHarvestJob"
    """
    job_queues_MediaPackageHarvestJob(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_MediaPackageHarvestJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_MediaPackageHarvestJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_MediaPackageHarvestJob_bool_exp
    ): [job_queues_MediaPackageHarvestJob!]!
    """
    fetch aggregated fields from the table: "job_queues.MediaPackageHarvestJob"
    """
    job_queues_MediaPackageHarvestJob_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_MediaPackageHarvestJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_MediaPackageHarvestJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_MediaPackageHarvestJob_bool_exp
    ): job_queues_MediaPackageHarvestJob_aggregate!
    """
    fetch data from the table: "job_queues.MediaPackageHarvestJob" using primary key columns
    """
    job_queues_MediaPackageHarvestJob_by_pk(id: uuid!): job_queues_MediaPackageHarvestJob
    """
    fetch data from the table: "job_queues.PrepareJob"
    """
    job_queues_PrepareJob(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_PrepareJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_PrepareJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_PrepareJob_bool_exp
    ): [job_queues_PrepareJob!]!
    """
    fetch aggregated fields from the table: "job_queues.PrepareJob"
    """
    job_queues_PrepareJob_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_PrepareJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_PrepareJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_PrepareJob_bool_exp
    ): job_queues_PrepareJob_aggregate!
    """
    fetch data from the table: "job_queues.PrepareJob" using primary key columns
    """
    job_queues_PrepareJob_by_pk(id: uuid!): job_queues_PrepareJob
    """
    fetch data from the table: "job_queues.PublishVideoJob"
    """
    job_queues_PublishVideoJob(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_PublishVideoJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_PublishVideoJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_PublishVideoJob_bool_exp
    ): [job_queues_PublishVideoJob!]!
    """
    fetch aggregated fields from the table: "job_queues.PublishVideoJob"
    """
    job_queues_PublishVideoJob_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_PublishVideoJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_PublishVideoJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_PublishVideoJob_bool_exp
    ): job_queues_PublishVideoJob_aggregate!
    """
    fetch data from the table: "job_queues.PublishVideoJob" using primary key columns
    """
    job_queues_PublishVideoJob_by_pk(id: uuid!): job_queues_PublishVideoJob
    """
    fetch data from the table: "job_queues.SubmissionRequestEmailJob"
    """
    job_queues_SubmissionRequestEmailJob(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_SubmissionRequestEmailJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_SubmissionRequestEmailJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_SubmissionRequestEmailJob_bool_exp
    ): [job_queues_SubmissionRequestEmailJob!]!
    """
    fetch aggregated fields from the table: "job_queues.SubmissionRequestEmailJob"
    """
    job_queues_SubmissionRequestEmailJob_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_SubmissionRequestEmailJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_SubmissionRequestEmailJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_SubmissionRequestEmailJob_bool_exp
    ): job_queues_SubmissionRequestEmailJob_aggregate!
    """
    fetch data from the table: "job_queues.SubmissionRequestEmailJob" using primary key columns
    """
    job_queues_SubmissionRequestEmailJob_by_pk(id: uuid!): job_queues_SubmissionRequestEmailJob
    """
    fetch data from the table: "job_queues.UploadYouTubeVideoJob"
    """
    job_queues_UploadYouTubeVideoJob(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_UploadYouTubeVideoJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_UploadYouTubeVideoJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_UploadYouTubeVideoJob_bool_exp
    ): [job_queues_UploadYouTubeVideoJob!]!
    """
    fetch aggregated fields from the table: "job_queues.UploadYouTubeVideoJob"
    """
    job_queues_UploadYouTubeVideoJob_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_UploadYouTubeVideoJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_UploadYouTubeVideoJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_UploadYouTubeVideoJob_bool_exp
    ): job_queues_UploadYouTubeVideoJob_aggregate!
    """
    fetch data from the table: "job_queues.UploadYouTubeVideoJob" using primary key columns
    """
    job_queues_UploadYouTubeVideoJob_by_pk(id: uuid!): job_queues_UploadYouTubeVideoJob
    """
    fetch data from the table: "registrant.GoogleAccount"
    """
    registrant_GoogleAccount(
        """
        distinct select on columns
        """
        distinct_on: [registrant_GoogleAccount_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_GoogleAccount_order_by!]
        """
        filter the rows returned
        """
        where: registrant_GoogleAccount_bool_exp
    ): [registrant_GoogleAccount!]!
    """
    fetch aggregated fields from the table: "registrant.GoogleAccount"
    """
    registrant_GoogleAccount_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [registrant_GoogleAccount_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_GoogleAccount_order_by!]
        """
        filter the rows returned
        """
        where: registrant_GoogleAccount_bool_exp
    ): registrant_GoogleAccount_aggregate!
    """
    fetch data from the table: "registrant.GoogleAccount" using primary key columns
    """
    registrant_GoogleAccount_by_pk(id: uuid!): registrant_GoogleAccount
    """
    fetch data from the table: "registrant.Group"
    """
    registrant_Group(
        """
        distinct select on columns
        """
        distinct_on: [registrant_Group_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_Group_order_by!]
        """
        filter the rows returned
        """
        where: registrant_Group_bool_exp
    ): [registrant_Group!]!
    """
    fetch data from the table: "registrant.GroupRegistrant"
    """
    registrant_GroupRegistrant(
        """
        distinct select on columns
        """
        distinct_on: [registrant_GroupRegistrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_GroupRegistrant_order_by!]
        """
        filter the rows returned
        """
        where: registrant_GroupRegistrant_bool_exp
    ): [registrant_GroupRegistrant!]!
    """
    fetch aggregated fields from the table: "registrant.GroupRegistrant"
    """
    registrant_GroupRegistrant_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [registrant_GroupRegistrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_GroupRegistrant_order_by!]
        """
        filter the rows returned
        """
        where: registrant_GroupRegistrant_bool_exp
    ): registrant_GroupRegistrant_aggregate!
    """
    fetch data from the table: "registrant.GroupRegistrant" using primary key columns
    """
    registrant_GroupRegistrant_by_pk(id: uuid!): registrant_GroupRegistrant
    """
    fetch aggregated fields from the table: "registrant.Group"
    """
    registrant_Group_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [registrant_Group_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_Group_order_by!]
        """
        filter the rows returned
        """
        where: registrant_Group_bool_exp
    ): registrant_Group_aggregate!
    """
    fetch data from the table: "registrant.Group" using primary key columns
    """
    registrant_Group_by_pk(id: uuid!): registrant_Group
    """
    fetch data from the table: "registrant.Invitation"
    """
    registrant_Invitation(
        """
        distinct select on columns
        """
        distinct_on: [registrant_Invitation_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_Invitation_order_by!]
        """
        filter the rows returned
        """
        where: registrant_Invitation_bool_exp
    ): [registrant_Invitation!]!
    """
    fetch aggregated fields from the table: "registrant.Invitation"
    """
    registrant_Invitation_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [registrant_Invitation_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_Invitation_order_by!]
        """
        filter the rows returned
        """
        where: registrant_Invitation_bool_exp
    ): registrant_Invitation_aggregate!
    """
    fetch data from the table: "registrant.Invitation" using primary key columns
    """
    registrant_Invitation_by_pk(id: uuid!): registrant_Invitation
    """
    fetch data from the table: "registrant.Profile"
    """
    registrant_Profile(
        """
        distinct select on columns
        """
        distinct_on: [registrant_Profile_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_Profile_order_by!]
        """
        filter the rows returned
        """
        where: registrant_Profile_bool_exp
    ): [registrant_Profile!]!
    """
    fetch data from the table: "registrant.ProfileBadges"
    """
    registrant_ProfileBadges(
        """
        distinct select on columns
        """
        distinct_on: [registrant_ProfileBadges_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_ProfileBadges_order_by!]
        """
        filter the rows returned
        """
        where: registrant_ProfileBadges_bool_exp
    ): [registrant_ProfileBadges!]!
    """
    fetch aggregated fields from the table: "registrant.ProfileBadges"
    """
    registrant_ProfileBadges_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [registrant_ProfileBadges_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_ProfileBadges_order_by!]
        """
        filter the rows returned
        """
        where: registrant_ProfileBadges_bool_exp
    ): registrant_ProfileBadges_aggregate!
    """
    fetch aggregated fields from the table: "registrant.Profile"
    """
    registrant_Profile_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [registrant_Profile_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_Profile_order_by!]
        """
        filter the rows returned
        """
        where: registrant_Profile_bool_exp
    ): registrant_Profile_aggregate!
    """
    fetch data from the table: "registrant.Profile" using primary key columns
    """
    registrant_Profile_by_pk(registrantId: uuid!): registrant_Profile
    """
    fetch data from the table: "registrant.Registrant"
    """
    registrant_Registrant(
        """
        distinct select on columns
        """
        distinct_on: [registrant_Registrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_Registrant_order_by!]
        """
        filter the rows returned
        """
        where: registrant_Registrant_bool_exp
    ): [registrant_Registrant!]!
    """
    fetch data from the table: "registrant.RegistrantRole"
    """
    registrant_RegistrantRole(
        """
        distinct select on columns
        """
        distinct_on: [registrant_RegistrantRole_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_RegistrantRole_order_by!]
        """
        filter the rows returned
        """
        where: registrant_RegistrantRole_bool_exp
    ): [registrant_RegistrantRole!]!
    """
    fetch aggregated fields from the table: "registrant.RegistrantRole"
    """
    registrant_RegistrantRole_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [registrant_RegistrantRole_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_RegistrantRole_order_by!]
        """
        filter the rows returned
        """
        where: registrant_RegistrantRole_bool_exp
    ): registrant_RegistrantRole_aggregate!
    """
    fetch data from the table: "registrant.RegistrantRole" using primary key columns
    """
    registrant_RegistrantRole_by_pk(name: String!): registrant_RegistrantRole
    """
    fetch aggregated fields from the table: "registrant.Registrant"
    """
    registrant_Registrant_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [registrant_Registrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_Registrant_order_by!]
        """
        filter the rows returned
        """
        where: registrant_Registrant_bool_exp
    ): registrant_Registrant_aggregate!
    """
    fetch data from the table: "registrant.Registrant" using primary key columns
    """
    registrant_Registrant_by_pk(id: uuid!): registrant_Registrant
    """
    fetch data from the table: "registrant.SavedVonageRoomRecording"
    """
    registrant_SavedVonageRoomRecording(
        """
        distinct select on columns
        """
        distinct_on: [registrant_SavedVonageRoomRecording_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_SavedVonageRoomRecording_order_by!]
        """
        filter the rows returned
        """
        where: registrant_SavedVonageRoomRecording_bool_exp
    ): [registrant_SavedVonageRoomRecording!]!
    """
    fetch aggregated fields from the table: "registrant.SavedVonageRoomRecording"
    """
    registrant_SavedVonageRoomRecording_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [registrant_SavedVonageRoomRecording_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_SavedVonageRoomRecording_order_by!]
        """
        filter the rows returned
        """
        where: registrant_SavedVonageRoomRecording_bool_exp
    ): registrant_SavedVonageRoomRecording_aggregate!
    """
    fetch data from the table: "registrant.SavedVonageRoomRecording" using primary key columns
    """
    registrant_SavedVonageRoomRecording_by_pk(id: uuid!): registrant_SavedVonageRoomRecording
    """
    fetch data from the table: "registrant.SubconferenceMembership"
    """
    registrant_SubconferenceMembership(
        """
        distinct select on columns
        """
        distinct_on: [registrant_SubconferenceMembership_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_SubconferenceMembership_order_by!]
        """
        filter the rows returned
        """
        where: registrant_SubconferenceMembership_bool_exp
    ): [registrant_SubconferenceMembership!]!
    """
    fetch aggregated fields from the table: "registrant.SubconferenceMembership"
    """
    registrant_SubconferenceMembership_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [registrant_SubconferenceMembership_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_SubconferenceMembership_order_by!]
        """
        filter the rows returned
        """
        where: registrant_SubconferenceMembership_bool_exp
    ): registrant_SubconferenceMembership_aggregate!
    """
    fetch data from the table: "registrant.SubconferenceMembership" using primary key columns
    """
    registrant_SubconferenceMembership_by_pk(id: uuid!): registrant_SubconferenceMembership
    """
    execute function "registrant.searchRegistrants" which returns "registrant.Registrant"
    """
    registrant_searchRegistrants(
        """
        input parameters for function "registrant.searchRegistrants"
        """
        args: registrant_searchRegistrants_args!
        """
        distinct select on columns
        """
        distinct_on: [registrant_Registrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_Registrant_order_by!]
        """
        filter the rows returned
        """
        where: registrant_Registrant_bool_exp
    ): [registrant_Registrant!]!
    """
    execute function "registrant.searchRegistrants" and query aggregates on result of table type "registrant.Registrant"
    """
    registrant_searchRegistrants_aggregate(
        """
        input parameters for function "registrant.searchRegistrants"
        """
        args: registrant_searchRegistrants_args!
        """
        distinct select on columns
        """
        distinct_on: [registrant_Registrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_Registrant_order_by!]
        """
        filter the rows returned
        """
        where: registrant_Registrant_bool_exp
    ): registrant_Registrant_aggregate!
    """
    fetch data from the table: "room.Backend"
    """
    room_Backend(
        """
        distinct select on columns
        """
        distinct_on: [room_Backend_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_Backend_order_by!]
        """
        filter the rows returned
        """
        where: room_Backend_bool_exp
    ): [room_Backend!]!
    """
    fetch aggregated fields from the table: "room.Backend"
    """
    room_Backend_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_Backend_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_Backend_order_by!]
        """
        filter the rows returned
        """
        where: room_Backend_bool_exp
    ): room_Backend_aggregate!
    """
    fetch data from the table: "room.Backend" using primary key columns
    """
    room_Backend_by_pk(name: String!): room_Backend
    """
    fetch data from the table: "room.ChimeMeeting"
    """
    room_ChimeMeeting(
        """
        distinct select on columns
        """
        distinct_on: [room_ChimeMeeting_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_ChimeMeeting_order_by!]
        """
        filter the rows returned
        """
        where: room_ChimeMeeting_bool_exp
    ): [room_ChimeMeeting!]!
    """
    fetch aggregated fields from the table: "room.ChimeMeeting"
    """
    room_ChimeMeeting_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_ChimeMeeting_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_ChimeMeeting_order_by!]
        """
        filter the rows returned
        """
        where: room_ChimeMeeting_bool_exp
    ): room_ChimeMeeting_aggregate!
    """
    fetch data from the table: "room.ChimeMeeting" using primary key columns
    """
    room_ChimeMeeting_by_pk(id: uuid!): room_ChimeMeeting
    """
    fetch data from the table: "room.LivestreamDurations"
    """
    room_LivestreamDurations(
        """
        distinct select on columns
        """
        distinct_on: [room_LivestreamDurations_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_LivestreamDurations_order_by!]
        """
        filter the rows returned
        """
        where: room_LivestreamDurations_bool_exp
    ): [room_LivestreamDurations!]!
    """
    fetch aggregated fields from the table: "room.LivestreamDurations"
    """
    room_LivestreamDurations_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_LivestreamDurations_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_LivestreamDurations_order_by!]
        """
        filter the rows returned
        """
        where: room_LivestreamDurations_bool_exp
    ): room_LivestreamDurations_aggregate!
    """
    fetch data from the table: "room.ManagementMode"
    """
    room_ManagementMode(
        """
        distinct select on columns
        """
        distinct_on: [room_ManagementMode_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_ManagementMode_order_by!]
        """
        filter the rows returned
        """
        where: room_ManagementMode_bool_exp
    ): [room_ManagementMode!]!
    """
    fetch aggregated fields from the table: "room.ManagementMode"
    """
    room_ManagementMode_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_ManagementMode_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_ManagementMode_order_by!]
        """
        filter the rows returned
        """
        where: room_ManagementMode_bool_exp
    ): room_ManagementMode_aggregate!
    """
    fetch data from the table: "room.ManagementMode" using primary key columns
    """
    room_ManagementMode_by_pk(name: String!): room_ManagementMode
    """
    fetch data from the table: "room.Mode"
    """
    room_Mode(
        """
        distinct select on columns
        """
        distinct_on: [room_Mode_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_Mode_order_by!]
        """
        filter the rows returned
        """
        where: room_Mode_bool_exp
    ): [room_Mode!]!
    """
    fetch aggregated fields from the table: "room.Mode"
    """
    room_Mode_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_Mode_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_Mode_order_by!]
        """
        filter the rows returned
        """
        where: room_Mode_bool_exp
    ): room_Mode_aggregate!
    """
    fetch data from the table: "room.Mode" using primary key columns
    """
    room_Mode_by_pk(name: String!): room_Mode
    """
    fetch data from the table: "room.Participant"
    """
    room_Participant(
        """
        distinct select on columns
        """
        distinct_on: [room_Participant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_Participant_order_by!]
        """
        filter the rows returned
        """
        where: room_Participant_bool_exp
    ): [room_Participant!]!
    """
    fetch aggregated fields from the table: "room.Participant"
    """
    room_Participant_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_Participant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_Participant_order_by!]
        """
        filter the rows returned
        """
        where: room_Participant_bool_exp
    ): room_Participant_aggregate!
    """
    fetch data from the table: "room.Participant" using primary key columns
    """
    room_Participant_by_pk(id: uuid!): room_Participant
    """
    fetch data from the table: "room.PersonRole"
    """
    room_PersonRole(
        """
        distinct select on columns
        """
        distinct_on: [room_PersonRole_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_PersonRole_order_by!]
        """
        filter the rows returned
        """
        where: room_PersonRole_bool_exp
    ): [room_PersonRole!]!
    """
    fetch aggregated fields from the table: "room.PersonRole"
    """
    room_PersonRole_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_PersonRole_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_PersonRole_order_by!]
        """
        filter the rows returned
        """
        where: room_PersonRole_bool_exp
    ): room_PersonRole_aggregate!
    """
    fetch data from the table: "room.PersonRole" using primary key columns
    """
    room_PersonRole_by_pk(name: String!): room_PersonRole
    """
    fetch data from the table: "room.Room"
    """
    room_Room(
        """
        distinct select on columns
        """
        distinct_on: [room_Room_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_Room_order_by!]
        """
        filter the rows returned
        """
        where: room_Room_bool_exp
    ): [room_Room!]!
    """
    fetch data from the table: "room.RoomGroupMembership"
    """
    room_RoomGroupMembership(
        """
        distinct select on columns
        """
        distinct_on: [room_RoomGroupMembership_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_RoomGroupMembership_order_by!]
        """
        filter the rows returned
        """
        where: room_RoomGroupMembership_bool_exp
    ): [room_RoomGroupMembership!]!
    """
    fetch aggregated fields from the table: "room.RoomGroupMembership"
    """
    room_RoomGroupMembership_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_RoomGroupMembership_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_RoomGroupMembership_order_by!]
        """
        filter the rows returned
        """
        where: room_RoomGroupMembership_bool_exp
    ): room_RoomGroupMembership_aggregate!
    """
    fetch data from the table: "room.RoomGroupMembership" using primary key columns
    """
    room_RoomGroupMembership_by_pk(id: uuid!): room_RoomGroupMembership
    """
    fetch data from the table: "room.RoomMembership"
    """
    room_RoomMembership(
        """
        distinct select on columns
        """
        distinct_on: [room_RoomMembership_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_RoomMembership_order_by!]
        """
        filter the rows returned
        """
        where: room_RoomMembership_bool_exp
    ): [room_RoomMembership!]!
    """
    fetch aggregated fields from the table: "room.RoomMembership"
    """
    room_RoomMembership_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_RoomMembership_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_RoomMembership_order_by!]
        """
        filter the rows returned
        """
        where: room_RoomMembership_bool_exp
    ): room_RoomMembership_aggregate!
    """
    fetch data from the table: "room.RoomMembership" using primary key columns
    """
    room_RoomMembership_by_pk(id: uuid!): room_RoomMembership
    """
    fetch aggregated fields from the table: "room.Room"
    """
    room_Room_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_Room_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_Room_order_by!]
        """
        filter the rows returned
        """
        where: room_Room_bool_exp
    ): room_Room_aggregate!
    """
    fetch data from the table: "room.Room" using primary key columns
    """
    room_Room_by_pk(id: uuid!): room_Room
    """
    fetch data from the table: "room.ShuffleAlgorithm"
    """
    room_ShuffleAlgorithm(
        """
        distinct select on columns
        """
        distinct_on: [room_ShuffleAlgorithm_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_ShuffleAlgorithm_order_by!]
        """
        filter the rows returned
        """
        where: room_ShuffleAlgorithm_bool_exp
    ): [room_ShuffleAlgorithm!]!
    """
    fetch aggregated fields from the table: "room.ShuffleAlgorithm"
    """
    room_ShuffleAlgorithm_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_ShuffleAlgorithm_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_ShuffleAlgorithm_order_by!]
        """
        filter the rows returned
        """
        where: room_ShuffleAlgorithm_bool_exp
    ): room_ShuffleAlgorithm_aggregate!
    """
    fetch data from the table: "room.ShuffleAlgorithm" using primary key columns
    """
    room_ShuffleAlgorithm_by_pk(name: String!): room_ShuffleAlgorithm
    """
    fetch data from the table: "room.ShufflePeriod"
    """
    room_ShufflePeriod(
        """
        distinct select on columns
        """
        distinct_on: [room_ShufflePeriod_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_ShufflePeriod_order_by!]
        """
        filter the rows returned
        """
        where: room_ShufflePeriod_bool_exp
    ): [room_ShufflePeriod!]!
    """
    fetch aggregated fields from the table: "room.ShufflePeriod"
    """
    room_ShufflePeriod_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_ShufflePeriod_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_ShufflePeriod_order_by!]
        """
        filter the rows returned
        """
        where: room_ShufflePeriod_bool_exp
    ): room_ShufflePeriod_aggregate!
    """
    fetch data from the table: "room.ShufflePeriod" using primary key columns
    """
    room_ShufflePeriod_by_pk(id: uuid!): room_ShufflePeriod
    """
    fetch data from the table: "room.ShuffleQueueEntry"
    """
    room_ShuffleQueueEntry(
        """
        distinct select on columns
        """
        distinct_on: [room_ShuffleQueueEntry_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_ShuffleQueueEntry_order_by!]
        """
        filter the rows returned
        """
        where: room_ShuffleQueueEntry_bool_exp
    ): [room_ShuffleQueueEntry!]!
    """
    fetch aggregated fields from the table: "room.ShuffleQueueEntry"
    """
    room_ShuffleQueueEntry_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_ShuffleQueueEntry_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_ShuffleQueueEntry_order_by!]
        """
        filter the rows returned
        """
        where: room_ShuffleQueueEntry_bool_exp
    ): room_ShuffleQueueEntry_aggregate!
    """
    fetch data from the table: "room.ShuffleQueueEntry" using primary key columns
    """
    room_ShuffleQueueEntry_by_pk(id: bigint!): room_ShuffleQueueEntry
    """
    fetch data from the table: "room.ShuffleRoom"
    """
    room_ShuffleRoom(
        """
        distinct select on columns
        """
        distinct_on: [room_ShuffleRoom_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_ShuffleRoom_order_by!]
        """
        filter the rows returned
        """
        where: room_ShuffleRoom_bool_exp
    ): [room_ShuffleRoom!]!
    """
    fetch aggregated fields from the table: "room.ShuffleRoom"
    """
    room_ShuffleRoom_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_ShuffleRoom_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_ShuffleRoom_order_by!]
        """
        filter the rows returned
        """
        where: room_ShuffleRoom_bool_exp
    ): room_ShuffleRoom_aggregate!
    """
    fetch data from the table: "room.ShuffleRoom" using primary key columns
    """
    room_ShuffleRoom_by_pk(id: bigint!): room_ShuffleRoom
    """
    fetch data from the table: "schedule.Continuation"
    """
    schedule_Continuation(
        """
        distinct select on columns
        """
        distinct_on: [schedule_Continuation_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_Continuation_order_by!]
        """
        filter the rows returned
        """
        where: schedule_Continuation_bool_exp
    ): [schedule_Continuation!]!
    """
    fetch aggregated fields from the table: "schedule.Continuation"
    """
    schedule_Continuation_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [schedule_Continuation_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_Continuation_order_by!]
        """
        filter the rows returned
        """
        where: schedule_Continuation_bool_exp
    ): schedule_Continuation_aggregate!
    """
    fetch data from the table: "schedule.Continuation" using primary key columns
    """
    schedule_Continuation_by_pk(id: uuid!): schedule_Continuation
    """
    fetch data from the table: "schedule.CurrentEvents"
    """
    schedule_CurrentEvents(
        """
        distinct select on columns
        """
        distinct_on: [schedule_CurrentEvents_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_CurrentEvents_order_by!]
        """
        filter the rows returned
        """
        where: schedule_CurrentEvents_bool_exp
    ): [schedule_CurrentEvents!]!
    """
    fetch aggregated fields from the table: "schedule.CurrentEvents"
    """
    schedule_CurrentEvents_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [schedule_CurrentEvents_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_CurrentEvents_order_by!]
        """
        filter the rows returned
        """
        where: schedule_CurrentEvents_bool_exp
    ): schedule_CurrentEvents_aggregate!
    """
    fetch data from the table: "schedule.Event"
    """
    schedule_Event(
        """
        distinct select on columns
        """
        distinct_on: [schedule_Event_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_Event_order_by!]
        """
        filter the rows returned
        """
        where: schedule_Event_bool_exp
    ): [schedule_Event!]!
    """
    fetch data from the table: "schedule.EventProgramPerson"
    """
    schedule_EventProgramPerson(
        """
        distinct select on columns
        """
        distinct_on: [schedule_EventProgramPerson_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_EventProgramPerson_order_by!]
        """
        filter the rows returned
        """
        where: schedule_EventProgramPerson_bool_exp
    ): [schedule_EventProgramPerson!]!
    """
    fetch data from the table: "schedule.EventProgramPersonRole"
    """
    schedule_EventProgramPersonRole(
        """
        distinct select on columns
        """
        distinct_on: [schedule_EventProgramPersonRole_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_EventProgramPersonRole_order_by!]
        """
        filter the rows returned
        """
        where: schedule_EventProgramPersonRole_bool_exp
    ): [schedule_EventProgramPersonRole!]!
    """
    fetch aggregated fields from the table: "schedule.EventProgramPersonRole"
    """
    schedule_EventProgramPersonRole_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [schedule_EventProgramPersonRole_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_EventProgramPersonRole_order_by!]
        """
        filter the rows returned
        """
        where: schedule_EventProgramPersonRole_bool_exp
    ): schedule_EventProgramPersonRole_aggregate!
    """
    fetch data from the table: "schedule.EventProgramPersonRole" using primary key columns
    """
    schedule_EventProgramPersonRole_by_pk(name: String!): schedule_EventProgramPersonRole
    """
    fetch aggregated fields from the table: "schedule.EventProgramPerson"
    """
    schedule_EventProgramPerson_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [schedule_EventProgramPerson_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_EventProgramPerson_order_by!]
        """
        filter the rows returned
        """
        where: schedule_EventProgramPerson_bool_exp
    ): schedule_EventProgramPerson_aggregate!
    """
    fetch data from the table: "schedule.EventProgramPerson" using primary key columns
    """
    schedule_EventProgramPerson_by_pk(id: uuid!): schedule_EventProgramPerson
    """
    fetch aggregated fields from the table: "schedule.Event"
    """
    schedule_Event_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [schedule_Event_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_Event_order_by!]
        """
        filter the rows returned
        """
        where: schedule_Event_bool_exp
    ): schedule_Event_aggregate!
    """
    fetch data from the table: "schedule.Event" using primary key columns
    """
    schedule_Event_by_pk(id: uuid!): schedule_Event
    """
    fetch data from the table: "schedule.OverlappingEvents"
    """
    schedule_OverlappingEvents(
        """
        distinct select on columns
        """
        distinct_on: [schedule_OverlappingEvents_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_OverlappingEvents_order_by!]
        """
        filter the rows returned
        """
        where: schedule_OverlappingEvents_bool_exp
    ): [schedule_OverlappingEvents!]!
    """
    fetch aggregated fields from the table: "schedule.OverlappingEvents"
    """
    schedule_OverlappingEvents_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [schedule_OverlappingEvents_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_OverlappingEvents_order_by!]
        """
        filter the rows returned
        """
        where: schedule_OverlappingEvents_bool_exp
    ): schedule_OverlappingEvents_aggregate!
    """
    fetch data from the table: "schedule.StarredEvent"
    """
    schedule_StarredEvent(
        """
        distinct select on columns
        """
        distinct_on: [schedule_StarredEvent_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_StarredEvent_order_by!]
        """
        filter the rows returned
        """
        where: schedule_StarredEvent_bool_exp
    ): [schedule_StarredEvent!]!
    """
    fetch aggregated fields from the table: "schedule.StarredEvent"
    """
    schedule_StarredEvent_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [schedule_StarredEvent_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_StarredEvent_order_by!]
        """
        filter the rows returned
        """
        where: schedule_StarredEvent_bool_exp
    ): schedule_StarredEvent_aggregate!
    """
    fetch data from the table: "schedule.StarredEvent" using primary key columns
    """
    schedule_StarredEvent_by_pk(id: uuid!): schedule_StarredEvent
    """
    execute function "schedule.searchEvents" which returns "schedule.Event"
    """
    schedule_searchEvents(
        """
        input parameters for function "schedule.searchEvents"
        """
        args: schedule_searchEvents_args!
        """
        distinct select on columns
        """
        distinct_on: [schedule_Event_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_Event_order_by!]
        """
        filter the rows returned
        """
        where: schedule_Event_bool_exp
    ): [schedule_Event!]!
    """
    execute function "schedule.searchEvents" and query aggregates on result of table type "schedule.Event"
    """
    schedule_searchEvents_aggregate(
        """
        input parameters for function "schedule.searchEvents"
        """
        args: schedule_searchEvents_args!
        """
        distinct select on columns
        """
        distinct_on: [schedule_Event_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [schedule_Event_order_by!]
        """
        filter the rows returned
        """
        where: schedule_Event_bool_exp
    ): schedule_Event_aggregate!
    """
    fetch data from the table: "sponsor.Tier"
    """
    sponsor_Tier(
        """
        distinct select on columns
        """
        distinct_on: [sponsor_Tier_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [sponsor_Tier_order_by!]
        """
        filter the rows returned
        """
        where: sponsor_Tier_bool_exp
    ): [sponsor_Tier!]!
    """
    fetch data from the table: "sponsor.TierMember"
    """
    sponsor_TierMember(
        """
        distinct select on columns
        """
        distinct_on: [sponsor_TierMember_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [sponsor_TierMember_order_by!]
        """
        filter the rows returned
        """
        where: sponsor_TierMember_bool_exp
    ): [sponsor_TierMember!]!
    """
    fetch aggregated fields from the table: "sponsor.TierMember"
    """
    sponsor_TierMember_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [sponsor_TierMember_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [sponsor_TierMember_order_by!]
        """
        filter the rows returned
        """
        where: sponsor_TierMember_bool_exp
    ): sponsor_TierMember_aggregate!
    """
    fetch data from the table: "sponsor.TierMember" using primary key columns
    """
    sponsor_TierMember_by_pk(id: uuid!): sponsor_TierMember
    """
    fetch aggregated fields from the table: "sponsor.Tier"
    """
    sponsor_Tier_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [sponsor_Tier_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [sponsor_Tier_order_by!]
        """
        filter the rows returned
        """
        where: sponsor_Tier_bool_exp
    ): sponsor_Tier_aggregate!
    """
    fetch data from the table: "sponsor.Tier" using primary key columns
    """
    sponsor_Tier_by_pk(id: uuid!): sponsor_Tier
    """
    fetch data from the table: "system.Configuration"
    """
    system_Configuration(
        """
        distinct select on columns
        """
        distinct_on: [system_Configuration_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [system_Configuration_order_by!]
        """
        filter the rows returned
        """
        where: system_Configuration_bool_exp
    ): [system_Configuration!]!
    """
    fetch data from the table: "system.ConfigurationKey"
    """
    system_ConfigurationKey(
        """
        distinct select on columns
        """
        distinct_on: [system_ConfigurationKey_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [system_ConfigurationKey_order_by!]
        """
        filter the rows returned
        """
        where: system_ConfigurationKey_bool_exp
    ): [system_ConfigurationKey!]!
    """
    fetch aggregated fields from the table: "system.ConfigurationKey"
    """
    system_ConfigurationKey_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [system_ConfigurationKey_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [system_ConfigurationKey_order_by!]
        """
        filter the rows returned
        """
        where: system_ConfigurationKey_bool_exp
    ): system_ConfigurationKey_aggregate!
    """
    fetch data from the table: "system.ConfigurationKey" using primary key columns
    """
    system_ConfigurationKey_by_pk(name: String!): system_ConfigurationKey
    """
    fetch data from the table: "system.ConfigurationPermissionGrant"
    """
    system_ConfigurationPermissionGrant(
        """
        distinct select on columns
        """
        distinct_on: [system_ConfigurationPermissionGrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [system_ConfigurationPermissionGrant_order_by!]
        """
        filter the rows returned
        """
        where: system_ConfigurationPermissionGrant_bool_exp
    ): [system_ConfigurationPermissionGrant!]!
    """
    fetch aggregated fields from the table: "system.ConfigurationPermissionGrant"
    """
    system_ConfigurationPermissionGrant_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [system_ConfigurationPermissionGrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [system_ConfigurationPermissionGrant_order_by!]
        """
        filter the rows returned
        """
        where: system_ConfigurationPermissionGrant_bool_exp
    ): system_ConfigurationPermissionGrant_aggregate!
    """
    fetch data from the table: "system.ConfigurationPermissionGrant" using primary key columns
    """
    system_ConfigurationPermissionGrant_by_pk(id: uuid!): system_ConfigurationPermissionGrant
    """
    fetch aggregated fields from the table: "system.Configuration"
    """
    system_Configuration_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [system_Configuration_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [system_Configuration_order_by!]
        """
        filter the rows returned
        """
        where: system_Configuration_bool_exp
    ): system_Configuration_aggregate!
    """
    fetch data from the table: "system.Configuration" using primary key columns
    """
    system_Configuration_by_pk(key: system_ConfigurationKey_enum!): system_Configuration
    """
    fetch data from the table: "system.SuperUserPermission"
    """
    system_SuperUserPermission(
        """
        distinct select on columns
        """
        distinct_on: [system_SuperUserPermission_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [system_SuperUserPermission_order_by!]
        """
        filter the rows returned
        """
        where: system_SuperUserPermission_bool_exp
    ): [system_SuperUserPermission!]!
    """
    fetch data from the table: "system.SuperUserPermissionGrant"
    """
    system_SuperUserPermissionGrant(
        """
        distinct select on columns
        """
        distinct_on: [system_SuperUserPermissionGrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [system_SuperUserPermissionGrant_order_by!]
        """
        filter the rows returned
        """
        where: system_SuperUserPermissionGrant_bool_exp
    ): [system_SuperUserPermissionGrant!]!
    """
    fetch aggregated fields from the table: "system.SuperUserPermissionGrant"
    """
    system_SuperUserPermissionGrant_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [system_SuperUserPermissionGrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [system_SuperUserPermissionGrant_order_by!]
        """
        filter the rows returned
        """
        where: system_SuperUserPermissionGrant_bool_exp
    ): system_SuperUserPermissionGrant_aggregate!
    """
    fetch data from the table: "system.SuperUserPermissionGrant" using primary key columns
    """
    system_SuperUserPermissionGrant_by_pk(id: uuid!): system_SuperUserPermissionGrant
    """
    fetch aggregated fields from the table: "system.SuperUserPermission"
    """
    system_SuperUserPermission_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [system_SuperUserPermission_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [system_SuperUserPermission_order_by!]
        """
        filter the rows returned
        """
        where: system_SuperUserPermission_bool_exp
    ): system_SuperUserPermission_aggregate!
    """
    fetch data from the table: "system.SuperUserPermission" using primary key columns
    """
    system_SuperUserPermission_by_pk(name: String!): system_SuperUserPermission
    """
    fetch data from the table: "system.SuperUserState"
    """
    system_SuperUserState(
        """
        distinct select on columns
        """
        distinct_on: [system_SuperUserState_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [system_SuperUserState_order_by!]
        """
        filter the rows returned
        """
        where: system_SuperUserState_bool_exp
    ): [system_SuperUserState!]!
    """
    fetch aggregated fields from the table: "system.SuperUserState"
    """
    system_SuperUserState_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [system_SuperUserState_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [system_SuperUserState_order_by!]
        """
        filter the rows returned
        """
        where: system_SuperUserState_bool_exp
    ): system_SuperUserState_aggregate!
    """
    fetch data from the table: "video.ChannelStack"
    """
    video_ChannelStack(
        """
        distinct select on columns
        """
        distinct_on: [video_ChannelStack_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_ChannelStack_order_by!]
        """
        filter the rows returned
        """
        where: video_ChannelStack_bool_exp
    ): [video_ChannelStack!]!
    """
    fetch aggregated fields from the table: "video.ChannelStack"
    """
    video_ChannelStack_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_ChannelStack_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_ChannelStack_order_by!]
        """
        filter the rows returned
        """
        where: video_ChannelStack_bool_exp
    ): video_ChannelStack_aggregate!
    """
    fetch data from the table: "video.ChannelStack" using primary key columns
    """
    video_ChannelStack_by_pk(id: uuid!): video_ChannelStack
    """
    fetch data from the table: "video.EventVonageSession"
    """
    video_EventVonageSession(
        """
        distinct select on columns
        """
        distinct_on: [video_EventVonageSession_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_EventVonageSession_order_by!]
        """
        filter the rows returned
        """
        where: video_EventVonageSession_bool_exp
    ): [video_EventVonageSession!]!
    """
    fetch aggregated fields from the table: "video.EventVonageSession"
    """
    video_EventVonageSession_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_EventVonageSession_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_EventVonageSession_order_by!]
        """
        filter the rows returned
        """
        where: video_EventVonageSession_bool_exp
    ): video_EventVonageSession_aggregate!
    """
    fetch data from the table: "video.EventVonageSession" using primary key columns
    """
    video_EventVonageSession_by_pk(id: uuid!): video_EventVonageSession
    """
    fetch data from the table: "video.ImmediateSwitch"
    """
    video_ImmediateSwitch(
        """
        distinct select on columns
        """
        distinct_on: [video_ImmediateSwitch_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_ImmediateSwitch_order_by!]
        """
        filter the rows returned
        """
        where: video_ImmediateSwitch_bool_exp
    ): [video_ImmediateSwitch!]!
    """
    fetch aggregated fields from the table: "video.ImmediateSwitch"
    """
    video_ImmediateSwitch_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_ImmediateSwitch_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_ImmediateSwitch_order_by!]
        """
        filter the rows returned
        """
        where: video_ImmediateSwitch_bool_exp
    ): video_ImmediateSwitch_aggregate!
    """
    fetch data from the table: "video.ImmediateSwitch" using primary key columns
    """
    video_ImmediateSwitch_by_pk(id: uuid!): video_ImmediateSwitch
    """
    fetch data from the table: "video.InputType"
    """
    video_InputType(
        """
        distinct select on columns
        """
        distinct_on: [video_InputType_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_InputType_order_by!]
        """
        filter the rows returned
        """
        where: video_InputType_bool_exp
    ): [video_InputType!]!
    """
    fetch aggregated fields from the table: "video.InputType"
    """
    video_InputType_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_InputType_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_InputType_order_by!]
        """
        filter the rows returned
        """
        where: video_InputType_bool_exp
    ): video_InputType_aggregate!
    """
    fetch data from the table: "video.InputType" using primary key columns
    """
    video_InputType_by_pk(name: String!): video_InputType
    """
    fetch data from the table: "video.MediaLiveChannelStatus"
    """
    video_MediaLiveChannelStatus(
        """
        distinct select on columns
        """
        distinct_on: [video_MediaLiveChannelStatus_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_MediaLiveChannelStatus_order_by!]
        """
        filter the rows returned
        """
        where: video_MediaLiveChannelStatus_bool_exp
    ): [video_MediaLiveChannelStatus!]!
    """
    fetch aggregated fields from the table: "video.MediaLiveChannelStatus"
    """
    video_MediaLiveChannelStatus_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_MediaLiveChannelStatus_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_MediaLiveChannelStatus_order_by!]
        """
        filter the rows returned
        """
        where: video_MediaLiveChannelStatus_bool_exp
    ): video_MediaLiveChannelStatus_aggregate!
    """
    fetch data from the table: "video.MediaLiveChannelStatus" using primary key columns
    """
    video_MediaLiveChannelStatus_by_pk(id: uuid!): video_MediaLiveChannelStatus
    """
    fetch data from the table: "video.RoomRtmpInput"
    """
    video_RoomRtmpInput(
        """
        distinct select on columns
        """
        distinct_on: [video_RoomRtmpInput_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_RoomRtmpInput_order_by!]
        """
        filter the rows returned
        """
        where: video_RoomRtmpInput_bool_exp
    ): [video_RoomRtmpInput!]!
    """
    fetch aggregated fields from the table: "video.RoomRtmpInput"
    """
    video_RoomRtmpInput_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_RoomRtmpInput_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_RoomRtmpInput_order_by!]
        """
        filter the rows returned
        """
        where: video_RoomRtmpInput_bool_exp
    ): video_RoomRtmpInput_aggregate!
    """
    fetch data from the table: "video.RoomRtmpInput" using primary key columns
    """
    video_RoomRtmpInput_by_pk(id: uuid!): video_RoomRtmpInput
    """
    fetch data from the table: "video.RoomRtmpOutput"
    """
    video_RoomRtmpOutput(
        """
        distinct select on columns
        """
        distinct_on: [video_RoomRtmpOutput_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_RoomRtmpOutput_order_by!]
        """
        filter the rows returned
        """
        where: video_RoomRtmpOutput_bool_exp
    ): [video_RoomRtmpOutput!]!
    """
    fetch aggregated fields from the table: "video.RoomRtmpOutput"
    """
    video_RoomRtmpOutput_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_RoomRtmpOutput_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_RoomRtmpOutput_order_by!]
        """
        filter the rows returned
        """
        where: video_RoomRtmpOutput_bool_exp
    ): video_RoomRtmpOutput_aggregate!
    """
    fetch data from the table: "video.RoomRtmpOutput" using primary key columns
    """
    video_RoomRtmpOutput_by_pk(id: uuid!): video_RoomRtmpOutput
    """
    fetch data from the table: "video.RtmpInput"
    """
    video_RtmpInput(
        """
        distinct select on columns
        """
        distinct_on: [video_RtmpInput_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_RtmpInput_order_by!]
        """
        filter the rows returned
        """
        where: video_RtmpInput_bool_exp
    ): [video_RtmpInput!]!
    """
    fetch aggregated fields from the table: "video.RtmpInput"
    """
    video_RtmpInput_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_RtmpInput_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_RtmpInput_order_by!]
        """
        filter the rows returned
        """
        where: video_RtmpInput_bool_exp
    ): video_RtmpInput_aggregate!
    """
    fetch data from the table: "video.RtmpInput" using primary key columns
    """
    video_RtmpInput_by_pk(name: String!): video_RtmpInput
    """
    fetch data from the table: "video.TranscriptionJob"
    """
    video_TranscriptionJob(
        """
        distinct select on columns
        """
        distinct_on: [video_TranscriptionJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_TranscriptionJob_order_by!]
        """
        filter the rows returned
        """
        where: video_TranscriptionJob_bool_exp
    ): [video_TranscriptionJob!]!
    """
    fetch aggregated fields from the table: "video.TranscriptionJob"
    """
    video_TranscriptionJob_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_TranscriptionJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_TranscriptionJob_order_by!]
        """
        filter the rows returned
        """
        where: video_TranscriptionJob_bool_exp
    ): video_TranscriptionJob_aggregate!
    """
    fetch data from the table: "video.TranscriptionJob" using primary key columns
    """
    video_TranscriptionJob_by_pk(id: uuid!): video_TranscriptionJob
    """
    fetch data from the table: "video.VideoRenderJob"
    """
    video_VideoRenderJob(
        """
        distinct select on columns
        """
        distinct_on: [video_VideoRenderJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_VideoRenderJob_order_by!]
        """
        filter the rows returned
        """
        where: video_VideoRenderJob_bool_exp
    ): [video_VideoRenderJob!]!
    """
    fetch aggregated fields from the table: "video.VideoRenderJob"
    """
    video_VideoRenderJob_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_VideoRenderJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_VideoRenderJob_order_by!]
        """
        filter the rows returned
        """
        where: video_VideoRenderJob_bool_exp
    ): video_VideoRenderJob_aggregate!
    """
    fetch data from the table: "video.VideoRenderJob" using primary key columns
    """
    video_VideoRenderJob_by_pk(id: uuid!): video_VideoRenderJob
    """
    fetch data from the table: "video.VonageParticipantStream"
    """
    video_VonageParticipantStream(
        """
        distinct select on columns
        """
        distinct_on: [video_VonageParticipantStream_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_VonageParticipantStream_order_by!]
        """
        filter the rows returned
        """
        where: video_VonageParticipantStream_bool_exp
    ): [video_VonageParticipantStream!]!
    """
    fetch aggregated fields from the table: "video.VonageParticipantStream"
    """
    video_VonageParticipantStream_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_VonageParticipantStream_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_VonageParticipantStream_order_by!]
        """
        filter the rows returned
        """
        where: video_VonageParticipantStream_bool_exp
    ): video_VonageParticipantStream_aggregate!
    """
    fetch data from the table: "video.VonageParticipantStream" using primary key columns
    """
    video_VonageParticipantStream_by_pk(id: uuid!): video_VonageParticipantStream
    """
    fetch data from the table: "video.VonageRoomRecording"
    """
    video_VonageRoomRecording(
        """
        distinct select on columns
        """
        distinct_on: [video_VonageRoomRecording_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_VonageRoomRecording_order_by!]
        """
        filter the rows returned
        """
        where: video_VonageRoomRecording_bool_exp
    ): [video_VonageRoomRecording!]!
    """
    fetch aggregated fields from the table: "video.VonageRoomRecording"
    """
    video_VonageRoomRecording_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_VonageRoomRecording_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_VonageRoomRecording_order_by!]
        """
        filter the rows returned
        """
        where: video_VonageRoomRecording_bool_exp
    ): video_VonageRoomRecording_aggregate!
    """
    fetch data from the table: "video.VonageRoomRecording" using primary key columns
    """
    video_VonageRoomRecording_by_pk(id: uuid!): video_VonageRoomRecording
    """
    fetch data from the table: "video.VonageSessionLayout"
    """
    video_VonageSessionLayout(
        """
        distinct select on columns
        """
        distinct_on: [video_VonageSessionLayout_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_VonageSessionLayout_order_by!]
        """
        filter the rows returned
        """
        where: video_VonageSessionLayout_bool_exp
    ): [video_VonageSessionLayout!]!
    """
    fetch aggregated fields from the table: "video.VonageSessionLayout"
    """
    video_VonageSessionLayout_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_VonageSessionLayout_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_VonageSessionLayout_order_by!]
        """
        filter the rows returned
        """
        where: video_VonageSessionLayout_bool_exp
    ): video_VonageSessionLayout_aggregate!
    """
    fetch data from the table: "video.VonageSessionLayout" using primary key columns
    """
    video_VonageSessionLayout_by_pk(id: uuid!): video_VonageSessionLayout
    """
    fetch data from the table: "video.VonageVideoPlaybackCommand"
    """
    video_VonageVideoPlaybackCommand(
        """
        distinct select on columns
        """
        distinct_on: [video_VonageVideoPlaybackCommand_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_VonageVideoPlaybackCommand_order_by!]
        """
        filter the rows returned
        """
        where: video_VonageVideoPlaybackCommand_bool_exp
    ): [video_VonageVideoPlaybackCommand!]!
    """
    fetch aggregated fields from the table: "video.VonageVideoPlaybackCommand"
    """
    video_VonageVideoPlaybackCommand_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_VonageVideoPlaybackCommand_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_VonageVideoPlaybackCommand_order_by!]
        """
        filter the rows returned
        """
        where: video_VonageVideoPlaybackCommand_bool_exp
    ): video_VonageVideoPlaybackCommand_aggregate!
    """
    fetch data from the table: "video.VonageVideoPlaybackCommand" using primary key columns
    """
    video_VonageVideoPlaybackCommand_by_pk(id: uuid!): video_VonageVideoPlaybackCommand
    """
    fetch data from the table: "video.YouTubeUpload"
    """
    video_YouTubeUpload(
        """
        distinct select on columns
        """
        distinct_on: [video_YouTubeUpload_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_YouTubeUpload_order_by!]
        """
        filter the rows returned
        """
        where: video_YouTubeUpload_bool_exp
    ): [video_YouTubeUpload!]!
    """
    fetch aggregated fields from the table: "video.YouTubeUpload"
    """
    video_YouTubeUpload_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_YouTubeUpload_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_YouTubeUpload_order_by!]
        """
        filter the rows returned
        """
        where: video_YouTubeUpload_bool_exp
    ): video_YouTubeUpload_aggregate!
    """
    fetch data from the table: "video.YouTubeUpload" using primary key columns
    """
    video_YouTubeUpload_by_pk(id: uuid!): video_YouTubeUpload
}

"""
columns and relationships of "system.Configuration"
"""
type system_Configuration {
    """
    An object relationship
    """
    configurationKey: system_ConfigurationKey!
    created_at: timestamptz!
    key: system_ConfigurationKey_enum!
    updated_at: timestamptz!
    value(
        """
        JSON select path
        """
        path: String
    ): jsonb!
}

"""
columns and relationships of "system.ConfigurationKey"
"""
type system_ConfigurationKey {
    description: String
    """
    An array relationship
    """
    grantedPermissions(
        """
        distinct select on columns
        """
        distinct_on: [system_ConfigurationPermissionGrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [system_ConfigurationPermissionGrant_order_by!]
        """
        filter the rows returned
        """
        where: system_ConfigurationPermissionGrant_bool_exp
    ): [system_ConfigurationPermissionGrant!]!
    """
    An aggregate relationship
    """
    grantedPermissions_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [system_ConfigurationPermissionGrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [system_ConfigurationPermissionGrant_order_by!]
        """
        filter the rows returned
        """
        where: system_ConfigurationPermissionGrant_bool_exp
    ): system_ConfigurationPermissionGrant_aggregate!
    name: String!
}

"""
aggregated selection of "system.ConfigurationKey"
"""
type system_ConfigurationKey_aggregate {
    aggregate: system_ConfigurationKey_aggregate_fields
    nodes: [system_ConfigurationKey!]!
}

"""
aggregate fields of "system.ConfigurationKey"
"""
type system_ConfigurationKey_aggregate_fields {
    count(columns: [system_ConfigurationKey_select_column!], distinct: Boolean): Int!
    max: system_ConfigurationKey_max_fields
    min: system_ConfigurationKey_min_fields
}

"""
Boolean expression to filter rows from the table "system.ConfigurationKey". All fields are combined with a logical 'AND'.
"""
input system_ConfigurationKey_bool_exp {
    _and: [system_ConfigurationKey_bool_exp!]
    _not: system_ConfigurationKey_bool_exp
    _or: [system_ConfigurationKey_bool_exp!]
    description: String_comparison_exp
    grantedPermissions: system_ConfigurationPermissionGrant_bool_exp
    name: String_comparison_exp
}

"""
unique or primary key constraints on table "system.ConfigurationKey"
"""
enum system_ConfigurationKey_constraint {
    """
    unique or primary key constraint
    """
    ConfigurationKey_pkey
}

enum system_ConfigurationKey_enum {
    """
    Allow-list (JSON array) of wildcard-match domains that the system should allow email to be sent to. See also NPM wildcard-match package.
    """
    ALLOW_EMAILS_TO_DOMAINS
    """
    The time of the latest revision of the host cookie policy. The value should be a Number representing the milliseconds elapsed since the UNIX epoch.
    """
    COOKIE_POLICY_LATEST_REVISION_TIMESTAMP
    """
    The URL to the host cookie policy. Note: If self hosting Clowdr, this must be your organisation's cookie policy - you cannot legally reuse, rely on or copy Clowdr's cookie policy.
    """
    COOKIE_POLICY_URL
    """
    A string representing the full frontend host URL for the app.
    """
    DEFAULT_FRONTEND_HOST
    """
    Default backend platform for video rooms
    """
    DEFAULT_VIDEO_ROOM_BACKEND
    """
    Templates for emails sent by the application.
    """
    EMAIL_TEMPLATES
    """
    The name of the organisation legally responsible for hosting this instance of the Clowdr software.
    """
    HOST_ORGANISATION_NAME
    """
    The time of the latest revision of the host Privacy Policy. The value should be a Number representing the milliseconds elapsed since the UNIX epoch.
    """
    PRIVACY_POLICY_LATEST_REVISION_TIMESTAMP
    """
    URL to the host Privacy Policy. Note: If self hosting Clowdr, this must be your organisation's privacy policy - you cannot legally reuse, rely on or copy Clowdr's privacy policy.
    """
    PRIVACY_POLICY_URL
    """
    SendGrid API Key required for sending emails such as invites and submission requests
    """
    SENDGRID_API_KEY
    """
    Default SendGrid Reply-To email address.
    """
    SENDGRID_REPLYTO
    """
    Default SendGrid Sender email address.
    """
    SENDGRID_SENDER
    """
    The name emails are from when sent via SendGrid.
    """
    SENDGRID_SENDER_NAME
    SENDGRID_WEBHOOK_PUBLIC_KEY
    """
    Contact address for people to request emails never be sent to them again.
    """
    STOP_EMAILS_CONTACT_EMAIL_ADDRESS
    """
    The time of the latest revision of the host T&Cs. The value should be a Number representing the milliseconds elapsed since the UNIX epoch.
    """
    TERMS_LATEST_REVISION_TIMESTAMP
    """
    URL to the host T&Cs. Note: If self hosting Clowdr, this must be your organisation's terms - you cannot legally reuse, rely on or copy Clowdr's terms.
    """
    TERMS_URL
    """
    VAPID keys are used for push notifications and are generated automatically by the realtime service on first use.
    """
    VAPID_PRIVATE_KEY
    """
    VAPID keys are used for push notifications and are generated automatically by the realtime service on first use.
    """
    VAPID_PUBLIC_KEY
}

"""
Boolean expression to compare columns of type "system_ConfigurationKey_enum". All fields are combined with logical 'AND'.
"""
input system_ConfigurationKey_enum_comparison_exp {
    _eq: system_ConfigurationKey_enum
    _in: [system_ConfigurationKey_enum!]
    _is_null: Boolean
    _neq: system_ConfigurationKey_enum
    _nin: [system_ConfigurationKey_enum!]
}

"""
input type for inserting data into table "system.ConfigurationKey"
"""
input system_ConfigurationKey_insert_input {
    description: String
    grantedPermissions: system_ConfigurationPermissionGrant_arr_rel_insert_input
    name: String
}

"""
aggregate max on columns
"""
type system_ConfigurationKey_max_fields {
    description: String
    name: String
}

"""
aggregate min on columns
"""
type system_ConfigurationKey_min_fields {
    description: String
    name: String
}

"""
response of any mutation on the table "system.ConfigurationKey"
"""
type system_ConfigurationKey_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [system_ConfigurationKey!]!
}

"""
input type for inserting object relation for remote table "system.ConfigurationKey"
"""
input system_ConfigurationKey_obj_rel_insert_input {
    data: system_ConfigurationKey_insert_input!
    """
    on conflict condition
    """
    on_conflict: system_ConfigurationKey_on_conflict
}

"""
on conflict condition type for table "system.ConfigurationKey"
"""
input system_ConfigurationKey_on_conflict {
    constraint: system_ConfigurationKey_constraint!
    update_columns: [system_ConfigurationKey_update_column!]! = []
    where: system_ConfigurationKey_bool_exp
}

"""
Ordering options when selecting data from "system.ConfigurationKey".
"""
input system_ConfigurationKey_order_by {
    description: order_by
    grantedPermissions_aggregate: system_ConfigurationPermissionGrant_aggregate_order_by
    name: order_by
}

"""
primary key columns input for table: system_ConfigurationKey
"""
input system_ConfigurationKey_pk_columns_input {
    name: String!
}

"""
select columns of table "system.ConfigurationKey"
"""
enum system_ConfigurationKey_select_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
input type for updating data in table "system.ConfigurationKey"
"""
input system_ConfigurationKey_set_input {
    description: String
    name: String
}

"""
update columns of table "system.ConfigurationKey"
"""
enum system_ConfigurationKey_update_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
columns and relationships of "system.ConfigurationPermissionGrant"
"""
type system_ConfigurationPermissionGrant {
    configurationKey: system_ConfigurationKey_enum!
    created_at: timestamptz!
    """
    An object relationship
    """
    grantedPermission: system_SuperUserPermission!
    id: uuid!
    permissionName: system_SuperUserPermission_enum!
    """
    An object relationship
    """
    targetConfigurationKey: system_ConfigurationKey!
    updated_at: timestamptz!
    """
    An object relationship
    """
    user: User!
    userId: String!
}

"""
aggregated selection of "system.ConfigurationPermissionGrant"
"""
type system_ConfigurationPermissionGrant_aggregate {
    aggregate: system_ConfigurationPermissionGrant_aggregate_fields
    nodes: [system_ConfigurationPermissionGrant!]!
}

"""
aggregate fields of "system.ConfigurationPermissionGrant"
"""
type system_ConfigurationPermissionGrant_aggregate_fields {
    count(columns: [system_ConfigurationPermissionGrant_select_column!], distinct: Boolean): Int!
    max: system_ConfigurationPermissionGrant_max_fields
    min: system_ConfigurationPermissionGrant_min_fields
}

"""
order by aggregate values of table "system.ConfigurationPermissionGrant"
"""
input system_ConfigurationPermissionGrant_aggregate_order_by {
    count: order_by
    max: system_ConfigurationPermissionGrant_max_order_by
    min: system_ConfigurationPermissionGrant_min_order_by
}

"""
input type for inserting array relation for remote table "system.ConfigurationPermissionGrant"
"""
input system_ConfigurationPermissionGrant_arr_rel_insert_input {
    data: [system_ConfigurationPermissionGrant_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: system_ConfigurationPermissionGrant_on_conflict
}

"""
Boolean expression to filter rows from the table "system.ConfigurationPermissionGrant". All fields are combined with a logical 'AND'.
"""
input system_ConfigurationPermissionGrant_bool_exp {
    _and: [system_ConfigurationPermissionGrant_bool_exp!]
    _not: system_ConfigurationPermissionGrant_bool_exp
    _or: [system_ConfigurationPermissionGrant_bool_exp!]
    configurationKey: system_ConfigurationKey_enum_comparison_exp
    created_at: timestamptz_comparison_exp
    grantedPermission: system_SuperUserPermission_bool_exp
    id: uuid_comparison_exp
    permissionName: system_SuperUserPermission_enum_comparison_exp
    targetConfigurationKey: system_ConfigurationKey_bool_exp
    updated_at: timestamptz_comparison_exp
    user: User_bool_exp
    userId: String_comparison_exp
}

"""
unique or primary key constraints on table "system.ConfigurationPermissionGrant"
"""
enum system_ConfigurationPermissionGrant_constraint {
    """
    unique or primary key constraint
    """
    ConfigurationPermissionGrant_permissionName_configurationKey_us
    """
    unique or primary key constraint
    """
    ConfigurationPermissionGrant_pkey
}

"""
input type for inserting data into table "system.ConfigurationPermissionGrant"
"""
input system_ConfigurationPermissionGrant_insert_input {
    configurationKey: system_ConfigurationKey_enum
    created_at: timestamptz
    grantedPermission: system_SuperUserPermission_obj_rel_insert_input
    id: uuid
    permissionName: system_SuperUserPermission_enum
    targetConfigurationKey: system_ConfigurationKey_obj_rel_insert_input
    updated_at: timestamptz
    user: User_obj_rel_insert_input
    userId: String
}

"""
aggregate max on columns
"""
type system_ConfigurationPermissionGrant_max_fields {
    created_at: timestamptz
    id: uuid
    updated_at: timestamptz
    userId: String
}

"""
order by max() on columns of table "system.ConfigurationPermissionGrant"
"""
input system_ConfigurationPermissionGrant_max_order_by {
    created_at: order_by
    id: order_by
    updated_at: order_by
    userId: order_by
}

"""
aggregate min on columns
"""
type system_ConfigurationPermissionGrant_min_fields {
    created_at: timestamptz
    id: uuid
    updated_at: timestamptz
    userId: String
}

"""
order by min() on columns of table "system.ConfigurationPermissionGrant"
"""
input system_ConfigurationPermissionGrant_min_order_by {
    created_at: order_by
    id: order_by
    updated_at: order_by
    userId: order_by
}

"""
response of any mutation on the table "system.ConfigurationPermissionGrant"
"""
type system_ConfigurationPermissionGrant_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [system_ConfigurationPermissionGrant!]!
}

"""
on conflict condition type for table "system.ConfigurationPermissionGrant"
"""
input system_ConfigurationPermissionGrant_on_conflict {
    constraint: system_ConfigurationPermissionGrant_constraint!
    update_columns: [system_ConfigurationPermissionGrant_update_column!]! = []
    where: system_ConfigurationPermissionGrant_bool_exp
}

"""
Ordering options when selecting data from "system.ConfigurationPermissionGrant".
"""
input system_ConfigurationPermissionGrant_order_by {
    configurationKey: order_by
    created_at: order_by
    grantedPermission: system_SuperUserPermission_order_by
    id: order_by
    permissionName: order_by
    targetConfigurationKey: system_ConfigurationKey_order_by
    updated_at: order_by
    user: User_order_by
    userId: order_by
}

"""
primary key columns input for table: system_ConfigurationPermissionGrant
"""
input system_ConfigurationPermissionGrant_pk_columns_input {
    id: uuid!
}

"""
select columns of table "system.ConfigurationPermissionGrant"
"""
enum system_ConfigurationPermissionGrant_select_column {
    """
    column name
    """
    configurationKey
    """
    column name
    """
    created_at
    """
    column name
    """
    id
    """
    column name
    """
    permissionName
    """
    column name
    """
    updated_at
    """
    column name
    """
    userId
}

"""
input type for updating data in table "system.ConfigurationPermissionGrant"
"""
input system_ConfigurationPermissionGrant_set_input {
    configurationKey: system_ConfigurationKey_enum
    created_at: timestamptz
    id: uuid
    permissionName: system_SuperUserPermission_enum
    updated_at: timestamptz
    userId: String
}

"""
update columns of table "system.ConfigurationPermissionGrant"
"""
enum system_ConfigurationPermissionGrant_update_column {
    """
    column name
    """
    configurationKey
    """
    column name
    """
    created_at
    """
    column name
    """
    id
    """
    column name
    """
    permissionName
    """
    column name
    """
    updated_at
    """
    column name
    """
    userId
}

"""
aggregated selection of "system.Configuration"
"""
type system_Configuration_aggregate {
    aggregate: system_Configuration_aggregate_fields
    nodes: [system_Configuration!]!
}

"""
aggregate fields of "system.Configuration"
"""
type system_Configuration_aggregate_fields {
    count(columns: [system_Configuration_select_column!], distinct: Boolean): Int!
    max: system_Configuration_max_fields
    min: system_Configuration_min_fields
}

"""
append existing jsonb value of filtered columns with new jsonb value
"""
input system_Configuration_append_input {
    value: jsonb
}

"""
Boolean expression to filter rows from the table "system.Configuration". All fields are combined with a logical 'AND'.
"""
input system_Configuration_bool_exp {
    _and: [system_Configuration_bool_exp!]
    _not: system_Configuration_bool_exp
    _or: [system_Configuration_bool_exp!]
    configurationKey: system_ConfigurationKey_bool_exp
    created_at: timestamptz_comparison_exp
    key: system_ConfigurationKey_enum_comparison_exp
    updated_at: timestamptz_comparison_exp
    value: jsonb_comparison_exp
}

"""
unique or primary key constraints on table "system.Configuration"
"""
enum system_Configuration_constraint {
    """
    unique or primary key constraint
    """
    Configuration_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input system_Configuration_delete_at_path_input {
    value: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input system_Configuration_delete_elem_input {
    value: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input system_Configuration_delete_key_input {
    value: String
}

"""
input type for inserting data into table "system.Configuration"
"""
input system_Configuration_insert_input {
    configurationKey: system_ConfigurationKey_obj_rel_insert_input
    created_at: timestamptz
    key: system_ConfigurationKey_enum
    updated_at: timestamptz
    value: jsonb
}

"""
aggregate max on columns
"""
type system_Configuration_max_fields {
    created_at: timestamptz
    updated_at: timestamptz
}

"""
aggregate min on columns
"""
type system_Configuration_min_fields {
    created_at: timestamptz
    updated_at: timestamptz
}

"""
response of any mutation on the table "system.Configuration"
"""
type system_Configuration_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [system_Configuration!]!
}

"""
on conflict condition type for table "system.Configuration"
"""
input system_Configuration_on_conflict {
    constraint: system_Configuration_constraint!
    update_columns: [system_Configuration_update_column!]! = []
    where: system_Configuration_bool_exp
}

"""
Ordering options when selecting data from "system.Configuration".
"""
input system_Configuration_order_by {
    configurationKey: system_ConfigurationKey_order_by
    created_at: order_by
    key: order_by
    updated_at: order_by
    value: order_by
}

"""
primary key columns input for table: system_Configuration
"""
input system_Configuration_pk_columns_input {
    key: system_ConfigurationKey_enum!
}

"""
prepend existing jsonb value of filtered columns with new jsonb value
"""
input system_Configuration_prepend_input {
    value: jsonb
}

"""
select columns of table "system.Configuration"
"""
enum system_Configuration_select_column {
    """
    column name
    """
    created_at
    """
    column name
    """
    key
    """
    column name
    """
    updated_at
    """
    column name
    """
    value
}

"""
input type for updating data in table "system.Configuration"
"""
input system_Configuration_set_input {
    created_at: timestamptz
    key: system_ConfigurationKey_enum
    updated_at: timestamptz
    value: jsonb
}

"""
update columns of table "system.Configuration"
"""
enum system_Configuration_update_column {
    """
    column name
    """
    created_at
    """
    column name
    """
    key
    """
    column name
    """
    updated_at
    """
    column name
    """
    value
}

"""
columns and relationships of "system.SuperUserPermission"
"""
type system_SuperUserPermission {
    description: String!
    name: String!
    """
    An array relationship
    """
    superUserGrantTargets(
        """
        distinct select on columns
        """
        distinct_on: [system_SuperUserPermissionGrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [system_SuperUserPermissionGrant_order_by!]
        """
        filter the rows returned
        """
        where: system_SuperUserPermissionGrant_bool_exp
    ): [system_SuperUserPermissionGrant!]!
    """
    An aggregate relationship
    """
    superUserGrantTargets_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [system_SuperUserPermissionGrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [system_SuperUserPermissionGrant_order_by!]
        """
        filter the rows returned
        """
        where: system_SuperUserPermissionGrant_bool_exp
    ): system_SuperUserPermissionGrant_aggregate!
    """
    An array relationship
    """
    superUserGrants(
        """
        distinct select on columns
        """
        distinct_on: [system_SuperUserPermissionGrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [system_SuperUserPermissionGrant_order_by!]
        """
        filter the rows returned
        """
        where: system_SuperUserPermissionGrant_bool_exp
    ): [system_SuperUserPermissionGrant!]!
    """
    An aggregate relationship
    """
    superUserGrants_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [system_SuperUserPermissionGrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [system_SuperUserPermissionGrant_order_by!]
        """
        filter the rows returned
        """
        where: system_SuperUserPermissionGrant_bool_exp
    ): system_SuperUserPermissionGrant_aggregate!
    """
    An array relationship
    """
    systemConfigurationGrants(
        """
        distinct select on columns
        """
        distinct_on: [system_ConfigurationPermissionGrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [system_ConfigurationPermissionGrant_order_by!]
        """
        filter the rows returned
        """
        where: system_ConfigurationPermissionGrant_bool_exp
    ): [system_ConfigurationPermissionGrant!]!
    """
    An aggregate relationship
    """
    systemConfigurationGrants_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [system_ConfigurationPermissionGrant_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [system_ConfigurationPermissionGrant_order_by!]
        """
        filter the rows returned
        """
        where: system_ConfigurationPermissionGrant_bool_exp
    ): system_ConfigurationPermissionGrant_aggregate!
}

"""
columns and relationships of "system.SuperUserPermissionGrant"
"""
type system_SuperUserPermissionGrant {
    created_at: timestamptz!
    """
    An object relationship
    """
    grantedPermission: system_SuperUserPermission!
    grantedPermissionName: system_SuperUserPermission_enum!
    id: uuid!
    """
    An object relationship
    """
    targetPermission: system_SuperUserPermission
    targetPermissionName: system_SuperUserPermission_enum
    updated_at: timestamptz!
    """
    An object relationship
    """
    user: User!
    userId: String!
}

"""
aggregated selection of "system.SuperUserPermissionGrant"
"""
type system_SuperUserPermissionGrant_aggregate {
    aggregate: system_SuperUserPermissionGrant_aggregate_fields
    nodes: [system_SuperUserPermissionGrant!]!
}

"""
aggregate fields of "system.SuperUserPermissionGrant"
"""
type system_SuperUserPermissionGrant_aggregate_fields {
    count(columns: [system_SuperUserPermissionGrant_select_column!], distinct: Boolean): Int!
    max: system_SuperUserPermissionGrant_max_fields
    min: system_SuperUserPermissionGrant_min_fields
}

"""
order by aggregate values of table "system.SuperUserPermissionGrant"
"""
input system_SuperUserPermissionGrant_aggregate_order_by {
    count: order_by
    max: system_SuperUserPermissionGrant_max_order_by
    min: system_SuperUserPermissionGrant_min_order_by
}

"""
input type for inserting array relation for remote table "system.SuperUserPermissionGrant"
"""
input system_SuperUserPermissionGrant_arr_rel_insert_input {
    data: [system_SuperUserPermissionGrant_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: system_SuperUserPermissionGrant_on_conflict
}

"""
Boolean expression to filter rows from the table "system.SuperUserPermissionGrant". All fields are combined with a logical 'AND'.
"""
input system_SuperUserPermissionGrant_bool_exp {
    _and: [system_SuperUserPermissionGrant_bool_exp!]
    _not: system_SuperUserPermissionGrant_bool_exp
    _or: [system_SuperUserPermissionGrant_bool_exp!]
    created_at: timestamptz_comparison_exp
    grantedPermission: system_SuperUserPermission_bool_exp
    grantedPermissionName: system_SuperUserPermission_enum_comparison_exp
    id: uuid_comparison_exp
    targetPermission: system_SuperUserPermission_bool_exp
    targetPermissionName: system_SuperUserPermission_enum_comparison_exp
    updated_at: timestamptz_comparison_exp
    user: User_bool_exp
    userId: String_comparison_exp
}

"""
unique or primary key constraints on table "system.SuperUserPermissionGrant"
"""
enum system_SuperUserPermissionGrant_constraint {
    """
    unique or primary key constraint
    """
    SuperUserPermissionGrant_grantedPermissionName_userId_targe_key
    """
    unique or primary key constraint
    """
    SuperUserPermissionGrant_pkey
}

"""
input type for inserting data into table "system.SuperUserPermissionGrant"
"""
input system_SuperUserPermissionGrant_insert_input {
    created_at: timestamptz
    grantedPermission: system_SuperUserPermission_obj_rel_insert_input
    grantedPermissionName: system_SuperUserPermission_enum
    id: uuid
    targetPermission: system_SuperUserPermission_obj_rel_insert_input
    targetPermissionName: system_SuperUserPermission_enum
    updated_at: timestamptz
    user: User_obj_rel_insert_input
    userId: String
}

"""
aggregate max on columns
"""
type system_SuperUserPermissionGrant_max_fields {
    created_at: timestamptz
    id: uuid
    updated_at: timestamptz
    userId: String
}

"""
order by max() on columns of table "system.SuperUserPermissionGrant"
"""
input system_SuperUserPermissionGrant_max_order_by {
    created_at: order_by
    id: order_by
    updated_at: order_by
    userId: order_by
}

"""
aggregate min on columns
"""
type system_SuperUserPermissionGrant_min_fields {
    created_at: timestamptz
    id: uuid
    updated_at: timestamptz
    userId: String
}

"""
order by min() on columns of table "system.SuperUserPermissionGrant"
"""
input system_SuperUserPermissionGrant_min_order_by {
    created_at: order_by
    id: order_by
    updated_at: order_by
    userId: order_by
}

"""
response of any mutation on the table "system.SuperUserPermissionGrant"
"""
type system_SuperUserPermissionGrant_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [system_SuperUserPermissionGrant!]!
}

"""
on conflict condition type for table "system.SuperUserPermissionGrant"
"""
input system_SuperUserPermissionGrant_on_conflict {
    constraint: system_SuperUserPermissionGrant_constraint!
    update_columns: [system_SuperUserPermissionGrant_update_column!]! = []
    where: system_SuperUserPermissionGrant_bool_exp
}

"""
Ordering options when selecting data from "system.SuperUserPermissionGrant".
"""
input system_SuperUserPermissionGrant_order_by {
    created_at: order_by
    grantedPermission: system_SuperUserPermission_order_by
    grantedPermissionName: order_by
    id: order_by
    targetPermission: system_SuperUserPermission_order_by
    targetPermissionName: order_by
    updated_at: order_by
    user: User_order_by
    userId: order_by
}

"""
primary key columns input for table: system_SuperUserPermissionGrant
"""
input system_SuperUserPermissionGrant_pk_columns_input {
    id: uuid!
}

"""
select columns of table "system.SuperUserPermissionGrant"
"""
enum system_SuperUserPermissionGrant_select_column {
    """
    column name
    """
    created_at
    """
    column name
    """
    grantedPermissionName
    """
    column name
    """
    id
    """
    column name
    """
    targetPermissionName
    """
    column name
    """
    updated_at
    """
    column name
    """
    userId
}

"""
input type for updating data in table "system.SuperUserPermissionGrant"
"""
input system_SuperUserPermissionGrant_set_input {
    created_at: timestamptz
    grantedPermissionName: system_SuperUserPermission_enum
    id: uuid
    targetPermissionName: system_SuperUserPermission_enum
    updated_at: timestamptz
    userId: String
}

"""
update columns of table "system.SuperUserPermissionGrant"
"""
enum system_SuperUserPermissionGrant_update_column {
    """
    column name
    """
    created_at
    """
    column name
    """
    grantedPermissionName
    """
    column name
    """
    id
    """
    column name
    """
    targetPermissionName
    """
    column name
    """
    updated_at
    """
    column name
    """
    userId
}

"""
aggregated selection of "system.SuperUserPermission"
"""
type system_SuperUserPermission_aggregate {
    aggregate: system_SuperUserPermission_aggregate_fields
    nodes: [system_SuperUserPermission!]!
}

"""
aggregate fields of "system.SuperUserPermission"
"""
type system_SuperUserPermission_aggregate_fields {
    count(columns: [system_SuperUserPermission_select_column!], distinct: Boolean): Int!
    max: system_SuperUserPermission_max_fields
    min: system_SuperUserPermission_min_fields
}

"""
Boolean expression to filter rows from the table "system.SuperUserPermission". All fields are combined with a logical 'AND'.
"""
input system_SuperUserPermission_bool_exp {
    _and: [system_SuperUserPermission_bool_exp!]
    _not: system_SuperUserPermission_bool_exp
    _or: [system_SuperUserPermission_bool_exp!]
    description: String_comparison_exp
    name: String_comparison_exp
    superUserGrantTargets: system_SuperUserPermissionGrant_bool_exp
    superUserGrants: system_SuperUserPermissionGrant_bool_exp
    systemConfigurationGrants: system_ConfigurationPermissionGrant_bool_exp
}

"""
unique or primary key constraints on table "system.SuperUserPermission"
"""
enum system_SuperUserPermission_constraint {
    """
    unique or primary key constraint
    """
    SuperUserPermission_pkey
}

enum system_SuperUserPermission_enum {
    """
    Ability to create a conference demo code.
    """
    CREATE_CONFERENCE_DEMO_CODE
    """
    Ability to delete a super-user permission.
    """
    DELETE_SU_PERMISSION
    """
    Ability to delete users from the system.
    """
    DELETE_USERS
    """
    Ability to edit the links between users and registrants.
    """
    EDIT_USER_REGISTRANTS
    """
    Ability to insert a super-user permission.
    """
    INSERT_SU_PERMISSION
    """
    Ability to list all conference demo codes.
    """
    LIST_CONFERENCE_DEMO_CODES
    """
    Ability to set a specified system configuration.
    """
    SET_SYSTEM_CONFIGURATION
    """
    Ability to view a super-user permission grant.
    """
    VIEW_SU_PERMISSION_GRANT
    """
    Ability to view a system configuration.
    """
    VIEW_SYSTEM_CONFIGURATION
    """
    Ability to view users in the system.
    """
    VIEW_USERS
}

"""
Boolean expression to compare columns of type "system_SuperUserPermission_enum". All fields are combined with logical 'AND'.
"""
input system_SuperUserPermission_enum_comparison_exp {
    _eq: system_SuperUserPermission_enum
    _in: [system_SuperUserPermission_enum!]
    _is_null: Boolean
    _neq: system_SuperUserPermission_enum
    _nin: [system_SuperUserPermission_enum!]
}

"""
input type for inserting data into table "system.SuperUserPermission"
"""
input system_SuperUserPermission_insert_input {
    description: String
    name: String
    superUserGrantTargets: system_SuperUserPermissionGrant_arr_rel_insert_input
    superUserGrants: system_SuperUserPermissionGrant_arr_rel_insert_input
    systemConfigurationGrants: system_ConfigurationPermissionGrant_arr_rel_insert_input
}

"""
aggregate max on columns
"""
type system_SuperUserPermission_max_fields {
    description: String
    name: String
}

"""
aggregate min on columns
"""
type system_SuperUserPermission_min_fields {
    description: String
    name: String
}

"""
response of any mutation on the table "system.SuperUserPermission"
"""
type system_SuperUserPermission_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [system_SuperUserPermission!]!
}

"""
input type for inserting object relation for remote table "system.SuperUserPermission"
"""
input system_SuperUserPermission_obj_rel_insert_input {
    data: system_SuperUserPermission_insert_input!
    """
    on conflict condition
    """
    on_conflict: system_SuperUserPermission_on_conflict
}

"""
on conflict condition type for table "system.SuperUserPermission"
"""
input system_SuperUserPermission_on_conflict {
    constraint: system_SuperUserPermission_constraint!
    update_columns: [system_SuperUserPermission_update_column!]! = []
    where: system_SuperUserPermission_bool_exp
}

"""
Ordering options when selecting data from "system.SuperUserPermission".
"""
input system_SuperUserPermission_order_by {
    description: order_by
    name: order_by
    superUserGrantTargets_aggregate: system_SuperUserPermissionGrant_aggregate_order_by
    superUserGrants_aggregate: system_SuperUserPermissionGrant_aggregate_order_by
    systemConfigurationGrants_aggregate: system_ConfigurationPermissionGrant_aggregate_order_by
}

"""
primary key columns input for table: system_SuperUserPermission
"""
input system_SuperUserPermission_pk_columns_input {
    name: String!
}

"""
select columns of table "system.SuperUserPermission"
"""
enum system_SuperUserPermission_select_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
input type for updating data in table "system.SuperUserPermission"
"""
input system_SuperUserPermission_set_input {
    description: String
    name: String
}

"""
update columns of table "system.SuperUserPermission"
"""
enum system_SuperUserPermission_update_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
columns and relationships of "system.SuperUserState"
"""
type system_SuperUserState {
    canBeDirectlyInitialised: Boolean
    isInitialised: Boolean
}

"""
aggregated selection of "system.SuperUserState"
"""
type system_SuperUserState_aggregate {
    aggregate: system_SuperUserState_aggregate_fields
    nodes: [system_SuperUserState!]!
}

"""
aggregate fields of "system.SuperUserState"
"""
type system_SuperUserState_aggregate_fields {
    count(columns: [system_SuperUserState_select_column!], distinct: Boolean): Int!
}

"""
Boolean expression to filter rows from the table "system.SuperUserState". All fields are combined with a logical 'AND'.
"""
input system_SuperUserState_bool_exp {
    _and: [system_SuperUserState_bool_exp!]
    _not: system_SuperUserState_bool_exp
    _or: [system_SuperUserState_bool_exp!]
    canBeDirectlyInitialised: Boolean_comparison_exp
    isInitialised: Boolean_comparison_exp
}

"""
Ordering options when selecting data from "system.SuperUserState".
"""
input system_SuperUserState_order_by {
    canBeDirectlyInitialised: order_by
    isInitialised: order_by
}

"""
select columns of table "system.SuperUserState"
"""
enum system_SuperUserState_select_column {
    """
    column name
    """
    canBeDirectlyInitialised
    """
    column name
    """
    isInitialised
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
    _eq: timestamptz
    _gt: timestamptz
    _gte: timestamptz
    _in: [timestamptz!]
    _is_null: Boolean
    _lt: timestamptz
    _lte: timestamptz
    _neq: timestamptz
    _nin: [timestamptz!]
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
    _eq: uuid
    _gt: uuid
    _gte: uuid
    _in: [uuid!]
    _is_null: Boolean
    _lt: uuid
    _lte: uuid
    _neq: uuid
    _nin: [uuid!]
}

"""
columns and relationships of "video.ChannelStack"
"""
type video_ChannelStack {
    """
    An object relationship
    """
    channelStackCreateJob: job_queues_ChannelStackCreateJob
    channelStackCreateJobId: uuid
    """
    An array relationship
    """
    channelStackUpdateJobs(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_ChannelStackUpdateJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_ChannelStackUpdateJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_ChannelStackUpdateJob_bool_exp
    ): [job_queues_ChannelStackUpdateJob!]!
    """
    An aggregate relationship
    """
    channelStackUpdateJobs_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [job_queues_ChannelStackUpdateJob_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [job_queues_ChannelStackUpdateJob_order_by!]
        """
        filter the rows returned
        """
        where: job_queues_ChannelStackUpdateJob_bool_exp
    ): job_queues_ChannelStackUpdateJob_aggregate!
    cloudFormationStackArn: String
    cloudFrontDistributionId: String!
    cloudFrontDomain: String!
    """
    An object relationship
    """
    conference: conference_Conference!
    conferenceId: uuid!
    createdAt: timestamptz!
    endpointUri: String!
    id: uuid!
    loopingMp4InputAttachmentName: String!
    mediaLiveChannelId: String!
    """
    An object relationship
    """
    mediaLiveChannelStatus: video_MediaLiveChannelStatus
    mediaPackageChannelId: String!
    mp4InputAttachmentName: String!
    mp4InputId: String!
    """
    An object relationship
    """
    room: room_Room
    roomId: uuid
    rtmpAInputAttachmentName: String!
    rtmpAInputId: String!
    rtmpAInputUri: String!
    rtmpBInputAttachmentName: String
    rtmpBInputId: String
    rtmpBInputUri: String
    rtmpOutputDestinationId: String
    rtmpOutputStreamKey: String
    rtmpOutputUri: String
    rtmpRoomInputAttachmentName: String
    rtmpRoomInputId: String
    updatedAt: timestamptz!
}

"""
aggregated selection of "video.ChannelStack"
"""
type video_ChannelStack_aggregate {
    aggregate: video_ChannelStack_aggregate_fields
    nodes: [video_ChannelStack!]!
}

"""
aggregate fields of "video.ChannelStack"
"""
type video_ChannelStack_aggregate_fields {
    count(columns: [video_ChannelStack_select_column!], distinct: Boolean): Int!
    max: video_ChannelStack_max_fields
    min: video_ChannelStack_min_fields
}

"""
Boolean expression to filter rows from the table "video.ChannelStack". All fields are combined with a logical 'AND'.
"""
input video_ChannelStack_bool_exp {
    _and: [video_ChannelStack_bool_exp!]
    _not: video_ChannelStack_bool_exp
    _or: [video_ChannelStack_bool_exp!]
    channelStackCreateJob: job_queues_ChannelStackCreateJob_bool_exp
    channelStackCreateJobId: uuid_comparison_exp
    channelStackUpdateJobs: job_queues_ChannelStackUpdateJob_bool_exp
    cloudFormationStackArn: String_comparison_exp
    cloudFrontDistributionId: String_comparison_exp
    cloudFrontDomain: String_comparison_exp
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    createdAt: timestamptz_comparison_exp
    endpointUri: String_comparison_exp
    id: uuid_comparison_exp
    loopingMp4InputAttachmentName: String_comparison_exp
    mediaLiveChannelId: String_comparison_exp
    mediaLiveChannelStatus: video_MediaLiveChannelStatus_bool_exp
    mediaPackageChannelId: String_comparison_exp
    mp4InputAttachmentName: String_comparison_exp
    mp4InputId: String_comparison_exp
    room: room_Room_bool_exp
    roomId: uuid_comparison_exp
    rtmpAInputAttachmentName: String_comparison_exp
    rtmpAInputId: String_comparison_exp
    rtmpAInputUri: String_comparison_exp
    rtmpBInputAttachmentName: String_comparison_exp
    rtmpBInputId: String_comparison_exp
    rtmpBInputUri: String_comparison_exp
    rtmpOutputDestinationId: String_comparison_exp
    rtmpOutputStreamKey: String_comparison_exp
    rtmpOutputUri: String_comparison_exp
    rtmpRoomInputAttachmentName: String_comparison_exp
    rtmpRoomInputId: String_comparison_exp
    updatedAt: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "video.ChannelStack"
"""
enum video_ChannelStack_constraint {
    """
    unique or primary key constraint
    """
    MediaLiveChannel_pkey
    """
    unique or primary key constraint
    """
    MediaLiveChannel_roomId_key
}

"""
input type for inserting data into table "video.ChannelStack"
"""
input video_ChannelStack_insert_input {
    channelStackCreateJob: job_queues_ChannelStackCreateJob_obj_rel_insert_input
    channelStackCreateJobId: uuid
    channelStackUpdateJobs: job_queues_ChannelStackUpdateJob_arr_rel_insert_input
    cloudFormationStackArn: String
    cloudFrontDistributionId: String
    cloudFrontDomain: String
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    createdAt: timestamptz
    endpointUri: String
    id: uuid
    loopingMp4InputAttachmentName: String
    mediaLiveChannelId: String
    mediaLiveChannelStatus: video_MediaLiveChannelStatus_obj_rel_insert_input
    mediaPackageChannelId: String
    mp4InputAttachmentName: String
    mp4InputId: String
    room: room_Room_obj_rel_insert_input
    roomId: uuid
    rtmpAInputAttachmentName: String
    rtmpAInputId: String
    rtmpAInputUri: String
    rtmpBInputAttachmentName: String
    rtmpBInputId: String
    rtmpBInputUri: String
    rtmpOutputDestinationId: String
    rtmpOutputStreamKey: String
    rtmpOutputUri: String
    rtmpRoomInputAttachmentName: String
    rtmpRoomInputId: String
    updatedAt: timestamptz
}

"""
aggregate max on columns
"""
type video_ChannelStack_max_fields {
    channelStackCreateJobId: uuid
    cloudFormationStackArn: String
    cloudFrontDistributionId: String
    cloudFrontDomain: String
    conferenceId: uuid
    createdAt: timestamptz
    endpointUri: String
    id: uuid
    loopingMp4InputAttachmentName: String
    mediaLiveChannelId: String
    mediaPackageChannelId: String
    mp4InputAttachmentName: String
    mp4InputId: String
    roomId: uuid
    rtmpAInputAttachmentName: String
    rtmpAInputId: String
    rtmpAInputUri: String
    rtmpBInputAttachmentName: String
    rtmpBInputId: String
    rtmpBInputUri: String
    rtmpOutputDestinationId: String
    rtmpOutputStreamKey: String
    rtmpOutputUri: String
    rtmpRoomInputAttachmentName: String
    rtmpRoomInputId: String
    updatedAt: timestamptz
}

"""
aggregate min on columns
"""
type video_ChannelStack_min_fields {
    channelStackCreateJobId: uuid
    cloudFormationStackArn: String
    cloudFrontDistributionId: String
    cloudFrontDomain: String
    conferenceId: uuid
    createdAt: timestamptz
    endpointUri: String
    id: uuid
    loopingMp4InputAttachmentName: String
    mediaLiveChannelId: String
    mediaPackageChannelId: String
    mp4InputAttachmentName: String
    mp4InputId: String
    roomId: uuid
    rtmpAInputAttachmentName: String
    rtmpAInputId: String
    rtmpAInputUri: String
    rtmpBInputAttachmentName: String
    rtmpBInputId: String
    rtmpBInputUri: String
    rtmpOutputDestinationId: String
    rtmpOutputStreamKey: String
    rtmpOutputUri: String
    rtmpRoomInputAttachmentName: String
    rtmpRoomInputId: String
    updatedAt: timestamptz
}

"""
response of any mutation on the table "video.ChannelStack"
"""
type video_ChannelStack_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [video_ChannelStack!]!
}

"""
input type for inserting object relation for remote table "video.ChannelStack"
"""
input video_ChannelStack_obj_rel_insert_input {
    data: video_ChannelStack_insert_input!
    """
    on conflict condition
    """
    on_conflict: video_ChannelStack_on_conflict
}

"""
on conflict condition type for table "video.ChannelStack"
"""
input video_ChannelStack_on_conflict {
    constraint: video_ChannelStack_constraint!
    update_columns: [video_ChannelStack_update_column!]! = []
    where: video_ChannelStack_bool_exp
}

"""
Ordering options when selecting data from "video.ChannelStack".
"""
input video_ChannelStack_order_by {
    channelStackCreateJob: job_queues_ChannelStackCreateJob_order_by
    channelStackCreateJobId: order_by
    channelStackUpdateJobs_aggregate: job_queues_ChannelStackUpdateJob_aggregate_order_by
    cloudFormationStackArn: order_by
    cloudFrontDistributionId: order_by
    cloudFrontDomain: order_by
    conference: conference_Conference_order_by
    conferenceId: order_by
    createdAt: order_by
    endpointUri: order_by
    id: order_by
    loopingMp4InputAttachmentName: order_by
    mediaLiveChannelId: order_by
    mediaLiveChannelStatus: video_MediaLiveChannelStatus_order_by
    mediaPackageChannelId: order_by
    mp4InputAttachmentName: order_by
    mp4InputId: order_by
    room: room_Room_order_by
    roomId: order_by
    rtmpAInputAttachmentName: order_by
    rtmpAInputId: order_by
    rtmpAInputUri: order_by
    rtmpBInputAttachmentName: order_by
    rtmpBInputId: order_by
    rtmpBInputUri: order_by
    rtmpOutputDestinationId: order_by
    rtmpOutputStreamKey: order_by
    rtmpOutputUri: order_by
    rtmpRoomInputAttachmentName: order_by
    rtmpRoomInputId: order_by
    updatedAt: order_by
}

"""
primary key columns input for table: video_ChannelStack
"""
input video_ChannelStack_pk_columns_input {
    id: uuid!
}

"""
select columns of table "video.ChannelStack"
"""
enum video_ChannelStack_select_column {
    """
    column name
    """
    channelStackCreateJobId
    """
    column name
    """
    cloudFormationStackArn
    """
    column name
    """
    cloudFrontDistributionId
    """
    column name
    """
    cloudFrontDomain
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    endpointUri
    """
    column name
    """
    id
    """
    column name
    """
    loopingMp4InputAttachmentName
    """
    column name
    """
    mediaLiveChannelId
    """
    column name
    """
    mediaPackageChannelId
    """
    column name
    """
    mp4InputAttachmentName
    """
    column name
    """
    mp4InputId
    """
    column name
    """
    roomId
    """
    column name
    """
    rtmpAInputAttachmentName
    """
    column name
    """
    rtmpAInputId
    """
    column name
    """
    rtmpAInputUri
    """
    column name
    """
    rtmpBInputAttachmentName
    """
    column name
    """
    rtmpBInputId
    """
    column name
    """
    rtmpBInputUri
    """
    column name
    """
    rtmpOutputDestinationId
    """
    column name
    """
    rtmpOutputStreamKey
    """
    column name
    """
    rtmpOutputUri
    """
    column name
    """
    rtmpRoomInputAttachmentName
    """
    column name
    """
    rtmpRoomInputId
    """
    column name
    """
    updatedAt
}

"""
input type for updating data in table "video.ChannelStack"
"""
input video_ChannelStack_set_input {
    channelStackCreateJobId: uuid
    cloudFormationStackArn: String
    cloudFrontDistributionId: String
    cloudFrontDomain: String
    conferenceId: uuid
    createdAt: timestamptz
    endpointUri: String
    id: uuid
    loopingMp4InputAttachmentName: String
    mediaLiveChannelId: String
    mediaPackageChannelId: String
    mp4InputAttachmentName: String
    mp4InputId: String
    roomId: uuid
    rtmpAInputAttachmentName: String
    rtmpAInputId: String
    rtmpAInputUri: String
    rtmpBInputAttachmentName: String
    rtmpBInputId: String
    rtmpBInputUri: String
    rtmpOutputDestinationId: String
    rtmpOutputStreamKey: String
    rtmpOutputUri: String
    rtmpRoomInputAttachmentName: String
    rtmpRoomInputId: String
    updatedAt: timestamptz
}

"""
update columns of table "video.ChannelStack"
"""
enum video_ChannelStack_update_column {
    """
    column name
    """
    channelStackCreateJobId
    """
    column name
    """
    cloudFormationStackArn
    """
    column name
    """
    cloudFrontDistributionId
    """
    column name
    """
    cloudFrontDomain
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    endpointUri
    """
    column name
    """
    id
    """
    column name
    """
    loopingMp4InputAttachmentName
    """
    column name
    """
    mediaLiveChannelId
    """
    column name
    """
    mediaPackageChannelId
    """
    column name
    """
    mp4InputAttachmentName
    """
    column name
    """
    mp4InputId
    """
    column name
    """
    roomId
    """
    column name
    """
    rtmpAInputAttachmentName
    """
    column name
    """
    rtmpAInputId
    """
    column name
    """
    rtmpAInputUri
    """
    column name
    """
    rtmpBInputAttachmentName
    """
    column name
    """
    rtmpBInputId
    """
    column name
    """
    rtmpBInputUri
    """
    column name
    """
    rtmpOutputDestinationId
    """
    column name
    """
    rtmpOutputStreamKey
    """
    column name
    """
    rtmpOutputUri
    """
    column name
    """
    rtmpRoomInputAttachmentName
    """
    column name
    """
    rtmpRoomInputId
    """
    column name
    """
    updatedAt
}

"""
columns and relationships of "video.EventVonageSession"
"""
type video_EventVonageSession {
    """
    An object relationship
    """
    conference: conference_Conference!
    conferenceId: uuid!
    createdAt: timestamptz!
    """
    An object relationship
    """
    event: schedule_Event!
    eventId: uuid!
    id: uuid!
    """
    An array relationship
    """
    layouts(
        """
        distinct select on columns
        """
        distinct_on: [video_VonageSessionLayout_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_VonageSessionLayout_order_by!]
        """
        filter the rows returned
        """
        where: video_VonageSessionLayout_bool_exp
    ): [video_VonageSessionLayout!]!
    """
    An aggregate relationship
    """
    layouts_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_VonageSessionLayout_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_VonageSessionLayout_order_by!]
        """
        filter the rows returned
        """
        where: video_VonageSessionLayout_bool_exp
    ): video_VonageSessionLayout_aggregate!
    """
    An array relationship
    """
    participantStreams(
        """
        distinct select on columns
        """
        distinct_on: [video_VonageParticipantStream_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_VonageParticipantStream_order_by!]
        """
        filter the rows returned
        """
        where: video_VonageParticipantStream_bool_exp
    ): [video_VonageParticipantStream!]!
    """
    An aggregate relationship
    """
    participantStreams_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_VonageParticipantStream_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_VonageParticipantStream_order_by!]
        """
        filter the rows returned
        """
        where: video_VonageParticipantStream_bool_exp
    ): video_VonageParticipantStream_aggregate!
    """
    An array relationship
    """
    recordings(
        """
        distinct select on columns
        """
        distinct_on: [video_VonageRoomRecording_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_VonageRoomRecording_order_by!]
        """
        filter the rows returned
        """
        where: video_VonageRoomRecording_bool_exp
    ): [video_VonageRoomRecording!]!
    """
    An aggregate relationship
    """
    recordings_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [video_VonageRoomRecording_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [video_VonageRoomRecording_order_by!]
        """
        filter the rows returned
        """
        where: video_VonageRoomRecording_bool_exp
    ): video_VonageRoomRecording_aggregate!
    rtmpInputName: video_RtmpInput_enum!
    sessionId: String!
    subconferenceId: uuid
    updatedAt: timestamptz!
}

"""
aggregated selection of "video.EventVonageSession"
"""
type video_EventVonageSession_aggregate {
    aggregate: video_EventVonageSession_aggregate_fields
    nodes: [video_EventVonageSession!]!
}

"""
aggregate fields of "video.EventVonageSession"
"""
type video_EventVonageSession_aggregate_fields {
    count(columns: [video_EventVonageSession_select_column!], distinct: Boolean): Int!
    max: video_EventVonageSession_max_fields
    min: video_EventVonageSession_min_fields
}

"""
Boolean expression to filter rows from the table "video.EventVonageSession". All fields are combined with a logical 'AND'.
"""
input video_EventVonageSession_bool_exp {
    _and: [video_EventVonageSession_bool_exp!]
    _not: video_EventVonageSession_bool_exp
    _or: [video_EventVonageSession_bool_exp!]
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    createdAt: timestamptz_comparison_exp
    event: schedule_Event_bool_exp
    eventId: uuid_comparison_exp
    id: uuid_comparison_exp
    layouts: video_VonageSessionLayout_bool_exp
    participantStreams: video_VonageParticipantStream_bool_exp
    recordings: video_VonageRoomRecording_bool_exp
    rtmpInputName: video_RtmpInput_enum_comparison_exp
    sessionId: String_comparison_exp
    subconferenceId: uuid_comparison_exp
    updatedAt: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "video.EventVonageSession"
"""
enum video_EventVonageSession_constraint {
    """
    unique or primary key constraint
    """
    EventVonageSession_eventId_key
    """
    unique or primary key constraint
    """
    EventVonageSession_pkey
    """
    unique or primary key constraint
    """
    EventVonageSession_sessionId_key
}

"""
input type for inserting data into table "video.EventVonageSession"
"""
input video_EventVonageSession_insert_input {
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    createdAt: timestamptz
    event: schedule_Event_obj_rel_insert_input
    eventId: uuid
    id: uuid
    layouts: video_VonageSessionLayout_arr_rel_insert_input
    participantStreams: video_VonageParticipantStream_arr_rel_insert_input
    recordings: video_VonageRoomRecording_arr_rel_insert_input
    rtmpInputName: video_RtmpInput_enum
    sessionId: String
    subconferenceId: uuid
    updatedAt: timestamptz
}

"""
aggregate max on columns
"""
type video_EventVonageSession_max_fields {
    conferenceId: uuid
    createdAt: timestamptz
    eventId: uuid
    id: uuid
    sessionId: String
    subconferenceId: uuid
    updatedAt: timestamptz
}

"""
aggregate min on columns
"""
type video_EventVonageSession_min_fields {
    conferenceId: uuid
    createdAt: timestamptz
    eventId: uuid
    id: uuid
    sessionId: String
    subconferenceId: uuid
    updatedAt: timestamptz
}

"""
response of any mutation on the table "video.EventVonageSession"
"""
type video_EventVonageSession_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [video_EventVonageSession!]!
}

"""
input type for inserting object relation for remote table "video.EventVonageSession"
"""
input video_EventVonageSession_obj_rel_insert_input {
    data: video_EventVonageSession_insert_input!
    """
    on conflict condition
    """
    on_conflict: video_EventVonageSession_on_conflict
}

"""
on conflict condition type for table "video.EventVonageSession"
"""
input video_EventVonageSession_on_conflict {
    constraint: video_EventVonageSession_constraint!
    update_columns: [video_EventVonageSession_update_column!]! = []
    where: video_EventVonageSession_bool_exp
}

"""
Ordering options when selecting data from "video.EventVonageSession".
"""
input video_EventVonageSession_order_by {
    conference: conference_Conference_order_by
    conferenceId: order_by
    createdAt: order_by
    event: schedule_Event_order_by
    eventId: order_by
    id: order_by
    layouts_aggregate: video_VonageSessionLayout_aggregate_order_by
    participantStreams_aggregate: video_VonageParticipantStream_aggregate_order_by
    recordings_aggregate: video_VonageRoomRecording_aggregate_order_by
    rtmpInputName: order_by
    sessionId: order_by
    subconferenceId: order_by
    updatedAt: order_by
}

"""
primary key columns input for table: video_EventVonageSession
"""
input video_EventVonageSession_pk_columns_input {
    id: uuid!
}

"""
select columns of table "video.EventVonageSession"
"""
enum video_EventVonageSession_select_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    eventId
    """
    column name
    """
    id
    """
    column name
    """
    rtmpInputName
    """
    column name
    """
    sessionId
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updatedAt
}

"""
input type for updating data in table "video.EventVonageSession"
"""
input video_EventVonageSession_set_input {
    conferenceId: uuid
    createdAt: timestamptz
    eventId: uuid
    id: uuid
    rtmpInputName: video_RtmpInput_enum
    sessionId: String
    subconferenceId: uuid
    updatedAt: timestamptz
}

"""
update columns of table "video.EventVonageSession"
"""
enum video_EventVonageSession_update_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    eventId
    """
    column name
    """
    id
    """
    column name
    """
    rtmpInputName
    """
    column name
    """
    sessionId
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updatedAt
}

"""
columns and relationships of "video.ImmediateSwitch"
"""
type video_ImmediateSwitch {
    """
    An object relationship
    """
    conference: conference_Conference
    conferenceId: uuid!
    createdAt: timestamptz!
    data(
        """
        JSON select path
        """
        path: String
    ): jsonb!
    errorMessage: String
    """
    An object relationship
    """
    event: schedule_Event
    eventId: uuid
    executedAt: timestamptz
    id: uuid!
    subconferenceId: uuid
    updatedAt: timestamptz!
}

"""
aggregated selection of "video.ImmediateSwitch"
"""
type video_ImmediateSwitch_aggregate {
    aggregate: video_ImmediateSwitch_aggregate_fields
    nodes: [video_ImmediateSwitch!]!
}

"""
aggregate fields of "video.ImmediateSwitch"
"""
type video_ImmediateSwitch_aggregate_fields {
    count(columns: [video_ImmediateSwitch_select_column!], distinct: Boolean): Int!
    max: video_ImmediateSwitch_max_fields
    min: video_ImmediateSwitch_min_fields
}

"""
append existing jsonb value of filtered columns with new jsonb value
"""
input video_ImmediateSwitch_append_input {
    data: jsonb
}

"""
Boolean expression to filter rows from the table "video.ImmediateSwitch". All fields are combined with a logical 'AND'.
"""
input video_ImmediateSwitch_bool_exp {
    _and: [video_ImmediateSwitch_bool_exp!]
    _not: video_ImmediateSwitch_bool_exp
    _or: [video_ImmediateSwitch_bool_exp!]
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    createdAt: timestamptz_comparison_exp
    data: jsonb_comparison_exp
    errorMessage: String_comparison_exp
    event: schedule_Event_bool_exp
    eventId: uuid_comparison_exp
    executedAt: timestamptz_comparison_exp
    id: uuid_comparison_exp
    subconferenceId: uuid_comparison_exp
    updatedAt: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "video.ImmediateSwitch"
"""
enum video_ImmediateSwitch_constraint {
    """
    unique or primary key constraint
    """
    ImmediateSwitch_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input video_ImmediateSwitch_delete_at_path_input {
    data: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input video_ImmediateSwitch_delete_elem_input {
    data: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input video_ImmediateSwitch_delete_key_input {
    data: String
}

"""
input type for inserting data into table "video.ImmediateSwitch"
"""
input video_ImmediateSwitch_insert_input {
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    createdAt: timestamptz
    data: jsonb
    errorMessage: String
    event: schedule_Event_obj_rel_insert_input
    eventId: uuid
    executedAt: timestamptz
    id: uuid
    subconferenceId: uuid
    updatedAt: timestamptz
}

"""
aggregate max on columns
"""
type video_ImmediateSwitch_max_fields {
    conferenceId: uuid
    createdAt: timestamptz
    errorMessage: String
    eventId: uuid
    executedAt: timestamptz
    id: uuid
    subconferenceId: uuid
    updatedAt: timestamptz
}

"""
aggregate min on columns
"""
type video_ImmediateSwitch_min_fields {
    conferenceId: uuid
    createdAt: timestamptz
    errorMessage: String
    eventId: uuid
    executedAt: timestamptz
    id: uuid
    subconferenceId: uuid
    updatedAt: timestamptz
}

"""
response of any mutation on the table "video.ImmediateSwitch"
"""
type video_ImmediateSwitch_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [video_ImmediateSwitch!]!
}

"""
on conflict condition type for table "video.ImmediateSwitch"
"""
input video_ImmediateSwitch_on_conflict {
    constraint: video_ImmediateSwitch_constraint!
    update_columns: [video_ImmediateSwitch_update_column!]! = []
    where: video_ImmediateSwitch_bool_exp
}

"""
Ordering options when selecting data from "video.ImmediateSwitch".
"""
input video_ImmediateSwitch_order_by {
    conference: conference_Conference_order_by
    conferenceId: order_by
    createdAt: order_by
    data: order_by
    errorMessage: order_by
    event: schedule_Event_order_by
    eventId: order_by
    executedAt: order_by
    id: order_by
    subconferenceId: order_by
    updatedAt: order_by
}

"""
primary key columns input for table: video_ImmediateSwitch
"""
input video_ImmediateSwitch_pk_columns_input {
    id: uuid!
}

"""
prepend existing jsonb value of filtered columns with new jsonb value
"""
input video_ImmediateSwitch_prepend_input {
    data: jsonb
}

"""
select columns of table "video.ImmediateSwitch"
"""
enum video_ImmediateSwitch_select_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    data
    """
    column name
    """
    errorMessage
    """
    column name
    """
    eventId
    """
    column name
    """
    executedAt
    """
    column name
    """
    id
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updatedAt
}

"""
input type for updating data in table "video.ImmediateSwitch"
"""
input video_ImmediateSwitch_set_input {
    conferenceId: uuid
    createdAt: timestamptz
    data: jsonb
    errorMessage: String
    eventId: uuid
    executedAt: timestamptz
    id: uuid
    subconferenceId: uuid
    updatedAt: timestamptz
}

"""
update columns of table "video.ImmediateSwitch"
"""
enum video_ImmediateSwitch_update_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    data
    """
    column name
    """
    errorMessage
    """
    column name
    """
    eventId
    """
    column name
    """
    executedAt
    """
    column name
    """
    id
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updatedAt
}

"""
columns and relationships of "video.InputType"
"""
type video_InputType {
    description: String!
    name: String!
}

"""
aggregated selection of "video.InputType"
"""
type video_InputType_aggregate {
    aggregate: video_InputType_aggregate_fields
    nodes: [video_InputType!]!
}

"""
aggregate fields of "video.InputType"
"""
type video_InputType_aggregate_fields {
    count(columns: [video_InputType_select_column!], distinct: Boolean): Int!
    max: video_InputType_max_fields
    min: video_InputType_min_fields
}

"""
Boolean expression to filter rows from the table "video.InputType". All fields are combined with a logical 'AND'.
"""
input video_InputType_bool_exp {
    _and: [video_InputType_bool_exp!]
    _not: video_InputType_bool_exp
    _or: [video_InputType_bool_exp!]
    description: String_comparison_exp
    name: String_comparison_exp
}

"""
unique or primary key constraints on table "video.InputType"
"""
enum video_InputType_constraint {
    """
    unique or primary key constraint
    """
    InputTypeName_pkey
}

"""
input type for inserting data into table "video.InputType"
"""
input video_InputType_insert_input {
    description: String
    name: String
}

"""
aggregate max on columns
"""
type video_InputType_max_fields {
    description: String
    name: String
}

"""
aggregate min on columns
"""
type video_InputType_min_fields {
    description: String
    name: String
}

"""
response of any mutation on the table "video.InputType"
"""
type video_InputType_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [video_InputType!]!
}

"""
on conflict condition type for table "video.InputType"
"""
input video_InputType_on_conflict {
    constraint: video_InputType_constraint!
    update_columns: [video_InputType_update_column!]! = []
    where: video_InputType_bool_exp
}

"""
Ordering options when selecting data from "video.InputType".
"""
input video_InputType_order_by {
    description: order_by
    name: order_by
}

"""
primary key columns input for table: video_InputType
"""
input video_InputType_pk_columns_input {
    name: String!
}

"""
select columns of table "video.InputType"
"""
enum video_InputType_select_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
input type for updating data in table "video.InputType"
"""
input video_InputType_set_input {
    description: String
    name: String
}

"""
update columns of table "video.InputType"
"""
enum video_InputType_update_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
columns and relationships of "video.MediaLiveChannelStatus"
"""
type video_MediaLiveChannelStatus {
    activeInputAttachmentName: String
    activeInputSwitchActionName: String
    """
    An object relationship
    """
    channelStack: video_ChannelStack!
    channelStackId: uuid!
    """
    An object relationship
    """
    conference: conference_Conference
    conferenceId: uuid!
    createdAt: timestamptz!
    id: uuid!
    pipelinesRunningCount: numeric
    state: String!
    updatedAt: timestamptz!
}

"""
aggregated selection of "video.MediaLiveChannelStatus"
"""
type video_MediaLiveChannelStatus_aggregate {
    aggregate: video_MediaLiveChannelStatus_aggregate_fields
    nodes: [video_MediaLiveChannelStatus!]!
}

"""
aggregate fields of "video.MediaLiveChannelStatus"
"""
type video_MediaLiveChannelStatus_aggregate_fields {
    avg: video_MediaLiveChannelStatus_avg_fields
    count(columns: [video_MediaLiveChannelStatus_select_column!], distinct: Boolean): Int!
    max: video_MediaLiveChannelStatus_max_fields
    min: video_MediaLiveChannelStatus_min_fields
    stddev: video_MediaLiveChannelStatus_stddev_fields
    stddev_pop: video_MediaLiveChannelStatus_stddev_pop_fields
    stddev_samp: video_MediaLiveChannelStatus_stddev_samp_fields
    sum: video_MediaLiveChannelStatus_sum_fields
    var_pop: video_MediaLiveChannelStatus_var_pop_fields
    var_samp: video_MediaLiveChannelStatus_var_samp_fields
    variance: video_MediaLiveChannelStatus_variance_fields
}

"""
aggregate avg on columns
"""
type video_MediaLiveChannelStatus_avg_fields {
    pipelinesRunningCount: Float
}

"""
Boolean expression to filter rows from the table "video.MediaLiveChannelStatus". All fields are combined with a logical 'AND'.
"""
input video_MediaLiveChannelStatus_bool_exp {
    _and: [video_MediaLiveChannelStatus_bool_exp!]
    _not: video_MediaLiveChannelStatus_bool_exp
    _or: [video_MediaLiveChannelStatus_bool_exp!]
    activeInputAttachmentName: String_comparison_exp
    activeInputSwitchActionName: String_comparison_exp
    channelStack: video_ChannelStack_bool_exp
    channelStackId: uuid_comparison_exp
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    createdAt: timestamptz_comparison_exp
    id: uuid_comparison_exp
    pipelinesRunningCount: numeric_comparison_exp
    state: String_comparison_exp
    updatedAt: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "video.MediaLiveChannelStatus"
"""
enum video_MediaLiveChannelStatus_constraint {
    """
    unique or primary key constraint
    """
    MediaLiveChannelStatus_channelStackId_key
    """
    unique or primary key constraint
    """
    MediaLiveChannelStatus_pkey
}

"""
input type for incrementing numeric columns in table "video.MediaLiveChannelStatus"
"""
input video_MediaLiveChannelStatus_inc_input {
    pipelinesRunningCount: numeric
}

"""
input type for inserting data into table "video.MediaLiveChannelStatus"
"""
input video_MediaLiveChannelStatus_insert_input {
    activeInputAttachmentName: String
    activeInputSwitchActionName: String
    channelStack: video_ChannelStack_obj_rel_insert_input
    channelStackId: uuid
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    pipelinesRunningCount: numeric
    state: String
    updatedAt: timestamptz
}

"""
aggregate max on columns
"""
type video_MediaLiveChannelStatus_max_fields {
    activeInputAttachmentName: String
    activeInputSwitchActionName: String
    channelStackId: uuid
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    pipelinesRunningCount: numeric
    state: String
    updatedAt: timestamptz
}

"""
aggregate min on columns
"""
type video_MediaLiveChannelStatus_min_fields {
    activeInputAttachmentName: String
    activeInputSwitchActionName: String
    channelStackId: uuid
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    pipelinesRunningCount: numeric
    state: String
    updatedAt: timestamptz
}

"""
response of any mutation on the table "video.MediaLiveChannelStatus"
"""
type video_MediaLiveChannelStatus_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [video_MediaLiveChannelStatus!]!
}

"""
input type for inserting object relation for remote table "video.MediaLiveChannelStatus"
"""
input video_MediaLiveChannelStatus_obj_rel_insert_input {
    data: video_MediaLiveChannelStatus_insert_input!
    """
    on conflict condition
    """
    on_conflict: video_MediaLiveChannelStatus_on_conflict
}

"""
on conflict condition type for table "video.MediaLiveChannelStatus"
"""
input video_MediaLiveChannelStatus_on_conflict {
    constraint: video_MediaLiveChannelStatus_constraint!
    update_columns: [video_MediaLiveChannelStatus_update_column!]! = []
    where: video_MediaLiveChannelStatus_bool_exp
}

"""
Ordering options when selecting data from "video.MediaLiveChannelStatus".
"""
input video_MediaLiveChannelStatus_order_by {
    activeInputAttachmentName: order_by
    activeInputSwitchActionName: order_by
    channelStack: video_ChannelStack_order_by
    channelStackId: order_by
    conference: conference_Conference_order_by
    conferenceId: order_by
    createdAt: order_by
    id: order_by
    pipelinesRunningCount: order_by
    state: order_by
    updatedAt: order_by
}

"""
primary key columns input for table: video_MediaLiveChannelStatus
"""
input video_MediaLiveChannelStatus_pk_columns_input {
    id: uuid!
}

"""
select columns of table "video.MediaLiveChannelStatus"
"""
enum video_MediaLiveChannelStatus_select_column {
    """
    column name
    """
    activeInputAttachmentName
    """
    column name
    """
    activeInputSwitchActionName
    """
    column name
    """
    channelStackId
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    id
    """
    column name
    """
    pipelinesRunningCount
    """
    column name
    """
    state
    """
    column name
    """
    updatedAt
}

"""
input type for updating data in table "video.MediaLiveChannelStatus"
"""
input video_MediaLiveChannelStatus_set_input {
    activeInputAttachmentName: String
    activeInputSwitchActionName: String
    channelStackId: uuid
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    pipelinesRunningCount: numeric
    state: String
    updatedAt: timestamptz
}

"""
aggregate stddev on columns
"""
type video_MediaLiveChannelStatus_stddev_fields {
    pipelinesRunningCount: Float
}

"""
aggregate stddev_pop on columns
"""
type video_MediaLiveChannelStatus_stddev_pop_fields {
    pipelinesRunningCount: Float
}

"""
aggregate stddev_samp on columns
"""
type video_MediaLiveChannelStatus_stddev_samp_fields {
    pipelinesRunningCount: Float
}

"""
aggregate sum on columns
"""
type video_MediaLiveChannelStatus_sum_fields {
    pipelinesRunningCount: numeric
}

"""
update columns of table "video.MediaLiveChannelStatus"
"""
enum video_MediaLiveChannelStatus_update_column {
    """
    column name
    """
    activeInputAttachmentName
    """
    column name
    """
    activeInputSwitchActionName
    """
    column name
    """
    channelStackId
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    id
    """
    column name
    """
    pipelinesRunningCount
    """
    column name
    """
    state
    """
    column name
    """
    updatedAt
}

"""
aggregate var_pop on columns
"""
type video_MediaLiveChannelStatus_var_pop_fields {
    pipelinesRunningCount: Float
}

"""
aggregate var_samp on columns
"""
type video_MediaLiveChannelStatus_var_samp_fields {
    pipelinesRunningCount: Float
}

"""
aggregate variance on columns
"""
type video_MediaLiveChannelStatus_variance_fields {
    pipelinesRunningCount: Float
}

"""
columns and relationships of "video.RoomRtmpInput"
"""
type video_RoomRtmpInput {
    address: String
    applicationInstance: String!
    applicationName: String!
    created_at: timestamptz!
    id: uuid!
    inputId: String
    inputName: String!
    """
    An object relationship
    """
    room: room_Room
    roomId: uuid
    updated_at: timestamptz!
}

"""
aggregated selection of "video.RoomRtmpInput"
"""
type video_RoomRtmpInput_aggregate {
    aggregate: video_RoomRtmpInput_aggregate_fields
    nodes: [video_RoomRtmpInput!]!
}

"""
aggregate fields of "video.RoomRtmpInput"
"""
type video_RoomRtmpInput_aggregate_fields {
    count(columns: [video_RoomRtmpInput_select_column!], distinct: Boolean): Int!
    max: video_RoomRtmpInput_max_fields
    min: video_RoomRtmpInput_min_fields
}

"""
Boolean expression to filter rows from the table "video.RoomRtmpInput". All fields are combined with a logical 'AND'.
"""
input video_RoomRtmpInput_bool_exp {
    _and: [video_RoomRtmpInput_bool_exp!]
    _not: video_RoomRtmpInput_bool_exp
    _or: [video_RoomRtmpInput_bool_exp!]
    address: String_comparison_exp
    applicationInstance: String_comparison_exp
    applicationName: String_comparison_exp
    created_at: timestamptz_comparison_exp
    id: uuid_comparison_exp
    inputId: String_comparison_exp
    inputName: String_comparison_exp
    room: room_Room_bool_exp
    roomId: uuid_comparison_exp
    updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "video.RoomRtmpInput"
"""
enum video_RoomRtmpInput_constraint {
    """
    unique or primary key constraint
    """
    RoomRtmpInput_applicationInstance_key
    """
    unique or primary key constraint
    """
    RoomRtmpInput_inputId_key
    """
    unique or primary key constraint
    """
    RoomRtmpInput_inputName_key
    """
    unique or primary key constraint
    """
    RoomRtmpInput_pkey
    """
    unique or primary key constraint
    """
    RoomRtmpInput_roomId_key
}

"""
input type for inserting data into table "video.RoomRtmpInput"
"""
input video_RoomRtmpInput_insert_input {
    address: String
    applicationInstance: String
    applicationName: String
    created_at: timestamptz
    id: uuid
    inputId: String
    inputName: String
    room: room_Room_obj_rel_insert_input
    roomId: uuid
    updated_at: timestamptz
}

"""
aggregate max on columns
"""
type video_RoomRtmpInput_max_fields {
    address: String
    applicationInstance: String
    applicationName: String
    created_at: timestamptz
    id: uuid
    inputId: String
    inputName: String
    roomId: uuid
    updated_at: timestamptz
}

"""
aggregate min on columns
"""
type video_RoomRtmpInput_min_fields {
    address: String
    applicationInstance: String
    applicationName: String
    created_at: timestamptz
    id: uuid
    inputId: String
    inputName: String
    roomId: uuid
    updated_at: timestamptz
}

"""
response of any mutation on the table "video.RoomRtmpInput"
"""
type video_RoomRtmpInput_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [video_RoomRtmpInput!]!
}

"""
input type for inserting object relation for remote table "video.RoomRtmpInput"
"""
input video_RoomRtmpInput_obj_rel_insert_input {
    data: video_RoomRtmpInput_insert_input!
    """
    on conflict condition
    """
    on_conflict: video_RoomRtmpInput_on_conflict
}

"""
on conflict condition type for table "video.RoomRtmpInput"
"""
input video_RoomRtmpInput_on_conflict {
    constraint: video_RoomRtmpInput_constraint!
    update_columns: [video_RoomRtmpInput_update_column!]! = []
    where: video_RoomRtmpInput_bool_exp
}

"""
Ordering options when selecting data from "video.RoomRtmpInput".
"""
input video_RoomRtmpInput_order_by {
    address: order_by
    applicationInstance: order_by
    applicationName: order_by
    created_at: order_by
    id: order_by
    inputId: order_by
    inputName: order_by
    room: room_Room_order_by
    roomId: order_by
    updated_at: order_by
}

"""
primary key columns input for table: video_RoomRtmpInput
"""
input video_RoomRtmpInput_pk_columns_input {
    id: uuid!
}

"""
select columns of table "video.RoomRtmpInput"
"""
enum video_RoomRtmpInput_select_column {
    """
    column name
    """
    address
    """
    column name
    """
    applicationInstance
    """
    column name
    """
    applicationName
    """
    column name
    """
    created_at
    """
    column name
    """
    id
    """
    column name
    """
    inputId
    """
    column name
    """
    inputName
    """
    column name
    """
    roomId
    """
    column name
    """
    updated_at
}

"""
input type for updating data in table "video.RoomRtmpInput"
"""
input video_RoomRtmpInput_set_input {
    address: String
    applicationInstance: String
    applicationName: String
    created_at: timestamptz
    id: uuid
    inputId: String
    inputName: String
    roomId: uuid
    updated_at: timestamptz
}

"""
update columns of table "video.RoomRtmpInput"
"""
enum video_RoomRtmpInput_update_column {
    """
    column name
    """
    address
    """
    column name
    """
    applicationInstance
    """
    column name
    """
    applicationName
    """
    column name
    """
    created_at
    """
    column name
    """
    id
    """
    column name
    """
    inputId
    """
    column name
    """
    inputName
    """
    column name
    """
    roomId
    """
    column name
    """
    updated_at
}

"""
Enables broadcasting of a live-stream from a room to an RTMP-capable service, such as YouTube.


columns and relationships of "video.RoomRtmpOutput"
"""
type video_RoomRtmpOutput {
    created_at: timestamptz!
    id: uuid!
    """
    An object relationship
    """
    room: room_Room!
    roomId: uuid!
    streamKey: String!
    updated_at: timestamptz!
    url: String!
}

"""
aggregated selection of "video.RoomRtmpOutput"
"""
type video_RoomRtmpOutput_aggregate {
    aggregate: video_RoomRtmpOutput_aggregate_fields
    nodes: [video_RoomRtmpOutput!]!
}

"""
aggregate fields of "video.RoomRtmpOutput"
"""
type video_RoomRtmpOutput_aggregate_fields {
    count(columns: [video_RoomRtmpOutput_select_column!], distinct: Boolean): Int!
    max: video_RoomRtmpOutput_max_fields
    min: video_RoomRtmpOutput_min_fields
}

"""
Boolean expression to filter rows from the table "video.RoomRtmpOutput". All fields are combined with a logical 'AND'.
"""
input video_RoomRtmpOutput_bool_exp {
    _and: [video_RoomRtmpOutput_bool_exp!]
    _not: video_RoomRtmpOutput_bool_exp
    _or: [video_RoomRtmpOutput_bool_exp!]
    created_at: timestamptz_comparison_exp
    id: uuid_comparison_exp
    room: room_Room_bool_exp
    roomId: uuid_comparison_exp
    streamKey: String_comparison_exp
    updated_at: timestamptz_comparison_exp
    url: String_comparison_exp
}

"""
unique or primary key constraints on table "video.RoomRtmpOutput"
"""
enum video_RoomRtmpOutput_constraint {
    """
    unique or primary key constraint
    """
    EventRtmpOutput_pkey
    """
    unique or primary key constraint
    """
    RoomRtmpOutput_roomId_key
}

"""
input type for inserting data into table "video.RoomRtmpOutput"
"""
input video_RoomRtmpOutput_insert_input {
    created_at: timestamptz
    id: uuid
    room: room_Room_obj_rel_insert_input
    roomId: uuid
    streamKey: String
    updated_at: timestamptz
    url: String
}

"""
aggregate max on columns
"""
type video_RoomRtmpOutput_max_fields {
    created_at: timestamptz
    id: uuid
    roomId: uuid
    streamKey: String
    updated_at: timestamptz
    url: String
}

"""
aggregate min on columns
"""
type video_RoomRtmpOutput_min_fields {
    created_at: timestamptz
    id: uuid
    roomId: uuid
    streamKey: String
    updated_at: timestamptz
    url: String
}

"""
response of any mutation on the table "video.RoomRtmpOutput"
"""
type video_RoomRtmpOutput_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [video_RoomRtmpOutput!]!
}

"""
input type for inserting object relation for remote table "video.RoomRtmpOutput"
"""
input video_RoomRtmpOutput_obj_rel_insert_input {
    data: video_RoomRtmpOutput_insert_input!
    """
    on conflict condition
    """
    on_conflict: video_RoomRtmpOutput_on_conflict
}

"""
on conflict condition type for table "video.RoomRtmpOutput"
"""
input video_RoomRtmpOutput_on_conflict {
    constraint: video_RoomRtmpOutput_constraint!
    update_columns: [video_RoomRtmpOutput_update_column!]! = []
    where: video_RoomRtmpOutput_bool_exp
}

"""
Ordering options when selecting data from "video.RoomRtmpOutput".
"""
input video_RoomRtmpOutput_order_by {
    created_at: order_by
    id: order_by
    room: room_Room_order_by
    roomId: order_by
    streamKey: order_by
    updated_at: order_by
    url: order_by
}

"""
primary key columns input for table: video_RoomRtmpOutput
"""
input video_RoomRtmpOutput_pk_columns_input {
    id: uuid!
}

"""
select columns of table "video.RoomRtmpOutput"
"""
enum video_RoomRtmpOutput_select_column {
    """
    column name
    """
    created_at
    """
    column name
    """
    id
    """
    column name
    """
    roomId
    """
    column name
    """
    streamKey
    """
    column name
    """
    updated_at
    """
    column name
    """
    url
}

"""
input type for updating data in table "video.RoomRtmpOutput"
"""
input video_RoomRtmpOutput_set_input {
    created_at: timestamptz
    id: uuid
    roomId: uuid
    streamKey: String
    updated_at: timestamptz
    url: String
}

"""
update columns of table "video.RoomRtmpOutput"
"""
enum video_RoomRtmpOutput_update_column {
    """
    column name
    """
    created_at
    """
    column name
    """
    id
    """
    column name
    """
    roomId
    """
    column name
    """
    streamKey
    """
    column name
    """
    updated_at
    """
    column name
    """
    url
}

"""
columns and relationships of "video.RtmpInput"
"""
type video_RtmpInput {
    description: String!
    name: String!
}

"""
aggregated selection of "video.RtmpInput"
"""
type video_RtmpInput_aggregate {
    aggregate: video_RtmpInput_aggregate_fields
    nodes: [video_RtmpInput!]!
}

"""
aggregate fields of "video.RtmpInput"
"""
type video_RtmpInput_aggregate_fields {
    count(columns: [video_RtmpInput_select_column!], distinct: Boolean): Int!
    max: video_RtmpInput_max_fields
    min: video_RtmpInput_min_fields
}

"""
Boolean expression to filter rows from the table "video.RtmpInput". All fields are combined with a logical 'AND'.
"""
input video_RtmpInput_bool_exp {
    _and: [video_RtmpInput_bool_exp!]
    _not: video_RtmpInput_bool_exp
    _or: [video_RtmpInput_bool_exp!]
    description: String_comparison_exp
    name: String_comparison_exp
}

"""
unique or primary key constraints on table "video.RtmpInput"
"""
enum video_RtmpInput_constraint {
    """
    unique or primary key constraint
    """
    RtmpInput_pkey
}

enum video_RtmpInput_enum {
    """
    The A RTMP input.
    """
    RTMP_A
    """
    The B RTMP input.
    """
    RTMP_B
    """
    Use the room's RTMP input if one is available.
    """
    RTMP_ROOM
}

"""
Boolean expression to compare columns of type "video_RtmpInput_enum". All fields are combined with logical 'AND'.
"""
input video_RtmpInput_enum_comparison_exp {
    _eq: video_RtmpInput_enum
    _in: [video_RtmpInput_enum!]
    _is_null: Boolean
    _neq: video_RtmpInput_enum
    _nin: [video_RtmpInput_enum!]
}

"""
input type for inserting data into table "video.RtmpInput"
"""
input video_RtmpInput_insert_input {
    description: String
    name: String
}

"""
aggregate max on columns
"""
type video_RtmpInput_max_fields {
    description: String
    name: String
}

"""
aggregate min on columns
"""
type video_RtmpInput_min_fields {
    description: String
    name: String
}

"""
response of any mutation on the table "video.RtmpInput"
"""
type video_RtmpInput_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [video_RtmpInput!]!
}

"""
on conflict condition type for table "video.RtmpInput"
"""
input video_RtmpInput_on_conflict {
    constraint: video_RtmpInput_constraint!
    update_columns: [video_RtmpInput_update_column!]! = []
    where: video_RtmpInput_bool_exp
}

"""
Ordering options when selecting data from "video.RtmpInput".
"""
input video_RtmpInput_order_by {
    description: order_by
    name: order_by
}

"""
primary key columns input for table: video_RtmpInput
"""
input video_RtmpInput_pk_columns_input {
    name: String!
}

"""
select columns of table "video.RtmpInput"
"""
enum video_RtmpInput_select_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
input type for updating data in table "video.RtmpInput"
"""
input video_RtmpInput_set_input {
    description: String
    name: String
}

"""
update columns of table "video.RtmpInput"
"""
enum video_RtmpInput_update_column {
    """
    column name
    """
    description
    """
    column name
    """
    name
}

"""
columns and relationships of "video.TranscriptionJob"
"""
type video_TranscriptionJob {
    awsTranscribeJobName: String!
    created_at: timestamptz!
    elementId: uuid!
    id: uuid!
    languageCode: String!
    transcriptionS3Url: String!
    updated_at: timestamptz!
    videoS3Url: String!
}

"""
aggregated selection of "video.TranscriptionJob"
"""
type video_TranscriptionJob_aggregate {
    aggregate: video_TranscriptionJob_aggregate_fields
    nodes: [video_TranscriptionJob!]!
}

"""
aggregate fields of "video.TranscriptionJob"
"""
type video_TranscriptionJob_aggregate_fields {
    count(columns: [video_TranscriptionJob_select_column!], distinct: Boolean): Int!
    max: video_TranscriptionJob_max_fields
    min: video_TranscriptionJob_min_fields
}

"""
Boolean expression to filter rows from the table "video.TranscriptionJob". All fields are combined with a logical 'AND'.
"""
input video_TranscriptionJob_bool_exp {
    _and: [video_TranscriptionJob_bool_exp!]
    _not: video_TranscriptionJob_bool_exp
    _or: [video_TranscriptionJob_bool_exp!]
    awsTranscribeJobName: String_comparison_exp
    created_at: timestamptz_comparison_exp
    elementId: uuid_comparison_exp
    id: uuid_comparison_exp
    languageCode: String_comparison_exp
    transcriptionS3Url: String_comparison_exp
    updated_at: timestamptz_comparison_exp
    videoS3Url: String_comparison_exp
}

"""
unique or primary key constraints on table "video.TranscriptionJob"
"""
enum video_TranscriptionJob_constraint {
    """
    unique or primary key constraint
    """
    TranscriptionJob_awsTranscribeJobName_key
    """
    unique or primary key constraint
    """
    TranscriptionJob_pkey
}

"""
input type for inserting data into table "video.TranscriptionJob"
"""
input video_TranscriptionJob_insert_input {
    awsTranscribeJobName: String
    created_at: timestamptz
    elementId: uuid
    id: uuid
    languageCode: String
    transcriptionS3Url: String
    updated_at: timestamptz
    videoS3Url: String
}

"""
aggregate max on columns
"""
type video_TranscriptionJob_max_fields {
    awsTranscribeJobName: String
    created_at: timestamptz
    elementId: uuid
    id: uuid
    languageCode: String
    transcriptionS3Url: String
    updated_at: timestamptz
    videoS3Url: String
}

"""
aggregate min on columns
"""
type video_TranscriptionJob_min_fields {
    awsTranscribeJobName: String
    created_at: timestamptz
    elementId: uuid
    id: uuid
    languageCode: String
    transcriptionS3Url: String
    updated_at: timestamptz
    videoS3Url: String
}

"""
response of any mutation on the table "video.TranscriptionJob"
"""
type video_TranscriptionJob_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [video_TranscriptionJob!]!
}

"""
on conflict condition type for table "video.TranscriptionJob"
"""
input video_TranscriptionJob_on_conflict {
    constraint: video_TranscriptionJob_constraint!
    update_columns: [video_TranscriptionJob_update_column!]! = []
    where: video_TranscriptionJob_bool_exp
}

"""
Ordering options when selecting data from "video.TranscriptionJob".
"""
input video_TranscriptionJob_order_by {
    awsTranscribeJobName: order_by
    created_at: order_by
    elementId: order_by
    id: order_by
    languageCode: order_by
    transcriptionS3Url: order_by
    updated_at: order_by
    videoS3Url: order_by
}

"""
primary key columns input for table: video_TranscriptionJob
"""
input video_TranscriptionJob_pk_columns_input {
    id: uuid!
}

"""
select columns of table "video.TranscriptionJob"
"""
enum video_TranscriptionJob_select_column {
    """
    column name
    """
    awsTranscribeJobName
    """
    column name
    """
    created_at
    """
    column name
    """
    elementId
    """
    column name
    """
    id
    """
    column name
    """
    languageCode
    """
    column name
    """
    transcriptionS3Url
    """
    column name
    """
    updated_at
    """
    column name
    """
    videoS3Url
}

"""
input type for updating data in table "video.TranscriptionJob"
"""
input video_TranscriptionJob_set_input {
    awsTranscribeJobName: String
    created_at: timestamptz
    elementId: uuid
    id: uuid
    languageCode: String
    transcriptionS3Url: String
    updated_at: timestamptz
    videoS3Url: String
}

"""
update columns of table "video.TranscriptionJob"
"""
enum video_TranscriptionJob_update_column {
    """
    column name
    """
    awsTranscribeJobName
    """
    column name
    """
    created_at
    """
    column name
    """
    elementId
    """
    column name
    """
    id
    """
    column name
    """
    languageCode
    """
    column name
    """
    transcriptionS3Url
    """
    column name
    """
    updated_at
    """
    column name
    """
    videoS3Url
}

"""
columns and relationships of "video.VideoRenderJob"
"""
type video_VideoRenderJob {
    """
    An object relationship
    """
    conference: conference_Conference!
    conferenceId: uuid!
    """
    An object relationship
    """
    conferencePrepareJob: job_queues_PrepareJob!
    conferencePrepareJobId: uuid!
    created_at: timestamptz!
    data(
        """
        JSON select path
        """
        path: String
    ): jsonb!
    """
    An object relationship
    """
    element: content_Element
    elementId: uuid!
    id: uuid!
    """
    An object relationship
    """
    jobStatus: job_queues_JobStatus!
    jobStatusName: job_queues_JobStatus_enum!
    message: String
    retriesCount: Int!
    updated_at: timestamptz!
}

"""
aggregated selection of "video.VideoRenderJob"
"""
type video_VideoRenderJob_aggregate {
    aggregate: video_VideoRenderJob_aggregate_fields
    nodes: [video_VideoRenderJob!]!
}

"""
aggregate fields of "video.VideoRenderJob"
"""
type video_VideoRenderJob_aggregate_fields {
    avg: video_VideoRenderJob_avg_fields
    count(columns: [video_VideoRenderJob_select_column!], distinct: Boolean): Int!
    max: video_VideoRenderJob_max_fields
    min: video_VideoRenderJob_min_fields
    stddev: video_VideoRenderJob_stddev_fields
    stddev_pop: video_VideoRenderJob_stddev_pop_fields
    stddev_samp: video_VideoRenderJob_stddev_samp_fields
    sum: video_VideoRenderJob_sum_fields
    var_pop: video_VideoRenderJob_var_pop_fields
    var_samp: video_VideoRenderJob_var_samp_fields
    variance: video_VideoRenderJob_variance_fields
}

"""
order by aggregate values of table "video.VideoRenderJob"
"""
input video_VideoRenderJob_aggregate_order_by {
    avg: video_VideoRenderJob_avg_order_by
    count: order_by
    max: video_VideoRenderJob_max_order_by
    min: video_VideoRenderJob_min_order_by
    stddev: video_VideoRenderJob_stddev_order_by
    stddev_pop: video_VideoRenderJob_stddev_pop_order_by
    stddev_samp: video_VideoRenderJob_stddev_samp_order_by
    sum: video_VideoRenderJob_sum_order_by
    var_pop: video_VideoRenderJob_var_pop_order_by
    var_samp: video_VideoRenderJob_var_samp_order_by
    variance: video_VideoRenderJob_variance_order_by
}

"""
append existing jsonb value of filtered columns with new jsonb value
"""
input video_VideoRenderJob_append_input {
    data: jsonb
}

"""
input type for inserting array relation for remote table "video.VideoRenderJob"
"""
input video_VideoRenderJob_arr_rel_insert_input {
    data: [video_VideoRenderJob_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: video_VideoRenderJob_on_conflict
}

"""
aggregate avg on columns
"""
type video_VideoRenderJob_avg_fields {
    retriesCount: Float
}

"""
order by avg() on columns of table "video.VideoRenderJob"
"""
input video_VideoRenderJob_avg_order_by {
    retriesCount: order_by
}

"""
Boolean expression to filter rows from the table "video.VideoRenderJob". All fields are combined with a logical 'AND'.
"""
input video_VideoRenderJob_bool_exp {
    _and: [video_VideoRenderJob_bool_exp!]
    _not: video_VideoRenderJob_bool_exp
    _or: [video_VideoRenderJob_bool_exp!]
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    conferencePrepareJob: job_queues_PrepareJob_bool_exp
    conferencePrepareJobId: uuid_comparison_exp
    created_at: timestamptz_comparison_exp
    data: jsonb_comparison_exp
    element: content_Element_bool_exp
    elementId: uuid_comparison_exp
    id: uuid_comparison_exp
    jobStatus: job_queues_JobStatus_bool_exp
    jobStatusName: job_queues_JobStatus_enum_comparison_exp
    message: String_comparison_exp
    retriesCount: Int_comparison_exp
    updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "video.VideoRenderJob"
"""
enum video_VideoRenderJob_constraint {
    """
    unique or primary key constraint
    """
    VideoRenderJob_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input video_VideoRenderJob_delete_at_path_input {
    data: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input video_VideoRenderJob_delete_elem_input {
    data: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input video_VideoRenderJob_delete_key_input {
    data: String
}

"""
input type for incrementing numeric columns in table "video.VideoRenderJob"
"""
input video_VideoRenderJob_inc_input {
    retriesCount: Int
}

"""
input type for inserting data into table "video.VideoRenderJob"
"""
input video_VideoRenderJob_insert_input {
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    conferencePrepareJob: job_queues_PrepareJob_obj_rel_insert_input
    conferencePrepareJobId: uuid
    created_at: timestamptz
    data: jsonb
    element: content_Element_obj_rel_insert_input
    elementId: uuid
    id: uuid
    jobStatus: job_queues_JobStatus_obj_rel_insert_input
    jobStatusName: job_queues_JobStatus_enum
    message: String
    retriesCount: Int
    updated_at: timestamptz
}

"""
aggregate max on columns
"""
type video_VideoRenderJob_max_fields {
    conferenceId: uuid
    conferencePrepareJobId: uuid
    created_at: timestamptz
    elementId: uuid
    id: uuid
    message: String
    retriesCount: Int
    updated_at: timestamptz
}

"""
order by max() on columns of table "video.VideoRenderJob"
"""
input video_VideoRenderJob_max_order_by {
    conferenceId: order_by
    conferencePrepareJobId: order_by
    created_at: order_by
    elementId: order_by
    id: order_by
    message: order_by
    retriesCount: order_by
    updated_at: order_by
}

"""
aggregate min on columns
"""
type video_VideoRenderJob_min_fields {
    conferenceId: uuid
    conferencePrepareJobId: uuid
    created_at: timestamptz
    elementId: uuid
    id: uuid
    message: String
    retriesCount: Int
    updated_at: timestamptz
}

"""
order by min() on columns of table "video.VideoRenderJob"
"""
input video_VideoRenderJob_min_order_by {
    conferenceId: order_by
    conferencePrepareJobId: order_by
    created_at: order_by
    elementId: order_by
    id: order_by
    message: order_by
    retriesCount: order_by
    updated_at: order_by
}

"""
response of any mutation on the table "video.VideoRenderJob"
"""
type video_VideoRenderJob_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [video_VideoRenderJob!]!
}

"""
on conflict condition type for table "video.VideoRenderJob"
"""
input video_VideoRenderJob_on_conflict {
    constraint: video_VideoRenderJob_constraint!
    update_columns: [video_VideoRenderJob_update_column!]! = []
    where: video_VideoRenderJob_bool_exp
}

"""
Ordering options when selecting data from "video.VideoRenderJob".
"""
input video_VideoRenderJob_order_by {
    conference: conference_Conference_order_by
    conferenceId: order_by
    conferencePrepareJob: job_queues_PrepareJob_order_by
    conferencePrepareJobId: order_by
    created_at: order_by
    data: order_by
    element: content_Element_order_by
    elementId: order_by
    id: order_by
    jobStatus: job_queues_JobStatus_order_by
    jobStatusName: order_by
    message: order_by
    retriesCount: order_by
    updated_at: order_by
}

"""
primary key columns input for table: video_VideoRenderJob
"""
input video_VideoRenderJob_pk_columns_input {
    id: uuid!
}

"""
prepend existing jsonb value of filtered columns with new jsonb value
"""
input video_VideoRenderJob_prepend_input {
    data: jsonb
}

"""
select columns of table "video.VideoRenderJob"
"""
enum video_VideoRenderJob_select_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    conferencePrepareJobId
    """
    column name
    """
    created_at
    """
    column name
    """
    data
    """
    column name
    """
    elementId
    """
    column name
    """
    id
    """
    column name
    """
    jobStatusName
    """
    column name
    """
    message
    """
    column name
    """
    retriesCount
    """
    column name
    """
    updated_at
}

"""
input type for updating data in table "video.VideoRenderJob"
"""
input video_VideoRenderJob_set_input {
    conferenceId: uuid
    conferencePrepareJobId: uuid
    created_at: timestamptz
    data: jsonb
    elementId: uuid
    id: uuid
    jobStatusName: job_queues_JobStatus_enum
    message: String
    retriesCount: Int
    updated_at: timestamptz
}

"""
aggregate stddev on columns
"""
type video_VideoRenderJob_stddev_fields {
    retriesCount: Float
}

"""
order by stddev() on columns of table "video.VideoRenderJob"
"""
input video_VideoRenderJob_stddev_order_by {
    retriesCount: order_by
}

"""
aggregate stddev_pop on columns
"""
type video_VideoRenderJob_stddev_pop_fields {
    retriesCount: Float
}

"""
order by stddev_pop() on columns of table "video.VideoRenderJob"
"""
input video_VideoRenderJob_stddev_pop_order_by {
    retriesCount: order_by
}

"""
aggregate stddev_samp on columns
"""
type video_VideoRenderJob_stddev_samp_fields {
    retriesCount: Float
}

"""
order by stddev_samp() on columns of table "video.VideoRenderJob"
"""
input video_VideoRenderJob_stddev_samp_order_by {
    retriesCount: order_by
}

"""
aggregate sum on columns
"""
type video_VideoRenderJob_sum_fields {
    retriesCount: Int
}

"""
order by sum() on columns of table "video.VideoRenderJob"
"""
input video_VideoRenderJob_sum_order_by {
    retriesCount: order_by
}

"""
update columns of table "video.VideoRenderJob"
"""
enum video_VideoRenderJob_update_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    conferencePrepareJobId
    """
    column name
    """
    created_at
    """
    column name
    """
    data
    """
    column name
    """
    elementId
    """
    column name
    """
    id
    """
    column name
    """
    jobStatusName
    """
    column name
    """
    message
    """
    column name
    """
    retriesCount
    """
    column name
    """
    updated_at
}

"""
aggregate var_pop on columns
"""
type video_VideoRenderJob_var_pop_fields {
    retriesCount: Float
}

"""
order by var_pop() on columns of table "video.VideoRenderJob"
"""
input video_VideoRenderJob_var_pop_order_by {
    retriesCount: order_by
}

"""
aggregate var_samp on columns
"""
type video_VideoRenderJob_var_samp_fields {
    retriesCount: Float
}

"""
order by var_samp() on columns of table "video.VideoRenderJob"
"""
input video_VideoRenderJob_var_samp_order_by {
    retriesCount: order_by
}

"""
aggregate variance on columns
"""
type video_VideoRenderJob_variance_fields {
    retriesCount: Float
}

"""
order by variance() on columns of table "video.VideoRenderJob"
"""
input video_VideoRenderJob_variance_order_by {
    retriesCount: order_by
}

"""
Current streams in Vonage sessions.


columns and relationships of "video.VonageParticipantStream"
"""
type video_VonageParticipantStream {
    """
    An object relationship
    """
    conference: conference_Conference!
    conferenceId: uuid!
    createdAt: timestamptz!
    """
    A computed field, executes function "video.VonageParticipantStream_durationSeconds"
    """
    durationSeconds: bigint
    """
    An object relationship
    """
    eventVonageSession: video_EventVonageSession
    id: uuid!
    """
    An object relationship
    """
    registrant: registrant_Registrant!
    registrantId: uuid!
    stopped_at: timestamptz
    subconferenceId: uuid
    updatedAt: timestamptz!
    vonageConnectionId: String!
    vonageSessionId: String!
    vonageStreamId: String!
    vonageStreamType: String!
}

"""
aggregated selection of "video.VonageParticipantStream"
"""
type video_VonageParticipantStream_aggregate {
    aggregate: video_VonageParticipantStream_aggregate_fields
    nodes: [video_VonageParticipantStream!]!
}

"""
aggregate fields of "video.VonageParticipantStream"
"""
type video_VonageParticipantStream_aggregate_fields {
    count(columns: [video_VonageParticipantStream_select_column!], distinct: Boolean): Int!
    max: video_VonageParticipantStream_max_fields
    min: video_VonageParticipantStream_min_fields
}

"""
order by aggregate values of table "video.VonageParticipantStream"
"""
input video_VonageParticipantStream_aggregate_order_by {
    count: order_by
    max: video_VonageParticipantStream_max_order_by
    min: video_VonageParticipantStream_min_order_by
}

"""
input type for inserting array relation for remote table "video.VonageParticipantStream"
"""
input video_VonageParticipantStream_arr_rel_insert_input {
    data: [video_VonageParticipantStream_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: video_VonageParticipantStream_on_conflict
}

"""
Boolean expression to filter rows from the table "video.VonageParticipantStream". All fields are combined with a logical 'AND'.
"""
input video_VonageParticipantStream_bool_exp {
    _and: [video_VonageParticipantStream_bool_exp!]
    _not: video_VonageParticipantStream_bool_exp
    _or: [video_VonageParticipantStream_bool_exp!]
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    createdAt: timestamptz_comparison_exp
    durationSeconds: bigint_comparison_exp
    eventVonageSession: video_EventVonageSession_bool_exp
    id: uuid_comparison_exp
    registrant: registrant_Registrant_bool_exp
    registrantId: uuid_comparison_exp
    stopped_at: timestamptz_comparison_exp
    subconferenceId: uuid_comparison_exp
    updatedAt: timestamptz_comparison_exp
    vonageConnectionId: String_comparison_exp
    vonageSessionId: String_comparison_exp
    vonageStreamId: String_comparison_exp
    vonageStreamType: String_comparison_exp
}

"""
unique or primary key constraints on table "video.VonageParticipantStream"
"""
enum video_VonageParticipantStream_constraint {
    """
    unique or primary key constraint
    """
    EventParticipantStream_pkey
}

"""
input type for inserting data into table "video.VonageParticipantStream"
"""
input video_VonageParticipantStream_insert_input {
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    createdAt: timestamptz
    eventVonageSession: video_EventVonageSession_obj_rel_insert_input
    id: uuid
    registrant: registrant_Registrant_obj_rel_insert_input
    registrantId: uuid
    stopped_at: timestamptz
    subconferenceId: uuid
    updatedAt: timestamptz
    vonageConnectionId: String
    vonageSessionId: String
    vonageStreamId: String
    vonageStreamType: String
}

"""
aggregate max on columns
"""
type video_VonageParticipantStream_max_fields {
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    registrantId: uuid
    stopped_at: timestamptz
    subconferenceId: uuid
    updatedAt: timestamptz
    vonageConnectionId: String
    vonageSessionId: String
    vonageStreamId: String
    vonageStreamType: String
}

"""
order by max() on columns of table "video.VonageParticipantStream"
"""
input video_VonageParticipantStream_max_order_by {
    conferenceId: order_by
    createdAt: order_by
    id: order_by
    registrantId: order_by
    stopped_at: order_by
    subconferenceId: order_by
    updatedAt: order_by
    vonageConnectionId: order_by
    vonageSessionId: order_by
    vonageStreamId: order_by
    vonageStreamType: order_by
}

"""
aggregate min on columns
"""
type video_VonageParticipantStream_min_fields {
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    registrantId: uuid
    stopped_at: timestamptz
    subconferenceId: uuid
    updatedAt: timestamptz
    vonageConnectionId: String
    vonageSessionId: String
    vonageStreamId: String
    vonageStreamType: String
}

"""
order by min() on columns of table "video.VonageParticipantStream"
"""
input video_VonageParticipantStream_min_order_by {
    conferenceId: order_by
    createdAt: order_by
    id: order_by
    registrantId: order_by
    stopped_at: order_by
    subconferenceId: order_by
    updatedAt: order_by
    vonageConnectionId: order_by
    vonageSessionId: order_by
    vonageStreamId: order_by
    vonageStreamType: order_by
}

"""
response of any mutation on the table "video.VonageParticipantStream"
"""
type video_VonageParticipantStream_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [video_VonageParticipantStream!]!
}

"""
on conflict condition type for table "video.VonageParticipantStream"
"""
input video_VonageParticipantStream_on_conflict {
    constraint: video_VonageParticipantStream_constraint!
    update_columns: [video_VonageParticipantStream_update_column!]! = []
    where: video_VonageParticipantStream_bool_exp
}

"""
Ordering options when selecting data from "video.VonageParticipantStream".
"""
input video_VonageParticipantStream_order_by {
    conference: conference_Conference_order_by
    conferenceId: order_by
    createdAt: order_by
    durationSeconds: order_by
    eventVonageSession: video_EventVonageSession_order_by
    id: order_by
    registrant: registrant_Registrant_order_by
    registrantId: order_by
    stopped_at: order_by
    subconferenceId: order_by
    updatedAt: order_by
    vonageConnectionId: order_by
    vonageSessionId: order_by
    vonageStreamId: order_by
    vonageStreamType: order_by
}

"""
primary key columns input for table: video_VonageParticipantStream
"""
input video_VonageParticipantStream_pk_columns_input {
    id: uuid!
}

"""
select columns of table "video.VonageParticipantStream"
"""
enum video_VonageParticipantStream_select_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    id
    """
    column name
    """
    registrantId
    """
    column name
    """
    stopped_at
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updatedAt
    """
    column name
    """
    vonageConnectionId
    """
    column name
    """
    vonageSessionId
    """
    column name
    """
    vonageStreamId
    """
    column name
    """
    vonageStreamType
}

"""
input type for updating data in table "video.VonageParticipantStream"
"""
input video_VonageParticipantStream_set_input {
    conferenceId: uuid
    createdAt: timestamptz
    id: uuid
    registrantId: uuid
    stopped_at: timestamptz
    subconferenceId: uuid
    updatedAt: timestamptz
    vonageConnectionId: String
    vonageSessionId: String
    vonageStreamId: String
    vonageStreamType: String
}

"""
update columns of table "video.VonageParticipantStream"
"""
enum video_VonageParticipantStream_update_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    id
    """
    column name
    """
    registrantId
    """
    column name
    """
    stopped_at
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updatedAt
    """
    column name
    """
    vonageConnectionId
    """
    column name
    """
    vonageSessionId
    """
    column name
    """
    vonageStreamId
    """
    column name
    """
    vonageStreamType
}

"""
columns and relationships of "video.VonageRoomRecording"
"""
type video_VonageRoomRecording {
    created_at: timestamptz!
    endedAt: timestamptz
    id: uuid!
    initiatedBy: uuid
    """
    An object relationship
    """
    initiator: registrant_Registrant
    """
    An object relationship
    """
    room: room_Room
    roomId: uuid
    s3Url: String
    """
    An array relationship
    """
    saves(
        """
        distinct select on columns
        """
        distinct_on: [registrant_SavedVonageRoomRecording_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_SavedVonageRoomRecording_order_by!]
        """
        filter the rows returned
        """
        where: registrant_SavedVonageRoomRecording_bool_exp
    ): [registrant_SavedVonageRoomRecording!]!
    """
    An aggregate relationship
    """
    saves_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [registrant_SavedVonageRoomRecording_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [registrant_SavedVonageRoomRecording_order_by!]
        """
        filter the rows returned
        """
        where: registrant_SavedVonageRoomRecording_bool_exp
    ): registrant_SavedVonageRoomRecording_aggregate!
    startedAt: timestamptz!
    updated_at: timestamptz!
    uploaded_at: timestamptz
    vonageSessionId: String!
}

"""
aggregated selection of "video.VonageRoomRecording"
"""
type video_VonageRoomRecording_aggregate {
    aggregate: video_VonageRoomRecording_aggregate_fields
    nodes: [video_VonageRoomRecording!]!
}

"""
aggregate fields of "video.VonageRoomRecording"
"""
type video_VonageRoomRecording_aggregate_fields {
    count(columns: [video_VonageRoomRecording_select_column!], distinct: Boolean): Int!
    max: video_VonageRoomRecording_max_fields
    min: video_VonageRoomRecording_min_fields
}

"""
order by aggregate values of table "video.VonageRoomRecording"
"""
input video_VonageRoomRecording_aggregate_order_by {
    count: order_by
    max: video_VonageRoomRecording_max_order_by
    min: video_VonageRoomRecording_min_order_by
}

"""
input type for inserting array relation for remote table "video.VonageRoomRecording"
"""
input video_VonageRoomRecording_arr_rel_insert_input {
    data: [video_VonageRoomRecording_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: video_VonageRoomRecording_on_conflict
}

"""
Boolean expression to filter rows from the table "video.VonageRoomRecording". All fields are combined with a logical 'AND'.
"""
input video_VonageRoomRecording_bool_exp {
    _and: [video_VonageRoomRecording_bool_exp!]
    _not: video_VonageRoomRecording_bool_exp
    _or: [video_VonageRoomRecording_bool_exp!]
    created_at: timestamptz_comparison_exp
    endedAt: timestamptz_comparison_exp
    id: uuid_comparison_exp
    initiatedBy: uuid_comparison_exp
    initiator: registrant_Registrant_bool_exp
    room: room_Room_bool_exp
    roomId: uuid_comparison_exp
    s3Url: String_comparison_exp
    saves: registrant_SavedVonageRoomRecording_bool_exp
    startedAt: timestamptz_comparison_exp
    updated_at: timestamptz_comparison_exp
    uploaded_at: timestamptz_comparison_exp
    vonageSessionId: String_comparison_exp
}

"""
unique or primary key constraints on table "video.VonageRoomRecording"
"""
enum video_VonageRoomRecording_constraint {
    """
    unique or primary key constraint
    """
    VonageRoomRecording_pkey
}

"""
input type for inserting data into table "video.VonageRoomRecording"
"""
input video_VonageRoomRecording_insert_input {
    created_at: timestamptz
    endedAt: timestamptz
    id: uuid
    initiatedBy: uuid
    initiator: registrant_Registrant_obj_rel_insert_input
    room: room_Room_obj_rel_insert_input
    roomId: uuid
    s3Url: String
    saves: registrant_SavedVonageRoomRecording_arr_rel_insert_input
    startedAt: timestamptz
    updated_at: timestamptz
    uploaded_at: timestamptz
    vonageSessionId: String
}

"""
aggregate max on columns
"""
type video_VonageRoomRecording_max_fields {
    created_at: timestamptz
    endedAt: timestamptz
    id: uuid
    initiatedBy: uuid
    roomId: uuid
    s3Url: String
    startedAt: timestamptz
    updated_at: timestamptz
    uploaded_at: timestamptz
    vonageSessionId: String
}

"""
order by max() on columns of table "video.VonageRoomRecording"
"""
input video_VonageRoomRecording_max_order_by {
    created_at: order_by
    endedAt: order_by
    id: order_by
    initiatedBy: order_by
    roomId: order_by
    s3Url: order_by
    startedAt: order_by
    updated_at: order_by
    uploaded_at: order_by
    vonageSessionId: order_by
}

"""
aggregate min on columns
"""
type video_VonageRoomRecording_min_fields {
    created_at: timestamptz
    endedAt: timestamptz
    id: uuid
    initiatedBy: uuid
    roomId: uuid
    s3Url: String
    startedAt: timestamptz
    updated_at: timestamptz
    uploaded_at: timestamptz
    vonageSessionId: String
}

"""
order by min() on columns of table "video.VonageRoomRecording"
"""
input video_VonageRoomRecording_min_order_by {
    created_at: order_by
    endedAt: order_by
    id: order_by
    initiatedBy: order_by
    roomId: order_by
    s3Url: order_by
    startedAt: order_by
    updated_at: order_by
    uploaded_at: order_by
    vonageSessionId: order_by
}

"""
response of any mutation on the table "video.VonageRoomRecording"
"""
type video_VonageRoomRecording_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [video_VonageRoomRecording!]!
}

"""
input type for inserting object relation for remote table "video.VonageRoomRecording"
"""
input video_VonageRoomRecording_obj_rel_insert_input {
    data: video_VonageRoomRecording_insert_input!
    """
    on conflict condition
    """
    on_conflict: video_VonageRoomRecording_on_conflict
}

"""
on conflict condition type for table "video.VonageRoomRecording"
"""
input video_VonageRoomRecording_on_conflict {
    constraint: video_VonageRoomRecording_constraint!
    update_columns: [video_VonageRoomRecording_update_column!]! = []
    where: video_VonageRoomRecording_bool_exp
}

"""
Ordering options when selecting data from "video.VonageRoomRecording".
"""
input video_VonageRoomRecording_order_by {
    created_at: order_by
    endedAt: order_by
    id: order_by
    initiatedBy: order_by
    initiator: registrant_Registrant_order_by
    room: room_Room_order_by
    roomId: order_by
    s3Url: order_by
    saves_aggregate: registrant_SavedVonageRoomRecording_aggregate_order_by
    startedAt: order_by
    updated_at: order_by
    uploaded_at: order_by
    vonageSessionId: order_by
}

"""
primary key columns input for table: video_VonageRoomRecording
"""
input video_VonageRoomRecording_pk_columns_input {
    id: uuid!
}

"""
select columns of table "video.VonageRoomRecording"
"""
enum video_VonageRoomRecording_select_column {
    """
    column name
    """
    created_at
    """
    column name
    """
    endedAt
    """
    column name
    """
    id
    """
    column name
    """
    initiatedBy
    """
    column name
    """
    roomId
    """
    column name
    """
    s3Url
    """
    column name
    """
    startedAt
    """
    column name
    """
    updated_at
    """
    column name
    """
    uploaded_at
    """
    column name
    """
    vonageSessionId
}

"""
input type for updating data in table "video.VonageRoomRecording"
"""
input video_VonageRoomRecording_set_input {
    created_at: timestamptz
    endedAt: timestamptz
    id: uuid
    initiatedBy: uuid
    roomId: uuid
    s3Url: String
    startedAt: timestamptz
    updated_at: timestamptz
    uploaded_at: timestamptz
    vonageSessionId: String
}

"""
update columns of table "video.VonageRoomRecording"
"""
enum video_VonageRoomRecording_update_column {
    """
    column name
    """
    created_at
    """
    column name
    """
    endedAt
    """
    column name
    """
    id
    """
    column name
    """
    initiatedBy
    """
    column name
    """
    roomId
    """
    column name
    """
    s3Url
    """
    column name
    """
    startedAt
    """
    column name
    """
    updated_at
    """
    column name
    """
    uploaded_at
    """
    column name
    """
    vonageSessionId
}

"""
columns and relationships of "video.VonageSessionLayout"
"""
type video_VonageSessionLayout {
    """
    An object relationship
    """
    conference: conference_Conference!
    conferenceId: uuid!
    created_at: timestamptz!
    """
    An object relationship
    """
    eventVonageSession: video_EventVonageSession
    id: uuid!
    layoutData(
        """
        JSON select path
        """
        path: String
    ): jsonb
    """
    An array relationship
    """
    rooms(
        """
        distinct select on columns
        """
        distinct_on: [room_Room_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_Room_order_by!]
        """
        filter the rows returned
        """
        where: room_Room_bool_exp
    ): [room_Room!]!
    """
    An aggregate relationship
    """
    rooms_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_Room_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_Room_order_by!]
        """
        filter the rows returned
        """
        where: room_Room_bool_exp
    ): room_Room_aggregate!
    subconferenceId: uuid
    updated_at: timestamptz!
    vonageSessionId: String!
}

"""
aggregated selection of "video.VonageSessionLayout"
"""
type video_VonageSessionLayout_aggregate {
    aggregate: video_VonageSessionLayout_aggregate_fields
    nodes: [video_VonageSessionLayout!]!
}

"""
aggregate fields of "video.VonageSessionLayout"
"""
type video_VonageSessionLayout_aggregate_fields {
    count(columns: [video_VonageSessionLayout_select_column!], distinct: Boolean): Int!
    max: video_VonageSessionLayout_max_fields
    min: video_VonageSessionLayout_min_fields
}

"""
order by aggregate values of table "video.VonageSessionLayout"
"""
input video_VonageSessionLayout_aggregate_order_by {
    count: order_by
    max: video_VonageSessionLayout_max_order_by
    min: video_VonageSessionLayout_min_order_by
}

"""
append existing jsonb value of filtered columns with new jsonb value
"""
input video_VonageSessionLayout_append_input {
    layoutData: jsonb
}

"""
input type for inserting array relation for remote table "video.VonageSessionLayout"
"""
input video_VonageSessionLayout_arr_rel_insert_input {
    data: [video_VonageSessionLayout_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: video_VonageSessionLayout_on_conflict
}

"""
Boolean expression to filter rows from the table "video.VonageSessionLayout". All fields are combined with a logical 'AND'.
"""
input video_VonageSessionLayout_bool_exp {
    _and: [video_VonageSessionLayout_bool_exp!]
    _not: video_VonageSessionLayout_bool_exp
    _or: [video_VonageSessionLayout_bool_exp!]
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    created_at: timestamptz_comparison_exp
    eventVonageSession: video_EventVonageSession_bool_exp
    id: uuid_comparison_exp
    layoutData: jsonb_comparison_exp
    rooms: room_Room_bool_exp
    subconferenceId: uuid_comparison_exp
    updated_at: timestamptz_comparison_exp
    vonageSessionId: String_comparison_exp
}

"""
unique or primary key constraints on table "video.VonageSessionLayout"
"""
enum video_VonageSessionLayout_constraint {
    """
    unique or primary key constraint
    """
    VonageSessionLayout_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input video_VonageSessionLayout_delete_at_path_input {
    layoutData: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input video_VonageSessionLayout_delete_elem_input {
    layoutData: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input video_VonageSessionLayout_delete_key_input {
    layoutData: String
}

"""
input type for inserting data into table "video.VonageSessionLayout"
"""
input video_VonageSessionLayout_insert_input {
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    created_at: timestamptz
    eventVonageSession: video_EventVonageSession_obj_rel_insert_input
    id: uuid
    layoutData: jsonb
    rooms: room_Room_arr_rel_insert_input
    subconferenceId: uuid
    updated_at: timestamptz
    vonageSessionId: String
}

"""
aggregate max on columns
"""
type video_VonageSessionLayout_max_fields {
    conferenceId: uuid
    created_at: timestamptz
    id: uuid
    subconferenceId: uuid
    updated_at: timestamptz
    vonageSessionId: String
}

"""
order by max() on columns of table "video.VonageSessionLayout"
"""
input video_VonageSessionLayout_max_order_by {
    conferenceId: order_by
    created_at: order_by
    id: order_by
    subconferenceId: order_by
    updated_at: order_by
    vonageSessionId: order_by
}

"""
aggregate min on columns
"""
type video_VonageSessionLayout_min_fields {
    conferenceId: uuid
    created_at: timestamptz
    id: uuid
    subconferenceId: uuid
    updated_at: timestamptz
    vonageSessionId: String
}

"""
order by min() on columns of table "video.VonageSessionLayout"
"""
input video_VonageSessionLayout_min_order_by {
    conferenceId: order_by
    created_at: order_by
    id: order_by
    subconferenceId: order_by
    updated_at: order_by
    vonageSessionId: order_by
}

"""
response of any mutation on the table "video.VonageSessionLayout"
"""
type video_VonageSessionLayout_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [video_VonageSessionLayout!]!
}

"""
input type for inserting object relation for remote table "video.VonageSessionLayout"
"""
input video_VonageSessionLayout_obj_rel_insert_input {
    data: video_VonageSessionLayout_insert_input!
    """
    on conflict condition
    """
    on_conflict: video_VonageSessionLayout_on_conflict
}

"""
on conflict condition type for table "video.VonageSessionLayout"
"""
input video_VonageSessionLayout_on_conflict {
    constraint: video_VonageSessionLayout_constraint!
    update_columns: [video_VonageSessionLayout_update_column!]! = []
    where: video_VonageSessionLayout_bool_exp
}

"""
Ordering options when selecting data from "video.VonageSessionLayout".
"""
input video_VonageSessionLayout_order_by {
    conference: conference_Conference_order_by
    conferenceId: order_by
    created_at: order_by
    eventVonageSession: video_EventVonageSession_order_by
    id: order_by
    layoutData: order_by
    rooms_aggregate: room_Room_aggregate_order_by
    subconferenceId: order_by
    updated_at: order_by
    vonageSessionId: order_by
}

"""
primary key columns input for table: video_VonageSessionLayout
"""
input video_VonageSessionLayout_pk_columns_input {
    id: uuid!
}

"""
prepend existing jsonb value of filtered columns with new jsonb value
"""
input video_VonageSessionLayout_prepend_input {
    layoutData: jsonb
}

"""
select columns of table "video.VonageSessionLayout"
"""
enum video_VonageSessionLayout_select_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    created_at
    """
    column name
    """
    id
    """
    column name
    """
    layoutData
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updated_at
    """
    column name
    """
    vonageSessionId
}

"""
input type for updating data in table "video.VonageSessionLayout"
"""
input video_VonageSessionLayout_set_input {
    conferenceId: uuid
    created_at: timestamptz
    id: uuid
    layoutData: jsonb
    subconferenceId: uuid
    updated_at: timestamptz
    vonageSessionId: String
}

"""
update columns of table "video.VonageSessionLayout"
"""
enum video_VonageSessionLayout_update_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    created_at
    """
    column name
    """
    id
    """
    column name
    """
    layoutData
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updated_at
    """
    column name
    """
    vonageSessionId
}

"""
columns and relationships of "video.VonageVideoPlaybackCommand"
"""
type video_VonageVideoPlaybackCommand {
    command(
        """
        JSON select path
        """
        path: String
    ): jsonb!
    """
    An object relationship
    """
    conference: conference_Conference!
    conferenceId: uuid!
    createdAt: timestamptz!
    createdByRegistrantId: uuid
    """
    An object relationship
    """
    eventVonageSession: video_EventVonageSession
    id: uuid!
    """
    An object relationship
    """
    registrant: registrant_Registrant
    """
    An array relationship
    """
    rooms(
        """
        distinct select on columns
        """
        distinct_on: [room_Room_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_Room_order_by!]
        """
        filter the rows returned
        """
        where: room_Room_bool_exp
    ): [room_Room!]!
    """
    An aggregate relationship
    """
    rooms_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [room_Room_select_column!]
        """
        limit the number of rows returned
        """
        limit: Int
        """
        skip the first n rows. Use only with order_by
        """
        offset: Int
        """
        sort the rows by one or more columns
        """
        order_by: [room_Room_order_by!]
        """
        filter the rows returned
        """
        where: room_Room_bool_exp
    ): room_Room_aggregate!
    """
    An object relationship
    """
    subconference: conference_Subconference
    subconferenceId: uuid
    updatedAt: timestamptz!
    vonageSessionId: String!
}

"""
aggregated selection of "video.VonageVideoPlaybackCommand"
"""
type video_VonageVideoPlaybackCommand_aggregate {
    aggregate: video_VonageVideoPlaybackCommand_aggregate_fields
    nodes: [video_VonageVideoPlaybackCommand!]!
}

"""
aggregate fields of "video.VonageVideoPlaybackCommand"
"""
type video_VonageVideoPlaybackCommand_aggregate_fields {
    count(columns: [video_VonageVideoPlaybackCommand_select_column!], distinct: Boolean): Int!
    max: video_VonageVideoPlaybackCommand_max_fields
    min: video_VonageVideoPlaybackCommand_min_fields
}

"""
append existing jsonb value of filtered columns with new jsonb value
"""
input video_VonageVideoPlaybackCommand_append_input {
    command: jsonb
}

"""
Boolean expression to filter rows from the table "video.VonageVideoPlaybackCommand". All fields are combined with a logical 'AND'.
"""
input video_VonageVideoPlaybackCommand_bool_exp {
    _and: [video_VonageVideoPlaybackCommand_bool_exp!]
    _not: video_VonageVideoPlaybackCommand_bool_exp
    _or: [video_VonageVideoPlaybackCommand_bool_exp!]
    command: jsonb_comparison_exp
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    createdAt: timestamptz_comparison_exp
    createdByRegistrantId: uuid_comparison_exp
    eventVonageSession: video_EventVonageSession_bool_exp
    id: uuid_comparison_exp
    registrant: registrant_Registrant_bool_exp
    rooms: room_Room_bool_exp
    subconference: conference_Subconference_bool_exp
    subconferenceId: uuid_comparison_exp
    updatedAt: timestamptz_comparison_exp
    vonageSessionId: String_comparison_exp
}

"""
unique or primary key constraints on table "video.VonageVideoPlaybackCommand"
"""
enum video_VonageVideoPlaybackCommand_constraint {
    """
    unique or primary key constraint
    """
    VonageVideoPlaybackCommand_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input video_VonageVideoPlaybackCommand_delete_at_path_input {
    command: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input video_VonageVideoPlaybackCommand_delete_elem_input {
    command: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input video_VonageVideoPlaybackCommand_delete_key_input {
    command: String
}

"""
input type for inserting data into table "video.VonageVideoPlaybackCommand"
"""
input video_VonageVideoPlaybackCommand_insert_input {
    command: jsonb
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    createdAt: timestamptz
    createdByRegistrantId: uuid
    eventVonageSession: video_EventVonageSession_obj_rel_insert_input
    id: uuid
    registrant: registrant_Registrant_obj_rel_insert_input
    rooms: room_Room_arr_rel_insert_input
    subconference: conference_Subconference_obj_rel_insert_input
    subconferenceId: uuid
    updatedAt: timestamptz
    vonageSessionId: String
}

"""
aggregate max on columns
"""
type video_VonageVideoPlaybackCommand_max_fields {
    conferenceId: uuid
    createdAt: timestamptz
    createdByRegistrantId: uuid
    id: uuid
    subconferenceId: uuid
    updatedAt: timestamptz
    vonageSessionId: String
}

"""
aggregate min on columns
"""
type video_VonageVideoPlaybackCommand_min_fields {
    conferenceId: uuid
    createdAt: timestamptz
    createdByRegistrantId: uuid
    id: uuid
    subconferenceId: uuid
    updatedAt: timestamptz
    vonageSessionId: String
}

"""
response of any mutation on the table "video.VonageVideoPlaybackCommand"
"""
type video_VonageVideoPlaybackCommand_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [video_VonageVideoPlaybackCommand!]!
}

"""
on conflict condition type for table "video.VonageVideoPlaybackCommand"
"""
input video_VonageVideoPlaybackCommand_on_conflict {
    constraint: video_VonageVideoPlaybackCommand_constraint!
    update_columns: [video_VonageVideoPlaybackCommand_update_column!]! = []
    where: video_VonageVideoPlaybackCommand_bool_exp
}

"""
Ordering options when selecting data from "video.VonageVideoPlaybackCommand".
"""
input video_VonageVideoPlaybackCommand_order_by {
    command: order_by
    conference: conference_Conference_order_by
    conferenceId: order_by
    createdAt: order_by
    createdByRegistrantId: order_by
    eventVonageSession: video_EventVonageSession_order_by
    id: order_by
    registrant: registrant_Registrant_order_by
    rooms_aggregate: room_Room_aggregate_order_by
    subconference: conference_Subconference_order_by
    subconferenceId: order_by
    updatedAt: order_by
    vonageSessionId: order_by
}

"""
primary key columns input for table: video_VonageVideoPlaybackCommand
"""
input video_VonageVideoPlaybackCommand_pk_columns_input {
    id: uuid!
}

"""
prepend existing jsonb value of filtered columns with new jsonb value
"""
input video_VonageVideoPlaybackCommand_prepend_input {
    command: jsonb
}

"""
select columns of table "video.VonageVideoPlaybackCommand"
"""
enum video_VonageVideoPlaybackCommand_select_column {
    """
    column name
    """
    command
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    createdByRegistrantId
    """
    column name
    """
    id
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updatedAt
    """
    column name
    """
    vonageSessionId
}

"""
input type for updating data in table "video.VonageVideoPlaybackCommand"
"""
input video_VonageVideoPlaybackCommand_set_input {
    command: jsonb
    conferenceId: uuid
    createdAt: timestamptz
    createdByRegistrantId: uuid
    id: uuid
    subconferenceId: uuid
    updatedAt: timestamptz
    vonageSessionId: String
}

"""
update columns of table "video.VonageVideoPlaybackCommand"
"""
enum video_VonageVideoPlaybackCommand_update_column {
    """
    column name
    """
    command
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    createdByRegistrantId
    """
    column name
    """
    id
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updatedAt
    """
    column name
    """
    vonageSessionId
}

"""
columns and relationships of "video.YouTubeUpload"
"""
type video_YouTubeUpload {
    """
    An object relationship
    """
    conference: conference_Conference!
    conferenceId: uuid!
    createdAt: timestamptz!
    """
    An object relationship
    """
    element: content_Element
    elementId: uuid
    id: uuid!
    subconferenceId: uuid
    updatedAt: timestamptz!
    uploadYouTubeVideoJobId: uuid
    videoId: String!
    videoPrivacyStatus: String!
    videoStatus: String!
    videoTitle: String!
}

"""
aggregated selection of "video.YouTubeUpload"
"""
type video_YouTubeUpload_aggregate {
    aggregate: video_YouTubeUpload_aggregate_fields
    nodes: [video_YouTubeUpload!]!
}

"""
aggregate fields of "video.YouTubeUpload"
"""
type video_YouTubeUpload_aggregate_fields {
    count(columns: [video_YouTubeUpload_select_column!], distinct: Boolean): Int!
    max: video_YouTubeUpload_max_fields
    min: video_YouTubeUpload_min_fields
}

"""
order by aggregate values of table "video.YouTubeUpload"
"""
input video_YouTubeUpload_aggregate_order_by {
    count: order_by
    max: video_YouTubeUpload_max_order_by
    min: video_YouTubeUpload_min_order_by
}

"""
input type for inserting array relation for remote table "video.YouTubeUpload"
"""
input video_YouTubeUpload_arr_rel_insert_input {
    data: [video_YouTubeUpload_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: video_YouTubeUpload_on_conflict
}

"""
Boolean expression to filter rows from the table "video.YouTubeUpload". All fields are combined with a logical 'AND'.
"""
input video_YouTubeUpload_bool_exp {
    _and: [video_YouTubeUpload_bool_exp!]
    _not: video_YouTubeUpload_bool_exp
    _or: [video_YouTubeUpload_bool_exp!]
    conference: conference_Conference_bool_exp
    conferenceId: uuid_comparison_exp
    createdAt: timestamptz_comparison_exp
    element: content_Element_bool_exp
    elementId: uuid_comparison_exp
    id: uuid_comparison_exp
    subconferenceId: uuid_comparison_exp
    updatedAt: timestamptz_comparison_exp
    uploadYouTubeVideoJobId: uuid_comparison_exp
    videoId: String_comparison_exp
    videoPrivacyStatus: String_comparison_exp
    videoStatus: String_comparison_exp
    videoTitle: String_comparison_exp
}

"""
unique or primary key constraints on table "video.YouTubeUpload"
"""
enum video_YouTubeUpload_constraint {
    """
    unique or primary key constraint
    """
    YouTubeUpload_pkey
    """
    unique or primary key constraint
    """
    YouTubeUpload_videoId_key
}

"""
input type for inserting data into table "video.YouTubeUpload"
"""
input video_YouTubeUpload_insert_input {
    conference: conference_Conference_obj_rel_insert_input
    conferenceId: uuid
    createdAt: timestamptz
    element: content_Element_obj_rel_insert_input
    elementId: uuid
    id: uuid
    subconferenceId: uuid
    updatedAt: timestamptz
    uploadYouTubeVideoJobId: uuid
    videoId: String
    videoPrivacyStatus: String
    videoStatus: String
    videoTitle: String
}

"""
aggregate max on columns
"""
type video_YouTubeUpload_max_fields {
    conferenceId: uuid
    createdAt: timestamptz
    elementId: uuid
    id: uuid
    subconferenceId: uuid
    updatedAt: timestamptz
    uploadYouTubeVideoJobId: uuid
    videoId: String
    videoPrivacyStatus: String
    videoStatus: String
    videoTitle: String
}

"""
order by max() on columns of table "video.YouTubeUpload"
"""
input video_YouTubeUpload_max_order_by {
    conferenceId: order_by
    createdAt: order_by
    elementId: order_by
    id: order_by
    subconferenceId: order_by
    updatedAt: order_by
    uploadYouTubeVideoJobId: order_by
    videoId: order_by
    videoPrivacyStatus: order_by
    videoStatus: order_by
    videoTitle: order_by
}

"""
aggregate min on columns
"""
type video_YouTubeUpload_min_fields {
    conferenceId: uuid
    createdAt: timestamptz
    elementId: uuid
    id: uuid
    subconferenceId: uuid
    updatedAt: timestamptz
    uploadYouTubeVideoJobId: uuid
    videoId: String
    videoPrivacyStatus: String
    videoStatus: String
    videoTitle: String
}

"""
order by min() on columns of table "video.YouTubeUpload"
"""
input video_YouTubeUpload_min_order_by {
    conferenceId: order_by
    createdAt: order_by
    elementId: order_by
    id: order_by
    subconferenceId: order_by
    updatedAt: order_by
    uploadYouTubeVideoJobId: order_by
    videoId: order_by
    videoPrivacyStatus: order_by
    videoStatus: order_by
    videoTitle: order_by
}

"""
response of any mutation on the table "video.YouTubeUpload"
"""
type video_YouTubeUpload_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!
    """
    data from the rows affected by the mutation
    """
    returning: [video_YouTubeUpload!]!
}

"""
on conflict condition type for table "video.YouTubeUpload"
"""
input video_YouTubeUpload_on_conflict {
    constraint: video_YouTubeUpload_constraint!
    update_columns: [video_YouTubeUpload_update_column!]! = []
    where: video_YouTubeUpload_bool_exp
}

"""
Ordering options when selecting data from "video.YouTubeUpload".
"""
input video_YouTubeUpload_order_by {
    conference: conference_Conference_order_by
    conferenceId: order_by
    createdAt: order_by
    element: content_Element_order_by
    elementId: order_by
    id: order_by
    subconferenceId: order_by
    updatedAt: order_by
    uploadYouTubeVideoJobId: order_by
    videoId: order_by
    videoPrivacyStatus: order_by
    videoStatus: order_by
    videoTitle: order_by
}

"""
primary key columns input for table: video_YouTubeUpload
"""
input video_YouTubeUpload_pk_columns_input {
    id: uuid!
}

"""
select columns of table "video.YouTubeUpload"
"""
enum video_YouTubeUpload_select_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    elementId
    """
    column name
    """
    id
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updatedAt
    """
    column name
    """
    uploadYouTubeVideoJobId
    """
    column name
    """
    videoId
    """
    column name
    """
    videoPrivacyStatus
    """
    column name
    """
    videoStatus
    """
    column name
    """
    videoTitle
}

"""
input type for updating data in table "video.YouTubeUpload"
"""
input video_YouTubeUpload_set_input {
    conferenceId: uuid
    createdAt: timestamptz
    elementId: uuid
    id: uuid
    subconferenceId: uuid
    updatedAt: timestamptz
    uploadYouTubeVideoJobId: uuid
    videoId: String
    videoPrivacyStatus: String
    videoStatus: String
    videoTitle: String
}

"""
update columns of table "video.YouTubeUpload"
"""
enum video_YouTubeUpload_update_column {
    """
    column name
    """
    conferenceId
    """
    column name
    """
    createdAt
    """
    column name
    """
    elementId
    """
    column name
    """
    id
    """
    column name
    """
    subconferenceId
    """
    column name
    """
    updatedAt
    """
    column name
    """
    uploadYouTubeVideoJobId
    """
    column name
    """
    videoId
    """
    column name
    """
    videoPrivacyStatus
    """
    column name
    """
    videoStatus
    """
    column name
    """
    videoTitle
}
