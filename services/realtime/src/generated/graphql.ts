import { TypedDocumentNode as DocumentNode } from "@graphql-typed-document-node/core";
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
    bigint: any;
    jsonb: any;
    numeric: any;
    timestamptz: any;
    uuid: any;
};

/** Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'. */
export type Boolean_Comparison_Exp = {
    _eq?: Maybe<Scalars["Boolean"]>;
    _gt?: Maybe<Scalars["Boolean"]>;
    _gte?: Maybe<Scalars["Boolean"]>;
    _in?: Maybe<Array<Scalars["Boolean"]>>;
    _is_null?: Maybe<Scalars["Boolean"]>;
    _lt?: Maybe<Scalars["Boolean"]>;
    _lte?: Maybe<Scalars["Boolean"]>;
    _neq?: Maybe<Scalars["Boolean"]>;
    _nin?: Maybe<Array<Scalars["Boolean"]>>;
};

export type ConfirmInvitationOutput = {
    __typename?: "ConfirmInvitationOutput";
    confSlug?: Maybe<Scalars["String"]>;
    ok: Scalars["String"];
};

export type CreateItemRoomOutput = {
    __typename?: "CreateItemRoomOutput";
    message?: Maybe<Scalars["String"]>;
    /** An object relationship */
    room: Room_Room;
    roomId?: Maybe<Scalars["String"]>;
};

export type CreateRoomDmOutput = {
    __typename?: "CreateRoomDmOutput";
    chatId?: Maybe<Scalars["uuid"]>;
    message?: Maybe<Scalars["String"]>;
    /** An object relationship */
    room: Room_Room;
    roomId?: Maybe<Scalars["uuid"]>;
};

/** columns and relationships of "Email" */
export type Email = {
    __typename?: "Email";
    createdAt: Scalars["timestamptz"];
    emailAddress: Scalars["String"];
    htmlContents: Scalars["String"];
    id: Scalars["uuid"];
    /** An object relationship */
    invitation?: Maybe<Registrant_Invitation>;
    invitationId?: Maybe<Scalars["uuid"]>;
    plainTextContents: Scalars["String"];
    reason: Scalars["String"];
    recipientName?: Maybe<Scalars["String"]>;
    retriesCount: Scalars["Int"];
    sentAt?: Maybe<Scalars["timestamptz"]>;
    subject: Scalars["String"];
    updatedAt: Scalars["timestamptz"];
    /** An object relationship */
    user?: Maybe<User>;
    userId?: Maybe<Scalars["String"]>;
};

/** aggregated selection of "Email" */
export type Email_Aggregate = {
    __typename?: "Email_aggregate";
    aggregate?: Maybe<Email_Aggregate_Fields>;
    nodes: Array<Email>;
};

/** aggregate fields of "Email" */
export type Email_Aggregate_Fields = {
    __typename?: "Email_aggregate_fields";
    avg?: Maybe<Email_Avg_Fields>;
    count: Scalars["Int"];
    max?: Maybe<Email_Max_Fields>;
    min?: Maybe<Email_Min_Fields>;
    stddev?: Maybe<Email_Stddev_Fields>;
    stddev_pop?: Maybe<Email_Stddev_Pop_Fields>;
    stddev_samp?: Maybe<Email_Stddev_Samp_Fields>;
    sum?: Maybe<Email_Sum_Fields>;
    var_pop?: Maybe<Email_Var_Pop_Fields>;
    var_samp?: Maybe<Email_Var_Samp_Fields>;
    variance?: Maybe<Email_Variance_Fields>;
};

/** aggregate fields of "Email" */
export type Email_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Email_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "Email" */
export type Email_Aggregate_Order_By = {
    avg?: Maybe<Email_Avg_Order_By>;
    count?: Maybe<Order_By>;
    max?: Maybe<Email_Max_Order_By>;
    min?: Maybe<Email_Min_Order_By>;
    stddev?: Maybe<Email_Stddev_Order_By>;
    stddev_pop?: Maybe<Email_Stddev_Pop_Order_By>;
    stddev_samp?: Maybe<Email_Stddev_Samp_Order_By>;
    sum?: Maybe<Email_Sum_Order_By>;
    var_pop?: Maybe<Email_Var_Pop_Order_By>;
    var_samp?: Maybe<Email_Var_Samp_Order_By>;
    variance?: Maybe<Email_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "Email" */
export type Email_Arr_Rel_Insert_Input = {
    data: Array<Email_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Email_On_Conflict>;
};

/** aggregate avg on columns */
export type Email_Avg_Fields = {
    __typename?: "Email_avg_fields";
    retriesCount?: Maybe<Scalars["Float"]>;
};

/** order by avg() on columns of table "Email" */
export type Email_Avg_Order_By = {
    retriesCount?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "Email". All fields are combined with a logical 'AND'. */
export type Email_Bool_Exp = {
    _and?: Maybe<Array<Email_Bool_Exp>>;
    _not?: Maybe<Email_Bool_Exp>;
    _or?: Maybe<Array<Email_Bool_Exp>>;
    createdAt?: Maybe<Timestamptz_Comparison_Exp>;
    emailAddress?: Maybe<String_Comparison_Exp>;
    htmlContents?: Maybe<String_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    invitation?: Maybe<Registrant_Invitation_Bool_Exp>;
    invitationId?: Maybe<Uuid_Comparison_Exp>;
    plainTextContents?: Maybe<String_Comparison_Exp>;
    reason?: Maybe<String_Comparison_Exp>;
    recipientName?: Maybe<String_Comparison_Exp>;
    retriesCount?: Maybe<Int_Comparison_Exp>;
    sentAt?: Maybe<Timestamptz_Comparison_Exp>;
    subject?: Maybe<String_Comparison_Exp>;
    updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
    user?: Maybe<User_Bool_Exp>;
    userId?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "Email" */
export enum Email_Constraint {
    /** unique or primary key constraint */
    EmailPkey = "Email_pkey",
}

/** input type for incrementing numeric columns in table "Email" */
export type Email_Inc_Input = {
    retriesCount?: Maybe<Scalars["Int"]>;
};

/** input type for inserting data into table "Email" */
export type Email_Insert_Input = {
    createdAt?: Maybe<Scalars["timestamptz"]>;
    emailAddress?: Maybe<Scalars["String"]>;
    htmlContents?: Maybe<Scalars["String"]>;
    id?: Maybe<Scalars["uuid"]>;
    invitation?: Maybe<Registrant_Invitation_Obj_Rel_Insert_Input>;
    invitationId?: Maybe<Scalars["uuid"]>;
    plainTextContents?: Maybe<Scalars["String"]>;
    reason?: Maybe<Scalars["String"]>;
    recipientName?: Maybe<Scalars["String"]>;
    retriesCount?: Maybe<Scalars["Int"]>;
    sentAt?: Maybe<Scalars["timestamptz"]>;
    subject?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    user?: Maybe<User_Obj_Rel_Insert_Input>;
    userId?: Maybe<Scalars["String"]>;
};

/** aggregate max on columns */
export type Email_Max_Fields = {
    __typename?: "Email_max_fields";
    createdAt?: Maybe<Scalars["timestamptz"]>;
    emailAddress?: Maybe<Scalars["String"]>;
    htmlContents?: Maybe<Scalars["String"]>;
    id?: Maybe<Scalars["uuid"]>;
    invitationId?: Maybe<Scalars["uuid"]>;
    plainTextContents?: Maybe<Scalars["String"]>;
    reason?: Maybe<Scalars["String"]>;
    recipientName?: Maybe<Scalars["String"]>;
    retriesCount?: Maybe<Scalars["Int"]>;
    sentAt?: Maybe<Scalars["timestamptz"]>;
    subject?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    userId?: Maybe<Scalars["String"]>;
};

/** order by max() on columns of table "Email" */
export type Email_Max_Order_By = {
    createdAt?: Maybe<Order_By>;
    emailAddress?: Maybe<Order_By>;
    htmlContents?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    invitationId?: Maybe<Order_By>;
    plainTextContents?: Maybe<Order_By>;
    reason?: Maybe<Order_By>;
    recipientName?: Maybe<Order_By>;
    retriesCount?: Maybe<Order_By>;
    sentAt?: Maybe<Order_By>;
    subject?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
    userId?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Email_Min_Fields = {
    __typename?: "Email_min_fields";
    createdAt?: Maybe<Scalars["timestamptz"]>;
    emailAddress?: Maybe<Scalars["String"]>;
    htmlContents?: Maybe<Scalars["String"]>;
    id?: Maybe<Scalars["uuid"]>;
    invitationId?: Maybe<Scalars["uuid"]>;
    plainTextContents?: Maybe<Scalars["String"]>;
    reason?: Maybe<Scalars["String"]>;
    recipientName?: Maybe<Scalars["String"]>;
    retriesCount?: Maybe<Scalars["Int"]>;
    sentAt?: Maybe<Scalars["timestamptz"]>;
    subject?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    userId?: Maybe<Scalars["String"]>;
};

/** order by min() on columns of table "Email" */
export type Email_Min_Order_By = {
    createdAt?: Maybe<Order_By>;
    emailAddress?: Maybe<Order_By>;
    htmlContents?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    invitationId?: Maybe<Order_By>;
    plainTextContents?: Maybe<Order_By>;
    reason?: Maybe<Order_By>;
    recipientName?: Maybe<Order_By>;
    retriesCount?: Maybe<Order_By>;
    sentAt?: Maybe<Order_By>;
    subject?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
    userId?: Maybe<Order_By>;
};

/** response of any mutation on the table "Email" */
export type Email_Mutation_Response = {
    __typename?: "Email_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Email>;
};

/** on conflict condition type for table "Email" */
export type Email_On_Conflict = {
    constraint: Email_Constraint;
    update_columns?: Array<Email_Update_Column>;
    where?: Maybe<Email_Bool_Exp>;
};

/** Ordering options when selecting data from "Email". */
export type Email_Order_By = {
    createdAt?: Maybe<Order_By>;
    emailAddress?: Maybe<Order_By>;
    htmlContents?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    invitation?: Maybe<Registrant_Invitation_Order_By>;
    invitationId?: Maybe<Order_By>;
    plainTextContents?: Maybe<Order_By>;
    reason?: Maybe<Order_By>;
    recipientName?: Maybe<Order_By>;
    retriesCount?: Maybe<Order_By>;
    sentAt?: Maybe<Order_By>;
    subject?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
    user?: Maybe<User_Order_By>;
    userId?: Maybe<Order_By>;
};

/** primary key columns input for table: Email */
export type Email_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "Email" */
export enum Email_Select_Column {
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    EmailAddress = "emailAddress",
    /** column name */
    HtmlContents = "htmlContents",
    /** column name */
    Id = "id",
    /** column name */
    InvitationId = "invitationId",
    /** column name */
    PlainTextContents = "plainTextContents",
    /** column name */
    Reason = "reason",
    /** column name */
    RecipientName = "recipientName",
    /** column name */
    RetriesCount = "retriesCount",
    /** column name */
    SentAt = "sentAt",
    /** column name */
    Subject = "subject",
    /** column name */
    UpdatedAt = "updatedAt",
    /** column name */
    UserId = "userId",
}

/** input type for updating data in table "Email" */
export type Email_Set_Input = {
    createdAt?: Maybe<Scalars["timestamptz"]>;
    emailAddress?: Maybe<Scalars["String"]>;
    htmlContents?: Maybe<Scalars["String"]>;
    id?: Maybe<Scalars["uuid"]>;
    invitationId?: Maybe<Scalars["uuid"]>;
    plainTextContents?: Maybe<Scalars["String"]>;
    reason?: Maybe<Scalars["String"]>;
    recipientName?: Maybe<Scalars["String"]>;
    retriesCount?: Maybe<Scalars["Int"]>;
    sentAt?: Maybe<Scalars["timestamptz"]>;
    subject?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    userId?: Maybe<Scalars["String"]>;
};

/** aggregate stddev on columns */
export type Email_Stddev_Fields = {
    __typename?: "Email_stddev_fields";
    retriesCount?: Maybe<Scalars["Float"]>;
};

/** order by stddev() on columns of table "Email" */
export type Email_Stddev_Order_By = {
    retriesCount?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Email_Stddev_Pop_Fields = {
    __typename?: "Email_stddev_pop_fields";
    retriesCount?: Maybe<Scalars["Float"]>;
};

/** order by stddev_pop() on columns of table "Email" */
export type Email_Stddev_Pop_Order_By = {
    retriesCount?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Email_Stddev_Samp_Fields = {
    __typename?: "Email_stddev_samp_fields";
    retriesCount?: Maybe<Scalars["Float"]>;
};

/** order by stddev_samp() on columns of table "Email" */
export type Email_Stddev_Samp_Order_By = {
    retriesCount?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Email_Sum_Fields = {
    __typename?: "Email_sum_fields";
    retriesCount?: Maybe<Scalars["Int"]>;
};

/** order by sum() on columns of table "Email" */
export type Email_Sum_Order_By = {
    retriesCount?: Maybe<Order_By>;
};

/** update columns of table "Email" */
export enum Email_Update_Column {
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    EmailAddress = "emailAddress",
    /** column name */
    HtmlContents = "htmlContents",
    /** column name */
    Id = "id",
    /** column name */
    InvitationId = "invitationId",
    /** column name */
    PlainTextContents = "plainTextContents",
    /** column name */
    Reason = "reason",
    /** column name */
    RecipientName = "recipientName",
    /** column name */
    RetriesCount = "retriesCount",
    /** column name */
    SentAt = "sentAt",
    /** column name */
    Subject = "subject",
    /** column name */
    UpdatedAt = "updatedAt",
    /** column name */
    UserId = "userId",
}

/** aggregate var_pop on columns */
export type Email_Var_Pop_Fields = {
    __typename?: "Email_var_pop_fields";
    retriesCount?: Maybe<Scalars["Float"]>;
};

/** order by var_pop() on columns of table "Email" */
export type Email_Var_Pop_Order_By = {
    retriesCount?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Email_Var_Samp_Fields = {
    __typename?: "Email_var_samp_fields";
    retriesCount?: Maybe<Scalars["Float"]>;
};

/** order by var_samp() on columns of table "Email" */
export type Email_Var_Samp_Order_By = {
    retriesCount?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Email_Variance_Fields = {
    __typename?: "Email_variance_fields";
    retriesCount?: Maybe<Scalars["Float"]>;
};

/** order by variance() on columns of table "Email" */
export type Email_Variance_Order_By = {
    retriesCount?: Maybe<Order_By>;
};

/** columns and relationships of "FlatUnauthPermission" */
export type FlatUnauthPermission = {
    __typename?: "FlatUnauthPermission";
    permission_name?: Maybe<Scalars["String"]>;
    slug?: Maybe<Scalars["String"]>;
};

/** aggregated selection of "FlatUnauthPermission" */
export type FlatUnauthPermission_Aggregate = {
    __typename?: "FlatUnauthPermission_aggregate";
    aggregate?: Maybe<FlatUnauthPermission_Aggregate_Fields>;
    nodes: Array<FlatUnauthPermission>;
};

/** aggregate fields of "FlatUnauthPermission" */
export type FlatUnauthPermission_Aggregate_Fields = {
    __typename?: "FlatUnauthPermission_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<FlatUnauthPermission_Max_Fields>;
    min?: Maybe<FlatUnauthPermission_Min_Fields>;
};

/** aggregate fields of "FlatUnauthPermission" */
export type FlatUnauthPermission_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<FlatUnauthPermission_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "FlatUnauthPermission" */
export type FlatUnauthPermission_Aggregate_Order_By = {
    count?: Maybe<Order_By>;
    max?: Maybe<FlatUnauthPermission_Max_Order_By>;
    min?: Maybe<FlatUnauthPermission_Min_Order_By>;
};

/** input type for inserting array relation for remote table "FlatUnauthPermission" */
export type FlatUnauthPermission_Arr_Rel_Insert_Input = {
    data: Array<FlatUnauthPermission_Insert_Input>;
};

/** Boolean expression to filter rows from the table "FlatUnauthPermission". All fields are combined with a logical 'AND'. */
export type FlatUnauthPermission_Bool_Exp = {
    _and?: Maybe<Array<FlatUnauthPermission_Bool_Exp>>;
    _not?: Maybe<FlatUnauthPermission_Bool_Exp>;
    _or?: Maybe<Array<FlatUnauthPermission_Bool_Exp>>;
    permission_name?: Maybe<String_Comparison_Exp>;
    slug?: Maybe<String_Comparison_Exp>;
};

/** input type for inserting data into table "FlatUnauthPermission" */
export type FlatUnauthPermission_Insert_Input = {
    permission_name?: Maybe<Scalars["String"]>;
    slug?: Maybe<Scalars["String"]>;
};

/** aggregate max on columns */
export type FlatUnauthPermission_Max_Fields = {
    __typename?: "FlatUnauthPermission_max_fields";
    permission_name?: Maybe<Scalars["String"]>;
    slug?: Maybe<Scalars["String"]>;
};

/** order by max() on columns of table "FlatUnauthPermission" */
export type FlatUnauthPermission_Max_Order_By = {
    permission_name?: Maybe<Order_By>;
    slug?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type FlatUnauthPermission_Min_Fields = {
    __typename?: "FlatUnauthPermission_min_fields";
    permission_name?: Maybe<Scalars["String"]>;
    slug?: Maybe<Scalars["String"]>;
};

/** order by min() on columns of table "FlatUnauthPermission" */
export type FlatUnauthPermission_Min_Order_By = {
    permission_name?: Maybe<Order_By>;
    slug?: Maybe<Order_By>;
};

/** Ordering options when selecting data from "FlatUnauthPermission". */
export type FlatUnauthPermission_Order_By = {
    permission_name?: Maybe<Order_By>;
    slug?: Maybe<Order_By>;
};

/** select columns of table "FlatUnauthPermission" */
export enum FlatUnauthPermission_Select_Column {
    /** column name */
    PermissionName = "permission_name",
    /** column name */
    Slug = "slug",
}

/** columns and relationships of "FlatUserPermission" */
export type FlatUserPermission = {
    __typename?: "FlatUserPermission";
    /** An object relationship */
    conference?: Maybe<Conference_Conference>;
    /** An object relationship */
    permission?: Maybe<Permissions_Permission>;
    permission_name?: Maybe<Scalars["String"]>;
    slug?: Maybe<Scalars["String"]>;
    /** An object relationship */
    user?: Maybe<User>;
    user_id?: Maybe<Scalars["String"]>;
};

/** aggregated selection of "FlatUserPermission" */
export type FlatUserPermission_Aggregate = {
    __typename?: "FlatUserPermission_aggregate";
    aggregate?: Maybe<FlatUserPermission_Aggregate_Fields>;
    nodes: Array<FlatUserPermission>;
};

/** aggregate fields of "FlatUserPermission" */
export type FlatUserPermission_Aggregate_Fields = {
    __typename?: "FlatUserPermission_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<FlatUserPermission_Max_Fields>;
    min?: Maybe<FlatUserPermission_Min_Fields>;
};

/** aggregate fields of "FlatUserPermission" */
export type FlatUserPermission_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<FlatUserPermission_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "FlatUserPermission" */
export type FlatUserPermission_Aggregate_Order_By = {
    count?: Maybe<Order_By>;
    max?: Maybe<FlatUserPermission_Max_Order_By>;
    min?: Maybe<FlatUserPermission_Min_Order_By>;
};

/** input type for inserting array relation for remote table "FlatUserPermission" */
export type FlatUserPermission_Arr_Rel_Insert_Input = {
    data: Array<FlatUserPermission_Insert_Input>;
};

/** Boolean expression to filter rows from the table "FlatUserPermission". All fields are combined with a logical 'AND'. */
export type FlatUserPermission_Bool_Exp = {
    _and?: Maybe<Array<FlatUserPermission_Bool_Exp>>;
    _not?: Maybe<FlatUserPermission_Bool_Exp>;
    _or?: Maybe<Array<FlatUserPermission_Bool_Exp>>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    permission?: Maybe<Permissions_Permission_Bool_Exp>;
    permission_name?: Maybe<String_Comparison_Exp>;
    slug?: Maybe<String_Comparison_Exp>;
    user?: Maybe<User_Bool_Exp>;
    user_id?: Maybe<String_Comparison_Exp>;
};

/** input type for inserting data into table "FlatUserPermission" */
export type FlatUserPermission_Insert_Input = {
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    permission?: Maybe<Permissions_Permission_Obj_Rel_Insert_Input>;
    permission_name?: Maybe<Scalars["String"]>;
    slug?: Maybe<Scalars["String"]>;
    user?: Maybe<User_Obj_Rel_Insert_Input>;
    user_id?: Maybe<Scalars["String"]>;
};

/** aggregate max on columns */
export type FlatUserPermission_Max_Fields = {
    __typename?: "FlatUserPermission_max_fields";
    permission_name?: Maybe<Scalars["String"]>;
    slug?: Maybe<Scalars["String"]>;
    user_id?: Maybe<Scalars["String"]>;
};

/** order by max() on columns of table "FlatUserPermission" */
export type FlatUserPermission_Max_Order_By = {
    permission_name?: Maybe<Order_By>;
    slug?: Maybe<Order_By>;
    user_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type FlatUserPermission_Min_Fields = {
    __typename?: "FlatUserPermission_min_fields";
    permission_name?: Maybe<Scalars["String"]>;
    slug?: Maybe<Scalars["String"]>;
    user_id?: Maybe<Scalars["String"]>;
};

/** order by min() on columns of table "FlatUserPermission" */
export type FlatUserPermission_Min_Order_By = {
    permission_name?: Maybe<Order_By>;
    slug?: Maybe<Order_By>;
    user_id?: Maybe<Order_By>;
};

/** Ordering options when selecting data from "FlatUserPermission". */
export type FlatUserPermission_Order_By = {
    conference?: Maybe<Conference_Conference_Order_By>;
    permission?: Maybe<Permissions_Permission_Order_By>;
    permission_name?: Maybe<Order_By>;
    slug?: Maybe<Order_By>;
    user?: Maybe<User_Order_By>;
    user_id?: Maybe<Order_By>;
};

/** select columns of table "FlatUserPermission" */
export enum FlatUserPermission_Select_Column {
    /** column name */
    PermissionName = "permission_name",
    /** column name */
    Slug = "slug",
    /** column name */
    UserId = "user_id",
}

/** Boolean expression to compare columns of type "Float". All fields are combined with logical 'AND'. */
export type Float_Comparison_Exp = {
    _eq?: Maybe<Scalars["Float"]>;
    _gt?: Maybe<Scalars["Float"]>;
    _gte?: Maybe<Scalars["Float"]>;
    _in?: Maybe<Array<Scalars["Float"]>>;
    _is_null?: Maybe<Scalars["Boolean"]>;
    _lt?: Maybe<Scalars["Float"]>;
    _lte?: Maybe<Scalars["Float"]>;
    _neq?: Maybe<Scalars["Float"]>;
    _nin?: Maybe<Array<Scalars["Float"]>>;
};

export type GetGoogleOAuthUrlOutput = {
    __typename?: "GetGoogleOAuthUrlOutput";
    url: Scalars["String"];
};

export type GetSlugOutput = {
    __typename?: "GetSlugOutput";
    slug?: Maybe<Scalars["String"]>;
};

export type GetUploadAgreementOutput = {
    __typename?: "GetUploadAgreementOutput";
    agreementText?: Maybe<Scalars["String"]>;
    agreementUrl?: Maybe<Scalars["String"]>;
};

/** Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'. */
export type Int_Comparison_Exp = {
    _eq?: Maybe<Scalars["Int"]>;
    _gt?: Maybe<Scalars["Int"]>;
    _gte?: Maybe<Scalars["Int"]>;
    _in?: Maybe<Array<Scalars["Int"]>>;
    _is_null?: Maybe<Scalars["Boolean"]>;
    _lt?: Maybe<Scalars["Int"]>;
    _lte?: Maybe<Scalars["Int"]>;
    _neq?: Maybe<Scalars["Int"]>;
    _nin?: Maybe<Array<Scalars["Int"]>>;
};

export type JoinEventVonageSessionOutput = {
    __typename?: "JoinEventVonageSessionOutput";
    accessToken?: Maybe<Scalars["String"]>;
};

export type JoinRoomChimeSessionOutput = {
    __typename?: "JoinRoomChimeSessionOutput";
    meeting?: Maybe<Scalars["jsonb"]>;
    message?: Maybe<Scalars["String"]>;
    registrant?: Maybe<Scalars["jsonb"]>;
};

export type JoinRoomVonageSessionOutput = {
    __typename?: "JoinRoomVonageSessionOutput";
    accessToken?: Maybe<Scalars["String"]>;
    message?: Maybe<Scalars["String"]>;
    sessionId?: Maybe<Scalars["String"]>;
};

export type NotifyEventEnded = {
    __typename?: "NotifyEventEnded";
    ok: Scalars["Boolean"];
};

export type PresenceFlushOutput = {
    __typename?: "PresenceFlushOutput";
    ok?: Maybe<Scalars["String"]>;
};

export type PresenceSummaryOutput = {
    __typename?: "PresenceSummaryOutput";
    pages?: Maybe<Scalars["jsonb"]>;
    total_unique_tabs: Scalars["Int"];
    total_unique_user_ids: Scalars["Int"];
};

/** columns and relationships of "PushNotificationSubscription" */
export type PushNotificationSubscription = {
    __typename?: "PushNotificationSubscription";
    auth: Scalars["String"];
    created_at: Scalars["timestamptz"];
    endpoint: Scalars["String"];
    p256dh: Scalars["String"];
    updated_at: Scalars["timestamptz"];
    /** An object relationship */
    user: User;
    userId: Scalars["String"];
};

/** aggregated selection of "PushNotificationSubscription" */
export type PushNotificationSubscription_Aggregate = {
    __typename?: "PushNotificationSubscription_aggregate";
    aggregate?: Maybe<PushNotificationSubscription_Aggregate_Fields>;
    nodes: Array<PushNotificationSubscription>;
};

/** aggregate fields of "PushNotificationSubscription" */
export type PushNotificationSubscription_Aggregate_Fields = {
    __typename?: "PushNotificationSubscription_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<PushNotificationSubscription_Max_Fields>;
    min?: Maybe<PushNotificationSubscription_Min_Fields>;
};

/** aggregate fields of "PushNotificationSubscription" */
export type PushNotificationSubscription_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<PushNotificationSubscription_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "PushNotificationSubscription" */
export type PushNotificationSubscription_Aggregate_Order_By = {
    count?: Maybe<Order_By>;
    max?: Maybe<PushNotificationSubscription_Max_Order_By>;
    min?: Maybe<PushNotificationSubscription_Min_Order_By>;
};

/** input type for inserting array relation for remote table "PushNotificationSubscription" */
export type PushNotificationSubscription_Arr_Rel_Insert_Input = {
    data: Array<PushNotificationSubscription_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<PushNotificationSubscription_On_Conflict>;
};

/** Boolean expression to filter rows from the table "PushNotificationSubscription". All fields are combined with a logical 'AND'. */
export type PushNotificationSubscription_Bool_Exp = {
    _and?: Maybe<Array<PushNotificationSubscription_Bool_Exp>>;
    _not?: Maybe<PushNotificationSubscription_Bool_Exp>;
    _or?: Maybe<Array<PushNotificationSubscription_Bool_Exp>>;
    auth?: Maybe<String_Comparison_Exp>;
    created_at?: Maybe<Timestamptz_Comparison_Exp>;
    endpoint?: Maybe<String_Comparison_Exp>;
    p256dh?: Maybe<String_Comparison_Exp>;
    updated_at?: Maybe<Timestamptz_Comparison_Exp>;
    user?: Maybe<User_Bool_Exp>;
    userId?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "PushNotificationSubscription" */
export enum PushNotificationSubscription_Constraint {
    /** unique or primary key constraint */
    PushNotificationSubscriptionPkey = "PushNotificationSubscription_pkey",
}

/** input type for inserting data into table "PushNotificationSubscription" */
export type PushNotificationSubscription_Insert_Input = {
    auth?: Maybe<Scalars["String"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    endpoint?: Maybe<Scalars["String"]>;
    p256dh?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
    user?: Maybe<User_Obj_Rel_Insert_Input>;
    userId?: Maybe<Scalars["String"]>;
};

/** aggregate max on columns */
export type PushNotificationSubscription_Max_Fields = {
    __typename?: "PushNotificationSubscription_max_fields";
    auth?: Maybe<Scalars["String"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    endpoint?: Maybe<Scalars["String"]>;
    p256dh?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
    userId?: Maybe<Scalars["String"]>;
};

/** order by max() on columns of table "PushNotificationSubscription" */
export type PushNotificationSubscription_Max_Order_By = {
    auth?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    endpoint?: Maybe<Order_By>;
    p256dh?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
    userId?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type PushNotificationSubscription_Min_Fields = {
    __typename?: "PushNotificationSubscription_min_fields";
    auth?: Maybe<Scalars["String"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    endpoint?: Maybe<Scalars["String"]>;
    p256dh?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
    userId?: Maybe<Scalars["String"]>;
};

/** order by min() on columns of table "PushNotificationSubscription" */
export type PushNotificationSubscription_Min_Order_By = {
    auth?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    endpoint?: Maybe<Order_By>;
    p256dh?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
    userId?: Maybe<Order_By>;
};

/** response of any mutation on the table "PushNotificationSubscription" */
export type PushNotificationSubscription_Mutation_Response = {
    __typename?: "PushNotificationSubscription_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<PushNotificationSubscription>;
};

/** on conflict condition type for table "PushNotificationSubscription" */
export type PushNotificationSubscription_On_Conflict = {
    constraint: PushNotificationSubscription_Constraint;
    update_columns?: Array<PushNotificationSubscription_Update_Column>;
    where?: Maybe<PushNotificationSubscription_Bool_Exp>;
};

/** Ordering options when selecting data from "PushNotificationSubscription". */
export type PushNotificationSubscription_Order_By = {
    auth?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    endpoint?: Maybe<Order_By>;
    p256dh?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
    user?: Maybe<User_Order_By>;
    userId?: Maybe<Order_By>;
};

/** primary key columns input for table: PushNotificationSubscription */
export type PushNotificationSubscription_Pk_Columns_Input = {
    endpoint: Scalars["String"];
};

/** select columns of table "PushNotificationSubscription" */
export enum PushNotificationSubscription_Select_Column {
    /** column name */
    Auth = "auth",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    Endpoint = "endpoint",
    /** column name */
    P256dh = "p256dh",
    /** column name */
    UpdatedAt = "updated_at",
    /** column name */
    UserId = "userId",
}

/** input type for updating data in table "PushNotificationSubscription" */
export type PushNotificationSubscription_Set_Input = {
    auth?: Maybe<Scalars["String"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    endpoint?: Maybe<Scalars["String"]>;
    p256dh?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
    userId?: Maybe<Scalars["String"]>;
};

/** update columns of table "PushNotificationSubscription" */
export enum PushNotificationSubscription_Update_Column {
    /** column name */
    Auth = "auth",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    Endpoint = "endpoint",
    /** column name */
    P256dh = "p256dh",
    /** column name */
    UpdatedAt = "updated_at",
    /** column name */
    UserId = "userId",
}

export type RefreshYouTubeDataOutput = {
    __typename?: "RefreshYouTubeDataOutput";
    message?: Maybe<Scalars["String"]>;
    success: Scalars["Boolean"];
};

export type StopEventBroadcastOutput = {
    __typename?: "StopEventBroadcastOutput";
    broadcastsStopped: Scalars["Int"];
};

/** Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'. */
export type String_Comparison_Exp = {
    _eq?: Maybe<Scalars["String"]>;
    _gt?: Maybe<Scalars["String"]>;
    _gte?: Maybe<Scalars["String"]>;
    /** does the column match the given case-insensitive pattern */
    _ilike?: Maybe<Scalars["String"]>;
    _in?: Maybe<Array<Scalars["String"]>>;
    /** does the column match the given POSIX regular expression, case insensitive */
    _iregex?: Maybe<Scalars["String"]>;
    _is_null?: Maybe<Scalars["Boolean"]>;
    /** does the column match the given pattern */
    _like?: Maybe<Scalars["String"]>;
    _lt?: Maybe<Scalars["String"]>;
    _lte?: Maybe<Scalars["String"]>;
    _neq?: Maybe<Scalars["String"]>;
    /** does the column NOT match the given case-insensitive pattern */
    _nilike?: Maybe<Scalars["String"]>;
    _nin?: Maybe<Array<Scalars["String"]>>;
    /** does the column NOT match the given POSIX regular expression, case insensitive */
    _niregex?: Maybe<Scalars["String"]>;
    /** does the column NOT match the given pattern */
    _nlike?: Maybe<Scalars["String"]>;
    /** does the column NOT match the given POSIX regular expression, case sensitive */
    _nregex?: Maybe<Scalars["String"]>;
    /** does the column NOT match the given SQL regular expression */
    _nsimilar?: Maybe<Scalars["String"]>;
    /** does the column match the given POSIX regular expression, case sensitive */
    _regex?: Maybe<Scalars["String"]>;
    /** does the column match the given SQL regular expression */
    _similar?: Maybe<Scalars["String"]>;
};

export type SubmitGoogleOAuthCodeOutput = {
    __typename?: "SubmitGoogleOAuthCodeOutput";
    message?: Maybe<Scalars["String"]>;
    success: Scalars["Boolean"];
};

export type SubmitUpdatedSubtitlesOutput = {
    __typename?: "SubmitUpdatedSubtitlesOutput";
    message: Scalars["String"];
    success: Scalars["Boolean"];
};

export type SubmitUploadableElementOutput = {
    __typename?: "SubmitUploadableElementOutput";
    message: Scalars["String"];
    success: Scalars["Boolean"];
};

export type UpdateProfilePhotoResponse = {
    __typename?: "UpdateProfilePhotoResponse";
    ok: Scalars["Boolean"];
    photoURL_350x350?: Maybe<Scalars["String"]>;
    photoURL_50x50?: Maybe<Scalars["String"]>;
};

/** columns and relationships of "User" */
export type User = {
    __typename?: "User";
    acceptedPrivacyPolicyAt?: Maybe<Scalars["timestamptz"]>;
    acceptedTermsAt?: Maybe<Scalars["timestamptz"]>;
    /** An array relationship */
    conferenceDemoCodes: Array<Conference_DemoCode>;
    /** An aggregate relationship */
    conferenceDemoCodes_aggregate: Conference_DemoCode_Aggregate;
    /** An array relationship */
    conferencesCreated: Array<Conference_Conference>;
    /** An aggregate relationship */
    conferencesCreated_aggregate: Conference_Conference_Aggregate;
    createdAt: Scalars["timestamptz"];
    email?: Maybe<Scalars["String"]>;
    /** An array relationship */
    emails: Array<Email>;
    /** An aggregate relationship */
    emails_aggregate: Email_Aggregate;
    id: Scalars["String"];
    /** An array relationship */
    invitationsPendingConfirmation: Array<Registrant_Invitation>;
    /** An aggregate relationship */
    invitationsPendingConfirmation_aggregate: Registrant_Invitation_Aggregate;
    /** An array relationship */
    pushNotificationSubscriptions: Array<PushNotificationSubscription>;
    /** An aggregate relationship */
    pushNotificationSubscriptions_aggregate: PushNotificationSubscription_Aggregate;
    /** An array relationship */
    registrants: Array<Registrant_Registrant>;
    /** An aggregate relationship */
    registrants_aggregate: Registrant_Registrant_Aggregate;
    updatedAt: Scalars["timestamptz"];
};

/** columns and relationships of "User" */
export type UserConferenceDemoCodesArgs = {
    distinct_on?: Maybe<Array<Conference_DemoCode_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Conference_DemoCode_Order_By>>;
    where?: Maybe<Conference_DemoCode_Bool_Exp>;
};

/** columns and relationships of "User" */
export type UserConferenceDemoCodes_AggregateArgs = {
    distinct_on?: Maybe<Array<Conference_DemoCode_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Conference_DemoCode_Order_By>>;
    where?: Maybe<Conference_DemoCode_Bool_Exp>;
};

/** columns and relationships of "User" */
export type UserConferencesCreatedArgs = {
    distinct_on?: Maybe<Array<Conference_Conference_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Conference_Conference_Order_By>>;
    where?: Maybe<Conference_Conference_Bool_Exp>;
};

/** columns and relationships of "User" */
export type UserConferencesCreated_AggregateArgs = {
    distinct_on?: Maybe<Array<Conference_Conference_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Conference_Conference_Order_By>>;
    where?: Maybe<Conference_Conference_Bool_Exp>;
};

/** columns and relationships of "User" */
export type UserEmailsArgs = {
    distinct_on?: Maybe<Array<Email_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Email_Order_By>>;
    where?: Maybe<Email_Bool_Exp>;
};

/** columns and relationships of "User" */
export type UserEmails_AggregateArgs = {
    distinct_on?: Maybe<Array<Email_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Email_Order_By>>;
    where?: Maybe<Email_Bool_Exp>;
};

/** columns and relationships of "User" */
export type UserInvitationsPendingConfirmationArgs = {
    distinct_on?: Maybe<Array<Registrant_Invitation_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Registrant_Invitation_Order_By>>;
    where?: Maybe<Registrant_Invitation_Bool_Exp>;
};

/** columns and relationships of "User" */
export type UserInvitationsPendingConfirmation_AggregateArgs = {
    distinct_on?: Maybe<Array<Registrant_Invitation_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Registrant_Invitation_Order_By>>;
    where?: Maybe<Registrant_Invitation_Bool_Exp>;
};

/** columns and relationships of "User" */
export type UserPushNotificationSubscriptionsArgs = {
    distinct_on?: Maybe<Array<PushNotificationSubscription_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<PushNotificationSubscription_Order_By>>;
    where?: Maybe<PushNotificationSubscription_Bool_Exp>;
};

/** columns and relationships of "User" */
export type UserPushNotificationSubscriptions_AggregateArgs = {
    distinct_on?: Maybe<Array<PushNotificationSubscription_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<PushNotificationSubscription_Order_By>>;
    where?: Maybe<PushNotificationSubscription_Bool_Exp>;
};

/** columns and relationships of "User" */
export type UserRegistrantsArgs = {
    distinct_on?: Maybe<Array<Registrant_Registrant_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Registrant_Registrant_Order_By>>;
    where?: Maybe<Registrant_Registrant_Bool_Exp>;
};

/** columns and relationships of "User" */
export type UserRegistrants_AggregateArgs = {
    distinct_on?: Maybe<Array<Registrant_Registrant_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Registrant_Registrant_Order_By>>;
    where?: Maybe<Registrant_Registrant_Bool_Exp>;
};

/** aggregated selection of "User" */
export type User_Aggregate = {
    __typename?: "User_aggregate";
    aggregate?: Maybe<User_Aggregate_Fields>;
    nodes: Array<User>;
};

/** aggregate fields of "User" */
export type User_Aggregate_Fields = {
    __typename?: "User_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<User_Max_Fields>;
    min?: Maybe<User_Min_Fields>;
};

/** aggregate fields of "User" */
export type User_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<User_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** Boolean expression to filter rows from the table "User". All fields are combined with a logical 'AND'. */
export type User_Bool_Exp = {
    _and?: Maybe<Array<User_Bool_Exp>>;
    _not?: Maybe<User_Bool_Exp>;
    _or?: Maybe<Array<User_Bool_Exp>>;
    acceptedPrivacyPolicyAt?: Maybe<Timestamptz_Comparison_Exp>;
    acceptedTermsAt?: Maybe<Timestamptz_Comparison_Exp>;
    conferenceDemoCodes?: Maybe<Conference_DemoCode_Bool_Exp>;
    conferencesCreated?: Maybe<Conference_Conference_Bool_Exp>;
    createdAt?: Maybe<Timestamptz_Comparison_Exp>;
    email?: Maybe<String_Comparison_Exp>;
    emails?: Maybe<Email_Bool_Exp>;
    id?: Maybe<String_Comparison_Exp>;
    invitationsPendingConfirmation?: Maybe<Registrant_Invitation_Bool_Exp>;
    pushNotificationSubscriptions?: Maybe<PushNotificationSubscription_Bool_Exp>;
    registrants?: Maybe<Registrant_Registrant_Bool_Exp>;
    updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "User" */
export enum User_Constraint {
    /** unique or primary key constraint */
    UserEmailKey = "user_email_key",
    /** unique or primary key constraint */
    UserPkey = "user_pkey",
}

/** input type for inserting data into table "User" */
export type User_Insert_Input = {
    acceptedPrivacyPolicyAt?: Maybe<Scalars["timestamptz"]>;
    acceptedTermsAt?: Maybe<Scalars["timestamptz"]>;
    conferenceDemoCodes?: Maybe<Conference_DemoCode_Arr_Rel_Insert_Input>;
    conferencesCreated?: Maybe<Conference_Conference_Arr_Rel_Insert_Input>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    email?: Maybe<Scalars["String"]>;
    emails?: Maybe<Email_Arr_Rel_Insert_Input>;
    id?: Maybe<Scalars["String"]>;
    invitationsPendingConfirmation?: Maybe<Registrant_Invitation_Arr_Rel_Insert_Input>;
    pushNotificationSubscriptions?: Maybe<PushNotificationSubscription_Arr_Rel_Insert_Input>;
    registrants?: Maybe<Registrant_Registrant_Arr_Rel_Insert_Input>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type User_Max_Fields = {
    __typename?: "User_max_fields";
    acceptedPrivacyPolicyAt?: Maybe<Scalars["timestamptz"]>;
    acceptedTermsAt?: Maybe<Scalars["timestamptz"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    email?: Maybe<Scalars["String"]>;
    id?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate min on columns */
export type User_Min_Fields = {
    __typename?: "User_min_fields";
    acceptedPrivacyPolicyAt?: Maybe<Scalars["timestamptz"]>;
    acceptedTermsAt?: Maybe<Scalars["timestamptz"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    email?: Maybe<Scalars["String"]>;
    id?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** response of any mutation on the table "User" */
export type User_Mutation_Response = {
    __typename?: "User_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<User>;
};

/** input type for inserting object relation for remote table "User" */
export type User_Obj_Rel_Insert_Input = {
    data: User_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<User_On_Conflict>;
};

/** on conflict condition type for table "User" */
export type User_On_Conflict = {
    constraint: User_Constraint;
    update_columns?: Array<User_Update_Column>;
    where?: Maybe<User_Bool_Exp>;
};

/** Ordering options when selecting data from "User". */
export type User_Order_By = {
    acceptedPrivacyPolicyAt?: Maybe<Order_By>;
    acceptedTermsAt?: Maybe<Order_By>;
    conferenceDemoCodes_aggregate?: Maybe<Conference_DemoCode_Aggregate_Order_By>;
    conferencesCreated_aggregate?: Maybe<Conference_Conference_Aggregate_Order_By>;
    createdAt?: Maybe<Order_By>;
    email?: Maybe<Order_By>;
    emails_aggregate?: Maybe<Email_Aggregate_Order_By>;
    id?: Maybe<Order_By>;
    invitationsPendingConfirmation_aggregate?: Maybe<Registrant_Invitation_Aggregate_Order_By>;
    pushNotificationSubscriptions_aggregate?: Maybe<PushNotificationSubscription_Aggregate_Order_By>;
    registrants_aggregate?: Maybe<Registrant_Registrant_Aggregate_Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** primary key columns input for table: User */
export type User_Pk_Columns_Input = {
    id: Scalars["String"];
};

/** select columns of table "User" */
export enum User_Select_Column {
    /** column name */
    AcceptedPrivacyPolicyAt = "acceptedPrivacyPolicyAt",
    /** column name */
    AcceptedTermsAt = "acceptedTermsAt",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Email = "email",
    /** column name */
    Id = "id",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** input type for updating data in table "User" */
export type User_Set_Input = {
    acceptedPrivacyPolicyAt?: Maybe<Scalars["timestamptz"]>;
    acceptedTermsAt?: Maybe<Scalars["timestamptz"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    email?: Maybe<Scalars["String"]>;
    id?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** update columns of table "User" */
export enum User_Update_Column {
    /** column name */
    AcceptedPrivacyPolicyAt = "acceptedPrivacyPolicyAt",
    /** column name */
    AcceptedTermsAt = "acceptedTermsAt",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Email = "email",
    /** column name */
    Id = "id",
    /** column name */
    UpdatedAt = "updatedAt",
}

export type VapidPublicKeyOutput = {
    __typename?: "VAPIDPublicKeyOutput";
    key: Scalars["String"];
};

/** columns and relationships of "analytics.AppStats" */
export type Analytics_AppStats = {
    __typename?: "analytics_AppStats";
    created_at: Scalars["timestamptz"];
    id: Scalars["Int"];
    pages?: Maybe<Scalars["jsonb"]>;
    total_unique_tabs: Scalars["Int"];
    total_unique_user_ids: Scalars["Int"];
    updated_at: Scalars["timestamptz"];
};

/** columns and relationships of "analytics.AppStats" */
export type Analytics_AppStatsPagesArgs = {
    path?: Maybe<Scalars["String"]>;
};

/** aggregated selection of "analytics.AppStats" */
export type Analytics_AppStats_Aggregate = {
    __typename?: "analytics_AppStats_aggregate";
    aggregate?: Maybe<Analytics_AppStats_Aggregate_Fields>;
    nodes: Array<Analytics_AppStats>;
};

/** aggregate fields of "analytics.AppStats" */
export type Analytics_AppStats_Aggregate_Fields = {
    __typename?: "analytics_AppStats_aggregate_fields";
    avg?: Maybe<Analytics_AppStats_Avg_Fields>;
    count: Scalars["Int"];
    max?: Maybe<Analytics_AppStats_Max_Fields>;
    min?: Maybe<Analytics_AppStats_Min_Fields>;
    stddev?: Maybe<Analytics_AppStats_Stddev_Fields>;
    stddev_pop?: Maybe<Analytics_AppStats_Stddev_Pop_Fields>;
    stddev_samp?: Maybe<Analytics_AppStats_Stddev_Samp_Fields>;
    sum?: Maybe<Analytics_AppStats_Sum_Fields>;
    var_pop?: Maybe<Analytics_AppStats_Var_Pop_Fields>;
    var_samp?: Maybe<Analytics_AppStats_Var_Samp_Fields>;
    variance?: Maybe<Analytics_AppStats_Variance_Fields>;
};

/** aggregate fields of "analytics.AppStats" */
export type Analytics_AppStats_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Analytics_AppStats_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** append existing jsonb value of filtered columns with new jsonb value */
export type Analytics_AppStats_Append_Input = {
    pages?: Maybe<Scalars["jsonb"]>;
};

/** aggregate avg on columns */
export type Analytics_AppStats_Avg_Fields = {
    __typename?: "analytics_AppStats_avg_fields";
    id?: Maybe<Scalars["Float"]>;
    total_unique_tabs?: Maybe<Scalars["Float"]>;
    total_unique_user_ids?: Maybe<Scalars["Float"]>;
};

/** Boolean expression to filter rows from the table "analytics.AppStats". All fields are combined with a logical 'AND'. */
export type Analytics_AppStats_Bool_Exp = {
    _and?: Maybe<Array<Analytics_AppStats_Bool_Exp>>;
    _not?: Maybe<Analytics_AppStats_Bool_Exp>;
    _or?: Maybe<Array<Analytics_AppStats_Bool_Exp>>;
    created_at?: Maybe<Timestamptz_Comparison_Exp>;
    id?: Maybe<Int_Comparison_Exp>;
    pages?: Maybe<Jsonb_Comparison_Exp>;
    total_unique_tabs?: Maybe<Int_Comparison_Exp>;
    total_unique_user_ids?: Maybe<Int_Comparison_Exp>;
    updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "analytics.AppStats" */
export enum Analytics_AppStats_Constraint {
    /** unique or primary key constraint */
    AppStatsPkey = "AppStats_pkey",
}

/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export type Analytics_AppStats_Delete_At_Path_Input = {
    pages?: Maybe<Array<Scalars["String"]>>;
};

/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
export type Analytics_AppStats_Delete_Elem_Input = {
    pages?: Maybe<Scalars["Int"]>;
};

/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export type Analytics_AppStats_Delete_Key_Input = {
    pages?: Maybe<Scalars["String"]>;
};

/** input type for incrementing numeric columns in table "analytics.AppStats" */
export type Analytics_AppStats_Inc_Input = {
    id?: Maybe<Scalars["Int"]>;
    total_unique_tabs?: Maybe<Scalars["Int"]>;
    total_unique_user_ids?: Maybe<Scalars["Int"]>;
};

/** input type for inserting data into table "analytics.AppStats" */
export type Analytics_AppStats_Insert_Input = {
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["Int"]>;
    pages?: Maybe<Scalars["jsonb"]>;
    total_unique_tabs?: Maybe<Scalars["Int"]>;
    total_unique_user_ids?: Maybe<Scalars["Int"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Analytics_AppStats_Max_Fields = {
    __typename?: "analytics_AppStats_max_fields";
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["Int"]>;
    total_unique_tabs?: Maybe<Scalars["Int"]>;
    total_unique_user_ids?: Maybe<Scalars["Int"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate min on columns */
export type Analytics_AppStats_Min_Fields = {
    __typename?: "analytics_AppStats_min_fields";
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["Int"]>;
    total_unique_tabs?: Maybe<Scalars["Int"]>;
    total_unique_user_ids?: Maybe<Scalars["Int"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** response of any mutation on the table "analytics.AppStats" */
export type Analytics_AppStats_Mutation_Response = {
    __typename?: "analytics_AppStats_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Analytics_AppStats>;
};

/** on conflict condition type for table "analytics.AppStats" */
export type Analytics_AppStats_On_Conflict = {
    constraint: Analytics_AppStats_Constraint;
    update_columns?: Array<Analytics_AppStats_Update_Column>;
    where?: Maybe<Analytics_AppStats_Bool_Exp>;
};

/** Ordering options when selecting data from "analytics.AppStats". */
export type Analytics_AppStats_Order_By = {
    created_at?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    pages?: Maybe<Order_By>;
    total_unique_tabs?: Maybe<Order_By>;
    total_unique_user_ids?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** primary key columns input for table: analytics_AppStats */
export type Analytics_AppStats_Pk_Columns_Input = {
    id: Scalars["Int"];
};

/** prepend existing jsonb value of filtered columns with new jsonb value */
export type Analytics_AppStats_Prepend_Input = {
    pages?: Maybe<Scalars["jsonb"]>;
};

/** select columns of table "analytics.AppStats" */
export enum Analytics_AppStats_Select_Column {
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    Id = "id",
    /** column name */
    Pages = "pages",
    /** column name */
    TotalUniqueTabs = "total_unique_tabs",
    /** column name */
    TotalUniqueUserIds = "total_unique_user_ids",
    /** column name */
    UpdatedAt = "updated_at",
}

/** input type for updating data in table "analytics.AppStats" */
export type Analytics_AppStats_Set_Input = {
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["Int"]>;
    pages?: Maybe<Scalars["jsonb"]>;
    total_unique_tabs?: Maybe<Scalars["Int"]>;
    total_unique_user_ids?: Maybe<Scalars["Int"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate stddev on columns */
export type Analytics_AppStats_Stddev_Fields = {
    __typename?: "analytics_AppStats_stddev_fields";
    id?: Maybe<Scalars["Float"]>;
    total_unique_tabs?: Maybe<Scalars["Float"]>;
    total_unique_user_ids?: Maybe<Scalars["Float"]>;
};

/** aggregate stddev_pop on columns */
export type Analytics_AppStats_Stddev_Pop_Fields = {
    __typename?: "analytics_AppStats_stddev_pop_fields";
    id?: Maybe<Scalars["Float"]>;
    total_unique_tabs?: Maybe<Scalars["Float"]>;
    total_unique_user_ids?: Maybe<Scalars["Float"]>;
};

/** aggregate stddev_samp on columns */
export type Analytics_AppStats_Stddev_Samp_Fields = {
    __typename?: "analytics_AppStats_stddev_samp_fields";
    id?: Maybe<Scalars["Float"]>;
    total_unique_tabs?: Maybe<Scalars["Float"]>;
    total_unique_user_ids?: Maybe<Scalars["Float"]>;
};

/** aggregate sum on columns */
export type Analytics_AppStats_Sum_Fields = {
    __typename?: "analytics_AppStats_sum_fields";
    id?: Maybe<Scalars["Int"]>;
    total_unique_tabs?: Maybe<Scalars["Int"]>;
    total_unique_user_ids?: Maybe<Scalars["Int"]>;
};

/** update columns of table "analytics.AppStats" */
export enum Analytics_AppStats_Update_Column {
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    Id = "id",
    /** column name */
    Pages = "pages",
    /** column name */
    TotalUniqueTabs = "total_unique_tabs",
    /** column name */
    TotalUniqueUserIds = "total_unique_user_ids",
    /** column name */
    UpdatedAt = "updated_at",
}

/** aggregate var_pop on columns */
export type Analytics_AppStats_Var_Pop_Fields = {
    __typename?: "analytics_AppStats_var_pop_fields";
    id?: Maybe<Scalars["Float"]>;
    total_unique_tabs?: Maybe<Scalars["Float"]>;
    total_unique_user_ids?: Maybe<Scalars["Float"]>;
};

/** aggregate var_samp on columns */
export type Analytics_AppStats_Var_Samp_Fields = {
    __typename?: "analytics_AppStats_var_samp_fields";
    id?: Maybe<Scalars["Float"]>;
    total_unique_tabs?: Maybe<Scalars["Float"]>;
    total_unique_user_ids?: Maybe<Scalars["Float"]>;
};

/** aggregate variance on columns */
export type Analytics_AppStats_Variance_Fields = {
    __typename?: "analytics_AppStats_variance_fields";
    id?: Maybe<Scalars["Float"]>;
    total_unique_tabs?: Maybe<Scalars["Float"]>;
    total_unique_user_ids?: Maybe<Scalars["Float"]>;
};

/** columns and relationships of "analytics.CompletedRegistrations" */
export type Analytics_CompletedRegistrations = {
    __typename?: "analytics_CompletedRegistrations";
    /** An object relationship */
    conference?: Maybe<Conference_Conference>;
    count?: Maybe<Scalars["bigint"]>;
    id?: Maybe<Scalars["uuid"]>;
};

/** aggregated selection of "analytics.CompletedRegistrations" */
export type Analytics_CompletedRegistrations_Aggregate = {
    __typename?: "analytics_CompletedRegistrations_aggregate";
    aggregate?: Maybe<Analytics_CompletedRegistrations_Aggregate_Fields>;
    nodes: Array<Analytics_CompletedRegistrations>;
};

/** aggregate fields of "analytics.CompletedRegistrations" */
export type Analytics_CompletedRegistrations_Aggregate_Fields = {
    __typename?: "analytics_CompletedRegistrations_aggregate_fields";
    avg?: Maybe<Analytics_CompletedRegistrations_Avg_Fields>;
    count: Scalars["Int"];
    max?: Maybe<Analytics_CompletedRegistrations_Max_Fields>;
    min?: Maybe<Analytics_CompletedRegistrations_Min_Fields>;
    stddev?: Maybe<Analytics_CompletedRegistrations_Stddev_Fields>;
    stddev_pop?: Maybe<Analytics_CompletedRegistrations_Stddev_Pop_Fields>;
    stddev_samp?: Maybe<Analytics_CompletedRegistrations_Stddev_Samp_Fields>;
    sum?: Maybe<Analytics_CompletedRegistrations_Sum_Fields>;
    var_pop?: Maybe<Analytics_CompletedRegistrations_Var_Pop_Fields>;
    var_samp?: Maybe<Analytics_CompletedRegistrations_Var_Samp_Fields>;
    variance?: Maybe<Analytics_CompletedRegistrations_Variance_Fields>;
};

/** aggregate fields of "analytics.CompletedRegistrations" */
export type Analytics_CompletedRegistrations_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Analytics_CompletedRegistrations_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** aggregate avg on columns */
export type Analytics_CompletedRegistrations_Avg_Fields = {
    __typename?: "analytics_CompletedRegistrations_avg_fields";
    count?: Maybe<Scalars["Float"]>;
};

/** Boolean expression to filter rows from the table "analytics.CompletedRegistrations". All fields are combined with a logical 'AND'. */
export type Analytics_CompletedRegistrations_Bool_Exp = {
    _and?: Maybe<Array<Analytics_CompletedRegistrations_Bool_Exp>>;
    _not?: Maybe<Analytics_CompletedRegistrations_Bool_Exp>;
    _or?: Maybe<Array<Analytics_CompletedRegistrations_Bool_Exp>>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    count?: Maybe<Bigint_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
};

/** input type for inserting data into table "analytics.CompletedRegistrations" */
export type Analytics_CompletedRegistrations_Insert_Input = {
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    count?: Maybe<Scalars["bigint"]>;
    id?: Maybe<Scalars["uuid"]>;
};

/** aggregate max on columns */
export type Analytics_CompletedRegistrations_Max_Fields = {
    __typename?: "analytics_CompletedRegistrations_max_fields";
    count?: Maybe<Scalars["bigint"]>;
    id?: Maybe<Scalars["uuid"]>;
};

/** aggregate min on columns */
export type Analytics_CompletedRegistrations_Min_Fields = {
    __typename?: "analytics_CompletedRegistrations_min_fields";
    count?: Maybe<Scalars["bigint"]>;
    id?: Maybe<Scalars["uuid"]>;
};

/** input type for inserting object relation for remote table "analytics.CompletedRegistrations" */
export type Analytics_CompletedRegistrations_Obj_Rel_Insert_Input = {
    data: Analytics_CompletedRegistrations_Insert_Input;
};

/** Ordering options when selecting data from "analytics.CompletedRegistrations". */
export type Analytics_CompletedRegistrations_Order_By = {
    conference?: Maybe<Conference_Conference_Order_By>;
    count?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
};

/** select columns of table "analytics.CompletedRegistrations" */
export enum Analytics_CompletedRegistrations_Select_Column {
    /** column name */
    Count = "count",
    /** column name */
    Id = "id",
}

/** aggregate stddev on columns */
export type Analytics_CompletedRegistrations_Stddev_Fields = {
    __typename?: "analytics_CompletedRegistrations_stddev_fields";
    count?: Maybe<Scalars["Float"]>;
};

/** aggregate stddev_pop on columns */
export type Analytics_CompletedRegistrations_Stddev_Pop_Fields = {
    __typename?: "analytics_CompletedRegistrations_stddev_pop_fields";
    count?: Maybe<Scalars["Float"]>;
};

/** aggregate stddev_samp on columns */
export type Analytics_CompletedRegistrations_Stddev_Samp_Fields = {
    __typename?: "analytics_CompletedRegistrations_stddev_samp_fields";
    count?: Maybe<Scalars["Float"]>;
};

/** aggregate sum on columns */
export type Analytics_CompletedRegistrations_Sum_Fields = {
    __typename?: "analytics_CompletedRegistrations_sum_fields";
    count?: Maybe<Scalars["bigint"]>;
};

/** aggregate var_pop on columns */
export type Analytics_CompletedRegistrations_Var_Pop_Fields = {
    __typename?: "analytics_CompletedRegistrations_var_pop_fields";
    count?: Maybe<Scalars["Float"]>;
};

/** aggregate var_samp on columns */
export type Analytics_CompletedRegistrations_Var_Samp_Fields = {
    __typename?: "analytics_CompletedRegistrations_var_samp_fields";
    count?: Maybe<Scalars["Float"]>;
};

/** aggregate variance on columns */
export type Analytics_CompletedRegistrations_Variance_Fields = {
    __typename?: "analytics_CompletedRegistrations_variance_fields";
    count?: Maybe<Scalars["Float"]>;
};

/** columns and relationships of "analytics.ContentElementStats" */
export type Analytics_ContentElementStats = {
    __typename?: "analytics_ContentElementStats";
    created_at: Scalars["timestamptz"];
    /** An object relationship */
    element: Content_Element;
    elementId: Scalars["uuid"];
    id: Scalars["uuid"];
    updated_at: Scalars["timestamptz"];
    viewCount: Scalars["Int"];
};

/** aggregated selection of "analytics.ContentElementStats" */
export type Analytics_ContentElementStats_Aggregate = {
    __typename?: "analytics_ContentElementStats_aggregate";
    aggregate?: Maybe<Analytics_ContentElementStats_Aggregate_Fields>;
    nodes: Array<Analytics_ContentElementStats>;
};

/** aggregate fields of "analytics.ContentElementStats" */
export type Analytics_ContentElementStats_Aggregate_Fields = {
    __typename?: "analytics_ContentElementStats_aggregate_fields";
    avg?: Maybe<Analytics_ContentElementStats_Avg_Fields>;
    count: Scalars["Int"];
    max?: Maybe<Analytics_ContentElementStats_Max_Fields>;
    min?: Maybe<Analytics_ContentElementStats_Min_Fields>;
    stddev?: Maybe<Analytics_ContentElementStats_Stddev_Fields>;
    stddev_pop?: Maybe<Analytics_ContentElementStats_Stddev_Pop_Fields>;
    stddev_samp?: Maybe<Analytics_ContentElementStats_Stddev_Samp_Fields>;
    sum?: Maybe<Analytics_ContentElementStats_Sum_Fields>;
    var_pop?: Maybe<Analytics_ContentElementStats_Var_Pop_Fields>;
    var_samp?: Maybe<Analytics_ContentElementStats_Var_Samp_Fields>;
    variance?: Maybe<Analytics_ContentElementStats_Variance_Fields>;
};

/** aggregate fields of "analytics.ContentElementStats" */
export type Analytics_ContentElementStats_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Analytics_ContentElementStats_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "analytics.ContentElementStats" */
export type Analytics_ContentElementStats_Aggregate_Order_By = {
    avg?: Maybe<Analytics_ContentElementStats_Avg_Order_By>;
    count?: Maybe<Order_By>;
    max?: Maybe<Analytics_ContentElementStats_Max_Order_By>;
    min?: Maybe<Analytics_ContentElementStats_Min_Order_By>;
    stddev?: Maybe<Analytics_ContentElementStats_Stddev_Order_By>;
    stddev_pop?: Maybe<Analytics_ContentElementStats_Stddev_Pop_Order_By>;
    stddev_samp?: Maybe<Analytics_ContentElementStats_Stddev_Samp_Order_By>;
    sum?: Maybe<Analytics_ContentElementStats_Sum_Order_By>;
    var_pop?: Maybe<Analytics_ContentElementStats_Var_Pop_Order_By>;
    var_samp?: Maybe<Analytics_ContentElementStats_Var_Samp_Order_By>;
    variance?: Maybe<Analytics_ContentElementStats_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "analytics.ContentElementStats" */
export type Analytics_ContentElementStats_Arr_Rel_Insert_Input = {
    data: Array<Analytics_ContentElementStats_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Analytics_ContentElementStats_On_Conflict>;
};

/** aggregate avg on columns */
export type Analytics_ContentElementStats_Avg_Fields = {
    __typename?: "analytics_ContentElementStats_avg_fields";
    viewCount?: Maybe<Scalars["Float"]>;
};

/** order by avg() on columns of table "analytics.ContentElementStats" */
export type Analytics_ContentElementStats_Avg_Order_By = {
    viewCount?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "analytics.ContentElementStats". All fields are combined with a logical 'AND'. */
export type Analytics_ContentElementStats_Bool_Exp = {
    _and?: Maybe<Array<Analytics_ContentElementStats_Bool_Exp>>;
    _not?: Maybe<Analytics_ContentElementStats_Bool_Exp>;
    _or?: Maybe<Array<Analytics_ContentElementStats_Bool_Exp>>;
    created_at?: Maybe<Timestamptz_Comparison_Exp>;
    element?: Maybe<Content_Element_Bool_Exp>;
    elementId?: Maybe<Uuid_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    updated_at?: Maybe<Timestamptz_Comparison_Exp>;
    viewCount?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "analytics.ContentElementStats" */
export enum Analytics_ContentElementStats_Constraint {
    /** unique or primary key constraint */
    ContentElementStatsIdKey = "ContentElementStats_id_key",
    /** unique or primary key constraint */
    ContentElementStatsPkey = "ContentElementStats_pkey",
}

/** input type for incrementing numeric columns in table "analytics.ContentElementStats" */
export type Analytics_ContentElementStats_Inc_Input = {
    viewCount?: Maybe<Scalars["Int"]>;
};

/** input type for inserting data into table "analytics.ContentElementStats" */
export type Analytics_ContentElementStats_Insert_Input = {
    created_at?: Maybe<Scalars["timestamptz"]>;
    element?: Maybe<Content_Element_Obj_Rel_Insert_Input>;
    elementId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
    viewCount?: Maybe<Scalars["Int"]>;
};

/** aggregate max on columns */
export type Analytics_ContentElementStats_Max_Fields = {
    __typename?: "analytics_ContentElementStats_max_fields";
    created_at?: Maybe<Scalars["timestamptz"]>;
    elementId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
    viewCount?: Maybe<Scalars["Int"]>;
};

/** order by max() on columns of table "analytics.ContentElementStats" */
export type Analytics_ContentElementStats_Max_Order_By = {
    created_at?: Maybe<Order_By>;
    elementId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
    viewCount?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Analytics_ContentElementStats_Min_Fields = {
    __typename?: "analytics_ContentElementStats_min_fields";
    created_at?: Maybe<Scalars["timestamptz"]>;
    elementId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
    viewCount?: Maybe<Scalars["Int"]>;
};

/** order by min() on columns of table "analytics.ContentElementStats" */
export type Analytics_ContentElementStats_Min_Order_By = {
    created_at?: Maybe<Order_By>;
    elementId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
    viewCount?: Maybe<Order_By>;
};

/** response of any mutation on the table "analytics.ContentElementStats" */
export type Analytics_ContentElementStats_Mutation_Response = {
    __typename?: "analytics_ContentElementStats_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Analytics_ContentElementStats>;
};

/** on conflict condition type for table "analytics.ContentElementStats" */
export type Analytics_ContentElementStats_On_Conflict = {
    constraint: Analytics_ContentElementStats_Constraint;
    update_columns?: Array<Analytics_ContentElementStats_Update_Column>;
    where?: Maybe<Analytics_ContentElementStats_Bool_Exp>;
};

/** Ordering options when selecting data from "analytics.ContentElementStats". */
export type Analytics_ContentElementStats_Order_By = {
    created_at?: Maybe<Order_By>;
    element?: Maybe<Content_Element_Order_By>;
    elementId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
    viewCount?: Maybe<Order_By>;
};

/** primary key columns input for table: analytics_ContentElementStats */
export type Analytics_ContentElementStats_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "analytics.ContentElementStats" */
export enum Analytics_ContentElementStats_Select_Column {
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    ElementId = "elementId",
    /** column name */
    Id = "id",
    /** column name */
    UpdatedAt = "updated_at",
    /** column name */
    ViewCount = "viewCount",
}

/** input type for updating data in table "analytics.ContentElementStats" */
export type Analytics_ContentElementStats_Set_Input = {
    created_at?: Maybe<Scalars["timestamptz"]>;
    elementId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
    viewCount?: Maybe<Scalars["Int"]>;
};

/** aggregate stddev on columns */
export type Analytics_ContentElementStats_Stddev_Fields = {
    __typename?: "analytics_ContentElementStats_stddev_fields";
    viewCount?: Maybe<Scalars["Float"]>;
};

/** order by stddev() on columns of table "analytics.ContentElementStats" */
export type Analytics_ContentElementStats_Stddev_Order_By = {
    viewCount?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Analytics_ContentElementStats_Stddev_Pop_Fields = {
    __typename?: "analytics_ContentElementStats_stddev_pop_fields";
    viewCount?: Maybe<Scalars["Float"]>;
};

/** order by stddev_pop() on columns of table "analytics.ContentElementStats" */
export type Analytics_ContentElementStats_Stddev_Pop_Order_By = {
    viewCount?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Analytics_ContentElementStats_Stddev_Samp_Fields = {
    __typename?: "analytics_ContentElementStats_stddev_samp_fields";
    viewCount?: Maybe<Scalars["Float"]>;
};

/** order by stddev_samp() on columns of table "analytics.ContentElementStats" */
export type Analytics_ContentElementStats_Stddev_Samp_Order_By = {
    viewCount?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Analytics_ContentElementStats_Sum_Fields = {
    __typename?: "analytics_ContentElementStats_sum_fields";
    viewCount?: Maybe<Scalars["Int"]>;
};

/** order by sum() on columns of table "analytics.ContentElementStats" */
export type Analytics_ContentElementStats_Sum_Order_By = {
    viewCount?: Maybe<Order_By>;
};

/** update columns of table "analytics.ContentElementStats" */
export enum Analytics_ContentElementStats_Update_Column {
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    ElementId = "elementId",
    /** column name */
    Id = "id",
    /** column name */
    UpdatedAt = "updated_at",
    /** column name */
    ViewCount = "viewCount",
}

/** aggregate var_pop on columns */
export type Analytics_ContentElementStats_Var_Pop_Fields = {
    __typename?: "analytics_ContentElementStats_var_pop_fields";
    viewCount?: Maybe<Scalars["Float"]>;
};

/** order by var_pop() on columns of table "analytics.ContentElementStats" */
export type Analytics_ContentElementStats_Var_Pop_Order_By = {
    viewCount?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Analytics_ContentElementStats_Var_Samp_Fields = {
    __typename?: "analytics_ContentElementStats_var_samp_fields";
    viewCount?: Maybe<Scalars["Float"]>;
};

/** order by var_samp() on columns of table "analytics.ContentElementStats" */
export type Analytics_ContentElementStats_Var_Samp_Order_By = {
    viewCount?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Analytics_ContentElementStats_Variance_Fields = {
    __typename?: "analytics_ContentElementStats_variance_fields";
    viewCount?: Maybe<Scalars["Float"]>;
};

/** order by variance() on columns of table "analytics.ContentElementStats" */
export type Analytics_ContentElementStats_Variance_Order_By = {
    viewCount?: Maybe<Order_By>;
};

/** columns and relationships of "analytics.ContentItemStats" */
export type Analytics_ContentItemStats = {
    __typename?: "analytics_ContentItemStats";
    /** An object relationship */
    contentGroup: Content_Item;
    created_at: Scalars["timestamptz"];
    id: Scalars["uuid"];
    itemId: Scalars["uuid"];
    updated_at: Scalars["timestamptz"];
    viewCount: Scalars["Int"];
};

/** aggregated selection of "analytics.ContentItemStats" */
export type Analytics_ContentItemStats_Aggregate = {
    __typename?: "analytics_ContentItemStats_aggregate";
    aggregate?: Maybe<Analytics_ContentItemStats_Aggregate_Fields>;
    nodes: Array<Analytics_ContentItemStats>;
};

/** aggregate fields of "analytics.ContentItemStats" */
export type Analytics_ContentItemStats_Aggregate_Fields = {
    __typename?: "analytics_ContentItemStats_aggregate_fields";
    avg?: Maybe<Analytics_ContentItemStats_Avg_Fields>;
    count: Scalars["Int"];
    max?: Maybe<Analytics_ContentItemStats_Max_Fields>;
    min?: Maybe<Analytics_ContentItemStats_Min_Fields>;
    stddev?: Maybe<Analytics_ContentItemStats_Stddev_Fields>;
    stddev_pop?: Maybe<Analytics_ContentItemStats_Stddev_Pop_Fields>;
    stddev_samp?: Maybe<Analytics_ContentItemStats_Stddev_Samp_Fields>;
    sum?: Maybe<Analytics_ContentItemStats_Sum_Fields>;
    var_pop?: Maybe<Analytics_ContentItemStats_Var_Pop_Fields>;
    var_samp?: Maybe<Analytics_ContentItemStats_Var_Samp_Fields>;
    variance?: Maybe<Analytics_ContentItemStats_Variance_Fields>;
};

/** aggregate fields of "analytics.ContentItemStats" */
export type Analytics_ContentItemStats_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Analytics_ContentItemStats_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "analytics.ContentItemStats" */
export type Analytics_ContentItemStats_Aggregate_Order_By = {
    avg?: Maybe<Analytics_ContentItemStats_Avg_Order_By>;
    count?: Maybe<Order_By>;
    max?: Maybe<Analytics_ContentItemStats_Max_Order_By>;
    min?: Maybe<Analytics_ContentItemStats_Min_Order_By>;
    stddev?: Maybe<Analytics_ContentItemStats_Stddev_Order_By>;
    stddev_pop?: Maybe<Analytics_ContentItemStats_Stddev_Pop_Order_By>;
    stddev_samp?: Maybe<Analytics_ContentItemStats_Stddev_Samp_Order_By>;
    sum?: Maybe<Analytics_ContentItemStats_Sum_Order_By>;
    var_pop?: Maybe<Analytics_ContentItemStats_Var_Pop_Order_By>;
    var_samp?: Maybe<Analytics_ContentItemStats_Var_Samp_Order_By>;
    variance?: Maybe<Analytics_ContentItemStats_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "analytics.ContentItemStats" */
export type Analytics_ContentItemStats_Arr_Rel_Insert_Input = {
    data: Array<Analytics_ContentItemStats_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Analytics_ContentItemStats_On_Conflict>;
};

/** aggregate avg on columns */
export type Analytics_ContentItemStats_Avg_Fields = {
    __typename?: "analytics_ContentItemStats_avg_fields";
    viewCount?: Maybe<Scalars["Float"]>;
};

/** order by avg() on columns of table "analytics.ContentItemStats" */
export type Analytics_ContentItemStats_Avg_Order_By = {
    viewCount?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "analytics.ContentItemStats". All fields are combined with a logical 'AND'. */
export type Analytics_ContentItemStats_Bool_Exp = {
    _and?: Maybe<Array<Analytics_ContentItemStats_Bool_Exp>>;
    _not?: Maybe<Analytics_ContentItemStats_Bool_Exp>;
    _or?: Maybe<Array<Analytics_ContentItemStats_Bool_Exp>>;
    contentGroup?: Maybe<Content_Item_Bool_Exp>;
    created_at?: Maybe<Timestamptz_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    itemId?: Maybe<Uuid_Comparison_Exp>;
    updated_at?: Maybe<Timestamptz_Comparison_Exp>;
    viewCount?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "analytics.ContentItemStats" */
export enum Analytics_ContentItemStats_Constraint {
    /** unique or primary key constraint */
    ContentItemStatsIdKey = "ContentItemStats_id_key",
    /** unique or primary key constraint */
    ContentItemStatsPkey = "ContentItemStats_pkey",
}

/** input type for incrementing numeric columns in table "analytics.ContentItemStats" */
export type Analytics_ContentItemStats_Inc_Input = {
    viewCount?: Maybe<Scalars["Int"]>;
};

/** input type for inserting data into table "analytics.ContentItemStats" */
export type Analytics_ContentItemStats_Insert_Input = {
    contentGroup?: Maybe<Content_Item_Obj_Rel_Insert_Input>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    itemId?: Maybe<Scalars["uuid"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
    viewCount?: Maybe<Scalars["Int"]>;
};

/** aggregate max on columns */
export type Analytics_ContentItemStats_Max_Fields = {
    __typename?: "analytics_ContentItemStats_max_fields";
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    itemId?: Maybe<Scalars["uuid"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
    viewCount?: Maybe<Scalars["Int"]>;
};

/** order by max() on columns of table "analytics.ContentItemStats" */
export type Analytics_ContentItemStats_Max_Order_By = {
    created_at?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    itemId?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
    viewCount?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Analytics_ContentItemStats_Min_Fields = {
    __typename?: "analytics_ContentItemStats_min_fields";
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    itemId?: Maybe<Scalars["uuid"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
    viewCount?: Maybe<Scalars["Int"]>;
};

/** order by min() on columns of table "analytics.ContentItemStats" */
export type Analytics_ContentItemStats_Min_Order_By = {
    created_at?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    itemId?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
    viewCount?: Maybe<Order_By>;
};

/** response of any mutation on the table "analytics.ContentItemStats" */
export type Analytics_ContentItemStats_Mutation_Response = {
    __typename?: "analytics_ContentItemStats_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Analytics_ContentItemStats>;
};

/** on conflict condition type for table "analytics.ContentItemStats" */
export type Analytics_ContentItemStats_On_Conflict = {
    constraint: Analytics_ContentItemStats_Constraint;
    update_columns?: Array<Analytics_ContentItemStats_Update_Column>;
    where?: Maybe<Analytics_ContentItemStats_Bool_Exp>;
};

/** Ordering options when selecting data from "analytics.ContentItemStats". */
export type Analytics_ContentItemStats_Order_By = {
    contentGroup?: Maybe<Content_Item_Order_By>;
    created_at?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    itemId?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
    viewCount?: Maybe<Order_By>;
};

/** primary key columns input for table: analytics_ContentItemStats */
export type Analytics_ContentItemStats_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "analytics.ContentItemStats" */
export enum Analytics_ContentItemStats_Select_Column {
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    Id = "id",
    /** column name */
    ItemId = "itemId",
    /** column name */
    UpdatedAt = "updated_at",
    /** column name */
    ViewCount = "viewCount",
}

/** input type for updating data in table "analytics.ContentItemStats" */
export type Analytics_ContentItemStats_Set_Input = {
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    itemId?: Maybe<Scalars["uuid"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
    viewCount?: Maybe<Scalars["Int"]>;
};

/** aggregate stddev on columns */
export type Analytics_ContentItemStats_Stddev_Fields = {
    __typename?: "analytics_ContentItemStats_stddev_fields";
    viewCount?: Maybe<Scalars["Float"]>;
};

/** order by stddev() on columns of table "analytics.ContentItemStats" */
export type Analytics_ContentItemStats_Stddev_Order_By = {
    viewCount?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Analytics_ContentItemStats_Stddev_Pop_Fields = {
    __typename?: "analytics_ContentItemStats_stddev_pop_fields";
    viewCount?: Maybe<Scalars["Float"]>;
};

/** order by stddev_pop() on columns of table "analytics.ContentItemStats" */
export type Analytics_ContentItemStats_Stddev_Pop_Order_By = {
    viewCount?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Analytics_ContentItemStats_Stddev_Samp_Fields = {
    __typename?: "analytics_ContentItemStats_stddev_samp_fields";
    viewCount?: Maybe<Scalars["Float"]>;
};

/** order by stddev_samp() on columns of table "analytics.ContentItemStats" */
export type Analytics_ContentItemStats_Stddev_Samp_Order_By = {
    viewCount?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Analytics_ContentItemStats_Sum_Fields = {
    __typename?: "analytics_ContentItemStats_sum_fields";
    viewCount?: Maybe<Scalars["Int"]>;
};

/** order by sum() on columns of table "analytics.ContentItemStats" */
export type Analytics_ContentItemStats_Sum_Order_By = {
    viewCount?: Maybe<Order_By>;
};

/** update columns of table "analytics.ContentItemStats" */
export enum Analytics_ContentItemStats_Update_Column {
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    Id = "id",
    /** column name */
    ItemId = "itemId",
    /** column name */
    UpdatedAt = "updated_at",
    /** column name */
    ViewCount = "viewCount",
}

/** aggregate var_pop on columns */
export type Analytics_ContentItemStats_Var_Pop_Fields = {
    __typename?: "analytics_ContentItemStats_var_pop_fields";
    viewCount?: Maybe<Scalars["Float"]>;
};

/** order by var_pop() on columns of table "analytics.ContentItemStats" */
export type Analytics_ContentItemStats_Var_Pop_Order_By = {
    viewCount?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Analytics_ContentItemStats_Var_Samp_Fields = {
    __typename?: "analytics_ContentItemStats_var_samp_fields";
    viewCount?: Maybe<Scalars["Float"]>;
};

/** order by var_samp() on columns of table "analytics.ContentItemStats" */
export type Analytics_ContentItemStats_Var_Samp_Order_By = {
    viewCount?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Analytics_ContentItemStats_Variance_Fields = {
    __typename?: "analytics_ContentItemStats_variance_fields";
    viewCount?: Maybe<Scalars["Float"]>;
};

/** order by variance() on columns of table "analytics.ContentItemStats" */
export type Analytics_ContentItemStats_Variance_Order_By = {
    viewCount?: Maybe<Order_By>;
};

/** columns and relationships of "analytics.ElementTotalViews" */
export type Analytics_ElementTotalViews = {
    __typename?: "analytics_ElementTotalViews";
    /** An object relationship */
    element?: Maybe<Content_Element>;
    elementId?: Maybe<Scalars["uuid"]>;
    totalViewCount?: Maybe<Scalars["bigint"]>;
};

/** aggregated selection of "analytics.ElementTotalViews" */
export type Analytics_ElementTotalViews_Aggregate = {
    __typename?: "analytics_ElementTotalViews_aggregate";
    aggregate?: Maybe<Analytics_ElementTotalViews_Aggregate_Fields>;
    nodes: Array<Analytics_ElementTotalViews>;
};

/** aggregate fields of "analytics.ElementTotalViews" */
export type Analytics_ElementTotalViews_Aggregate_Fields = {
    __typename?: "analytics_ElementTotalViews_aggregate_fields";
    avg?: Maybe<Analytics_ElementTotalViews_Avg_Fields>;
    count: Scalars["Int"];
    max?: Maybe<Analytics_ElementTotalViews_Max_Fields>;
    min?: Maybe<Analytics_ElementTotalViews_Min_Fields>;
    stddev?: Maybe<Analytics_ElementTotalViews_Stddev_Fields>;
    stddev_pop?: Maybe<Analytics_ElementTotalViews_Stddev_Pop_Fields>;
    stddev_samp?: Maybe<Analytics_ElementTotalViews_Stddev_Samp_Fields>;
    sum?: Maybe<Analytics_ElementTotalViews_Sum_Fields>;
    var_pop?: Maybe<Analytics_ElementTotalViews_Var_Pop_Fields>;
    var_samp?: Maybe<Analytics_ElementTotalViews_Var_Samp_Fields>;
    variance?: Maybe<Analytics_ElementTotalViews_Variance_Fields>;
};

/** aggregate fields of "analytics.ElementTotalViews" */
export type Analytics_ElementTotalViews_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Analytics_ElementTotalViews_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** aggregate avg on columns */
export type Analytics_ElementTotalViews_Avg_Fields = {
    __typename?: "analytics_ElementTotalViews_avg_fields";
    totalViewCount?: Maybe<Scalars["Float"]>;
};

/** Boolean expression to filter rows from the table "analytics.ElementTotalViews". All fields are combined with a logical 'AND'. */
export type Analytics_ElementTotalViews_Bool_Exp = {
    _and?: Maybe<Array<Analytics_ElementTotalViews_Bool_Exp>>;
    _not?: Maybe<Analytics_ElementTotalViews_Bool_Exp>;
    _or?: Maybe<Array<Analytics_ElementTotalViews_Bool_Exp>>;
    element?: Maybe<Content_Element_Bool_Exp>;
    elementId?: Maybe<Uuid_Comparison_Exp>;
    totalViewCount?: Maybe<Bigint_Comparison_Exp>;
};

/** input type for inserting data into table "analytics.ElementTotalViews" */
export type Analytics_ElementTotalViews_Insert_Input = {
    element?: Maybe<Content_Element_Obj_Rel_Insert_Input>;
    elementId?: Maybe<Scalars["uuid"]>;
    totalViewCount?: Maybe<Scalars["bigint"]>;
};

/** aggregate max on columns */
export type Analytics_ElementTotalViews_Max_Fields = {
    __typename?: "analytics_ElementTotalViews_max_fields";
    elementId?: Maybe<Scalars["uuid"]>;
    totalViewCount?: Maybe<Scalars["bigint"]>;
};

/** aggregate min on columns */
export type Analytics_ElementTotalViews_Min_Fields = {
    __typename?: "analytics_ElementTotalViews_min_fields";
    elementId?: Maybe<Scalars["uuid"]>;
    totalViewCount?: Maybe<Scalars["bigint"]>;
};

/** input type for inserting object relation for remote table "analytics.ElementTotalViews" */
export type Analytics_ElementTotalViews_Obj_Rel_Insert_Input = {
    data: Analytics_ElementTotalViews_Insert_Input;
};

/** Ordering options when selecting data from "analytics.ElementTotalViews". */
export type Analytics_ElementTotalViews_Order_By = {
    element?: Maybe<Content_Element_Order_By>;
    elementId?: Maybe<Order_By>;
    totalViewCount?: Maybe<Order_By>;
};

/** select columns of table "analytics.ElementTotalViews" */
export enum Analytics_ElementTotalViews_Select_Column {
    /** column name */
    ElementId = "elementId",
    /** column name */
    TotalViewCount = "totalViewCount",
}

/** aggregate stddev on columns */
export type Analytics_ElementTotalViews_Stddev_Fields = {
    __typename?: "analytics_ElementTotalViews_stddev_fields";
    totalViewCount?: Maybe<Scalars["Float"]>;
};

/** aggregate stddev_pop on columns */
export type Analytics_ElementTotalViews_Stddev_Pop_Fields = {
    __typename?: "analytics_ElementTotalViews_stddev_pop_fields";
    totalViewCount?: Maybe<Scalars["Float"]>;
};

/** aggregate stddev_samp on columns */
export type Analytics_ElementTotalViews_Stddev_Samp_Fields = {
    __typename?: "analytics_ElementTotalViews_stddev_samp_fields";
    totalViewCount?: Maybe<Scalars["Float"]>;
};

/** aggregate sum on columns */
export type Analytics_ElementTotalViews_Sum_Fields = {
    __typename?: "analytics_ElementTotalViews_sum_fields";
    totalViewCount?: Maybe<Scalars["bigint"]>;
};

/** aggregate var_pop on columns */
export type Analytics_ElementTotalViews_Var_Pop_Fields = {
    __typename?: "analytics_ElementTotalViews_var_pop_fields";
    totalViewCount?: Maybe<Scalars["Float"]>;
};

/** aggregate var_samp on columns */
export type Analytics_ElementTotalViews_Var_Samp_Fields = {
    __typename?: "analytics_ElementTotalViews_var_samp_fields";
    totalViewCount?: Maybe<Scalars["Float"]>;
};

/** aggregate variance on columns */
export type Analytics_ElementTotalViews_Variance_Fields = {
    __typename?: "analytics_ElementTotalViews_variance_fields";
    totalViewCount?: Maybe<Scalars["Float"]>;
};

/** columns and relationships of "analytics.ItemTotalViews" */
export type Analytics_ItemTotalViews = {
    __typename?: "analytics_ItemTotalViews";
    /** An object relationship */
    item?: Maybe<Content_Item>;
    itemId?: Maybe<Scalars["uuid"]>;
    totalViewCount?: Maybe<Scalars["bigint"]>;
};

/** aggregated selection of "analytics.ItemTotalViews" */
export type Analytics_ItemTotalViews_Aggregate = {
    __typename?: "analytics_ItemTotalViews_aggregate";
    aggregate?: Maybe<Analytics_ItemTotalViews_Aggregate_Fields>;
    nodes: Array<Analytics_ItemTotalViews>;
};

/** aggregate fields of "analytics.ItemTotalViews" */
export type Analytics_ItemTotalViews_Aggregate_Fields = {
    __typename?: "analytics_ItemTotalViews_aggregate_fields";
    avg?: Maybe<Analytics_ItemTotalViews_Avg_Fields>;
    count: Scalars["Int"];
    max?: Maybe<Analytics_ItemTotalViews_Max_Fields>;
    min?: Maybe<Analytics_ItemTotalViews_Min_Fields>;
    stddev?: Maybe<Analytics_ItemTotalViews_Stddev_Fields>;
    stddev_pop?: Maybe<Analytics_ItemTotalViews_Stddev_Pop_Fields>;
    stddev_samp?: Maybe<Analytics_ItemTotalViews_Stddev_Samp_Fields>;
    sum?: Maybe<Analytics_ItemTotalViews_Sum_Fields>;
    var_pop?: Maybe<Analytics_ItemTotalViews_Var_Pop_Fields>;
    var_samp?: Maybe<Analytics_ItemTotalViews_Var_Samp_Fields>;
    variance?: Maybe<Analytics_ItemTotalViews_Variance_Fields>;
};

/** aggregate fields of "analytics.ItemTotalViews" */
export type Analytics_ItemTotalViews_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Analytics_ItemTotalViews_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** aggregate avg on columns */
export type Analytics_ItemTotalViews_Avg_Fields = {
    __typename?: "analytics_ItemTotalViews_avg_fields";
    totalViewCount?: Maybe<Scalars["Float"]>;
};

/** Boolean expression to filter rows from the table "analytics.ItemTotalViews". All fields are combined with a logical 'AND'. */
export type Analytics_ItemTotalViews_Bool_Exp = {
    _and?: Maybe<Array<Analytics_ItemTotalViews_Bool_Exp>>;
    _not?: Maybe<Analytics_ItemTotalViews_Bool_Exp>;
    _or?: Maybe<Array<Analytics_ItemTotalViews_Bool_Exp>>;
    item?: Maybe<Content_Item_Bool_Exp>;
    itemId?: Maybe<Uuid_Comparison_Exp>;
    totalViewCount?: Maybe<Bigint_Comparison_Exp>;
};

/** input type for inserting data into table "analytics.ItemTotalViews" */
export type Analytics_ItemTotalViews_Insert_Input = {
    item?: Maybe<Content_Item_Obj_Rel_Insert_Input>;
    itemId?: Maybe<Scalars["uuid"]>;
    totalViewCount?: Maybe<Scalars["bigint"]>;
};

/** aggregate max on columns */
export type Analytics_ItemTotalViews_Max_Fields = {
    __typename?: "analytics_ItemTotalViews_max_fields";
    itemId?: Maybe<Scalars["uuid"]>;
    totalViewCount?: Maybe<Scalars["bigint"]>;
};

/** aggregate min on columns */
export type Analytics_ItemTotalViews_Min_Fields = {
    __typename?: "analytics_ItemTotalViews_min_fields";
    itemId?: Maybe<Scalars["uuid"]>;
    totalViewCount?: Maybe<Scalars["bigint"]>;
};

/** input type for inserting object relation for remote table "analytics.ItemTotalViews" */
export type Analytics_ItemTotalViews_Obj_Rel_Insert_Input = {
    data: Analytics_ItemTotalViews_Insert_Input;
};

/** Ordering options when selecting data from "analytics.ItemTotalViews". */
export type Analytics_ItemTotalViews_Order_By = {
    item?: Maybe<Content_Item_Order_By>;
    itemId?: Maybe<Order_By>;
    totalViewCount?: Maybe<Order_By>;
};

/** select columns of table "analytics.ItemTotalViews" */
export enum Analytics_ItemTotalViews_Select_Column {
    /** column name */
    ItemId = "itemId",
    /** column name */
    TotalViewCount = "totalViewCount",
}

/** aggregate stddev on columns */
export type Analytics_ItemTotalViews_Stddev_Fields = {
    __typename?: "analytics_ItemTotalViews_stddev_fields";
    totalViewCount?: Maybe<Scalars["Float"]>;
};

/** aggregate stddev_pop on columns */
export type Analytics_ItemTotalViews_Stddev_Pop_Fields = {
    __typename?: "analytics_ItemTotalViews_stddev_pop_fields";
    totalViewCount?: Maybe<Scalars["Float"]>;
};

/** aggregate stddev_samp on columns */
export type Analytics_ItemTotalViews_Stddev_Samp_Fields = {
    __typename?: "analytics_ItemTotalViews_stddev_samp_fields";
    totalViewCount?: Maybe<Scalars["Float"]>;
};

/** aggregate sum on columns */
export type Analytics_ItemTotalViews_Sum_Fields = {
    __typename?: "analytics_ItemTotalViews_sum_fields";
    totalViewCount?: Maybe<Scalars["bigint"]>;
};

/** aggregate var_pop on columns */
export type Analytics_ItemTotalViews_Var_Pop_Fields = {
    __typename?: "analytics_ItemTotalViews_var_pop_fields";
    totalViewCount?: Maybe<Scalars["Float"]>;
};

/** aggregate var_samp on columns */
export type Analytics_ItemTotalViews_Var_Samp_Fields = {
    __typename?: "analytics_ItemTotalViews_var_samp_fields";
    totalViewCount?: Maybe<Scalars["Float"]>;
};

/** aggregate variance on columns */
export type Analytics_ItemTotalViews_Variance_Fields = {
    __typename?: "analytics_ItemTotalViews_variance_fields";
    totalViewCount?: Maybe<Scalars["Float"]>;
};

/** columns and relationships of "analytics.RoomPresence" */
export type Analytics_RoomPresence = {
    __typename?: "analytics_RoomPresence";
    count?: Maybe<Scalars["jsonb"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
    /** An object relationship */
    room?: Maybe<Room_Room>;
};

/** columns and relationships of "analytics.RoomPresence" */
export type Analytics_RoomPresenceCountArgs = {
    path?: Maybe<Scalars["String"]>;
};

/** aggregated selection of "analytics.RoomPresence" */
export type Analytics_RoomPresence_Aggregate = {
    __typename?: "analytics_RoomPresence_aggregate";
    aggregate?: Maybe<Analytics_RoomPresence_Aggregate_Fields>;
    nodes: Array<Analytics_RoomPresence>;
};

/** aggregate fields of "analytics.RoomPresence" */
export type Analytics_RoomPresence_Aggregate_Fields = {
    __typename?: "analytics_RoomPresence_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Analytics_RoomPresence_Max_Fields>;
    min?: Maybe<Analytics_RoomPresence_Min_Fields>;
};

/** aggregate fields of "analytics.RoomPresence" */
export type Analytics_RoomPresence_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Analytics_RoomPresence_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "analytics.RoomPresence" */
export type Analytics_RoomPresence_Aggregate_Order_By = {
    count?: Maybe<Order_By>;
    max?: Maybe<Analytics_RoomPresence_Max_Order_By>;
    min?: Maybe<Analytics_RoomPresence_Min_Order_By>;
};

/** input type for inserting array relation for remote table "analytics.RoomPresence" */
export type Analytics_RoomPresence_Arr_Rel_Insert_Input = {
    data: Array<Analytics_RoomPresence_Insert_Input>;
};

/** Boolean expression to filter rows from the table "analytics.RoomPresence". All fields are combined with a logical 'AND'. */
export type Analytics_RoomPresence_Bool_Exp = {
    _and?: Maybe<Array<Analytics_RoomPresence_Bool_Exp>>;
    _not?: Maybe<Analytics_RoomPresence_Bool_Exp>;
    _or?: Maybe<Array<Analytics_RoomPresence_Bool_Exp>>;
    count?: Maybe<Jsonb_Comparison_Exp>;
    created_at?: Maybe<Timestamptz_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    name?: Maybe<String_Comparison_Exp>;
    room?: Maybe<Room_Room_Bool_Exp>;
};

/** input type for inserting data into table "analytics.RoomPresence" */
export type Analytics_RoomPresence_Insert_Input = {
    count?: Maybe<Scalars["jsonb"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
    room?: Maybe<Room_Room_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Analytics_RoomPresence_Max_Fields = {
    __typename?: "analytics_RoomPresence_max_fields";
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
};

/** order by max() on columns of table "analytics.RoomPresence" */
export type Analytics_RoomPresence_Max_Order_By = {
    created_at?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Analytics_RoomPresence_Min_Fields = {
    __typename?: "analytics_RoomPresence_min_fields";
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
};

/** order by min() on columns of table "analytics.RoomPresence" */
export type Analytics_RoomPresence_Min_Order_By = {
    created_at?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
};

/** Ordering options when selecting data from "analytics.RoomPresence". */
export type Analytics_RoomPresence_Order_By = {
    count?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    room?: Maybe<Room_Room_Order_By>;
};

/** select columns of table "analytics.RoomPresence" */
export enum Analytics_RoomPresence_Select_Column {
    /** column name */
    Count = "count",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    Id = "id",
    /** column name */
    Name = "name",
}

/** columns and relationships of "analytics.RoomStats" */
export type Analytics_RoomStats = {
    __typename?: "analytics_RoomStats";
    created_at: Scalars["timestamptz"];
    hlsViewCount: Scalars["Int"];
    id: Scalars["uuid"];
    /** An object relationship */
    room: Room_Room;
    roomId: Scalars["uuid"];
    updated_at: Scalars["timestamptz"];
};

/** aggregated selection of "analytics.RoomStats" */
export type Analytics_RoomStats_Aggregate = {
    __typename?: "analytics_RoomStats_aggregate";
    aggregate?: Maybe<Analytics_RoomStats_Aggregate_Fields>;
    nodes: Array<Analytics_RoomStats>;
};

/** aggregate fields of "analytics.RoomStats" */
export type Analytics_RoomStats_Aggregate_Fields = {
    __typename?: "analytics_RoomStats_aggregate_fields";
    avg?: Maybe<Analytics_RoomStats_Avg_Fields>;
    count: Scalars["Int"];
    max?: Maybe<Analytics_RoomStats_Max_Fields>;
    min?: Maybe<Analytics_RoomStats_Min_Fields>;
    stddev?: Maybe<Analytics_RoomStats_Stddev_Fields>;
    stddev_pop?: Maybe<Analytics_RoomStats_Stddev_Pop_Fields>;
    stddev_samp?: Maybe<Analytics_RoomStats_Stddev_Samp_Fields>;
    sum?: Maybe<Analytics_RoomStats_Sum_Fields>;
    var_pop?: Maybe<Analytics_RoomStats_Var_Pop_Fields>;
    var_samp?: Maybe<Analytics_RoomStats_Var_Samp_Fields>;
    variance?: Maybe<Analytics_RoomStats_Variance_Fields>;
};

/** aggregate fields of "analytics.RoomStats" */
export type Analytics_RoomStats_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Analytics_RoomStats_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "analytics.RoomStats" */
export type Analytics_RoomStats_Aggregate_Order_By = {
    avg?: Maybe<Analytics_RoomStats_Avg_Order_By>;
    count?: Maybe<Order_By>;
    max?: Maybe<Analytics_RoomStats_Max_Order_By>;
    min?: Maybe<Analytics_RoomStats_Min_Order_By>;
    stddev?: Maybe<Analytics_RoomStats_Stddev_Order_By>;
    stddev_pop?: Maybe<Analytics_RoomStats_Stddev_Pop_Order_By>;
    stddev_samp?: Maybe<Analytics_RoomStats_Stddev_Samp_Order_By>;
    sum?: Maybe<Analytics_RoomStats_Sum_Order_By>;
    var_pop?: Maybe<Analytics_RoomStats_Var_Pop_Order_By>;
    var_samp?: Maybe<Analytics_RoomStats_Var_Samp_Order_By>;
    variance?: Maybe<Analytics_RoomStats_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "analytics.RoomStats" */
export type Analytics_RoomStats_Arr_Rel_Insert_Input = {
    data: Array<Analytics_RoomStats_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Analytics_RoomStats_On_Conflict>;
};

/** aggregate avg on columns */
export type Analytics_RoomStats_Avg_Fields = {
    __typename?: "analytics_RoomStats_avg_fields";
    hlsViewCount?: Maybe<Scalars["Float"]>;
};

/** order by avg() on columns of table "analytics.RoomStats" */
export type Analytics_RoomStats_Avg_Order_By = {
    hlsViewCount?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "analytics.RoomStats". All fields are combined with a logical 'AND'. */
export type Analytics_RoomStats_Bool_Exp = {
    _and?: Maybe<Array<Analytics_RoomStats_Bool_Exp>>;
    _not?: Maybe<Analytics_RoomStats_Bool_Exp>;
    _or?: Maybe<Array<Analytics_RoomStats_Bool_Exp>>;
    created_at?: Maybe<Timestamptz_Comparison_Exp>;
    hlsViewCount?: Maybe<Int_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    room?: Maybe<Room_Room_Bool_Exp>;
    roomId?: Maybe<Uuid_Comparison_Exp>;
    updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "analytics.RoomStats" */
export enum Analytics_RoomStats_Constraint {
    /** unique or primary key constraint */
    RoomStatsPkey = "RoomStats_pkey",
}

/** input type for incrementing numeric columns in table "analytics.RoomStats" */
export type Analytics_RoomStats_Inc_Input = {
    hlsViewCount?: Maybe<Scalars["Int"]>;
};

/** input type for inserting data into table "analytics.RoomStats" */
export type Analytics_RoomStats_Insert_Input = {
    created_at?: Maybe<Scalars["timestamptz"]>;
    hlsViewCount?: Maybe<Scalars["Int"]>;
    id?: Maybe<Scalars["uuid"]>;
    room?: Maybe<Room_Room_Obj_Rel_Insert_Input>;
    roomId?: Maybe<Scalars["uuid"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Analytics_RoomStats_Max_Fields = {
    __typename?: "analytics_RoomStats_max_fields";
    created_at?: Maybe<Scalars["timestamptz"]>;
    hlsViewCount?: Maybe<Scalars["Int"]>;
    id?: Maybe<Scalars["uuid"]>;
    roomId?: Maybe<Scalars["uuid"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** order by max() on columns of table "analytics.RoomStats" */
export type Analytics_RoomStats_Max_Order_By = {
    created_at?: Maybe<Order_By>;
    hlsViewCount?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    roomId?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Analytics_RoomStats_Min_Fields = {
    __typename?: "analytics_RoomStats_min_fields";
    created_at?: Maybe<Scalars["timestamptz"]>;
    hlsViewCount?: Maybe<Scalars["Int"]>;
    id?: Maybe<Scalars["uuid"]>;
    roomId?: Maybe<Scalars["uuid"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** order by min() on columns of table "analytics.RoomStats" */
export type Analytics_RoomStats_Min_Order_By = {
    created_at?: Maybe<Order_By>;
    hlsViewCount?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    roomId?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** response of any mutation on the table "analytics.RoomStats" */
export type Analytics_RoomStats_Mutation_Response = {
    __typename?: "analytics_RoomStats_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Analytics_RoomStats>;
};

/** on conflict condition type for table "analytics.RoomStats" */
export type Analytics_RoomStats_On_Conflict = {
    constraint: Analytics_RoomStats_Constraint;
    update_columns?: Array<Analytics_RoomStats_Update_Column>;
    where?: Maybe<Analytics_RoomStats_Bool_Exp>;
};

/** Ordering options when selecting data from "analytics.RoomStats". */
export type Analytics_RoomStats_Order_By = {
    created_at?: Maybe<Order_By>;
    hlsViewCount?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    room?: Maybe<Room_Room_Order_By>;
    roomId?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** primary key columns input for table: analytics_RoomStats */
export type Analytics_RoomStats_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "analytics.RoomStats" */
export enum Analytics_RoomStats_Select_Column {
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    HlsViewCount = "hlsViewCount",
    /** column name */
    Id = "id",
    /** column name */
    RoomId = "roomId",
    /** column name */
    UpdatedAt = "updated_at",
}

/** input type for updating data in table "analytics.RoomStats" */
export type Analytics_RoomStats_Set_Input = {
    created_at?: Maybe<Scalars["timestamptz"]>;
    hlsViewCount?: Maybe<Scalars["Int"]>;
    id?: Maybe<Scalars["uuid"]>;
    roomId?: Maybe<Scalars["uuid"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate stddev on columns */
export type Analytics_RoomStats_Stddev_Fields = {
    __typename?: "analytics_RoomStats_stddev_fields";
    hlsViewCount?: Maybe<Scalars["Float"]>;
};

/** order by stddev() on columns of table "analytics.RoomStats" */
export type Analytics_RoomStats_Stddev_Order_By = {
    hlsViewCount?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Analytics_RoomStats_Stddev_Pop_Fields = {
    __typename?: "analytics_RoomStats_stddev_pop_fields";
    hlsViewCount?: Maybe<Scalars["Float"]>;
};

/** order by stddev_pop() on columns of table "analytics.RoomStats" */
export type Analytics_RoomStats_Stddev_Pop_Order_By = {
    hlsViewCount?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Analytics_RoomStats_Stddev_Samp_Fields = {
    __typename?: "analytics_RoomStats_stddev_samp_fields";
    hlsViewCount?: Maybe<Scalars["Float"]>;
};

/** order by stddev_samp() on columns of table "analytics.RoomStats" */
export type Analytics_RoomStats_Stddev_Samp_Order_By = {
    hlsViewCount?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Analytics_RoomStats_Sum_Fields = {
    __typename?: "analytics_RoomStats_sum_fields";
    hlsViewCount?: Maybe<Scalars["Int"]>;
};

/** order by sum() on columns of table "analytics.RoomStats" */
export type Analytics_RoomStats_Sum_Order_By = {
    hlsViewCount?: Maybe<Order_By>;
};

/** update columns of table "analytics.RoomStats" */
export enum Analytics_RoomStats_Update_Column {
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    HlsViewCount = "hlsViewCount",
    /** column name */
    Id = "id",
    /** column name */
    RoomId = "roomId",
    /** column name */
    UpdatedAt = "updated_at",
}

/** aggregate var_pop on columns */
export type Analytics_RoomStats_Var_Pop_Fields = {
    __typename?: "analytics_RoomStats_var_pop_fields";
    hlsViewCount?: Maybe<Scalars["Float"]>;
};

/** order by var_pop() on columns of table "analytics.RoomStats" */
export type Analytics_RoomStats_Var_Pop_Order_By = {
    hlsViewCount?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Analytics_RoomStats_Var_Samp_Fields = {
    __typename?: "analytics_RoomStats_var_samp_fields";
    hlsViewCount?: Maybe<Scalars["Float"]>;
};

/** order by var_samp() on columns of table "analytics.RoomStats" */
export type Analytics_RoomStats_Var_Samp_Order_By = {
    hlsViewCount?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Analytics_RoomStats_Variance_Fields = {
    __typename?: "analytics_RoomStats_variance_fields";
    hlsViewCount?: Maybe<Scalars["Float"]>;
};

/** order by variance() on columns of table "analytics.RoomStats" */
export type Analytics_RoomStats_Variance_Order_By = {
    hlsViewCount?: Maybe<Order_By>;
};

/** columns and relationships of "analytics.mat_ElementTotalViews" */
export type Analytics_Mat_ElementTotalViews = {
    __typename?: "analytics_mat_ElementTotalViews";
    elementId?: Maybe<Scalars["uuid"]>;
    totalViewCount?: Maybe<Scalars["bigint"]>;
};

/** aggregated selection of "analytics.mat_ElementTotalViews" */
export type Analytics_Mat_ElementTotalViews_Aggregate = {
    __typename?: "analytics_mat_ElementTotalViews_aggregate";
    aggregate?: Maybe<Analytics_Mat_ElementTotalViews_Aggregate_Fields>;
    nodes: Array<Analytics_Mat_ElementTotalViews>;
};

/** aggregate fields of "analytics.mat_ElementTotalViews" */
export type Analytics_Mat_ElementTotalViews_Aggregate_Fields = {
    __typename?: "analytics_mat_ElementTotalViews_aggregate_fields";
    avg?: Maybe<Analytics_Mat_ElementTotalViews_Avg_Fields>;
    count: Scalars["Int"];
    max?: Maybe<Analytics_Mat_ElementTotalViews_Max_Fields>;
    min?: Maybe<Analytics_Mat_ElementTotalViews_Min_Fields>;
    stddev?: Maybe<Analytics_Mat_ElementTotalViews_Stddev_Fields>;
    stddev_pop?: Maybe<Analytics_Mat_ElementTotalViews_Stddev_Pop_Fields>;
    stddev_samp?: Maybe<Analytics_Mat_ElementTotalViews_Stddev_Samp_Fields>;
    sum?: Maybe<Analytics_Mat_ElementTotalViews_Sum_Fields>;
    var_pop?: Maybe<Analytics_Mat_ElementTotalViews_Var_Pop_Fields>;
    var_samp?: Maybe<Analytics_Mat_ElementTotalViews_Var_Samp_Fields>;
    variance?: Maybe<Analytics_Mat_ElementTotalViews_Variance_Fields>;
};

/** aggregate fields of "analytics.mat_ElementTotalViews" */
export type Analytics_Mat_ElementTotalViews_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Analytics_Mat_ElementTotalViews_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** aggregate avg on columns */
export type Analytics_Mat_ElementTotalViews_Avg_Fields = {
    __typename?: "analytics_mat_ElementTotalViews_avg_fields";
    totalViewCount?: Maybe<Scalars["Float"]>;
};

/** Boolean expression to filter rows from the table "analytics.mat_ElementTotalViews". All fields are combined with a logical 'AND'. */
export type Analytics_Mat_ElementTotalViews_Bool_Exp = {
    _and?: Maybe<Array<Analytics_Mat_ElementTotalViews_Bool_Exp>>;
    _not?: Maybe<Analytics_Mat_ElementTotalViews_Bool_Exp>;
    _or?: Maybe<Array<Analytics_Mat_ElementTotalViews_Bool_Exp>>;
    elementId?: Maybe<Uuid_Comparison_Exp>;
    totalViewCount?: Maybe<Bigint_Comparison_Exp>;
};

/** input type for incrementing numeric columns in table "analytics.mat_ElementTotalViews" */
export type Analytics_Mat_ElementTotalViews_Inc_Input = {
    totalViewCount?: Maybe<Scalars["bigint"]>;
};

/** input type for inserting data into table "analytics.mat_ElementTotalViews" */
export type Analytics_Mat_ElementTotalViews_Insert_Input = {
    elementId?: Maybe<Scalars["uuid"]>;
    totalViewCount?: Maybe<Scalars["bigint"]>;
};

/** aggregate max on columns */
export type Analytics_Mat_ElementTotalViews_Max_Fields = {
    __typename?: "analytics_mat_ElementTotalViews_max_fields";
    elementId?: Maybe<Scalars["uuid"]>;
    totalViewCount?: Maybe<Scalars["bigint"]>;
};

/** aggregate min on columns */
export type Analytics_Mat_ElementTotalViews_Min_Fields = {
    __typename?: "analytics_mat_ElementTotalViews_min_fields";
    elementId?: Maybe<Scalars["uuid"]>;
    totalViewCount?: Maybe<Scalars["bigint"]>;
};

/** response of any mutation on the table "analytics.mat_ElementTotalViews" */
export type Analytics_Mat_ElementTotalViews_Mutation_Response = {
    __typename?: "analytics_mat_ElementTotalViews_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Analytics_Mat_ElementTotalViews>;
};

/** Ordering options when selecting data from "analytics.mat_ElementTotalViews". */
export type Analytics_Mat_ElementTotalViews_Order_By = {
    elementId?: Maybe<Order_By>;
    totalViewCount?: Maybe<Order_By>;
};

/** select columns of table "analytics.mat_ElementTotalViews" */
export enum Analytics_Mat_ElementTotalViews_Select_Column {
    /** column name */
    ElementId = "elementId",
    /** column name */
    TotalViewCount = "totalViewCount",
}

/** input type for updating data in table "analytics.mat_ElementTotalViews" */
export type Analytics_Mat_ElementTotalViews_Set_Input = {
    elementId?: Maybe<Scalars["uuid"]>;
    totalViewCount?: Maybe<Scalars["bigint"]>;
};

/** aggregate stddev on columns */
export type Analytics_Mat_ElementTotalViews_Stddev_Fields = {
    __typename?: "analytics_mat_ElementTotalViews_stddev_fields";
    totalViewCount?: Maybe<Scalars["Float"]>;
};

/** aggregate stddev_pop on columns */
export type Analytics_Mat_ElementTotalViews_Stddev_Pop_Fields = {
    __typename?: "analytics_mat_ElementTotalViews_stddev_pop_fields";
    totalViewCount?: Maybe<Scalars["Float"]>;
};

/** aggregate stddev_samp on columns */
export type Analytics_Mat_ElementTotalViews_Stddev_Samp_Fields = {
    __typename?: "analytics_mat_ElementTotalViews_stddev_samp_fields";
    totalViewCount?: Maybe<Scalars["Float"]>;
};

/** aggregate sum on columns */
export type Analytics_Mat_ElementTotalViews_Sum_Fields = {
    __typename?: "analytics_mat_ElementTotalViews_sum_fields";
    totalViewCount?: Maybe<Scalars["bigint"]>;
};

/** aggregate var_pop on columns */
export type Analytics_Mat_ElementTotalViews_Var_Pop_Fields = {
    __typename?: "analytics_mat_ElementTotalViews_var_pop_fields";
    totalViewCount?: Maybe<Scalars["Float"]>;
};

/** aggregate var_samp on columns */
export type Analytics_Mat_ElementTotalViews_Var_Samp_Fields = {
    __typename?: "analytics_mat_ElementTotalViews_var_samp_fields";
    totalViewCount?: Maybe<Scalars["Float"]>;
};

/** aggregate variance on columns */
export type Analytics_Mat_ElementTotalViews_Variance_Fields = {
    __typename?: "analytics_mat_ElementTotalViews_variance_fields";
    totalViewCount?: Maybe<Scalars["Float"]>;
};

/** columns and relationships of "analytics.mat_ItemTotalViews" */
export type Analytics_Mat_ItemTotalViews = {
    __typename?: "analytics_mat_ItemTotalViews";
    itemId?: Maybe<Scalars["uuid"]>;
    totalViewCount?: Maybe<Scalars["bigint"]>;
};

/** aggregated selection of "analytics.mat_ItemTotalViews" */
export type Analytics_Mat_ItemTotalViews_Aggregate = {
    __typename?: "analytics_mat_ItemTotalViews_aggregate";
    aggregate?: Maybe<Analytics_Mat_ItemTotalViews_Aggregate_Fields>;
    nodes: Array<Analytics_Mat_ItemTotalViews>;
};

/** aggregate fields of "analytics.mat_ItemTotalViews" */
export type Analytics_Mat_ItemTotalViews_Aggregate_Fields = {
    __typename?: "analytics_mat_ItemTotalViews_aggregate_fields";
    avg?: Maybe<Analytics_Mat_ItemTotalViews_Avg_Fields>;
    count: Scalars["Int"];
    max?: Maybe<Analytics_Mat_ItemTotalViews_Max_Fields>;
    min?: Maybe<Analytics_Mat_ItemTotalViews_Min_Fields>;
    stddev?: Maybe<Analytics_Mat_ItemTotalViews_Stddev_Fields>;
    stddev_pop?: Maybe<Analytics_Mat_ItemTotalViews_Stddev_Pop_Fields>;
    stddev_samp?: Maybe<Analytics_Mat_ItemTotalViews_Stddev_Samp_Fields>;
    sum?: Maybe<Analytics_Mat_ItemTotalViews_Sum_Fields>;
    var_pop?: Maybe<Analytics_Mat_ItemTotalViews_Var_Pop_Fields>;
    var_samp?: Maybe<Analytics_Mat_ItemTotalViews_Var_Samp_Fields>;
    variance?: Maybe<Analytics_Mat_ItemTotalViews_Variance_Fields>;
};

/** aggregate fields of "analytics.mat_ItemTotalViews" */
export type Analytics_Mat_ItemTotalViews_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Analytics_Mat_ItemTotalViews_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** aggregate avg on columns */
export type Analytics_Mat_ItemTotalViews_Avg_Fields = {
    __typename?: "analytics_mat_ItemTotalViews_avg_fields";
    totalViewCount?: Maybe<Scalars["Float"]>;
};

/** Boolean expression to filter rows from the table "analytics.mat_ItemTotalViews". All fields are combined with a logical 'AND'. */
export type Analytics_Mat_ItemTotalViews_Bool_Exp = {
    _and?: Maybe<Array<Analytics_Mat_ItemTotalViews_Bool_Exp>>;
    _not?: Maybe<Analytics_Mat_ItemTotalViews_Bool_Exp>;
    _or?: Maybe<Array<Analytics_Mat_ItemTotalViews_Bool_Exp>>;
    itemId?: Maybe<Uuid_Comparison_Exp>;
    totalViewCount?: Maybe<Bigint_Comparison_Exp>;
};

/** input type for incrementing numeric columns in table "analytics.mat_ItemTotalViews" */
export type Analytics_Mat_ItemTotalViews_Inc_Input = {
    totalViewCount?: Maybe<Scalars["bigint"]>;
};

/** input type for inserting data into table "analytics.mat_ItemTotalViews" */
export type Analytics_Mat_ItemTotalViews_Insert_Input = {
    itemId?: Maybe<Scalars["uuid"]>;
    totalViewCount?: Maybe<Scalars["bigint"]>;
};

/** aggregate max on columns */
export type Analytics_Mat_ItemTotalViews_Max_Fields = {
    __typename?: "analytics_mat_ItemTotalViews_max_fields";
    itemId?: Maybe<Scalars["uuid"]>;
    totalViewCount?: Maybe<Scalars["bigint"]>;
};

/** aggregate min on columns */
export type Analytics_Mat_ItemTotalViews_Min_Fields = {
    __typename?: "analytics_mat_ItemTotalViews_min_fields";
    itemId?: Maybe<Scalars["uuid"]>;
    totalViewCount?: Maybe<Scalars["bigint"]>;
};

/** response of any mutation on the table "analytics.mat_ItemTotalViews" */
export type Analytics_Mat_ItemTotalViews_Mutation_Response = {
    __typename?: "analytics_mat_ItemTotalViews_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Analytics_Mat_ItemTotalViews>;
};

/** Ordering options when selecting data from "analytics.mat_ItemTotalViews". */
export type Analytics_Mat_ItemTotalViews_Order_By = {
    itemId?: Maybe<Order_By>;
    totalViewCount?: Maybe<Order_By>;
};

/** select columns of table "analytics.mat_ItemTotalViews" */
export enum Analytics_Mat_ItemTotalViews_Select_Column {
    /** column name */
    ItemId = "itemId",
    /** column name */
    TotalViewCount = "totalViewCount",
}

/** input type for updating data in table "analytics.mat_ItemTotalViews" */
export type Analytics_Mat_ItemTotalViews_Set_Input = {
    itemId?: Maybe<Scalars["uuid"]>;
    totalViewCount?: Maybe<Scalars["bigint"]>;
};

/** aggregate stddev on columns */
export type Analytics_Mat_ItemTotalViews_Stddev_Fields = {
    __typename?: "analytics_mat_ItemTotalViews_stddev_fields";
    totalViewCount?: Maybe<Scalars["Float"]>;
};

/** aggregate stddev_pop on columns */
export type Analytics_Mat_ItemTotalViews_Stddev_Pop_Fields = {
    __typename?: "analytics_mat_ItemTotalViews_stddev_pop_fields";
    totalViewCount?: Maybe<Scalars["Float"]>;
};

/** aggregate stddev_samp on columns */
export type Analytics_Mat_ItemTotalViews_Stddev_Samp_Fields = {
    __typename?: "analytics_mat_ItemTotalViews_stddev_samp_fields";
    totalViewCount?: Maybe<Scalars["Float"]>;
};

/** aggregate sum on columns */
export type Analytics_Mat_ItemTotalViews_Sum_Fields = {
    __typename?: "analytics_mat_ItemTotalViews_sum_fields";
    totalViewCount?: Maybe<Scalars["bigint"]>;
};

/** aggregate var_pop on columns */
export type Analytics_Mat_ItemTotalViews_Var_Pop_Fields = {
    __typename?: "analytics_mat_ItemTotalViews_var_pop_fields";
    totalViewCount?: Maybe<Scalars["Float"]>;
};

/** aggregate var_samp on columns */
export type Analytics_Mat_ItemTotalViews_Var_Samp_Fields = {
    __typename?: "analytics_mat_ItemTotalViews_var_samp_fields";
    totalViewCount?: Maybe<Scalars["Float"]>;
};

/** aggregate variance on columns */
export type Analytics_Mat_ItemTotalViews_Variance_Fields = {
    __typename?: "analytics_mat_ItemTotalViews_variance_fields";
    totalViewCount?: Maybe<Scalars["Float"]>;
};

/** columns and relationships of "analytics.mat_RoomPresence" */
export type Analytics_Mat_RoomPresence = {
    __typename?: "analytics_mat_RoomPresence";
    count?: Maybe<Scalars["jsonb"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
};

/** columns and relationships of "analytics.mat_RoomPresence" */
export type Analytics_Mat_RoomPresenceCountArgs = {
    path?: Maybe<Scalars["String"]>;
};

/** aggregated selection of "analytics.mat_RoomPresence" */
export type Analytics_Mat_RoomPresence_Aggregate = {
    __typename?: "analytics_mat_RoomPresence_aggregate";
    aggregate?: Maybe<Analytics_Mat_RoomPresence_Aggregate_Fields>;
    nodes: Array<Analytics_Mat_RoomPresence>;
};

/** aggregate fields of "analytics.mat_RoomPresence" */
export type Analytics_Mat_RoomPresence_Aggregate_Fields = {
    __typename?: "analytics_mat_RoomPresence_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Analytics_Mat_RoomPresence_Max_Fields>;
    min?: Maybe<Analytics_Mat_RoomPresence_Min_Fields>;
};

/** aggregate fields of "analytics.mat_RoomPresence" */
export type Analytics_Mat_RoomPresence_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Analytics_Mat_RoomPresence_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** append existing jsonb value of filtered columns with new jsonb value */
export type Analytics_Mat_RoomPresence_Append_Input = {
    count?: Maybe<Scalars["jsonb"]>;
};

/** Boolean expression to filter rows from the table "analytics.mat_RoomPresence". All fields are combined with a logical 'AND'. */
export type Analytics_Mat_RoomPresence_Bool_Exp = {
    _and?: Maybe<Array<Analytics_Mat_RoomPresence_Bool_Exp>>;
    _not?: Maybe<Analytics_Mat_RoomPresence_Bool_Exp>;
    _or?: Maybe<Array<Analytics_Mat_RoomPresence_Bool_Exp>>;
    count?: Maybe<Jsonb_Comparison_Exp>;
    created_at?: Maybe<Timestamptz_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    name?: Maybe<String_Comparison_Exp>;
};

/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export type Analytics_Mat_RoomPresence_Delete_At_Path_Input = {
    count?: Maybe<Array<Scalars["String"]>>;
};

/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
export type Analytics_Mat_RoomPresence_Delete_Elem_Input = {
    count?: Maybe<Scalars["Int"]>;
};

/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export type Analytics_Mat_RoomPresence_Delete_Key_Input = {
    count?: Maybe<Scalars["String"]>;
};

/** input type for inserting data into table "analytics.mat_RoomPresence" */
export type Analytics_Mat_RoomPresence_Insert_Input = {
    count?: Maybe<Scalars["jsonb"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
};

/** aggregate max on columns */
export type Analytics_Mat_RoomPresence_Max_Fields = {
    __typename?: "analytics_mat_RoomPresence_max_fields";
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
};

/** aggregate min on columns */
export type Analytics_Mat_RoomPresence_Min_Fields = {
    __typename?: "analytics_mat_RoomPresence_min_fields";
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
};

/** response of any mutation on the table "analytics.mat_RoomPresence" */
export type Analytics_Mat_RoomPresence_Mutation_Response = {
    __typename?: "analytics_mat_RoomPresence_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Analytics_Mat_RoomPresence>;
};

/** Ordering options when selecting data from "analytics.mat_RoomPresence". */
export type Analytics_Mat_RoomPresence_Order_By = {
    count?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
};

/** prepend existing jsonb value of filtered columns with new jsonb value */
export type Analytics_Mat_RoomPresence_Prepend_Input = {
    count?: Maybe<Scalars["jsonb"]>;
};

/** select columns of table "analytics.mat_RoomPresence" */
export enum Analytics_Mat_RoomPresence_Select_Column {
    /** column name */
    Count = "count",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    Id = "id",
    /** column name */
    Name = "name",
}

/** input type for updating data in table "analytics.mat_RoomPresence" */
export type Analytics_Mat_RoomPresence_Set_Input = {
    count?: Maybe<Scalars["jsonb"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
};

/** Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'. */
export type Bigint_Comparison_Exp = {
    _eq?: Maybe<Scalars["bigint"]>;
    _gt?: Maybe<Scalars["bigint"]>;
    _gte?: Maybe<Scalars["bigint"]>;
    _in?: Maybe<Array<Scalars["bigint"]>>;
    _is_null?: Maybe<Scalars["Boolean"]>;
    _lt?: Maybe<Scalars["bigint"]>;
    _lte?: Maybe<Scalars["bigint"]>;
    _neq?: Maybe<Scalars["bigint"]>;
    _nin?: Maybe<Array<Scalars["bigint"]>>;
};

/** columns and relationships of "chat.Chat" */
export type Chat_Chat = {
    __typename?: "chat_Chat";
    /** An object relationship */
    conference: Conference_Conference;
    conferenceId: Scalars["uuid"];
    created_at: Scalars["timestamptz"];
    /** An object relationship */
    duplicateTo?: Maybe<Chat_Chat>;
    duplicateToId?: Maybe<Scalars["uuid"]>;
    /** An array relationship */
    duplicatesFrom: Array<Chat_Chat>;
    /** An aggregate relationship */
    duplicatesFrom_aggregate: Chat_Chat_Aggregate;
    enableAutoPin: Scalars["Boolean"];
    enableAutoSubscribe: Scalars["Boolean"];
    enableMandatoryPin: Scalars["Boolean"];
    enableMandatorySubscribe: Scalars["Boolean"];
    /** An array relationship */
    flags: Array<Chat_Flag>;
    /** An aggregate relationship */
    flags_aggregate: Chat_Flag_Aggregate;
    id: Scalars["uuid"];
    /** An array relationship */
    items: Array<Content_Item>;
    /** An aggregate relationship */
    items_aggregate: Content_Item_Aggregate;
    /** An array relationship */
    messages: Array<Chat_Message>;
    /** An aggregate relationship */
    messages_aggregate: Chat_Message_Aggregate;
    /** An array relationship */
    pins: Array<Chat_Pin>;
    /** An aggregate relationship */
    pins_aggregate: Chat_Pin_Aggregate;
    /** An array relationship */
    readUpToIndices: Array<Chat_ReadUpToIndex>;
    /** An aggregate relationship */
    readUpToIndices_aggregate: Chat_ReadUpToIndex_Aggregate;
    remoteServiceId?: Maybe<Scalars["String"]>;
    restrictToAdmins: Scalars["Boolean"];
    /** An array relationship */
    rooms: Array<Room_Room>;
    /** An aggregate relationship */
    rooms_aggregate: Room_Room_Aggregate;
    /** An array relationship */
    subscriptions: Array<Chat_Subscription>;
    /** An aggregate relationship */
    subscriptions_aggregate: Chat_Subscription_Aggregate;
    updated_at: Scalars["timestamptz"];
};

/** columns and relationships of "chat.Chat" */
export type Chat_ChatDuplicatesFromArgs = {
    distinct_on?: Maybe<Array<Chat_Chat_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Chat_Order_By>>;
    where?: Maybe<Chat_Chat_Bool_Exp>;
};

/** columns and relationships of "chat.Chat" */
export type Chat_ChatDuplicatesFrom_AggregateArgs = {
    distinct_on?: Maybe<Array<Chat_Chat_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Chat_Order_By>>;
    where?: Maybe<Chat_Chat_Bool_Exp>;
};

/** columns and relationships of "chat.Chat" */
export type Chat_ChatFlagsArgs = {
    distinct_on?: Maybe<Array<Chat_Flag_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Flag_Order_By>>;
    where?: Maybe<Chat_Flag_Bool_Exp>;
};

/** columns and relationships of "chat.Chat" */
export type Chat_ChatFlags_AggregateArgs = {
    distinct_on?: Maybe<Array<Chat_Flag_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Flag_Order_By>>;
    where?: Maybe<Chat_Flag_Bool_Exp>;
};

/** columns and relationships of "chat.Chat" */
export type Chat_ChatItemsArgs = {
    distinct_on?: Maybe<Array<Content_Item_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_Item_Order_By>>;
    where?: Maybe<Content_Item_Bool_Exp>;
};

/** columns and relationships of "chat.Chat" */
export type Chat_ChatItems_AggregateArgs = {
    distinct_on?: Maybe<Array<Content_Item_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_Item_Order_By>>;
    where?: Maybe<Content_Item_Bool_Exp>;
};

/** columns and relationships of "chat.Chat" */
export type Chat_ChatMessagesArgs = {
    distinct_on?: Maybe<Array<Chat_Message_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Message_Order_By>>;
    where?: Maybe<Chat_Message_Bool_Exp>;
};

/** columns and relationships of "chat.Chat" */
export type Chat_ChatMessages_AggregateArgs = {
    distinct_on?: Maybe<Array<Chat_Message_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Message_Order_By>>;
    where?: Maybe<Chat_Message_Bool_Exp>;
};

/** columns and relationships of "chat.Chat" */
export type Chat_ChatPinsArgs = {
    distinct_on?: Maybe<Array<Chat_Pin_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Pin_Order_By>>;
    where?: Maybe<Chat_Pin_Bool_Exp>;
};

/** columns and relationships of "chat.Chat" */
export type Chat_ChatPins_AggregateArgs = {
    distinct_on?: Maybe<Array<Chat_Pin_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Pin_Order_By>>;
    where?: Maybe<Chat_Pin_Bool_Exp>;
};

/** columns and relationships of "chat.Chat" */
export type Chat_ChatReadUpToIndicesArgs = {
    distinct_on?: Maybe<Array<Chat_ReadUpToIndex_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_ReadUpToIndex_Order_By>>;
    where?: Maybe<Chat_ReadUpToIndex_Bool_Exp>;
};

/** columns and relationships of "chat.Chat" */
export type Chat_ChatReadUpToIndices_AggregateArgs = {
    distinct_on?: Maybe<Array<Chat_ReadUpToIndex_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_ReadUpToIndex_Order_By>>;
    where?: Maybe<Chat_ReadUpToIndex_Bool_Exp>;
};

/** columns and relationships of "chat.Chat" */
export type Chat_ChatRoomsArgs = {
    distinct_on?: Maybe<Array<Room_Room_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_Room_Order_By>>;
    where?: Maybe<Room_Room_Bool_Exp>;
};

/** columns and relationships of "chat.Chat" */
export type Chat_ChatRooms_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_Room_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_Room_Order_By>>;
    where?: Maybe<Room_Room_Bool_Exp>;
};

/** columns and relationships of "chat.Chat" */
export type Chat_ChatSubscriptionsArgs = {
    distinct_on?: Maybe<Array<Chat_Subscription_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Subscription_Order_By>>;
    where?: Maybe<Chat_Subscription_Bool_Exp>;
};

/** columns and relationships of "chat.Chat" */
export type Chat_ChatSubscriptions_AggregateArgs = {
    distinct_on?: Maybe<Array<Chat_Subscription_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Subscription_Order_By>>;
    where?: Maybe<Chat_Subscription_Bool_Exp>;
};

/** aggregated selection of "chat.Chat" */
export type Chat_Chat_Aggregate = {
    __typename?: "chat_Chat_aggregate";
    aggregate?: Maybe<Chat_Chat_Aggregate_Fields>;
    nodes: Array<Chat_Chat>;
};

/** aggregate fields of "chat.Chat" */
export type Chat_Chat_Aggregate_Fields = {
    __typename?: "chat_Chat_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Chat_Chat_Max_Fields>;
    min?: Maybe<Chat_Chat_Min_Fields>;
};

/** aggregate fields of "chat.Chat" */
export type Chat_Chat_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Chat_Chat_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "chat.Chat" */
export type Chat_Chat_Aggregate_Order_By = {
    count?: Maybe<Order_By>;
    max?: Maybe<Chat_Chat_Max_Order_By>;
    min?: Maybe<Chat_Chat_Min_Order_By>;
};

/** input type for inserting array relation for remote table "chat.Chat" */
export type Chat_Chat_Arr_Rel_Insert_Input = {
    data: Array<Chat_Chat_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Chat_Chat_On_Conflict>;
};

/** Boolean expression to filter rows from the table "chat.Chat". All fields are combined with a logical 'AND'. */
export type Chat_Chat_Bool_Exp = {
    _and?: Maybe<Array<Chat_Chat_Bool_Exp>>;
    _not?: Maybe<Chat_Chat_Bool_Exp>;
    _or?: Maybe<Array<Chat_Chat_Bool_Exp>>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    created_at?: Maybe<Timestamptz_Comparison_Exp>;
    duplicateTo?: Maybe<Chat_Chat_Bool_Exp>;
    duplicateToId?: Maybe<Uuid_Comparison_Exp>;
    duplicatesFrom?: Maybe<Chat_Chat_Bool_Exp>;
    enableAutoPin?: Maybe<Boolean_Comparison_Exp>;
    enableAutoSubscribe?: Maybe<Boolean_Comparison_Exp>;
    enableMandatoryPin?: Maybe<Boolean_Comparison_Exp>;
    enableMandatorySubscribe?: Maybe<Boolean_Comparison_Exp>;
    flags?: Maybe<Chat_Flag_Bool_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    items?: Maybe<Content_Item_Bool_Exp>;
    messages?: Maybe<Chat_Message_Bool_Exp>;
    pins?: Maybe<Chat_Pin_Bool_Exp>;
    readUpToIndices?: Maybe<Chat_ReadUpToIndex_Bool_Exp>;
    remoteServiceId?: Maybe<String_Comparison_Exp>;
    restrictToAdmins?: Maybe<Boolean_Comparison_Exp>;
    rooms?: Maybe<Room_Room_Bool_Exp>;
    subscriptions?: Maybe<Chat_Subscription_Bool_Exp>;
    updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "chat.Chat" */
export enum Chat_Chat_Constraint {
    /** unique or primary key constraint */
    ChatPkey = "Chat_pkey",
}

/** input type for inserting data into table "chat.Chat" */
export type Chat_Chat_Insert_Input = {
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    duplicateTo?: Maybe<Chat_Chat_Obj_Rel_Insert_Input>;
    duplicateToId?: Maybe<Scalars["uuid"]>;
    duplicatesFrom?: Maybe<Chat_Chat_Arr_Rel_Insert_Input>;
    enableAutoPin?: Maybe<Scalars["Boolean"]>;
    enableAutoSubscribe?: Maybe<Scalars["Boolean"]>;
    enableMandatoryPin?: Maybe<Scalars["Boolean"]>;
    enableMandatorySubscribe?: Maybe<Scalars["Boolean"]>;
    flags?: Maybe<Chat_Flag_Arr_Rel_Insert_Input>;
    id?: Maybe<Scalars["uuid"]>;
    items?: Maybe<Content_Item_Arr_Rel_Insert_Input>;
    messages?: Maybe<Chat_Message_Arr_Rel_Insert_Input>;
    pins?: Maybe<Chat_Pin_Arr_Rel_Insert_Input>;
    readUpToIndices?: Maybe<Chat_ReadUpToIndex_Arr_Rel_Insert_Input>;
    remoteServiceId?: Maybe<Scalars["String"]>;
    restrictToAdmins?: Maybe<Scalars["Boolean"]>;
    rooms?: Maybe<Room_Room_Arr_Rel_Insert_Input>;
    subscriptions?: Maybe<Chat_Subscription_Arr_Rel_Insert_Input>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Chat_Chat_Max_Fields = {
    __typename?: "chat_Chat_max_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    duplicateToId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    remoteServiceId?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** order by max() on columns of table "chat.Chat" */
export type Chat_Chat_Max_Order_By = {
    conferenceId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    duplicateToId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    remoteServiceId?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Chat_Chat_Min_Fields = {
    __typename?: "chat_Chat_min_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    duplicateToId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    remoteServiceId?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** order by min() on columns of table "chat.Chat" */
export type Chat_Chat_Min_Order_By = {
    conferenceId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    duplicateToId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    remoteServiceId?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** response of any mutation on the table "chat.Chat" */
export type Chat_Chat_Mutation_Response = {
    __typename?: "chat_Chat_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Chat_Chat>;
};

/** input type for inserting object relation for remote table "chat.Chat" */
export type Chat_Chat_Obj_Rel_Insert_Input = {
    data: Chat_Chat_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Chat_Chat_On_Conflict>;
};

/** on conflict condition type for table "chat.Chat" */
export type Chat_Chat_On_Conflict = {
    constraint: Chat_Chat_Constraint;
    update_columns?: Array<Chat_Chat_Update_Column>;
    where?: Maybe<Chat_Chat_Bool_Exp>;
};

/** Ordering options when selecting data from "chat.Chat". */
export type Chat_Chat_Order_By = {
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    duplicateTo?: Maybe<Chat_Chat_Order_By>;
    duplicateToId?: Maybe<Order_By>;
    duplicatesFrom_aggregate?: Maybe<Chat_Chat_Aggregate_Order_By>;
    enableAutoPin?: Maybe<Order_By>;
    enableAutoSubscribe?: Maybe<Order_By>;
    enableMandatoryPin?: Maybe<Order_By>;
    enableMandatorySubscribe?: Maybe<Order_By>;
    flags_aggregate?: Maybe<Chat_Flag_Aggregate_Order_By>;
    id?: Maybe<Order_By>;
    items_aggregate?: Maybe<Content_Item_Aggregate_Order_By>;
    messages_aggregate?: Maybe<Chat_Message_Aggregate_Order_By>;
    pins_aggregate?: Maybe<Chat_Pin_Aggregate_Order_By>;
    readUpToIndices_aggregate?: Maybe<Chat_ReadUpToIndex_Aggregate_Order_By>;
    remoteServiceId?: Maybe<Order_By>;
    restrictToAdmins?: Maybe<Order_By>;
    rooms_aggregate?: Maybe<Room_Room_Aggregate_Order_By>;
    subscriptions_aggregate?: Maybe<Chat_Subscription_Aggregate_Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** primary key columns input for table: chat_Chat */
export type Chat_Chat_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "chat.Chat" */
export enum Chat_Chat_Select_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    DuplicateToId = "duplicateToId",
    /** column name */
    EnableAutoPin = "enableAutoPin",
    /** column name */
    EnableAutoSubscribe = "enableAutoSubscribe",
    /** column name */
    EnableMandatoryPin = "enableMandatoryPin",
    /** column name */
    EnableMandatorySubscribe = "enableMandatorySubscribe",
    /** column name */
    Id = "id",
    /** column name */
    RemoteServiceId = "remoteServiceId",
    /** column name */
    RestrictToAdmins = "restrictToAdmins",
    /** column name */
    UpdatedAt = "updated_at",
}

/** input type for updating data in table "chat.Chat" */
export type Chat_Chat_Set_Input = {
    conferenceId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    duplicateToId?: Maybe<Scalars["uuid"]>;
    enableAutoPin?: Maybe<Scalars["Boolean"]>;
    enableAutoSubscribe?: Maybe<Scalars["Boolean"]>;
    enableMandatoryPin?: Maybe<Scalars["Boolean"]>;
    enableMandatorySubscribe?: Maybe<Scalars["Boolean"]>;
    id?: Maybe<Scalars["uuid"]>;
    remoteServiceId?: Maybe<Scalars["String"]>;
    restrictToAdmins?: Maybe<Scalars["Boolean"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** update columns of table "chat.Chat" */
export enum Chat_Chat_Update_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    DuplicateToId = "duplicateToId",
    /** column name */
    EnableAutoPin = "enableAutoPin",
    /** column name */
    EnableAutoSubscribe = "enableAutoSubscribe",
    /** column name */
    EnableMandatoryPin = "enableMandatoryPin",
    /** column name */
    EnableMandatorySubscribe = "enableMandatorySubscribe",
    /** column name */
    Id = "id",
    /** column name */
    RemoteServiceId = "remoteServiceId",
    /** column name */
    RestrictToAdmins = "restrictToAdmins",
    /** column name */
    UpdatedAt = "updated_at",
}

/** columns and relationships of "chat.Flag" */
export type Chat_Flag = {
    __typename?: "chat_Flag";
    created_at: Scalars["timestamptz"];
    /** An object relationship */
    discussionChat?: Maybe<Chat_Chat>;
    discussionChatId?: Maybe<Scalars["uuid"]>;
    /** An object relationship */
    flaggedBy?: Maybe<Registrant_Registrant>;
    flaggedById?: Maybe<Scalars["uuid"]>;
    id: Scalars["Int"];
    /** An object relationship */
    message: Chat_Message;
    messageSId: Scalars["uuid"];
    notes?: Maybe<Scalars["String"]>;
    resolution?: Maybe<Scalars["String"]>;
    resolved_at?: Maybe<Scalars["timestamptz"]>;
    type: Chat_FlagType_Enum;
    updated_at: Scalars["timestamptz"];
};

/** columns and relationships of "chat.FlagType" */
export type Chat_FlagType = {
    __typename?: "chat_FlagType";
    description: Scalars["String"];
    name: Scalars["String"];
};

/** aggregated selection of "chat.FlagType" */
export type Chat_FlagType_Aggregate = {
    __typename?: "chat_FlagType_aggregate";
    aggregate?: Maybe<Chat_FlagType_Aggregate_Fields>;
    nodes: Array<Chat_FlagType>;
};

/** aggregate fields of "chat.FlagType" */
export type Chat_FlagType_Aggregate_Fields = {
    __typename?: "chat_FlagType_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Chat_FlagType_Max_Fields>;
    min?: Maybe<Chat_FlagType_Min_Fields>;
};

/** aggregate fields of "chat.FlagType" */
export type Chat_FlagType_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Chat_FlagType_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** Boolean expression to filter rows from the table "chat.FlagType". All fields are combined with a logical 'AND'. */
export type Chat_FlagType_Bool_Exp = {
    _and?: Maybe<Array<Chat_FlagType_Bool_Exp>>;
    _not?: Maybe<Chat_FlagType_Bool_Exp>;
    _or?: Maybe<Array<Chat_FlagType_Bool_Exp>>;
    description?: Maybe<String_Comparison_Exp>;
    name?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "chat.FlagType" */
export enum Chat_FlagType_Constraint {
    /** unique or primary key constraint */
    FlagTypePkey = "FlagType_pkey",
}

export enum Chat_FlagType_Enum {
    /** It's abusive or harmful. */
    Abusive = "Abusive",
    /** It contains false information and is intended to mislead readers. */
    Disinformation = "Disinformation",
    /** It gives the wrong idea or impression. */
    Misleading = "Misleading",
    /** It expresses intentions of self-harm or suicide. */
    RiskToLife = "Risk_To_Life",
    /** It's spam, suspicious or annoying. */
    Spam = "Spam",
}

/** Boolean expression to compare columns of type "chat_FlagType_enum". All fields are combined with logical 'AND'. */
export type Chat_FlagType_Enum_Comparison_Exp = {
    _eq?: Maybe<Chat_FlagType_Enum>;
    _in?: Maybe<Array<Chat_FlagType_Enum>>;
    _is_null?: Maybe<Scalars["Boolean"]>;
    _neq?: Maybe<Chat_FlagType_Enum>;
    _nin?: Maybe<Array<Chat_FlagType_Enum>>;
};

/** input type for inserting data into table "chat.FlagType" */
export type Chat_FlagType_Insert_Input = {
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** aggregate max on columns */
export type Chat_FlagType_Max_Fields = {
    __typename?: "chat_FlagType_max_fields";
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** aggregate min on columns */
export type Chat_FlagType_Min_Fields = {
    __typename?: "chat_FlagType_min_fields";
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** response of any mutation on the table "chat.FlagType" */
export type Chat_FlagType_Mutation_Response = {
    __typename?: "chat_FlagType_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Chat_FlagType>;
};

/** on conflict condition type for table "chat.FlagType" */
export type Chat_FlagType_On_Conflict = {
    constraint: Chat_FlagType_Constraint;
    update_columns?: Array<Chat_FlagType_Update_Column>;
    where?: Maybe<Chat_FlagType_Bool_Exp>;
};

/** Ordering options when selecting data from "chat.FlagType". */
export type Chat_FlagType_Order_By = {
    description?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
};

/** primary key columns input for table: chat_FlagType */
export type Chat_FlagType_Pk_Columns_Input = {
    name: Scalars["String"];
};

/** select columns of table "chat.FlagType" */
export enum Chat_FlagType_Select_Column {
    /** column name */
    Description = "description",
    /** column name */
    Name = "name",
}

/** input type for updating data in table "chat.FlagType" */
export type Chat_FlagType_Set_Input = {
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** update columns of table "chat.FlagType" */
export enum Chat_FlagType_Update_Column {
    /** column name */
    Description = "description",
    /** column name */
    Name = "name",
}

/** aggregated selection of "chat.Flag" */
export type Chat_Flag_Aggregate = {
    __typename?: "chat_Flag_aggregate";
    aggregate?: Maybe<Chat_Flag_Aggregate_Fields>;
    nodes: Array<Chat_Flag>;
};

/** aggregate fields of "chat.Flag" */
export type Chat_Flag_Aggregate_Fields = {
    __typename?: "chat_Flag_aggregate_fields";
    avg?: Maybe<Chat_Flag_Avg_Fields>;
    count: Scalars["Int"];
    max?: Maybe<Chat_Flag_Max_Fields>;
    min?: Maybe<Chat_Flag_Min_Fields>;
    stddev?: Maybe<Chat_Flag_Stddev_Fields>;
    stddev_pop?: Maybe<Chat_Flag_Stddev_Pop_Fields>;
    stddev_samp?: Maybe<Chat_Flag_Stddev_Samp_Fields>;
    sum?: Maybe<Chat_Flag_Sum_Fields>;
    var_pop?: Maybe<Chat_Flag_Var_Pop_Fields>;
    var_samp?: Maybe<Chat_Flag_Var_Samp_Fields>;
    variance?: Maybe<Chat_Flag_Variance_Fields>;
};

/** aggregate fields of "chat.Flag" */
export type Chat_Flag_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Chat_Flag_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "chat.Flag" */
export type Chat_Flag_Aggregate_Order_By = {
    avg?: Maybe<Chat_Flag_Avg_Order_By>;
    count?: Maybe<Order_By>;
    max?: Maybe<Chat_Flag_Max_Order_By>;
    min?: Maybe<Chat_Flag_Min_Order_By>;
    stddev?: Maybe<Chat_Flag_Stddev_Order_By>;
    stddev_pop?: Maybe<Chat_Flag_Stddev_Pop_Order_By>;
    stddev_samp?: Maybe<Chat_Flag_Stddev_Samp_Order_By>;
    sum?: Maybe<Chat_Flag_Sum_Order_By>;
    var_pop?: Maybe<Chat_Flag_Var_Pop_Order_By>;
    var_samp?: Maybe<Chat_Flag_Var_Samp_Order_By>;
    variance?: Maybe<Chat_Flag_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "chat.Flag" */
export type Chat_Flag_Arr_Rel_Insert_Input = {
    data: Array<Chat_Flag_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Chat_Flag_On_Conflict>;
};

/** aggregate avg on columns */
export type Chat_Flag_Avg_Fields = {
    __typename?: "chat_Flag_avg_fields";
    id?: Maybe<Scalars["Float"]>;
};

/** order by avg() on columns of table "chat.Flag" */
export type Chat_Flag_Avg_Order_By = {
    id?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "chat.Flag". All fields are combined with a logical 'AND'. */
export type Chat_Flag_Bool_Exp = {
    _and?: Maybe<Array<Chat_Flag_Bool_Exp>>;
    _not?: Maybe<Chat_Flag_Bool_Exp>;
    _or?: Maybe<Array<Chat_Flag_Bool_Exp>>;
    created_at?: Maybe<Timestamptz_Comparison_Exp>;
    discussionChat?: Maybe<Chat_Chat_Bool_Exp>;
    discussionChatId?: Maybe<Uuid_Comparison_Exp>;
    flaggedBy?: Maybe<Registrant_Registrant_Bool_Exp>;
    flaggedById?: Maybe<Uuid_Comparison_Exp>;
    id?: Maybe<Int_Comparison_Exp>;
    message?: Maybe<Chat_Message_Bool_Exp>;
    messageSId?: Maybe<Uuid_Comparison_Exp>;
    notes?: Maybe<String_Comparison_Exp>;
    resolution?: Maybe<String_Comparison_Exp>;
    resolved_at?: Maybe<Timestamptz_Comparison_Exp>;
    type?: Maybe<Chat_FlagType_Enum_Comparison_Exp>;
    updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "chat.Flag" */
export enum Chat_Flag_Constraint {
    /** unique or primary key constraint */
    FlagMessageSIdFlaggedByIdTypeKey = "Flag_messageSId_flaggedById_type_key",
    /** unique or primary key constraint */
    FlagPkey = "Flag_pkey",
}

/** input type for incrementing numeric columns in table "chat.Flag" */
export type Chat_Flag_Inc_Input = {
    id?: Maybe<Scalars["Int"]>;
};

/** input type for inserting data into table "chat.Flag" */
export type Chat_Flag_Insert_Input = {
    created_at?: Maybe<Scalars["timestamptz"]>;
    discussionChat?: Maybe<Chat_Chat_Obj_Rel_Insert_Input>;
    discussionChatId?: Maybe<Scalars["uuid"]>;
    flaggedBy?: Maybe<Registrant_Registrant_Obj_Rel_Insert_Input>;
    flaggedById?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["Int"]>;
    message?: Maybe<Chat_Message_Obj_Rel_Insert_Input>;
    messageSId?: Maybe<Scalars["uuid"]>;
    notes?: Maybe<Scalars["String"]>;
    resolution?: Maybe<Scalars["String"]>;
    resolved_at?: Maybe<Scalars["timestamptz"]>;
    type?: Maybe<Chat_FlagType_Enum>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Chat_Flag_Max_Fields = {
    __typename?: "chat_Flag_max_fields";
    created_at?: Maybe<Scalars["timestamptz"]>;
    discussionChatId?: Maybe<Scalars["uuid"]>;
    flaggedById?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["Int"]>;
    messageSId?: Maybe<Scalars["uuid"]>;
    notes?: Maybe<Scalars["String"]>;
    resolution?: Maybe<Scalars["String"]>;
    resolved_at?: Maybe<Scalars["timestamptz"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** order by max() on columns of table "chat.Flag" */
export type Chat_Flag_Max_Order_By = {
    created_at?: Maybe<Order_By>;
    discussionChatId?: Maybe<Order_By>;
    flaggedById?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    messageSId?: Maybe<Order_By>;
    notes?: Maybe<Order_By>;
    resolution?: Maybe<Order_By>;
    resolved_at?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Chat_Flag_Min_Fields = {
    __typename?: "chat_Flag_min_fields";
    created_at?: Maybe<Scalars["timestamptz"]>;
    discussionChatId?: Maybe<Scalars["uuid"]>;
    flaggedById?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["Int"]>;
    messageSId?: Maybe<Scalars["uuid"]>;
    notes?: Maybe<Scalars["String"]>;
    resolution?: Maybe<Scalars["String"]>;
    resolved_at?: Maybe<Scalars["timestamptz"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** order by min() on columns of table "chat.Flag" */
export type Chat_Flag_Min_Order_By = {
    created_at?: Maybe<Order_By>;
    discussionChatId?: Maybe<Order_By>;
    flaggedById?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    messageSId?: Maybe<Order_By>;
    notes?: Maybe<Order_By>;
    resolution?: Maybe<Order_By>;
    resolved_at?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** response of any mutation on the table "chat.Flag" */
export type Chat_Flag_Mutation_Response = {
    __typename?: "chat_Flag_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Chat_Flag>;
};

/** on conflict condition type for table "chat.Flag" */
export type Chat_Flag_On_Conflict = {
    constraint: Chat_Flag_Constraint;
    update_columns?: Array<Chat_Flag_Update_Column>;
    where?: Maybe<Chat_Flag_Bool_Exp>;
};

/** Ordering options when selecting data from "chat.Flag". */
export type Chat_Flag_Order_By = {
    created_at?: Maybe<Order_By>;
    discussionChat?: Maybe<Chat_Chat_Order_By>;
    discussionChatId?: Maybe<Order_By>;
    flaggedBy?: Maybe<Registrant_Registrant_Order_By>;
    flaggedById?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    message?: Maybe<Chat_Message_Order_By>;
    messageSId?: Maybe<Order_By>;
    notes?: Maybe<Order_By>;
    resolution?: Maybe<Order_By>;
    resolved_at?: Maybe<Order_By>;
    type?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** primary key columns input for table: chat_Flag */
export type Chat_Flag_Pk_Columns_Input = {
    id: Scalars["Int"];
};

/** select columns of table "chat.Flag" */
export enum Chat_Flag_Select_Column {
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    DiscussionChatId = "discussionChatId",
    /** column name */
    FlaggedById = "flaggedById",
    /** column name */
    Id = "id",
    /** column name */
    MessageSId = "messageSId",
    /** column name */
    Notes = "notes",
    /** column name */
    Resolution = "resolution",
    /** column name */
    ResolvedAt = "resolved_at",
    /** column name */
    Type = "type",
    /** column name */
    UpdatedAt = "updated_at",
}

/** input type for updating data in table "chat.Flag" */
export type Chat_Flag_Set_Input = {
    created_at?: Maybe<Scalars["timestamptz"]>;
    discussionChatId?: Maybe<Scalars["uuid"]>;
    flaggedById?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["Int"]>;
    messageSId?: Maybe<Scalars["uuid"]>;
    notes?: Maybe<Scalars["String"]>;
    resolution?: Maybe<Scalars["String"]>;
    resolved_at?: Maybe<Scalars["timestamptz"]>;
    type?: Maybe<Chat_FlagType_Enum>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate stddev on columns */
export type Chat_Flag_Stddev_Fields = {
    __typename?: "chat_Flag_stddev_fields";
    id?: Maybe<Scalars["Float"]>;
};

/** order by stddev() on columns of table "chat.Flag" */
export type Chat_Flag_Stddev_Order_By = {
    id?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Chat_Flag_Stddev_Pop_Fields = {
    __typename?: "chat_Flag_stddev_pop_fields";
    id?: Maybe<Scalars["Float"]>;
};

/** order by stddev_pop() on columns of table "chat.Flag" */
export type Chat_Flag_Stddev_Pop_Order_By = {
    id?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Chat_Flag_Stddev_Samp_Fields = {
    __typename?: "chat_Flag_stddev_samp_fields";
    id?: Maybe<Scalars["Float"]>;
};

/** order by stddev_samp() on columns of table "chat.Flag" */
export type Chat_Flag_Stddev_Samp_Order_By = {
    id?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Chat_Flag_Sum_Fields = {
    __typename?: "chat_Flag_sum_fields";
    id?: Maybe<Scalars["Int"]>;
};

/** order by sum() on columns of table "chat.Flag" */
export type Chat_Flag_Sum_Order_By = {
    id?: Maybe<Order_By>;
};

/** update columns of table "chat.Flag" */
export enum Chat_Flag_Update_Column {
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    DiscussionChatId = "discussionChatId",
    /** column name */
    FlaggedById = "flaggedById",
    /** column name */
    Id = "id",
    /** column name */
    MessageSId = "messageSId",
    /** column name */
    Notes = "notes",
    /** column name */
    Resolution = "resolution",
    /** column name */
    ResolvedAt = "resolved_at",
    /** column name */
    Type = "type",
    /** column name */
    UpdatedAt = "updated_at",
}

/** aggregate var_pop on columns */
export type Chat_Flag_Var_Pop_Fields = {
    __typename?: "chat_Flag_var_pop_fields";
    id?: Maybe<Scalars["Float"]>;
};

/** order by var_pop() on columns of table "chat.Flag" */
export type Chat_Flag_Var_Pop_Order_By = {
    id?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Chat_Flag_Var_Samp_Fields = {
    __typename?: "chat_Flag_var_samp_fields";
    id?: Maybe<Scalars["Float"]>;
};

/** order by var_samp() on columns of table "chat.Flag" */
export type Chat_Flag_Var_Samp_Order_By = {
    id?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Chat_Flag_Variance_Fields = {
    __typename?: "chat_Flag_variance_fields";
    id?: Maybe<Scalars["Float"]>;
};

/** order by variance() on columns of table "chat.Flag" */
export type Chat_Flag_Variance_Order_By = {
    id?: Maybe<Order_By>;
};

/**
 * Chat messages. The systemId field is unique and can be used to prevent duplicate inserts of things like event start/end markers.
 *
 *
 * columns and relationships of "chat.Message"
 */
export type Chat_Message = {
    __typename?: "chat_Message";
    /** An object relationship */
    chat: Chat_Chat;
    chatId: Scalars["uuid"];
    created_at: Scalars["timestamptz"];
    data: Scalars["jsonb"];
    /** An object relationship */
    duplicateIncoming?: Maybe<Chat_Message>;
    /** An object relationship */
    duplicateOutgoing?: Maybe<Chat_Message>;
    duplicatedMessageSId?: Maybe<Scalars["uuid"]>;
    /** An array relationship */
    flags: Array<Chat_Flag>;
    /** An aggregate relationship */
    flags_aggregate: Chat_Flag_Aggregate;
    id: Scalars["Int"];
    isPinned: Scalars["Boolean"];
    message: Scalars["String"];
    /** An array relationship */
    reactions: Array<Chat_Reaction>;
    /** An aggregate relationship */
    reactions_aggregate: Chat_Reaction_Aggregate;
    sId: Scalars["uuid"];
    /** An object relationship */
    sender?: Maybe<Registrant_Registrant>;
    senderId?: Maybe<Scalars["uuid"]>;
    systemId?: Maybe<Scalars["String"]>;
    type: Chat_MessageType_Enum;
    updated_at: Scalars["timestamptz"];
};

/**
 * Chat messages. The systemId field is unique and can be used to prevent duplicate inserts of things like event start/end markers.
 *
 *
 * columns and relationships of "chat.Message"
 */
export type Chat_MessageDataArgs = {
    path?: Maybe<Scalars["String"]>;
};

/**
 * Chat messages. The systemId field is unique and can be used to prevent duplicate inserts of things like event start/end markers.
 *
 *
 * columns and relationships of "chat.Message"
 */
export type Chat_MessageFlagsArgs = {
    distinct_on?: Maybe<Array<Chat_Flag_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Flag_Order_By>>;
    where?: Maybe<Chat_Flag_Bool_Exp>;
};

/**
 * Chat messages. The systemId field is unique and can be used to prevent duplicate inserts of things like event start/end markers.
 *
 *
 * columns and relationships of "chat.Message"
 */
export type Chat_MessageFlags_AggregateArgs = {
    distinct_on?: Maybe<Array<Chat_Flag_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Flag_Order_By>>;
    where?: Maybe<Chat_Flag_Bool_Exp>;
};

/**
 * Chat messages. The systemId field is unique and can be used to prevent duplicate inserts of things like event start/end markers.
 *
 *
 * columns and relationships of "chat.Message"
 */
export type Chat_MessageReactionsArgs = {
    distinct_on?: Maybe<Array<Chat_Reaction_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Reaction_Order_By>>;
    where?: Maybe<Chat_Reaction_Bool_Exp>;
};

/**
 * Chat messages. The systemId field is unique and can be used to prevent duplicate inserts of things like event start/end markers.
 *
 *
 * columns and relationships of "chat.Message"
 */
export type Chat_MessageReactions_AggregateArgs = {
    distinct_on?: Maybe<Array<Chat_Reaction_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Reaction_Order_By>>;
    where?: Maybe<Chat_Reaction_Bool_Exp>;
};

/** columns and relationships of "chat.MessageType" */
export type Chat_MessageType = {
    __typename?: "chat_MessageType";
    name: Scalars["String"];
};

/** aggregated selection of "chat.MessageType" */
export type Chat_MessageType_Aggregate = {
    __typename?: "chat_MessageType_aggregate";
    aggregate?: Maybe<Chat_MessageType_Aggregate_Fields>;
    nodes: Array<Chat_MessageType>;
};

/** aggregate fields of "chat.MessageType" */
export type Chat_MessageType_Aggregate_Fields = {
    __typename?: "chat_MessageType_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Chat_MessageType_Max_Fields>;
    min?: Maybe<Chat_MessageType_Min_Fields>;
};

/** aggregate fields of "chat.MessageType" */
export type Chat_MessageType_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Chat_MessageType_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** Boolean expression to filter rows from the table "chat.MessageType". All fields are combined with a logical 'AND'. */
export type Chat_MessageType_Bool_Exp = {
    _and?: Maybe<Array<Chat_MessageType_Bool_Exp>>;
    _not?: Maybe<Chat_MessageType_Bool_Exp>;
    _or?: Maybe<Array<Chat_MessageType_Bool_Exp>>;
    name?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "chat.MessageType" */
export enum Chat_MessageType_Constraint {
    /** unique or primary key constraint */
    MessageTypePkey = "MessageType_pkey",
}

export enum Chat_MessageType_Enum {
    Answer = "ANSWER",
    DuplicationMarker = "DUPLICATION_MARKER",
    Emote = "EMOTE",
    Message = "MESSAGE",
    Poll = "POLL",
    PollResults = "POLL_RESULTS",
    Question = "QUESTION",
}

/** Boolean expression to compare columns of type "chat_MessageType_enum". All fields are combined with logical 'AND'. */
export type Chat_MessageType_Enum_Comparison_Exp = {
    _eq?: Maybe<Chat_MessageType_Enum>;
    _in?: Maybe<Array<Chat_MessageType_Enum>>;
    _is_null?: Maybe<Scalars["Boolean"]>;
    _neq?: Maybe<Chat_MessageType_Enum>;
    _nin?: Maybe<Array<Chat_MessageType_Enum>>;
};

/** input type for inserting data into table "chat.MessageType" */
export type Chat_MessageType_Insert_Input = {
    name?: Maybe<Scalars["String"]>;
};

/** aggregate max on columns */
export type Chat_MessageType_Max_Fields = {
    __typename?: "chat_MessageType_max_fields";
    name?: Maybe<Scalars["String"]>;
};

/** aggregate min on columns */
export type Chat_MessageType_Min_Fields = {
    __typename?: "chat_MessageType_min_fields";
    name?: Maybe<Scalars["String"]>;
};

/** response of any mutation on the table "chat.MessageType" */
export type Chat_MessageType_Mutation_Response = {
    __typename?: "chat_MessageType_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Chat_MessageType>;
};

/** on conflict condition type for table "chat.MessageType" */
export type Chat_MessageType_On_Conflict = {
    constraint: Chat_MessageType_Constraint;
    update_columns?: Array<Chat_MessageType_Update_Column>;
    where?: Maybe<Chat_MessageType_Bool_Exp>;
};

/** Ordering options when selecting data from "chat.MessageType". */
export type Chat_MessageType_Order_By = {
    name?: Maybe<Order_By>;
};

/** primary key columns input for table: chat_MessageType */
export type Chat_MessageType_Pk_Columns_Input = {
    name: Scalars["String"];
};

/** select columns of table "chat.MessageType" */
export enum Chat_MessageType_Select_Column {
    /** column name */
    Name = "name",
}

/** input type for updating data in table "chat.MessageType" */
export type Chat_MessageType_Set_Input = {
    name?: Maybe<Scalars["String"]>;
};

/** update columns of table "chat.MessageType" */
export enum Chat_MessageType_Update_Column {
    /** column name */
    Name = "name",
}

/** aggregated selection of "chat.Message" */
export type Chat_Message_Aggregate = {
    __typename?: "chat_Message_aggregate";
    aggregate?: Maybe<Chat_Message_Aggregate_Fields>;
    nodes: Array<Chat_Message>;
};

/** aggregate fields of "chat.Message" */
export type Chat_Message_Aggregate_Fields = {
    __typename?: "chat_Message_aggregate_fields";
    avg?: Maybe<Chat_Message_Avg_Fields>;
    count: Scalars["Int"];
    max?: Maybe<Chat_Message_Max_Fields>;
    min?: Maybe<Chat_Message_Min_Fields>;
    stddev?: Maybe<Chat_Message_Stddev_Fields>;
    stddev_pop?: Maybe<Chat_Message_Stddev_Pop_Fields>;
    stddev_samp?: Maybe<Chat_Message_Stddev_Samp_Fields>;
    sum?: Maybe<Chat_Message_Sum_Fields>;
    var_pop?: Maybe<Chat_Message_Var_Pop_Fields>;
    var_samp?: Maybe<Chat_Message_Var_Samp_Fields>;
    variance?: Maybe<Chat_Message_Variance_Fields>;
};

/** aggregate fields of "chat.Message" */
export type Chat_Message_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Chat_Message_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "chat.Message" */
export type Chat_Message_Aggregate_Order_By = {
    avg?: Maybe<Chat_Message_Avg_Order_By>;
    count?: Maybe<Order_By>;
    max?: Maybe<Chat_Message_Max_Order_By>;
    min?: Maybe<Chat_Message_Min_Order_By>;
    stddev?: Maybe<Chat_Message_Stddev_Order_By>;
    stddev_pop?: Maybe<Chat_Message_Stddev_Pop_Order_By>;
    stddev_samp?: Maybe<Chat_Message_Stddev_Samp_Order_By>;
    sum?: Maybe<Chat_Message_Sum_Order_By>;
    var_pop?: Maybe<Chat_Message_Var_Pop_Order_By>;
    var_samp?: Maybe<Chat_Message_Var_Samp_Order_By>;
    variance?: Maybe<Chat_Message_Variance_Order_By>;
};

/** append existing jsonb value of filtered columns with new jsonb value */
export type Chat_Message_Append_Input = {
    data?: Maybe<Scalars["jsonb"]>;
};

/** input type for inserting array relation for remote table "chat.Message" */
export type Chat_Message_Arr_Rel_Insert_Input = {
    data: Array<Chat_Message_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Chat_Message_On_Conflict>;
};

/** aggregate avg on columns */
export type Chat_Message_Avg_Fields = {
    __typename?: "chat_Message_avg_fields";
    id?: Maybe<Scalars["Float"]>;
};

/** order by avg() on columns of table "chat.Message" */
export type Chat_Message_Avg_Order_By = {
    id?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "chat.Message". All fields are combined with a logical 'AND'. */
export type Chat_Message_Bool_Exp = {
    _and?: Maybe<Array<Chat_Message_Bool_Exp>>;
    _not?: Maybe<Chat_Message_Bool_Exp>;
    _or?: Maybe<Array<Chat_Message_Bool_Exp>>;
    chat?: Maybe<Chat_Chat_Bool_Exp>;
    chatId?: Maybe<Uuid_Comparison_Exp>;
    created_at?: Maybe<Timestamptz_Comparison_Exp>;
    data?: Maybe<Jsonb_Comparison_Exp>;
    duplicateIncoming?: Maybe<Chat_Message_Bool_Exp>;
    duplicateOutgoing?: Maybe<Chat_Message_Bool_Exp>;
    duplicatedMessageSId?: Maybe<Uuid_Comparison_Exp>;
    flags?: Maybe<Chat_Flag_Bool_Exp>;
    id?: Maybe<Int_Comparison_Exp>;
    isPinned?: Maybe<Boolean_Comparison_Exp>;
    message?: Maybe<String_Comparison_Exp>;
    reactions?: Maybe<Chat_Reaction_Bool_Exp>;
    sId?: Maybe<Uuid_Comparison_Exp>;
    sender?: Maybe<Registrant_Registrant_Bool_Exp>;
    senderId?: Maybe<Uuid_Comparison_Exp>;
    systemId?: Maybe<String_Comparison_Exp>;
    type?: Maybe<Chat_MessageType_Enum_Comparison_Exp>;
    updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "chat.Message" */
export enum Chat_Message_Constraint {
    /** unique or primary key constraint */
    MessageDuplicatedMessageSIdKey = "Message_duplicatedMessageSId_key",
    /** unique or primary key constraint */
    MessagePkey = "Message_pkey",
    /** unique or primary key constraint */
    MessageSIdChatIdKey = "Message_sId_chatId_key",
    /** unique or primary key constraint */
    MessageSIdKey = "Message_sId_key",
    /** unique or primary key constraint */
    MessageSystemIdKey = "Message_systemId_key",
}

/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export type Chat_Message_Delete_At_Path_Input = {
    data?: Maybe<Array<Scalars["String"]>>;
};

/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
export type Chat_Message_Delete_Elem_Input = {
    data?: Maybe<Scalars["Int"]>;
};

/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export type Chat_Message_Delete_Key_Input = {
    data?: Maybe<Scalars["String"]>;
};

/** input type for incrementing numeric columns in table "chat.Message" */
export type Chat_Message_Inc_Input = {
    id?: Maybe<Scalars["Int"]>;
};

/** input type for inserting data into table "chat.Message" */
export type Chat_Message_Insert_Input = {
    chat?: Maybe<Chat_Chat_Obj_Rel_Insert_Input>;
    chatId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    data?: Maybe<Scalars["jsonb"]>;
    duplicateIncoming?: Maybe<Chat_Message_Obj_Rel_Insert_Input>;
    duplicateOutgoing?: Maybe<Chat_Message_Obj_Rel_Insert_Input>;
    duplicatedMessageSId?: Maybe<Scalars["uuid"]>;
    flags?: Maybe<Chat_Flag_Arr_Rel_Insert_Input>;
    id?: Maybe<Scalars["Int"]>;
    isPinned?: Maybe<Scalars["Boolean"]>;
    message?: Maybe<Scalars["String"]>;
    reactions?: Maybe<Chat_Reaction_Arr_Rel_Insert_Input>;
    sId?: Maybe<Scalars["uuid"]>;
    sender?: Maybe<Registrant_Registrant_Obj_Rel_Insert_Input>;
    senderId?: Maybe<Scalars["uuid"]>;
    systemId?: Maybe<Scalars["String"]>;
    type?: Maybe<Chat_MessageType_Enum>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Chat_Message_Max_Fields = {
    __typename?: "chat_Message_max_fields";
    chatId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    duplicatedMessageSId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["Int"]>;
    message?: Maybe<Scalars["String"]>;
    sId?: Maybe<Scalars["uuid"]>;
    senderId?: Maybe<Scalars["uuid"]>;
    systemId?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** order by max() on columns of table "chat.Message" */
export type Chat_Message_Max_Order_By = {
    chatId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    duplicatedMessageSId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    message?: Maybe<Order_By>;
    sId?: Maybe<Order_By>;
    senderId?: Maybe<Order_By>;
    systemId?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Chat_Message_Min_Fields = {
    __typename?: "chat_Message_min_fields";
    chatId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    duplicatedMessageSId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["Int"]>;
    message?: Maybe<Scalars["String"]>;
    sId?: Maybe<Scalars["uuid"]>;
    senderId?: Maybe<Scalars["uuid"]>;
    systemId?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** order by min() on columns of table "chat.Message" */
export type Chat_Message_Min_Order_By = {
    chatId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    duplicatedMessageSId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    message?: Maybe<Order_By>;
    sId?: Maybe<Order_By>;
    senderId?: Maybe<Order_By>;
    systemId?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** response of any mutation on the table "chat.Message" */
export type Chat_Message_Mutation_Response = {
    __typename?: "chat_Message_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Chat_Message>;
};

/** input type for inserting object relation for remote table "chat.Message" */
export type Chat_Message_Obj_Rel_Insert_Input = {
    data: Chat_Message_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Chat_Message_On_Conflict>;
};

/** on conflict condition type for table "chat.Message" */
export type Chat_Message_On_Conflict = {
    constraint: Chat_Message_Constraint;
    update_columns?: Array<Chat_Message_Update_Column>;
    where?: Maybe<Chat_Message_Bool_Exp>;
};

/** Ordering options when selecting data from "chat.Message". */
export type Chat_Message_Order_By = {
    chat?: Maybe<Chat_Chat_Order_By>;
    chatId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    data?: Maybe<Order_By>;
    duplicateIncoming?: Maybe<Chat_Message_Order_By>;
    duplicateOutgoing?: Maybe<Chat_Message_Order_By>;
    duplicatedMessageSId?: Maybe<Order_By>;
    flags_aggregate?: Maybe<Chat_Flag_Aggregate_Order_By>;
    id?: Maybe<Order_By>;
    isPinned?: Maybe<Order_By>;
    message?: Maybe<Order_By>;
    reactions_aggregate?: Maybe<Chat_Reaction_Aggregate_Order_By>;
    sId?: Maybe<Order_By>;
    sender?: Maybe<Registrant_Registrant_Order_By>;
    senderId?: Maybe<Order_By>;
    systemId?: Maybe<Order_By>;
    type?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** primary key columns input for table: chat_Message */
export type Chat_Message_Pk_Columns_Input = {
    id: Scalars["Int"];
};

/** prepend existing jsonb value of filtered columns with new jsonb value */
export type Chat_Message_Prepend_Input = {
    data?: Maybe<Scalars["jsonb"]>;
};

/** select columns of table "chat.Message" */
export enum Chat_Message_Select_Column {
    /** column name */
    ChatId = "chatId",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    Data = "data",
    /** column name */
    DuplicatedMessageSId = "duplicatedMessageSId",
    /** column name */
    Id = "id",
    /** column name */
    IsPinned = "isPinned",
    /** column name */
    Message = "message",
    /** column name */
    SId = "sId",
    /** column name */
    SenderId = "senderId",
    /** column name */
    SystemId = "systemId",
    /** column name */
    Type = "type",
    /** column name */
    UpdatedAt = "updated_at",
}

/** input type for updating data in table "chat.Message" */
export type Chat_Message_Set_Input = {
    chatId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    data?: Maybe<Scalars["jsonb"]>;
    duplicatedMessageSId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["Int"]>;
    isPinned?: Maybe<Scalars["Boolean"]>;
    message?: Maybe<Scalars["String"]>;
    sId?: Maybe<Scalars["uuid"]>;
    senderId?: Maybe<Scalars["uuid"]>;
    systemId?: Maybe<Scalars["String"]>;
    type?: Maybe<Chat_MessageType_Enum>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate stddev on columns */
export type Chat_Message_Stddev_Fields = {
    __typename?: "chat_Message_stddev_fields";
    id?: Maybe<Scalars["Float"]>;
};

/** order by stddev() on columns of table "chat.Message" */
export type Chat_Message_Stddev_Order_By = {
    id?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Chat_Message_Stddev_Pop_Fields = {
    __typename?: "chat_Message_stddev_pop_fields";
    id?: Maybe<Scalars["Float"]>;
};

/** order by stddev_pop() on columns of table "chat.Message" */
export type Chat_Message_Stddev_Pop_Order_By = {
    id?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Chat_Message_Stddev_Samp_Fields = {
    __typename?: "chat_Message_stddev_samp_fields";
    id?: Maybe<Scalars["Float"]>;
};

/** order by stddev_samp() on columns of table "chat.Message" */
export type Chat_Message_Stddev_Samp_Order_By = {
    id?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Chat_Message_Sum_Fields = {
    __typename?: "chat_Message_sum_fields";
    id?: Maybe<Scalars["Int"]>;
};

/** order by sum() on columns of table "chat.Message" */
export type Chat_Message_Sum_Order_By = {
    id?: Maybe<Order_By>;
};

/** update columns of table "chat.Message" */
export enum Chat_Message_Update_Column {
    /** column name */
    ChatId = "chatId",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    Data = "data",
    /** column name */
    DuplicatedMessageSId = "duplicatedMessageSId",
    /** column name */
    Id = "id",
    /** column name */
    IsPinned = "isPinned",
    /** column name */
    Message = "message",
    /** column name */
    SId = "sId",
    /** column name */
    SenderId = "senderId",
    /** column name */
    SystemId = "systemId",
    /** column name */
    Type = "type",
    /** column name */
    UpdatedAt = "updated_at",
}

/** aggregate var_pop on columns */
export type Chat_Message_Var_Pop_Fields = {
    __typename?: "chat_Message_var_pop_fields";
    id?: Maybe<Scalars["Float"]>;
};

/** order by var_pop() on columns of table "chat.Message" */
export type Chat_Message_Var_Pop_Order_By = {
    id?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Chat_Message_Var_Samp_Fields = {
    __typename?: "chat_Message_var_samp_fields";
    id?: Maybe<Scalars["Float"]>;
};

/** order by var_samp() on columns of table "chat.Message" */
export type Chat_Message_Var_Samp_Order_By = {
    id?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Chat_Message_Variance_Fields = {
    __typename?: "chat_Message_variance_fields";
    id?: Maybe<Scalars["Float"]>;
};

/** order by variance() on columns of table "chat.Message" */
export type Chat_Message_Variance_Order_By = {
    id?: Maybe<Order_By>;
};

/**
 * Pin a chat to the sidebar.
 *
 *
 * columns and relationships of "chat.Pin"
 */
export type Chat_Pin = {
    __typename?: "chat_Pin";
    /** An object relationship */
    chat: Chat_Chat;
    chatId: Scalars["uuid"];
    created_at: Scalars["timestamptz"];
    /** An object relationship */
    registrant: Registrant_Registrant;
    registrantId: Scalars["uuid"];
    wasManuallyPinned: Scalars["Boolean"];
};

/** aggregated selection of "chat.Pin" */
export type Chat_Pin_Aggregate = {
    __typename?: "chat_Pin_aggregate";
    aggregate?: Maybe<Chat_Pin_Aggregate_Fields>;
    nodes: Array<Chat_Pin>;
};

/** aggregate fields of "chat.Pin" */
export type Chat_Pin_Aggregate_Fields = {
    __typename?: "chat_Pin_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Chat_Pin_Max_Fields>;
    min?: Maybe<Chat_Pin_Min_Fields>;
};

/** aggregate fields of "chat.Pin" */
export type Chat_Pin_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Chat_Pin_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "chat.Pin" */
export type Chat_Pin_Aggregate_Order_By = {
    count?: Maybe<Order_By>;
    max?: Maybe<Chat_Pin_Max_Order_By>;
    min?: Maybe<Chat_Pin_Min_Order_By>;
};

/** input type for inserting array relation for remote table "chat.Pin" */
export type Chat_Pin_Arr_Rel_Insert_Input = {
    data: Array<Chat_Pin_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Chat_Pin_On_Conflict>;
};

/** Boolean expression to filter rows from the table "chat.Pin". All fields are combined with a logical 'AND'. */
export type Chat_Pin_Bool_Exp = {
    _and?: Maybe<Array<Chat_Pin_Bool_Exp>>;
    _not?: Maybe<Chat_Pin_Bool_Exp>;
    _or?: Maybe<Array<Chat_Pin_Bool_Exp>>;
    chat?: Maybe<Chat_Chat_Bool_Exp>;
    chatId?: Maybe<Uuid_Comparison_Exp>;
    created_at?: Maybe<Timestamptz_Comparison_Exp>;
    registrant?: Maybe<Registrant_Registrant_Bool_Exp>;
    registrantId?: Maybe<Uuid_Comparison_Exp>;
    wasManuallyPinned?: Maybe<Boolean_Comparison_Exp>;
};

/** unique or primary key constraints on table "chat.Pin" */
export enum Chat_Pin_Constraint {
    /** unique or primary key constraint */
    ChatPinPkey = "ChatPin_pkey",
}

/** input type for inserting data into table "chat.Pin" */
export type Chat_Pin_Insert_Input = {
    chat?: Maybe<Chat_Chat_Obj_Rel_Insert_Input>;
    chatId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    registrant?: Maybe<Registrant_Registrant_Obj_Rel_Insert_Input>;
    registrantId?: Maybe<Scalars["uuid"]>;
    wasManuallyPinned?: Maybe<Scalars["Boolean"]>;
};

/** aggregate max on columns */
export type Chat_Pin_Max_Fields = {
    __typename?: "chat_Pin_max_fields";
    chatId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
};

/** order by max() on columns of table "chat.Pin" */
export type Chat_Pin_Max_Order_By = {
    chatId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    registrantId?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Chat_Pin_Min_Fields = {
    __typename?: "chat_Pin_min_fields";
    chatId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
};

/** order by min() on columns of table "chat.Pin" */
export type Chat_Pin_Min_Order_By = {
    chatId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    registrantId?: Maybe<Order_By>;
};

/** response of any mutation on the table "chat.Pin" */
export type Chat_Pin_Mutation_Response = {
    __typename?: "chat_Pin_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Chat_Pin>;
};

/** on conflict condition type for table "chat.Pin" */
export type Chat_Pin_On_Conflict = {
    constraint: Chat_Pin_Constraint;
    update_columns?: Array<Chat_Pin_Update_Column>;
    where?: Maybe<Chat_Pin_Bool_Exp>;
};

/** Ordering options when selecting data from "chat.Pin". */
export type Chat_Pin_Order_By = {
    chat?: Maybe<Chat_Chat_Order_By>;
    chatId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    registrant?: Maybe<Registrant_Registrant_Order_By>;
    registrantId?: Maybe<Order_By>;
    wasManuallyPinned?: Maybe<Order_By>;
};

/** primary key columns input for table: chat_Pin */
export type Chat_Pin_Pk_Columns_Input = {
    chatId: Scalars["uuid"];
    registrantId: Scalars["uuid"];
};

/** select columns of table "chat.Pin" */
export enum Chat_Pin_Select_Column {
    /** column name */
    ChatId = "chatId",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    RegistrantId = "registrantId",
    /** column name */
    WasManuallyPinned = "wasManuallyPinned",
}

/** input type for updating data in table "chat.Pin" */
export type Chat_Pin_Set_Input = {
    chatId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
    wasManuallyPinned?: Maybe<Scalars["Boolean"]>;
};

/** update columns of table "chat.Pin" */
export enum Chat_Pin_Update_Column {
    /** column name */
    ChatId = "chatId",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    RegistrantId = "registrantId",
    /** column name */
    WasManuallyPinned = "wasManuallyPinned",
}

/** columns and relationships of "chat.Reaction" */
export type Chat_Reaction = {
    __typename?: "chat_Reaction";
    chatId: Scalars["uuid"];
    created_at: Scalars["timestamptz"];
    data: Scalars["jsonb"];
    /** An object relationship */
    duplicate?: Maybe<Chat_Reaction>;
    duplicateSId?: Maybe<Scalars["uuid"]>;
    /** An array relationship */
    duplicates: Array<Chat_Reaction>;
    /** An aggregate relationship */
    duplicates_aggregate: Chat_Reaction_Aggregate;
    /** An object relationship */
    message: Chat_Message;
    messageSId: Scalars["uuid"];
    sId: Scalars["uuid"];
    /** An object relationship */
    sender: Registrant_Registrant;
    senderId: Scalars["uuid"];
    symbol: Scalars["String"];
    type: Chat_ReactionType_Enum;
    updated_at: Scalars["timestamptz"];
};

/** columns and relationships of "chat.Reaction" */
export type Chat_ReactionDataArgs = {
    path?: Maybe<Scalars["String"]>;
};

/** columns and relationships of "chat.Reaction" */
export type Chat_ReactionDuplicatesArgs = {
    distinct_on?: Maybe<Array<Chat_Reaction_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Reaction_Order_By>>;
    where?: Maybe<Chat_Reaction_Bool_Exp>;
};

/** columns and relationships of "chat.Reaction" */
export type Chat_ReactionDuplicates_AggregateArgs = {
    distinct_on?: Maybe<Array<Chat_Reaction_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Reaction_Order_By>>;
    where?: Maybe<Chat_Reaction_Bool_Exp>;
};

/** columns and relationships of "chat.ReactionType" */
export type Chat_ReactionType = {
    __typename?: "chat_ReactionType";
    description: Scalars["String"];
    name: Scalars["String"];
};

/** aggregated selection of "chat.ReactionType" */
export type Chat_ReactionType_Aggregate = {
    __typename?: "chat_ReactionType_aggregate";
    aggregate?: Maybe<Chat_ReactionType_Aggregate_Fields>;
    nodes: Array<Chat_ReactionType>;
};

/** aggregate fields of "chat.ReactionType" */
export type Chat_ReactionType_Aggregate_Fields = {
    __typename?: "chat_ReactionType_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Chat_ReactionType_Max_Fields>;
    min?: Maybe<Chat_ReactionType_Min_Fields>;
};

/** aggregate fields of "chat.ReactionType" */
export type Chat_ReactionType_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Chat_ReactionType_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** Boolean expression to filter rows from the table "chat.ReactionType". All fields are combined with a logical 'AND'. */
export type Chat_ReactionType_Bool_Exp = {
    _and?: Maybe<Array<Chat_ReactionType_Bool_Exp>>;
    _not?: Maybe<Chat_ReactionType_Bool_Exp>;
    _or?: Maybe<Array<Chat_ReactionType_Bool_Exp>>;
    description?: Maybe<String_Comparison_Exp>;
    name?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "chat.ReactionType" */
export enum Chat_ReactionType_Constraint {
    /** unique or primary key constraint */
    ReactionTypePkey = "ReactionType_pkey",
}

export enum Chat_ReactionType_Enum {
    /** Link to a message that answers the question. */
    Answer = "ANSWER",
    /** A plain emoji reaction */
    Emoji = "EMOJI",
    /** A vote in a poll */
    PollChoice = "POLL_CHOICE",
    /** Stop accepting new responses to the poll */
    PollClosed = "POLL_CLOSED",
    /** Make the poll results visible */
    PollComplete = "POLL_COMPLETE",
}

/** Boolean expression to compare columns of type "chat_ReactionType_enum". All fields are combined with logical 'AND'. */
export type Chat_ReactionType_Enum_Comparison_Exp = {
    _eq?: Maybe<Chat_ReactionType_Enum>;
    _in?: Maybe<Array<Chat_ReactionType_Enum>>;
    _is_null?: Maybe<Scalars["Boolean"]>;
    _neq?: Maybe<Chat_ReactionType_Enum>;
    _nin?: Maybe<Array<Chat_ReactionType_Enum>>;
};

/** input type for inserting data into table "chat.ReactionType" */
export type Chat_ReactionType_Insert_Input = {
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** aggregate max on columns */
export type Chat_ReactionType_Max_Fields = {
    __typename?: "chat_ReactionType_max_fields";
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** aggregate min on columns */
export type Chat_ReactionType_Min_Fields = {
    __typename?: "chat_ReactionType_min_fields";
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** response of any mutation on the table "chat.ReactionType" */
export type Chat_ReactionType_Mutation_Response = {
    __typename?: "chat_ReactionType_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Chat_ReactionType>;
};

/** on conflict condition type for table "chat.ReactionType" */
export type Chat_ReactionType_On_Conflict = {
    constraint: Chat_ReactionType_Constraint;
    update_columns?: Array<Chat_ReactionType_Update_Column>;
    where?: Maybe<Chat_ReactionType_Bool_Exp>;
};

/** Ordering options when selecting data from "chat.ReactionType". */
export type Chat_ReactionType_Order_By = {
    description?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
};

/** primary key columns input for table: chat_ReactionType */
export type Chat_ReactionType_Pk_Columns_Input = {
    name: Scalars["String"];
};

/** select columns of table "chat.ReactionType" */
export enum Chat_ReactionType_Select_Column {
    /** column name */
    Description = "description",
    /** column name */
    Name = "name",
}

/** input type for updating data in table "chat.ReactionType" */
export type Chat_ReactionType_Set_Input = {
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** update columns of table "chat.ReactionType" */
export enum Chat_ReactionType_Update_Column {
    /** column name */
    Description = "description",
    /** column name */
    Name = "name",
}

/** aggregated selection of "chat.Reaction" */
export type Chat_Reaction_Aggregate = {
    __typename?: "chat_Reaction_aggregate";
    aggregate?: Maybe<Chat_Reaction_Aggregate_Fields>;
    nodes: Array<Chat_Reaction>;
};

/** aggregate fields of "chat.Reaction" */
export type Chat_Reaction_Aggregate_Fields = {
    __typename?: "chat_Reaction_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Chat_Reaction_Max_Fields>;
    min?: Maybe<Chat_Reaction_Min_Fields>;
};

/** aggregate fields of "chat.Reaction" */
export type Chat_Reaction_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Chat_Reaction_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "chat.Reaction" */
export type Chat_Reaction_Aggregate_Order_By = {
    count?: Maybe<Order_By>;
    max?: Maybe<Chat_Reaction_Max_Order_By>;
    min?: Maybe<Chat_Reaction_Min_Order_By>;
};

/** append existing jsonb value of filtered columns with new jsonb value */
export type Chat_Reaction_Append_Input = {
    data?: Maybe<Scalars["jsonb"]>;
};

/** input type for inserting array relation for remote table "chat.Reaction" */
export type Chat_Reaction_Arr_Rel_Insert_Input = {
    data: Array<Chat_Reaction_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Chat_Reaction_On_Conflict>;
};

/** Boolean expression to filter rows from the table "chat.Reaction". All fields are combined with a logical 'AND'. */
export type Chat_Reaction_Bool_Exp = {
    _and?: Maybe<Array<Chat_Reaction_Bool_Exp>>;
    _not?: Maybe<Chat_Reaction_Bool_Exp>;
    _or?: Maybe<Array<Chat_Reaction_Bool_Exp>>;
    chatId?: Maybe<Uuid_Comparison_Exp>;
    created_at?: Maybe<Timestamptz_Comparison_Exp>;
    data?: Maybe<Jsonb_Comparison_Exp>;
    duplicate?: Maybe<Chat_Reaction_Bool_Exp>;
    duplicateSId?: Maybe<Uuid_Comparison_Exp>;
    duplicates?: Maybe<Chat_Reaction_Bool_Exp>;
    message?: Maybe<Chat_Message_Bool_Exp>;
    messageSId?: Maybe<Uuid_Comparison_Exp>;
    sId?: Maybe<Uuid_Comparison_Exp>;
    sender?: Maybe<Registrant_Registrant_Bool_Exp>;
    senderId?: Maybe<Uuid_Comparison_Exp>;
    symbol?: Maybe<String_Comparison_Exp>;
    type?: Maybe<Chat_ReactionType_Enum_Comparison_Exp>;
    updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "chat.Reaction" */
export enum Chat_Reaction_Constraint {
    /** unique or primary key constraint */
    ReactionPkey = "Reaction_pkey",
    /** unique or primary key constraint */
    ReactionSIdKey = "Reaction_sId_key",
}

/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export type Chat_Reaction_Delete_At_Path_Input = {
    data?: Maybe<Array<Scalars["String"]>>;
};

/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
export type Chat_Reaction_Delete_Elem_Input = {
    data?: Maybe<Scalars["Int"]>;
};

/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export type Chat_Reaction_Delete_Key_Input = {
    data?: Maybe<Scalars["String"]>;
};

/** input type for inserting data into table "chat.Reaction" */
export type Chat_Reaction_Insert_Input = {
    chatId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    data?: Maybe<Scalars["jsonb"]>;
    duplicate?: Maybe<Chat_Reaction_Obj_Rel_Insert_Input>;
    duplicateSId?: Maybe<Scalars["uuid"]>;
    duplicates?: Maybe<Chat_Reaction_Arr_Rel_Insert_Input>;
    message?: Maybe<Chat_Message_Obj_Rel_Insert_Input>;
    messageSId?: Maybe<Scalars["uuid"]>;
    sId?: Maybe<Scalars["uuid"]>;
    sender?: Maybe<Registrant_Registrant_Obj_Rel_Insert_Input>;
    senderId?: Maybe<Scalars["uuid"]>;
    symbol?: Maybe<Scalars["String"]>;
    type?: Maybe<Chat_ReactionType_Enum>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Chat_Reaction_Max_Fields = {
    __typename?: "chat_Reaction_max_fields";
    chatId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    duplicateSId?: Maybe<Scalars["uuid"]>;
    messageSId?: Maybe<Scalars["uuid"]>;
    sId?: Maybe<Scalars["uuid"]>;
    senderId?: Maybe<Scalars["uuid"]>;
    symbol?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** order by max() on columns of table "chat.Reaction" */
export type Chat_Reaction_Max_Order_By = {
    chatId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    duplicateSId?: Maybe<Order_By>;
    messageSId?: Maybe<Order_By>;
    sId?: Maybe<Order_By>;
    senderId?: Maybe<Order_By>;
    symbol?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Chat_Reaction_Min_Fields = {
    __typename?: "chat_Reaction_min_fields";
    chatId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    duplicateSId?: Maybe<Scalars["uuid"]>;
    messageSId?: Maybe<Scalars["uuid"]>;
    sId?: Maybe<Scalars["uuid"]>;
    senderId?: Maybe<Scalars["uuid"]>;
    symbol?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** order by min() on columns of table "chat.Reaction" */
export type Chat_Reaction_Min_Order_By = {
    chatId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    duplicateSId?: Maybe<Order_By>;
    messageSId?: Maybe<Order_By>;
    sId?: Maybe<Order_By>;
    senderId?: Maybe<Order_By>;
    symbol?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** response of any mutation on the table "chat.Reaction" */
export type Chat_Reaction_Mutation_Response = {
    __typename?: "chat_Reaction_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Chat_Reaction>;
};

/** input type for inserting object relation for remote table "chat.Reaction" */
export type Chat_Reaction_Obj_Rel_Insert_Input = {
    data: Chat_Reaction_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Chat_Reaction_On_Conflict>;
};

/** on conflict condition type for table "chat.Reaction" */
export type Chat_Reaction_On_Conflict = {
    constraint: Chat_Reaction_Constraint;
    update_columns?: Array<Chat_Reaction_Update_Column>;
    where?: Maybe<Chat_Reaction_Bool_Exp>;
};

/** Ordering options when selecting data from "chat.Reaction". */
export type Chat_Reaction_Order_By = {
    chatId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    data?: Maybe<Order_By>;
    duplicate?: Maybe<Chat_Reaction_Order_By>;
    duplicateSId?: Maybe<Order_By>;
    duplicates_aggregate?: Maybe<Chat_Reaction_Aggregate_Order_By>;
    message?: Maybe<Chat_Message_Order_By>;
    messageSId?: Maybe<Order_By>;
    sId?: Maybe<Order_By>;
    sender?: Maybe<Registrant_Registrant_Order_By>;
    senderId?: Maybe<Order_By>;
    symbol?: Maybe<Order_By>;
    type?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** primary key columns input for table: chat_Reaction */
export type Chat_Reaction_Pk_Columns_Input = {
    sId: Scalars["uuid"];
};

/** prepend existing jsonb value of filtered columns with new jsonb value */
export type Chat_Reaction_Prepend_Input = {
    data?: Maybe<Scalars["jsonb"]>;
};

/** select columns of table "chat.Reaction" */
export enum Chat_Reaction_Select_Column {
    /** column name */
    ChatId = "chatId",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    Data = "data",
    /** column name */
    DuplicateSId = "duplicateSId",
    /** column name */
    MessageSId = "messageSId",
    /** column name */
    SId = "sId",
    /** column name */
    SenderId = "senderId",
    /** column name */
    Symbol = "symbol",
    /** column name */
    Type = "type",
    /** column name */
    UpdatedAt = "updated_at",
}

/** input type for updating data in table "chat.Reaction" */
export type Chat_Reaction_Set_Input = {
    chatId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    data?: Maybe<Scalars["jsonb"]>;
    duplicateSId?: Maybe<Scalars["uuid"]>;
    messageSId?: Maybe<Scalars["uuid"]>;
    sId?: Maybe<Scalars["uuid"]>;
    senderId?: Maybe<Scalars["uuid"]>;
    symbol?: Maybe<Scalars["String"]>;
    type?: Maybe<Chat_ReactionType_Enum>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** update columns of table "chat.Reaction" */
export enum Chat_Reaction_Update_Column {
    /** column name */
    ChatId = "chatId",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    Data = "data",
    /** column name */
    DuplicateSId = "duplicateSId",
    /** column name */
    MessageSId = "messageSId",
    /** column name */
    SId = "sId",
    /** column name */
    SenderId = "senderId",
    /** column name */
    Symbol = "symbol",
    /** column name */
    Type = "type",
    /** column name */
    UpdatedAt = "updated_at",
}

/** columns and relationships of "chat.ReadUpToIndex" */
export type Chat_ReadUpToIndex = {
    __typename?: "chat_ReadUpToIndex";
    /** An object relationship */
    chat: Chat_Chat;
    chatId: Scalars["uuid"];
    messageSId?: Maybe<Scalars["uuid"]>;
    /** An object relationship */
    registrant: Registrant_Registrant;
    registrantId: Scalars["uuid"];
    updated_at: Scalars["timestamptz"];
};

/** aggregated selection of "chat.ReadUpToIndex" */
export type Chat_ReadUpToIndex_Aggregate = {
    __typename?: "chat_ReadUpToIndex_aggregate";
    aggregate?: Maybe<Chat_ReadUpToIndex_Aggregate_Fields>;
    nodes: Array<Chat_ReadUpToIndex>;
};

/** aggregate fields of "chat.ReadUpToIndex" */
export type Chat_ReadUpToIndex_Aggregate_Fields = {
    __typename?: "chat_ReadUpToIndex_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Chat_ReadUpToIndex_Max_Fields>;
    min?: Maybe<Chat_ReadUpToIndex_Min_Fields>;
};

/** aggregate fields of "chat.ReadUpToIndex" */
export type Chat_ReadUpToIndex_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Chat_ReadUpToIndex_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "chat.ReadUpToIndex" */
export type Chat_ReadUpToIndex_Aggregate_Order_By = {
    count?: Maybe<Order_By>;
    max?: Maybe<Chat_ReadUpToIndex_Max_Order_By>;
    min?: Maybe<Chat_ReadUpToIndex_Min_Order_By>;
};

/** input type for inserting array relation for remote table "chat.ReadUpToIndex" */
export type Chat_ReadUpToIndex_Arr_Rel_Insert_Input = {
    data: Array<Chat_ReadUpToIndex_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Chat_ReadUpToIndex_On_Conflict>;
};

/** Boolean expression to filter rows from the table "chat.ReadUpToIndex". All fields are combined with a logical 'AND'. */
export type Chat_ReadUpToIndex_Bool_Exp = {
    _and?: Maybe<Array<Chat_ReadUpToIndex_Bool_Exp>>;
    _not?: Maybe<Chat_ReadUpToIndex_Bool_Exp>;
    _or?: Maybe<Array<Chat_ReadUpToIndex_Bool_Exp>>;
    chat?: Maybe<Chat_Chat_Bool_Exp>;
    chatId?: Maybe<Uuid_Comparison_Exp>;
    messageSId?: Maybe<Uuid_Comparison_Exp>;
    registrant?: Maybe<Registrant_Registrant_Bool_Exp>;
    registrantId?: Maybe<Uuid_Comparison_Exp>;
    updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "chat.ReadUpToIndex" */
export enum Chat_ReadUpToIndex_Constraint {
    /** unique or primary key constraint */
    ReadUpToIndexPkey = "ReadUpToIndex_pkey",
}

/** input type for inserting data into table "chat.ReadUpToIndex" */
export type Chat_ReadUpToIndex_Insert_Input = {
    chat?: Maybe<Chat_Chat_Obj_Rel_Insert_Input>;
    chatId?: Maybe<Scalars["uuid"]>;
    messageSId?: Maybe<Scalars["uuid"]>;
    registrant?: Maybe<Registrant_Registrant_Obj_Rel_Insert_Input>;
    registrantId?: Maybe<Scalars["uuid"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Chat_ReadUpToIndex_Max_Fields = {
    __typename?: "chat_ReadUpToIndex_max_fields";
    chatId?: Maybe<Scalars["uuid"]>;
    messageSId?: Maybe<Scalars["uuid"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** order by max() on columns of table "chat.ReadUpToIndex" */
export type Chat_ReadUpToIndex_Max_Order_By = {
    chatId?: Maybe<Order_By>;
    messageSId?: Maybe<Order_By>;
    registrantId?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Chat_ReadUpToIndex_Min_Fields = {
    __typename?: "chat_ReadUpToIndex_min_fields";
    chatId?: Maybe<Scalars["uuid"]>;
    messageSId?: Maybe<Scalars["uuid"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** order by min() on columns of table "chat.ReadUpToIndex" */
export type Chat_ReadUpToIndex_Min_Order_By = {
    chatId?: Maybe<Order_By>;
    messageSId?: Maybe<Order_By>;
    registrantId?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** response of any mutation on the table "chat.ReadUpToIndex" */
export type Chat_ReadUpToIndex_Mutation_Response = {
    __typename?: "chat_ReadUpToIndex_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Chat_ReadUpToIndex>;
};

/** on conflict condition type for table "chat.ReadUpToIndex" */
export type Chat_ReadUpToIndex_On_Conflict = {
    constraint: Chat_ReadUpToIndex_Constraint;
    update_columns?: Array<Chat_ReadUpToIndex_Update_Column>;
    where?: Maybe<Chat_ReadUpToIndex_Bool_Exp>;
};

/** Ordering options when selecting data from "chat.ReadUpToIndex". */
export type Chat_ReadUpToIndex_Order_By = {
    chat?: Maybe<Chat_Chat_Order_By>;
    chatId?: Maybe<Order_By>;
    messageSId?: Maybe<Order_By>;
    registrant?: Maybe<Registrant_Registrant_Order_By>;
    registrantId?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** primary key columns input for table: chat_ReadUpToIndex */
export type Chat_ReadUpToIndex_Pk_Columns_Input = {
    chatId: Scalars["uuid"];
    registrantId: Scalars["uuid"];
};

/** select columns of table "chat.ReadUpToIndex" */
export enum Chat_ReadUpToIndex_Select_Column {
    /** column name */
    ChatId = "chatId",
    /** column name */
    MessageSId = "messageSId",
    /** column name */
    RegistrantId = "registrantId",
    /** column name */
    UpdatedAt = "updated_at",
}

/** input type for updating data in table "chat.ReadUpToIndex" */
export type Chat_ReadUpToIndex_Set_Input = {
    chatId?: Maybe<Scalars["uuid"]>;
    messageSId?: Maybe<Scalars["uuid"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** update columns of table "chat.ReadUpToIndex" */
export enum Chat_ReadUpToIndex_Update_Column {
    /** column name */
    ChatId = "chatId",
    /** column name */
    MessageSId = "messageSId",
    /** column name */
    RegistrantId = "registrantId",
    /** column name */
    UpdatedAt = "updated_at",
}

/**
 * Subscribe to chat notifications.
 *
 *
 * columns and relationships of "chat.Subscription"
 */
export type Chat_Subscription = {
    __typename?: "chat_Subscription";
    /** An object relationship */
    chat: Chat_Chat;
    chatId: Scalars["uuid"];
    created_at: Scalars["timestamptz"];
    /** An object relationship */
    registrant: Registrant_Registrant;
    registrantId: Scalars["uuid"];
    wasManuallySubscribed: Scalars["Boolean"];
};

/** aggregated selection of "chat.Subscription" */
export type Chat_Subscription_Aggregate = {
    __typename?: "chat_Subscription_aggregate";
    aggregate?: Maybe<Chat_Subscription_Aggregate_Fields>;
    nodes: Array<Chat_Subscription>;
};

/** aggregate fields of "chat.Subscription" */
export type Chat_Subscription_Aggregate_Fields = {
    __typename?: "chat_Subscription_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Chat_Subscription_Max_Fields>;
    min?: Maybe<Chat_Subscription_Min_Fields>;
};

/** aggregate fields of "chat.Subscription" */
export type Chat_Subscription_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Chat_Subscription_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "chat.Subscription" */
export type Chat_Subscription_Aggregate_Order_By = {
    count?: Maybe<Order_By>;
    max?: Maybe<Chat_Subscription_Max_Order_By>;
    min?: Maybe<Chat_Subscription_Min_Order_By>;
};

/** input type for inserting array relation for remote table "chat.Subscription" */
export type Chat_Subscription_Arr_Rel_Insert_Input = {
    data: Array<Chat_Subscription_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Chat_Subscription_On_Conflict>;
};

/** Boolean expression to filter rows from the table "chat.Subscription". All fields are combined with a logical 'AND'. */
export type Chat_Subscription_Bool_Exp = {
    _and?: Maybe<Array<Chat_Subscription_Bool_Exp>>;
    _not?: Maybe<Chat_Subscription_Bool_Exp>;
    _or?: Maybe<Array<Chat_Subscription_Bool_Exp>>;
    chat?: Maybe<Chat_Chat_Bool_Exp>;
    chatId?: Maybe<Uuid_Comparison_Exp>;
    created_at?: Maybe<Timestamptz_Comparison_Exp>;
    registrant?: Maybe<Registrant_Registrant_Bool_Exp>;
    registrantId?: Maybe<Uuid_Comparison_Exp>;
    wasManuallySubscribed?: Maybe<Boolean_Comparison_Exp>;
};

/** unique or primary key constraints on table "chat.Subscription" */
export enum Chat_Subscription_Constraint {
    /** unique or primary key constraint */
    SubscriptionPkey = "Subscription_pkey",
}

/** input type for inserting data into table "chat.Subscription" */
export type Chat_Subscription_Insert_Input = {
    chat?: Maybe<Chat_Chat_Obj_Rel_Insert_Input>;
    chatId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    registrant?: Maybe<Registrant_Registrant_Obj_Rel_Insert_Input>;
    registrantId?: Maybe<Scalars["uuid"]>;
    wasManuallySubscribed?: Maybe<Scalars["Boolean"]>;
};

/** aggregate max on columns */
export type Chat_Subscription_Max_Fields = {
    __typename?: "chat_Subscription_max_fields";
    chatId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
};

/** order by max() on columns of table "chat.Subscription" */
export type Chat_Subscription_Max_Order_By = {
    chatId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    registrantId?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Chat_Subscription_Min_Fields = {
    __typename?: "chat_Subscription_min_fields";
    chatId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
};

/** order by min() on columns of table "chat.Subscription" */
export type Chat_Subscription_Min_Order_By = {
    chatId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    registrantId?: Maybe<Order_By>;
};

/** response of any mutation on the table "chat.Subscription" */
export type Chat_Subscription_Mutation_Response = {
    __typename?: "chat_Subscription_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Chat_Subscription>;
};

/** on conflict condition type for table "chat.Subscription" */
export type Chat_Subscription_On_Conflict = {
    constraint: Chat_Subscription_Constraint;
    update_columns?: Array<Chat_Subscription_Update_Column>;
    where?: Maybe<Chat_Subscription_Bool_Exp>;
};

/** Ordering options when selecting data from "chat.Subscription". */
export type Chat_Subscription_Order_By = {
    chat?: Maybe<Chat_Chat_Order_By>;
    chatId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    registrant?: Maybe<Registrant_Registrant_Order_By>;
    registrantId?: Maybe<Order_By>;
    wasManuallySubscribed?: Maybe<Order_By>;
};

/** primary key columns input for table: chat_Subscription */
export type Chat_Subscription_Pk_Columns_Input = {
    chatId: Scalars["uuid"];
    registrantId: Scalars["uuid"];
};

/** select columns of table "chat.Subscription" */
export enum Chat_Subscription_Select_Column {
    /** column name */
    ChatId = "chatId",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    RegistrantId = "registrantId",
    /** column name */
    WasManuallySubscribed = "wasManuallySubscribed",
}

/** input type for updating data in table "chat.Subscription" */
export type Chat_Subscription_Set_Input = {
    chatId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
    wasManuallySubscribed?: Maybe<Scalars["Boolean"]>;
};

/** update columns of table "chat.Subscription" */
export enum Chat_Subscription_Update_Column {
    /** column name */
    ChatId = "chatId",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    RegistrantId = "registrantId",
    /** column name */
    WasManuallySubscribed = "wasManuallySubscribed",
}

/** columns and relationships of "collection.Exhibition" */
export type Collection_Exhibition = {
    __typename?: "collection_Exhibition";
    colour: Scalars["String"];
    /** An object relationship */
    conference: Conference_Conference;
    conferenceId: Scalars["uuid"];
    created_at: Scalars["timestamptz"];
    id: Scalars["uuid"];
    isHidden: Scalars["Boolean"];
    /** An array relationship */
    items: Array<Content_ItemExhibition>;
    /** An aggregate relationship */
    items_aggregate: Content_ItemExhibition_Aggregate;
    name: Scalars["String"];
    priority: Scalars["Int"];
    updated_at: Scalars["timestamptz"];
};

/** columns and relationships of "collection.Exhibition" */
export type Collection_ExhibitionItemsArgs = {
    distinct_on?: Maybe<Array<Content_ItemExhibition_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ItemExhibition_Order_By>>;
    where?: Maybe<Content_ItemExhibition_Bool_Exp>;
};

/** columns and relationships of "collection.Exhibition" */
export type Collection_ExhibitionItems_AggregateArgs = {
    distinct_on?: Maybe<Array<Content_ItemExhibition_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ItemExhibition_Order_By>>;
    where?: Maybe<Content_ItemExhibition_Bool_Exp>;
};

/** aggregated selection of "collection.Exhibition" */
export type Collection_Exhibition_Aggregate = {
    __typename?: "collection_Exhibition_aggregate";
    aggregate?: Maybe<Collection_Exhibition_Aggregate_Fields>;
    nodes: Array<Collection_Exhibition>;
};

/** aggregate fields of "collection.Exhibition" */
export type Collection_Exhibition_Aggregate_Fields = {
    __typename?: "collection_Exhibition_aggregate_fields";
    avg?: Maybe<Collection_Exhibition_Avg_Fields>;
    count: Scalars["Int"];
    max?: Maybe<Collection_Exhibition_Max_Fields>;
    min?: Maybe<Collection_Exhibition_Min_Fields>;
    stddev?: Maybe<Collection_Exhibition_Stddev_Fields>;
    stddev_pop?: Maybe<Collection_Exhibition_Stddev_Pop_Fields>;
    stddev_samp?: Maybe<Collection_Exhibition_Stddev_Samp_Fields>;
    sum?: Maybe<Collection_Exhibition_Sum_Fields>;
    var_pop?: Maybe<Collection_Exhibition_Var_Pop_Fields>;
    var_samp?: Maybe<Collection_Exhibition_Var_Samp_Fields>;
    variance?: Maybe<Collection_Exhibition_Variance_Fields>;
};

/** aggregate fields of "collection.Exhibition" */
export type Collection_Exhibition_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Collection_Exhibition_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "collection.Exhibition" */
export type Collection_Exhibition_Aggregate_Order_By = {
    avg?: Maybe<Collection_Exhibition_Avg_Order_By>;
    count?: Maybe<Order_By>;
    max?: Maybe<Collection_Exhibition_Max_Order_By>;
    min?: Maybe<Collection_Exhibition_Min_Order_By>;
    stddev?: Maybe<Collection_Exhibition_Stddev_Order_By>;
    stddev_pop?: Maybe<Collection_Exhibition_Stddev_Pop_Order_By>;
    stddev_samp?: Maybe<Collection_Exhibition_Stddev_Samp_Order_By>;
    sum?: Maybe<Collection_Exhibition_Sum_Order_By>;
    var_pop?: Maybe<Collection_Exhibition_Var_Pop_Order_By>;
    var_samp?: Maybe<Collection_Exhibition_Var_Samp_Order_By>;
    variance?: Maybe<Collection_Exhibition_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "collection.Exhibition" */
export type Collection_Exhibition_Arr_Rel_Insert_Input = {
    data: Array<Collection_Exhibition_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Collection_Exhibition_On_Conflict>;
};

/** aggregate avg on columns */
export type Collection_Exhibition_Avg_Fields = {
    __typename?: "collection_Exhibition_avg_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by avg() on columns of table "collection.Exhibition" */
export type Collection_Exhibition_Avg_Order_By = {
    priority?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "collection.Exhibition". All fields are combined with a logical 'AND'. */
export type Collection_Exhibition_Bool_Exp = {
    _and?: Maybe<Array<Collection_Exhibition_Bool_Exp>>;
    _not?: Maybe<Collection_Exhibition_Bool_Exp>;
    _or?: Maybe<Array<Collection_Exhibition_Bool_Exp>>;
    colour?: Maybe<String_Comparison_Exp>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    created_at?: Maybe<Timestamptz_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    isHidden?: Maybe<Boolean_Comparison_Exp>;
    items?: Maybe<Content_ItemExhibition_Bool_Exp>;
    name?: Maybe<String_Comparison_Exp>;
    priority?: Maybe<Int_Comparison_Exp>;
    updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "collection.Exhibition" */
export enum Collection_Exhibition_Constraint {
    /** unique or primary key constraint */
    ExhibitionNameConferenceIdFkey = "Exhibition_name_conferenceId_fkey",
    /** unique or primary key constraint */
    ExhibitionPkey = "Exhibition_pkey",
}

/** input type for incrementing numeric columns in table "collection.Exhibition" */
export type Collection_Exhibition_Inc_Input = {
    priority?: Maybe<Scalars["Int"]>;
};

/** input type for inserting data into table "collection.Exhibition" */
export type Collection_Exhibition_Insert_Input = {
    colour?: Maybe<Scalars["String"]>;
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    isHidden?: Maybe<Scalars["Boolean"]>;
    items?: Maybe<Content_ItemExhibition_Arr_Rel_Insert_Input>;
    name?: Maybe<Scalars["String"]>;
    priority?: Maybe<Scalars["Int"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Collection_Exhibition_Max_Fields = {
    __typename?: "collection_Exhibition_max_fields";
    colour?: Maybe<Scalars["String"]>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
    priority?: Maybe<Scalars["Int"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** order by max() on columns of table "collection.Exhibition" */
export type Collection_Exhibition_Max_Order_By = {
    colour?: Maybe<Order_By>;
    conferenceId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    priority?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Collection_Exhibition_Min_Fields = {
    __typename?: "collection_Exhibition_min_fields";
    colour?: Maybe<Scalars["String"]>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
    priority?: Maybe<Scalars["Int"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** order by min() on columns of table "collection.Exhibition" */
export type Collection_Exhibition_Min_Order_By = {
    colour?: Maybe<Order_By>;
    conferenceId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    priority?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** response of any mutation on the table "collection.Exhibition" */
export type Collection_Exhibition_Mutation_Response = {
    __typename?: "collection_Exhibition_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Collection_Exhibition>;
};

/** input type for inserting object relation for remote table "collection.Exhibition" */
export type Collection_Exhibition_Obj_Rel_Insert_Input = {
    data: Collection_Exhibition_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Collection_Exhibition_On_Conflict>;
};

/** on conflict condition type for table "collection.Exhibition" */
export type Collection_Exhibition_On_Conflict = {
    constraint: Collection_Exhibition_Constraint;
    update_columns?: Array<Collection_Exhibition_Update_Column>;
    where?: Maybe<Collection_Exhibition_Bool_Exp>;
};

/** Ordering options when selecting data from "collection.Exhibition". */
export type Collection_Exhibition_Order_By = {
    colour?: Maybe<Order_By>;
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    isHidden?: Maybe<Order_By>;
    items_aggregate?: Maybe<Content_ItemExhibition_Aggregate_Order_By>;
    name?: Maybe<Order_By>;
    priority?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** primary key columns input for table: collection_Exhibition */
export type Collection_Exhibition_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "collection.Exhibition" */
export enum Collection_Exhibition_Select_Column {
    /** column name */
    Colour = "colour",
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    Id = "id",
    /** column name */
    IsHidden = "isHidden",
    /** column name */
    Name = "name",
    /** column name */
    Priority = "priority",
    /** column name */
    UpdatedAt = "updated_at",
}

/** input type for updating data in table "collection.Exhibition" */
export type Collection_Exhibition_Set_Input = {
    colour?: Maybe<Scalars["String"]>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    isHidden?: Maybe<Scalars["Boolean"]>;
    name?: Maybe<Scalars["String"]>;
    priority?: Maybe<Scalars["Int"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate stddev on columns */
export type Collection_Exhibition_Stddev_Fields = {
    __typename?: "collection_Exhibition_stddev_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by stddev() on columns of table "collection.Exhibition" */
export type Collection_Exhibition_Stddev_Order_By = {
    priority?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Collection_Exhibition_Stddev_Pop_Fields = {
    __typename?: "collection_Exhibition_stddev_pop_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by stddev_pop() on columns of table "collection.Exhibition" */
export type Collection_Exhibition_Stddev_Pop_Order_By = {
    priority?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Collection_Exhibition_Stddev_Samp_Fields = {
    __typename?: "collection_Exhibition_stddev_samp_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by stddev_samp() on columns of table "collection.Exhibition" */
export type Collection_Exhibition_Stddev_Samp_Order_By = {
    priority?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Collection_Exhibition_Sum_Fields = {
    __typename?: "collection_Exhibition_sum_fields";
    priority?: Maybe<Scalars["Int"]>;
};

/** order by sum() on columns of table "collection.Exhibition" */
export type Collection_Exhibition_Sum_Order_By = {
    priority?: Maybe<Order_By>;
};

/** update columns of table "collection.Exhibition" */
export enum Collection_Exhibition_Update_Column {
    /** column name */
    Colour = "colour",
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    Id = "id",
    /** column name */
    IsHidden = "isHidden",
    /** column name */
    Name = "name",
    /** column name */
    Priority = "priority",
    /** column name */
    UpdatedAt = "updated_at",
}

/** aggregate var_pop on columns */
export type Collection_Exhibition_Var_Pop_Fields = {
    __typename?: "collection_Exhibition_var_pop_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by var_pop() on columns of table "collection.Exhibition" */
export type Collection_Exhibition_Var_Pop_Order_By = {
    priority?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Collection_Exhibition_Var_Samp_Fields = {
    __typename?: "collection_Exhibition_var_samp_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by var_samp() on columns of table "collection.Exhibition" */
export type Collection_Exhibition_Var_Samp_Order_By = {
    priority?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Collection_Exhibition_Variance_Fields = {
    __typename?: "collection_Exhibition_variance_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by variance() on columns of table "collection.Exhibition" */
export type Collection_Exhibition_Variance_Order_By = {
    priority?: Maybe<Order_By>;
};

/** columns and relationships of "collection.ProgramPerson" */
export type Collection_ProgramPerson = {
    __typename?: "collection_ProgramPerson";
    affiliation?: Maybe<Scalars["String"]>;
    /** An object relationship */
    conference: Conference_Conference;
    conferenceId: Scalars["uuid"];
    email?: Maybe<Scalars["String"]>;
    /** An array relationship */
    eventPeople: Array<Schedule_EventProgramPerson>;
    /** An aggregate relationship */
    eventPeople_aggregate: Schedule_EventProgramPerson_Aggregate;
    id: Scalars["uuid"];
    /** An array relationship */
    itemPeople: Array<Content_ItemProgramPerson>;
    /** An aggregate relationship */
    itemPeople_aggregate: Content_ItemProgramPerson_Aggregate;
    name: Scalars["String"];
    /** An object relationship */
    originatingData?: Maybe<Conference_OriginatingData>;
    originatingDataId?: Maybe<Scalars["uuid"]>;
    /** An object relationship */
    registrant?: Maybe<Registrant_Registrant>;
    registrantId?: Maybe<Scalars["uuid"]>;
};

/** columns and relationships of "collection.ProgramPerson" */
export type Collection_ProgramPersonEventPeopleArgs = {
    distinct_on?: Maybe<Array<Schedule_EventProgramPerson_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_EventProgramPerson_Order_By>>;
    where?: Maybe<Schedule_EventProgramPerson_Bool_Exp>;
};

/** columns and relationships of "collection.ProgramPerson" */
export type Collection_ProgramPersonEventPeople_AggregateArgs = {
    distinct_on?: Maybe<Array<Schedule_EventProgramPerson_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_EventProgramPerson_Order_By>>;
    where?: Maybe<Schedule_EventProgramPerson_Bool_Exp>;
};

/** columns and relationships of "collection.ProgramPerson" */
export type Collection_ProgramPersonItemPeopleArgs = {
    distinct_on?: Maybe<Array<Content_ItemProgramPerson_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ItemProgramPerson_Order_By>>;
    where?: Maybe<Content_ItemProgramPerson_Bool_Exp>;
};

/** columns and relationships of "collection.ProgramPerson" */
export type Collection_ProgramPersonItemPeople_AggregateArgs = {
    distinct_on?: Maybe<Array<Content_ItemProgramPerson_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ItemProgramPerson_Order_By>>;
    where?: Maybe<Content_ItemProgramPerson_Bool_Exp>;
};

/** aggregated selection of "collection.ProgramPerson" */
export type Collection_ProgramPerson_Aggregate = {
    __typename?: "collection_ProgramPerson_aggregate";
    aggregate?: Maybe<Collection_ProgramPerson_Aggregate_Fields>;
    nodes: Array<Collection_ProgramPerson>;
};

/** aggregate fields of "collection.ProgramPerson" */
export type Collection_ProgramPerson_Aggregate_Fields = {
    __typename?: "collection_ProgramPerson_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Collection_ProgramPerson_Max_Fields>;
    min?: Maybe<Collection_ProgramPerson_Min_Fields>;
};

/** aggregate fields of "collection.ProgramPerson" */
export type Collection_ProgramPerson_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Collection_ProgramPerson_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "collection.ProgramPerson" */
export type Collection_ProgramPerson_Aggregate_Order_By = {
    count?: Maybe<Order_By>;
    max?: Maybe<Collection_ProgramPerson_Max_Order_By>;
    min?: Maybe<Collection_ProgramPerson_Min_Order_By>;
};

/** input type for inserting array relation for remote table "collection.ProgramPerson" */
export type Collection_ProgramPerson_Arr_Rel_Insert_Input = {
    data: Array<Collection_ProgramPerson_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Collection_ProgramPerson_On_Conflict>;
};

/** Boolean expression to filter rows from the table "collection.ProgramPerson". All fields are combined with a logical 'AND'. */
export type Collection_ProgramPerson_Bool_Exp = {
    _and?: Maybe<Array<Collection_ProgramPerson_Bool_Exp>>;
    _not?: Maybe<Collection_ProgramPerson_Bool_Exp>;
    _or?: Maybe<Array<Collection_ProgramPerson_Bool_Exp>>;
    affiliation?: Maybe<String_Comparison_Exp>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    email?: Maybe<String_Comparison_Exp>;
    eventPeople?: Maybe<Schedule_EventProgramPerson_Bool_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    itemPeople?: Maybe<Content_ItemProgramPerson_Bool_Exp>;
    name?: Maybe<String_Comparison_Exp>;
    originatingData?: Maybe<Conference_OriginatingData_Bool_Exp>;
    originatingDataId?: Maybe<Uuid_Comparison_Exp>;
    registrant?: Maybe<Registrant_Registrant_Bool_Exp>;
    registrantId?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "collection.ProgramPerson" */
export enum Collection_ProgramPerson_Constraint {
    /** unique or primary key constraint */
    ProgramPersonConferenceIdNameAffiliationKey = "ProgramPerson_conferenceId_name_affiliation_key",
    /** unique or primary key constraint */
    ProgramPersonPkey = "ProgramPerson_pkey",
}

/** input type for inserting data into table "collection.ProgramPerson" */
export type Collection_ProgramPerson_Insert_Input = {
    affiliation?: Maybe<Scalars["String"]>;
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    email?: Maybe<Scalars["String"]>;
    eventPeople?: Maybe<Schedule_EventProgramPerson_Arr_Rel_Insert_Input>;
    id?: Maybe<Scalars["uuid"]>;
    itemPeople?: Maybe<Content_ItemProgramPerson_Arr_Rel_Insert_Input>;
    name?: Maybe<Scalars["String"]>;
    originatingData?: Maybe<Conference_OriginatingData_Obj_Rel_Insert_Input>;
    originatingDataId?: Maybe<Scalars["uuid"]>;
    registrant?: Maybe<Registrant_Registrant_Obj_Rel_Insert_Input>;
    registrantId?: Maybe<Scalars["uuid"]>;
};

/** aggregate max on columns */
export type Collection_ProgramPerson_Max_Fields = {
    __typename?: "collection_ProgramPerson_max_fields";
    affiliation?: Maybe<Scalars["String"]>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    email?: Maybe<Scalars["String"]>;
    id?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
    originatingDataId?: Maybe<Scalars["uuid"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
};

/** order by max() on columns of table "collection.ProgramPerson" */
export type Collection_ProgramPerson_Max_Order_By = {
    affiliation?: Maybe<Order_By>;
    conferenceId?: Maybe<Order_By>;
    email?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    originatingDataId?: Maybe<Order_By>;
    registrantId?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Collection_ProgramPerson_Min_Fields = {
    __typename?: "collection_ProgramPerson_min_fields";
    affiliation?: Maybe<Scalars["String"]>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    email?: Maybe<Scalars["String"]>;
    id?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
    originatingDataId?: Maybe<Scalars["uuid"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
};

/** order by min() on columns of table "collection.ProgramPerson" */
export type Collection_ProgramPerson_Min_Order_By = {
    affiliation?: Maybe<Order_By>;
    conferenceId?: Maybe<Order_By>;
    email?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    originatingDataId?: Maybe<Order_By>;
    registrantId?: Maybe<Order_By>;
};

/** response of any mutation on the table "collection.ProgramPerson" */
export type Collection_ProgramPerson_Mutation_Response = {
    __typename?: "collection_ProgramPerson_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Collection_ProgramPerson>;
};

/** input type for inserting object relation for remote table "collection.ProgramPerson" */
export type Collection_ProgramPerson_Obj_Rel_Insert_Input = {
    data: Collection_ProgramPerson_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Collection_ProgramPerson_On_Conflict>;
};

/** on conflict condition type for table "collection.ProgramPerson" */
export type Collection_ProgramPerson_On_Conflict = {
    constraint: Collection_ProgramPerson_Constraint;
    update_columns?: Array<Collection_ProgramPerson_Update_Column>;
    where?: Maybe<Collection_ProgramPerson_Bool_Exp>;
};

/** Ordering options when selecting data from "collection.ProgramPerson". */
export type Collection_ProgramPerson_Order_By = {
    affiliation?: Maybe<Order_By>;
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    email?: Maybe<Order_By>;
    eventPeople_aggregate?: Maybe<Schedule_EventProgramPerson_Aggregate_Order_By>;
    id?: Maybe<Order_By>;
    itemPeople_aggregate?: Maybe<Content_ItemProgramPerson_Aggregate_Order_By>;
    name?: Maybe<Order_By>;
    originatingData?: Maybe<Conference_OriginatingData_Order_By>;
    originatingDataId?: Maybe<Order_By>;
    registrant?: Maybe<Registrant_Registrant_Order_By>;
    registrantId?: Maybe<Order_By>;
};

/** primary key columns input for table: collection_ProgramPerson */
export type Collection_ProgramPerson_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "collection.ProgramPerson" */
export enum Collection_ProgramPerson_Select_Column {
    /** column name */
    Affiliation = "affiliation",
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    Email = "email",
    /** column name */
    Id = "id",
    /** column name */
    Name = "name",
    /** column name */
    OriginatingDataId = "originatingDataId",
    /** column name */
    RegistrantId = "registrantId",
}

/** input type for updating data in table "collection.ProgramPerson" */
export type Collection_ProgramPerson_Set_Input = {
    affiliation?: Maybe<Scalars["String"]>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    email?: Maybe<Scalars["String"]>;
    id?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
    originatingDataId?: Maybe<Scalars["uuid"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
};

/** update columns of table "collection.ProgramPerson" */
export enum Collection_ProgramPerson_Update_Column {
    /** column name */
    Affiliation = "affiliation",
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    Email = "email",
    /** column name */
    Id = "id",
    /** column name */
    Name = "name",
    /** column name */
    OriginatingDataId = "originatingDataId",
    /** column name */
    RegistrantId = "registrantId",
}

/** columns and relationships of "collection.Tag" */
export type Collection_Tag = {
    __typename?: "collection_Tag";
    colour: Scalars["String"];
    /** An object relationship */
    conference: Conference_Conference;
    conferenceId: Scalars["uuid"];
    createdAt: Scalars["timestamptz"];
    /** An array relationship */
    eventTags: Array<Schedule_EventTag>;
    /** An aggregate relationship */
    eventTags_aggregate: Schedule_EventTag_Aggregate;
    id: Scalars["uuid"];
    /** An array relationship */
    itemTags: Array<Content_ItemTag>;
    /** An aggregate relationship */
    itemTags_aggregate: Content_ItemTag_Aggregate;
    name: Scalars["String"];
    /** An object relationship */
    originatingData?: Maybe<Conference_OriginatingData>;
    originatingDataId?: Maybe<Scalars["uuid"]>;
    priority: Scalars["Int"];
    updatedAt: Scalars["timestamptz"];
};

/** columns and relationships of "collection.Tag" */
export type Collection_TagEventTagsArgs = {
    distinct_on?: Maybe<Array<Schedule_EventTag_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_EventTag_Order_By>>;
    where?: Maybe<Schedule_EventTag_Bool_Exp>;
};

/** columns and relationships of "collection.Tag" */
export type Collection_TagEventTags_AggregateArgs = {
    distinct_on?: Maybe<Array<Schedule_EventTag_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_EventTag_Order_By>>;
    where?: Maybe<Schedule_EventTag_Bool_Exp>;
};

/** columns and relationships of "collection.Tag" */
export type Collection_TagItemTagsArgs = {
    distinct_on?: Maybe<Array<Content_ItemTag_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ItemTag_Order_By>>;
    where?: Maybe<Content_ItemTag_Bool_Exp>;
};

/** columns and relationships of "collection.Tag" */
export type Collection_TagItemTags_AggregateArgs = {
    distinct_on?: Maybe<Array<Content_ItemTag_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ItemTag_Order_By>>;
    where?: Maybe<Content_ItemTag_Bool_Exp>;
};

/** aggregated selection of "collection.Tag" */
export type Collection_Tag_Aggregate = {
    __typename?: "collection_Tag_aggregate";
    aggregate?: Maybe<Collection_Tag_Aggregate_Fields>;
    nodes: Array<Collection_Tag>;
};

/** aggregate fields of "collection.Tag" */
export type Collection_Tag_Aggregate_Fields = {
    __typename?: "collection_Tag_aggregate_fields";
    avg?: Maybe<Collection_Tag_Avg_Fields>;
    count: Scalars["Int"];
    max?: Maybe<Collection_Tag_Max_Fields>;
    min?: Maybe<Collection_Tag_Min_Fields>;
    stddev?: Maybe<Collection_Tag_Stddev_Fields>;
    stddev_pop?: Maybe<Collection_Tag_Stddev_Pop_Fields>;
    stddev_samp?: Maybe<Collection_Tag_Stddev_Samp_Fields>;
    sum?: Maybe<Collection_Tag_Sum_Fields>;
    var_pop?: Maybe<Collection_Tag_Var_Pop_Fields>;
    var_samp?: Maybe<Collection_Tag_Var_Samp_Fields>;
    variance?: Maybe<Collection_Tag_Variance_Fields>;
};

/** aggregate fields of "collection.Tag" */
export type Collection_Tag_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Collection_Tag_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "collection.Tag" */
export type Collection_Tag_Aggregate_Order_By = {
    avg?: Maybe<Collection_Tag_Avg_Order_By>;
    count?: Maybe<Order_By>;
    max?: Maybe<Collection_Tag_Max_Order_By>;
    min?: Maybe<Collection_Tag_Min_Order_By>;
    stddev?: Maybe<Collection_Tag_Stddev_Order_By>;
    stddev_pop?: Maybe<Collection_Tag_Stddev_Pop_Order_By>;
    stddev_samp?: Maybe<Collection_Tag_Stddev_Samp_Order_By>;
    sum?: Maybe<Collection_Tag_Sum_Order_By>;
    var_pop?: Maybe<Collection_Tag_Var_Pop_Order_By>;
    var_samp?: Maybe<Collection_Tag_Var_Samp_Order_By>;
    variance?: Maybe<Collection_Tag_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "collection.Tag" */
export type Collection_Tag_Arr_Rel_Insert_Input = {
    data: Array<Collection_Tag_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Collection_Tag_On_Conflict>;
};

/** aggregate avg on columns */
export type Collection_Tag_Avg_Fields = {
    __typename?: "collection_Tag_avg_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by avg() on columns of table "collection.Tag" */
export type Collection_Tag_Avg_Order_By = {
    priority?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "collection.Tag". All fields are combined with a logical 'AND'. */
export type Collection_Tag_Bool_Exp = {
    _and?: Maybe<Array<Collection_Tag_Bool_Exp>>;
    _not?: Maybe<Collection_Tag_Bool_Exp>;
    _or?: Maybe<Array<Collection_Tag_Bool_Exp>>;
    colour?: Maybe<String_Comparison_Exp>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    createdAt?: Maybe<Timestamptz_Comparison_Exp>;
    eventTags?: Maybe<Schedule_EventTag_Bool_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    itemTags?: Maybe<Content_ItemTag_Bool_Exp>;
    name?: Maybe<String_Comparison_Exp>;
    originatingData?: Maybe<Conference_OriginatingData_Bool_Exp>;
    originatingDataId?: Maybe<Uuid_Comparison_Exp>;
    priority?: Maybe<Int_Comparison_Exp>;
    updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "collection.Tag" */
export enum Collection_Tag_Constraint {
    /** unique or primary key constraint */
    TagPkey = "Tag_pkey",
}

/** input type for incrementing numeric columns in table "collection.Tag" */
export type Collection_Tag_Inc_Input = {
    priority?: Maybe<Scalars["Int"]>;
};

/** input type for inserting data into table "collection.Tag" */
export type Collection_Tag_Insert_Input = {
    colour?: Maybe<Scalars["String"]>;
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    eventTags?: Maybe<Schedule_EventTag_Arr_Rel_Insert_Input>;
    id?: Maybe<Scalars["uuid"]>;
    itemTags?: Maybe<Content_ItemTag_Arr_Rel_Insert_Input>;
    name?: Maybe<Scalars["String"]>;
    originatingData?: Maybe<Conference_OriginatingData_Obj_Rel_Insert_Input>;
    originatingDataId?: Maybe<Scalars["uuid"]>;
    priority?: Maybe<Scalars["Int"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Collection_Tag_Max_Fields = {
    __typename?: "collection_Tag_max_fields";
    colour?: Maybe<Scalars["String"]>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
    originatingDataId?: Maybe<Scalars["uuid"]>;
    priority?: Maybe<Scalars["Int"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** order by max() on columns of table "collection.Tag" */
export type Collection_Tag_Max_Order_By = {
    colour?: Maybe<Order_By>;
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    originatingDataId?: Maybe<Order_By>;
    priority?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Collection_Tag_Min_Fields = {
    __typename?: "collection_Tag_min_fields";
    colour?: Maybe<Scalars["String"]>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
    originatingDataId?: Maybe<Scalars["uuid"]>;
    priority?: Maybe<Scalars["Int"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** order by min() on columns of table "collection.Tag" */
export type Collection_Tag_Min_Order_By = {
    colour?: Maybe<Order_By>;
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    originatingDataId?: Maybe<Order_By>;
    priority?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** response of any mutation on the table "collection.Tag" */
export type Collection_Tag_Mutation_Response = {
    __typename?: "collection_Tag_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Collection_Tag>;
};

/** input type for inserting object relation for remote table "collection.Tag" */
export type Collection_Tag_Obj_Rel_Insert_Input = {
    data: Collection_Tag_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Collection_Tag_On_Conflict>;
};

/** on conflict condition type for table "collection.Tag" */
export type Collection_Tag_On_Conflict = {
    constraint: Collection_Tag_Constraint;
    update_columns?: Array<Collection_Tag_Update_Column>;
    where?: Maybe<Collection_Tag_Bool_Exp>;
};

/** Ordering options when selecting data from "collection.Tag". */
export type Collection_Tag_Order_By = {
    colour?: Maybe<Order_By>;
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    eventTags_aggregate?: Maybe<Schedule_EventTag_Aggregate_Order_By>;
    id?: Maybe<Order_By>;
    itemTags_aggregate?: Maybe<Content_ItemTag_Aggregate_Order_By>;
    name?: Maybe<Order_By>;
    originatingData?: Maybe<Conference_OriginatingData_Order_By>;
    originatingDataId?: Maybe<Order_By>;
    priority?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** primary key columns input for table: collection_Tag */
export type Collection_Tag_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "collection.Tag" */
export enum Collection_Tag_Select_Column {
    /** column name */
    Colour = "colour",
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Id = "id",
    /** column name */
    Name = "name",
    /** column name */
    OriginatingDataId = "originatingDataId",
    /** column name */
    Priority = "priority",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** input type for updating data in table "collection.Tag" */
export type Collection_Tag_Set_Input = {
    colour?: Maybe<Scalars["String"]>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
    originatingDataId?: Maybe<Scalars["uuid"]>;
    priority?: Maybe<Scalars["Int"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate stddev on columns */
export type Collection_Tag_Stddev_Fields = {
    __typename?: "collection_Tag_stddev_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by stddev() on columns of table "collection.Tag" */
export type Collection_Tag_Stddev_Order_By = {
    priority?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Collection_Tag_Stddev_Pop_Fields = {
    __typename?: "collection_Tag_stddev_pop_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by stddev_pop() on columns of table "collection.Tag" */
export type Collection_Tag_Stddev_Pop_Order_By = {
    priority?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Collection_Tag_Stddev_Samp_Fields = {
    __typename?: "collection_Tag_stddev_samp_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by stddev_samp() on columns of table "collection.Tag" */
export type Collection_Tag_Stddev_Samp_Order_By = {
    priority?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Collection_Tag_Sum_Fields = {
    __typename?: "collection_Tag_sum_fields";
    priority?: Maybe<Scalars["Int"]>;
};

/** order by sum() on columns of table "collection.Tag" */
export type Collection_Tag_Sum_Order_By = {
    priority?: Maybe<Order_By>;
};

/** update columns of table "collection.Tag" */
export enum Collection_Tag_Update_Column {
    /** column name */
    Colour = "colour",
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Id = "id",
    /** column name */
    Name = "name",
    /** column name */
    OriginatingDataId = "originatingDataId",
    /** column name */
    Priority = "priority",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** aggregate var_pop on columns */
export type Collection_Tag_Var_Pop_Fields = {
    __typename?: "collection_Tag_var_pop_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by var_pop() on columns of table "collection.Tag" */
export type Collection_Tag_Var_Pop_Order_By = {
    priority?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Collection_Tag_Var_Samp_Fields = {
    __typename?: "collection_Tag_var_samp_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by var_samp() on columns of table "collection.Tag" */
export type Collection_Tag_Var_Samp_Order_By = {
    priority?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Collection_Tag_Variance_Fields = {
    __typename?: "collection_Tag_variance_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by variance() on columns of table "collection.Tag" */
export type Collection_Tag_Variance_Order_By = {
    priority?: Maybe<Order_By>;
};

/** columns and relationships of "conference.Conference" */
export type Conference_Conference = {
    __typename?: "conference_Conference";
    /** An array relationship */
    chats: Array<Chat_Chat>;
    /** An aggregate relationship */
    chats_aggregate: Chat_Chat_Aggregate;
    /** An object relationship */
    completedRegistrationsStat?: Maybe<Analytics_CompletedRegistrations>;
    /** An array relationship */
    configurations: Array<Conference_Configuration>;
    /** An aggregate relationship */
    configurations_aggregate: Conference_Configuration_Aggregate;
    createdAt: Scalars["timestamptz"];
    createdBy: Scalars["String"];
    /** An object relationship */
    creator: User;
    /** An object relationship */
    demoCode: Conference_DemoCode;
    demoCodeId: Scalars["uuid"];
    /** An array relationship */
    exhibitions: Array<Collection_Exhibition>;
    /** An aggregate relationship */
    exhibitions_aggregate: Collection_Exhibition_Aggregate;
    /** An array relationship */
    groups: Array<Permissions_Group>;
    /** An aggregate relationship */
    groups_aggregate: Permissions_Group_Aggregate;
    id: Scalars["uuid"];
    /** An array relationship */
    items: Array<Content_Item>;
    /** An aggregate relationship */
    items_aggregate: Content_Item_Aggregate;
    name: Scalars["String"];
    /** An array relationship */
    originatingDatas: Array<Conference_OriginatingData>;
    /** An aggregate relationship */
    originatingDatas_aggregate: Conference_OriginatingData_Aggregate;
    /** An array relationship */
    programPeople: Array<Collection_ProgramPerson>;
    /** An aggregate relationship */
    programPeople_aggregate: Collection_ProgramPerson_Aggregate;
    /** An array relationship */
    publicPermissions: Array<FlatUnauthPermission>;
    /** An aggregate relationship */
    publicPermissions_aggregate: FlatUnauthPermission_Aggregate;
    /** An array relationship */
    registrants: Array<Registrant_Registrant>;
    /** An aggregate relationship */
    registrants_aggregate: Registrant_Registrant_Aggregate;
    /** An array relationship */
    roles: Array<Permissions_Role>;
    /** An aggregate relationship */
    roles_aggregate: Permissions_Role_Aggregate;
    /** An array relationship */
    rooms: Array<Room_Room>;
    /** An aggregate relationship */
    rooms_aggregate: Room_Room_Aggregate;
    shortName: Scalars["String"];
    /** An array relationship */
    shufflePeriods: Array<Room_ShufflePeriod>;
    /** An aggregate relationship */
    shufflePeriods_aggregate: Room_ShufflePeriod_Aggregate;
    slug: Scalars["String"];
    /** An array relationship */
    tags: Array<Collection_Tag>;
    /** An aggregate relationship */
    tags_aggregate: Collection_Tag_Aggregate;
    updatedAt: Scalars["timestamptz"];
    /** An array relationship */
    userPermissions: Array<FlatUserPermission>;
    /** An aggregate relationship */
    userPermissions_aggregate: FlatUserPermission_Aggregate;
};

/** columns and relationships of "conference.Conference" */
export type Conference_ConferenceChatsArgs = {
    distinct_on?: Maybe<Array<Chat_Chat_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Chat_Order_By>>;
    where?: Maybe<Chat_Chat_Bool_Exp>;
};

/** columns and relationships of "conference.Conference" */
export type Conference_ConferenceChats_AggregateArgs = {
    distinct_on?: Maybe<Array<Chat_Chat_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Chat_Order_By>>;
    where?: Maybe<Chat_Chat_Bool_Exp>;
};

/** columns and relationships of "conference.Conference" */
export type Conference_ConferenceConfigurationsArgs = {
    distinct_on?: Maybe<Array<Conference_Configuration_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Conference_Configuration_Order_By>>;
    where?: Maybe<Conference_Configuration_Bool_Exp>;
};

/** columns and relationships of "conference.Conference" */
export type Conference_ConferenceConfigurations_AggregateArgs = {
    distinct_on?: Maybe<Array<Conference_Configuration_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Conference_Configuration_Order_By>>;
    where?: Maybe<Conference_Configuration_Bool_Exp>;
};

/** columns and relationships of "conference.Conference" */
export type Conference_ConferenceExhibitionsArgs = {
    distinct_on?: Maybe<Array<Collection_Exhibition_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Collection_Exhibition_Order_By>>;
    where?: Maybe<Collection_Exhibition_Bool_Exp>;
};

/** columns and relationships of "conference.Conference" */
export type Conference_ConferenceExhibitions_AggregateArgs = {
    distinct_on?: Maybe<Array<Collection_Exhibition_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Collection_Exhibition_Order_By>>;
    where?: Maybe<Collection_Exhibition_Bool_Exp>;
};

/** columns and relationships of "conference.Conference" */
export type Conference_ConferenceGroupsArgs = {
    distinct_on?: Maybe<Array<Permissions_Group_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_Group_Order_By>>;
    where?: Maybe<Permissions_Group_Bool_Exp>;
};

/** columns and relationships of "conference.Conference" */
export type Conference_ConferenceGroups_AggregateArgs = {
    distinct_on?: Maybe<Array<Permissions_Group_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_Group_Order_By>>;
    where?: Maybe<Permissions_Group_Bool_Exp>;
};

/** columns and relationships of "conference.Conference" */
export type Conference_ConferenceItemsArgs = {
    distinct_on?: Maybe<Array<Content_Item_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_Item_Order_By>>;
    where?: Maybe<Content_Item_Bool_Exp>;
};

/** columns and relationships of "conference.Conference" */
export type Conference_ConferenceItems_AggregateArgs = {
    distinct_on?: Maybe<Array<Content_Item_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_Item_Order_By>>;
    where?: Maybe<Content_Item_Bool_Exp>;
};

/** columns and relationships of "conference.Conference" */
export type Conference_ConferenceOriginatingDatasArgs = {
    distinct_on?: Maybe<Array<Conference_OriginatingData_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Conference_OriginatingData_Order_By>>;
    where?: Maybe<Conference_OriginatingData_Bool_Exp>;
};

/** columns and relationships of "conference.Conference" */
export type Conference_ConferenceOriginatingDatas_AggregateArgs = {
    distinct_on?: Maybe<Array<Conference_OriginatingData_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Conference_OriginatingData_Order_By>>;
    where?: Maybe<Conference_OriginatingData_Bool_Exp>;
};

/** columns and relationships of "conference.Conference" */
export type Conference_ConferenceProgramPeopleArgs = {
    distinct_on?: Maybe<Array<Collection_ProgramPerson_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Collection_ProgramPerson_Order_By>>;
    where?: Maybe<Collection_ProgramPerson_Bool_Exp>;
};

/** columns and relationships of "conference.Conference" */
export type Conference_ConferenceProgramPeople_AggregateArgs = {
    distinct_on?: Maybe<Array<Collection_ProgramPerson_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Collection_ProgramPerson_Order_By>>;
    where?: Maybe<Collection_ProgramPerson_Bool_Exp>;
};

/** columns and relationships of "conference.Conference" */
export type Conference_ConferencePublicPermissionsArgs = {
    distinct_on?: Maybe<Array<FlatUnauthPermission_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<FlatUnauthPermission_Order_By>>;
    where?: Maybe<FlatUnauthPermission_Bool_Exp>;
};

/** columns and relationships of "conference.Conference" */
export type Conference_ConferencePublicPermissions_AggregateArgs = {
    distinct_on?: Maybe<Array<FlatUnauthPermission_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<FlatUnauthPermission_Order_By>>;
    where?: Maybe<FlatUnauthPermission_Bool_Exp>;
};

/** columns and relationships of "conference.Conference" */
export type Conference_ConferenceRegistrantsArgs = {
    distinct_on?: Maybe<Array<Registrant_Registrant_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Registrant_Registrant_Order_By>>;
    where?: Maybe<Registrant_Registrant_Bool_Exp>;
};

/** columns and relationships of "conference.Conference" */
export type Conference_ConferenceRegistrants_AggregateArgs = {
    distinct_on?: Maybe<Array<Registrant_Registrant_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Registrant_Registrant_Order_By>>;
    where?: Maybe<Registrant_Registrant_Bool_Exp>;
};

/** columns and relationships of "conference.Conference" */
export type Conference_ConferenceRolesArgs = {
    distinct_on?: Maybe<Array<Permissions_Role_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_Role_Order_By>>;
    where?: Maybe<Permissions_Role_Bool_Exp>;
};

/** columns and relationships of "conference.Conference" */
export type Conference_ConferenceRoles_AggregateArgs = {
    distinct_on?: Maybe<Array<Permissions_Role_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_Role_Order_By>>;
    where?: Maybe<Permissions_Role_Bool_Exp>;
};

/** columns and relationships of "conference.Conference" */
export type Conference_ConferenceRoomsArgs = {
    distinct_on?: Maybe<Array<Room_Room_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_Room_Order_By>>;
    where?: Maybe<Room_Room_Bool_Exp>;
};

/** columns and relationships of "conference.Conference" */
export type Conference_ConferenceRooms_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_Room_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_Room_Order_By>>;
    where?: Maybe<Room_Room_Bool_Exp>;
};

/** columns and relationships of "conference.Conference" */
export type Conference_ConferenceShufflePeriodsArgs = {
    distinct_on?: Maybe<Array<Room_ShufflePeriod_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_ShufflePeriod_Order_By>>;
    where?: Maybe<Room_ShufflePeriod_Bool_Exp>;
};

/** columns and relationships of "conference.Conference" */
export type Conference_ConferenceShufflePeriods_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_ShufflePeriod_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_ShufflePeriod_Order_By>>;
    where?: Maybe<Room_ShufflePeriod_Bool_Exp>;
};

/** columns and relationships of "conference.Conference" */
export type Conference_ConferenceTagsArgs = {
    distinct_on?: Maybe<Array<Collection_Tag_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Collection_Tag_Order_By>>;
    where?: Maybe<Collection_Tag_Bool_Exp>;
};

/** columns and relationships of "conference.Conference" */
export type Conference_ConferenceTags_AggregateArgs = {
    distinct_on?: Maybe<Array<Collection_Tag_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Collection_Tag_Order_By>>;
    where?: Maybe<Collection_Tag_Bool_Exp>;
};

/** columns and relationships of "conference.Conference" */
export type Conference_ConferenceUserPermissionsArgs = {
    distinct_on?: Maybe<Array<FlatUserPermission_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<FlatUserPermission_Order_By>>;
    where?: Maybe<FlatUserPermission_Bool_Exp>;
};

/** columns and relationships of "conference.Conference" */
export type Conference_ConferenceUserPermissions_AggregateArgs = {
    distinct_on?: Maybe<Array<FlatUserPermission_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<FlatUserPermission_Order_By>>;
    where?: Maybe<FlatUserPermission_Bool_Exp>;
};

/** aggregated selection of "conference.Conference" */
export type Conference_Conference_Aggregate = {
    __typename?: "conference_Conference_aggregate";
    aggregate?: Maybe<Conference_Conference_Aggregate_Fields>;
    nodes: Array<Conference_Conference>;
};

/** aggregate fields of "conference.Conference" */
export type Conference_Conference_Aggregate_Fields = {
    __typename?: "conference_Conference_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Conference_Conference_Max_Fields>;
    min?: Maybe<Conference_Conference_Min_Fields>;
};

/** aggregate fields of "conference.Conference" */
export type Conference_Conference_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Conference_Conference_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "conference.Conference" */
export type Conference_Conference_Aggregate_Order_By = {
    count?: Maybe<Order_By>;
    max?: Maybe<Conference_Conference_Max_Order_By>;
    min?: Maybe<Conference_Conference_Min_Order_By>;
};

/** input type for inserting array relation for remote table "conference.Conference" */
export type Conference_Conference_Arr_Rel_Insert_Input = {
    data: Array<Conference_Conference_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Conference_Conference_On_Conflict>;
};

/** Boolean expression to filter rows from the table "conference.Conference". All fields are combined with a logical 'AND'. */
export type Conference_Conference_Bool_Exp = {
    _and?: Maybe<Array<Conference_Conference_Bool_Exp>>;
    _not?: Maybe<Conference_Conference_Bool_Exp>;
    _or?: Maybe<Array<Conference_Conference_Bool_Exp>>;
    chats?: Maybe<Chat_Chat_Bool_Exp>;
    completedRegistrationsStat?: Maybe<Analytics_CompletedRegistrations_Bool_Exp>;
    configurations?: Maybe<Conference_Configuration_Bool_Exp>;
    createdAt?: Maybe<Timestamptz_Comparison_Exp>;
    createdBy?: Maybe<String_Comparison_Exp>;
    creator?: Maybe<User_Bool_Exp>;
    demoCode?: Maybe<Conference_DemoCode_Bool_Exp>;
    demoCodeId?: Maybe<Uuid_Comparison_Exp>;
    exhibitions?: Maybe<Collection_Exhibition_Bool_Exp>;
    groups?: Maybe<Permissions_Group_Bool_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    items?: Maybe<Content_Item_Bool_Exp>;
    name?: Maybe<String_Comparison_Exp>;
    originatingDatas?: Maybe<Conference_OriginatingData_Bool_Exp>;
    programPeople?: Maybe<Collection_ProgramPerson_Bool_Exp>;
    publicPermissions?: Maybe<FlatUnauthPermission_Bool_Exp>;
    registrants?: Maybe<Registrant_Registrant_Bool_Exp>;
    roles?: Maybe<Permissions_Role_Bool_Exp>;
    rooms?: Maybe<Room_Room_Bool_Exp>;
    shortName?: Maybe<String_Comparison_Exp>;
    shufflePeriods?: Maybe<Room_ShufflePeriod_Bool_Exp>;
    slug?: Maybe<String_Comparison_Exp>;
    tags?: Maybe<Collection_Tag_Bool_Exp>;
    updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
    userPermissions?: Maybe<FlatUserPermission_Bool_Exp>;
};

/** unique or primary key constraints on table "conference.Conference" */
export enum Conference_Conference_Constraint {
    /** unique or primary key constraint */
    ConferenceDemoCodeIdKey = "Conference_demoCodeId_key",
    /** unique or primary key constraint */
    ConferenceNameKey = "Conference_name_key",
    /** unique or primary key constraint */
    ConferencePkey = "Conference_pkey",
    /** unique or primary key constraint */
    ConferenceShortNameKey = "Conference_shortName_key",
    /** unique or primary key constraint */
    ConferenceSlugKey = "Conference_slug_key",
}

/** input type for inserting data into table "conference.Conference" */
export type Conference_Conference_Insert_Input = {
    chats?: Maybe<Chat_Chat_Arr_Rel_Insert_Input>;
    completedRegistrationsStat?: Maybe<Analytics_CompletedRegistrations_Obj_Rel_Insert_Input>;
    configurations?: Maybe<Conference_Configuration_Arr_Rel_Insert_Input>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    createdBy?: Maybe<Scalars["String"]>;
    creator?: Maybe<User_Obj_Rel_Insert_Input>;
    demoCode?: Maybe<Conference_DemoCode_Obj_Rel_Insert_Input>;
    demoCodeId?: Maybe<Scalars["uuid"]>;
    exhibitions?: Maybe<Collection_Exhibition_Arr_Rel_Insert_Input>;
    groups?: Maybe<Permissions_Group_Arr_Rel_Insert_Input>;
    id?: Maybe<Scalars["uuid"]>;
    items?: Maybe<Content_Item_Arr_Rel_Insert_Input>;
    name?: Maybe<Scalars["String"]>;
    originatingDatas?: Maybe<Conference_OriginatingData_Arr_Rel_Insert_Input>;
    programPeople?: Maybe<Collection_ProgramPerson_Arr_Rel_Insert_Input>;
    publicPermissions?: Maybe<FlatUnauthPermission_Arr_Rel_Insert_Input>;
    registrants?: Maybe<Registrant_Registrant_Arr_Rel_Insert_Input>;
    roles?: Maybe<Permissions_Role_Arr_Rel_Insert_Input>;
    rooms?: Maybe<Room_Room_Arr_Rel_Insert_Input>;
    shortName?: Maybe<Scalars["String"]>;
    shufflePeriods?: Maybe<Room_ShufflePeriod_Arr_Rel_Insert_Input>;
    slug?: Maybe<Scalars["String"]>;
    tags?: Maybe<Collection_Tag_Arr_Rel_Insert_Input>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    userPermissions?: Maybe<FlatUserPermission_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Conference_Conference_Max_Fields = {
    __typename?: "conference_Conference_max_fields";
    createdAt?: Maybe<Scalars["timestamptz"]>;
    createdBy?: Maybe<Scalars["String"]>;
    demoCodeId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
    shortName?: Maybe<Scalars["String"]>;
    slug?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** order by max() on columns of table "conference.Conference" */
export type Conference_Conference_Max_Order_By = {
    createdAt?: Maybe<Order_By>;
    createdBy?: Maybe<Order_By>;
    demoCodeId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    shortName?: Maybe<Order_By>;
    slug?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Conference_Conference_Min_Fields = {
    __typename?: "conference_Conference_min_fields";
    createdAt?: Maybe<Scalars["timestamptz"]>;
    createdBy?: Maybe<Scalars["String"]>;
    demoCodeId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
    shortName?: Maybe<Scalars["String"]>;
    slug?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** order by min() on columns of table "conference.Conference" */
export type Conference_Conference_Min_Order_By = {
    createdAt?: Maybe<Order_By>;
    createdBy?: Maybe<Order_By>;
    demoCodeId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    shortName?: Maybe<Order_By>;
    slug?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** response of any mutation on the table "conference.Conference" */
export type Conference_Conference_Mutation_Response = {
    __typename?: "conference_Conference_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Conference_Conference>;
};

/** input type for inserting object relation for remote table "conference.Conference" */
export type Conference_Conference_Obj_Rel_Insert_Input = {
    data: Conference_Conference_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Conference_Conference_On_Conflict>;
};

/** on conflict condition type for table "conference.Conference" */
export type Conference_Conference_On_Conflict = {
    constraint: Conference_Conference_Constraint;
    update_columns?: Array<Conference_Conference_Update_Column>;
    where?: Maybe<Conference_Conference_Bool_Exp>;
};

/** Ordering options when selecting data from "conference.Conference". */
export type Conference_Conference_Order_By = {
    chats_aggregate?: Maybe<Chat_Chat_Aggregate_Order_By>;
    completedRegistrationsStat?: Maybe<Analytics_CompletedRegistrations_Order_By>;
    configurations_aggregate?: Maybe<Conference_Configuration_Aggregate_Order_By>;
    createdAt?: Maybe<Order_By>;
    createdBy?: Maybe<Order_By>;
    creator?: Maybe<User_Order_By>;
    demoCode?: Maybe<Conference_DemoCode_Order_By>;
    demoCodeId?: Maybe<Order_By>;
    exhibitions_aggregate?: Maybe<Collection_Exhibition_Aggregate_Order_By>;
    groups_aggregate?: Maybe<Permissions_Group_Aggregate_Order_By>;
    id?: Maybe<Order_By>;
    items_aggregate?: Maybe<Content_Item_Aggregate_Order_By>;
    name?: Maybe<Order_By>;
    originatingDatas_aggregate?: Maybe<Conference_OriginatingData_Aggregate_Order_By>;
    programPeople_aggregate?: Maybe<Collection_ProgramPerson_Aggregate_Order_By>;
    publicPermissions_aggregate?: Maybe<FlatUnauthPermission_Aggregate_Order_By>;
    registrants_aggregate?: Maybe<Registrant_Registrant_Aggregate_Order_By>;
    roles_aggregate?: Maybe<Permissions_Role_Aggregate_Order_By>;
    rooms_aggregate?: Maybe<Room_Room_Aggregate_Order_By>;
    shortName?: Maybe<Order_By>;
    shufflePeriods_aggregate?: Maybe<Room_ShufflePeriod_Aggregate_Order_By>;
    slug?: Maybe<Order_By>;
    tags_aggregate?: Maybe<Collection_Tag_Aggregate_Order_By>;
    updatedAt?: Maybe<Order_By>;
    userPermissions_aggregate?: Maybe<FlatUserPermission_Aggregate_Order_By>;
};

/** primary key columns input for table: conference_Conference */
export type Conference_Conference_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "conference.Conference" */
export enum Conference_Conference_Select_Column {
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    CreatedBy = "createdBy",
    /** column name */
    DemoCodeId = "demoCodeId",
    /** column name */
    Id = "id",
    /** column name */
    Name = "name",
    /** column name */
    ShortName = "shortName",
    /** column name */
    Slug = "slug",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** input type for updating data in table "conference.Conference" */
export type Conference_Conference_Set_Input = {
    createdAt?: Maybe<Scalars["timestamptz"]>;
    createdBy?: Maybe<Scalars["String"]>;
    demoCodeId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
    shortName?: Maybe<Scalars["String"]>;
    slug?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** update columns of table "conference.Conference" */
export enum Conference_Conference_Update_Column {
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    CreatedBy = "createdBy",
    /** column name */
    DemoCodeId = "demoCodeId",
    /** column name */
    Id = "id",
    /** column name */
    Name = "name",
    /** column name */
    ShortName = "shortName",
    /** column name */
    Slug = "slug",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** columns and relationships of "conference.Configuration" */
export type Conference_Configuration = {
    __typename?: "conference_Configuration";
    /** An object relationship */
    conference: Conference_Conference;
    conferenceId: Scalars["uuid"];
    createdAt: Scalars["timestamptz"];
    key: Conference_ConfigurationKey_Enum;
    updatedAt: Scalars["timestamptz"];
    value: Scalars["jsonb"];
};

/** columns and relationships of "conference.Configuration" */
export type Conference_ConfigurationValueArgs = {
    path?: Maybe<Scalars["String"]>;
};

/** columns and relationships of "conference.ConfigurationKey" */
export type Conference_ConfigurationKey = {
    __typename?: "conference_ConfigurationKey";
    description: Scalars["String"];
    name: Scalars["String"];
};

/** aggregated selection of "conference.ConfigurationKey" */
export type Conference_ConfigurationKey_Aggregate = {
    __typename?: "conference_ConfigurationKey_aggregate";
    aggregate?: Maybe<Conference_ConfigurationKey_Aggregate_Fields>;
    nodes: Array<Conference_ConfigurationKey>;
};

/** aggregate fields of "conference.ConfigurationKey" */
export type Conference_ConfigurationKey_Aggregate_Fields = {
    __typename?: "conference_ConfigurationKey_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Conference_ConfigurationKey_Max_Fields>;
    min?: Maybe<Conference_ConfigurationKey_Min_Fields>;
};

/** aggregate fields of "conference.ConfigurationKey" */
export type Conference_ConfigurationKey_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Conference_ConfigurationKey_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** Boolean expression to filter rows from the table "conference.ConfigurationKey". All fields are combined with a logical 'AND'. */
export type Conference_ConfigurationKey_Bool_Exp = {
    _and?: Maybe<Array<Conference_ConfigurationKey_Bool_Exp>>;
    _not?: Maybe<Conference_ConfigurationKey_Bool_Exp>;
    _or?: Maybe<Array<Conference_ConfigurationKey_Bool_Exp>>;
    description?: Maybe<String_Comparison_Exp>;
    name?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "conference.ConfigurationKey" */
export enum Conference_ConfigurationKey_Constraint {
    /** unique or primary key constraint */
    ConfigurationKeyPkey = "ConfigurationKey_pkey",
}

export enum Conference_ConfigurationKey_Enum {
    /** A list of videos to be used as the background for title/sponsor slides. */
    BackgroundVideos = "BACKGROUND_VIDEOS",
    /** A string representing the app version. Changing this causes the user's browsers to refresh. */
    ClowdrAppVersion = "CLOWDR_APP_VERSION",
    EmailTemplateSubmissionRequest = "EMAIL_TEMPLATE_SUBMISSION_REQUEST",
    EmailTemplateSubtitlesGenerated = "EMAIL_TEMPLATE_SUBTITLES_GENERATED",
    /** List of S3 URLs. */
    FillerVideos = "FILLER_VIDEOS",
    /** A string representing the full frontend host URL for the conference. If not provided, this defaults to the system configuration. */
    FrontendHost = "FRONTEND_HOST",
    /** An image to be displayed if AWS MediaLive loses input. */
    InputLossSlate = "INPUT_LOSS_SLATE",
    /** A string representing a valid URL for users to register for the conference. */
    RegistrationUrl = "REGISTRATION_URL",
    /** Select different versions of the schedule view. */
    ScheduleViewVersion = "SCHEDULE_VIEW_VERSION",
    /** A string representing a valid email address for contacting the conference organisers. */
    SupportAddress = "SUPPORT_ADDRESS",
    /** A string representing a valid email address for contacting the service hosting company for technical support related to the conference. */
    TechSupportAddress = "TECH_SUPPORT_ADDRESS",
    /** Text of the upload agreement or a URL to one. */
    UploadAgreement = "UPLOAD_AGREEMENT",
    /** The time in milliseconds since the UNIX epoch, as a string. */
    UploadCutoffTimestamp = "UPLOAD_CUTOFF_TIMESTAMP",
}

/** Boolean expression to compare columns of type "conference_ConfigurationKey_enum". All fields are combined with logical 'AND'. */
export type Conference_ConfigurationKey_Enum_Comparison_Exp = {
    _eq?: Maybe<Conference_ConfigurationKey_Enum>;
    _in?: Maybe<Array<Conference_ConfigurationKey_Enum>>;
    _is_null?: Maybe<Scalars["Boolean"]>;
    _neq?: Maybe<Conference_ConfigurationKey_Enum>;
    _nin?: Maybe<Array<Conference_ConfigurationKey_Enum>>;
};

/** input type for inserting data into table "conference.ConfigurationKey" */
export type Conference_ConfigurationKey_Insert_Input = {
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** aggregate max on columns */
export type Conference_ConfigurationKey_Max_Fields = {
    __typename?: "conference_ConfigurationKey_max_fields";
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** aggregate min on columns */
export type Conference_ConfigurationKey_Min_Fields = {
    __typename?: "conference_ConfigurationKey_min_fields";
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** response of any mutation on the table "conference.ConfigurationKey" */
export type Conference_ConfigurationKey_Mutation_Response = {
    __typename?: "conference_ConfigurationKey_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Conference_ConfigurationKey>;
};

/** on conflict condition type for table "conference.ConfigurationKey" */
export type Conference_ConfigurationKey_On_Conflict = {
    constraint: Conference_ConfigurationKey_Constraint;
    update_columns?: Array<Conference_ConfigurationKey_Update_Column>;
    where?: Maybe<Conference_ConfigurationKey_Bool_Exp>;
};

/** Ordering options when selecting data from "conference.ConfigurationKey". */
export type Conference_ConfigurationKey_Order_By = {
    description?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
};

/** primary key columns input for table: conference_ConfigurationKey */
export type Conference_ConfigurationKey_Pk_Columns_Input = {
    name: Scalars["String"];
};

/** select columns of table "conference.ConfigurationKey" */
export enum Conference_ConfigurationKey_Select_Column {
    /** column name */
    Description = "description",
    /** column name */
    Name = "name",
}

/** input type for updating data in table "conference.ConfigurationKey" */
export type Conference_ConfigurationKey_Set_Input = {
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** update columns of table "conference.ConfigurationKey" */
export enum Conference_ConfigurationKey_Update_Column {
    /** column name */
    Description = "description",
    /** column name */
    Name = "name",
}

/** aggregated selection of "conference.Configuration" */
export type Conference_Configuration_Aggregate = {
    __typename?: "conference_Configuration_aggregate";
    aggregate?: Maybe<Conference_Configuration_Aggregate_Fields>;
    nodes: Array<Conference_Configuration>;
};

/** aggregate fields of "conference.Configuration" */
export type Conference_Configuration_Aggregate_Fields = {
    __typename?: "conference_Configuration_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Conference_Configuration_Max_Fields>;
    min?: Maybe<Conference_Configuration_Min_Fields>;
};

/** aggregate fields of "conference.Configuration" */
export type Conference_Configuration_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Conference_Configuration_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "conference.Configuration" */
export type Conference_Configuration_Aggregate_Order_By = {
    count?: Maybe<Order_By>;
    max?: Maybe<Conference_Configuration_Max_Order_By>;
    min?: Maybe<Conference_Configuration_Min_Order_By>;
};

/** append existing jsonb value of filtered columns with new jsonb value */
export type Conference_Configuration_Append_Input = {
    value?: Maybe<Scalars["jsonb"]>;
};

/** input type for inserting array relation for remote table "conference.Configuration" */
export type Conference_Configuration_Arr_Rel_Insert_Input = {
    data: Array<Conference_Configuration_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Conference_Configuration_On_Conflict>;
};

/** Boolean expression to filter rows from the table "conference.Configuration". All fields are combined with a logical 'AND'. */
export type Conference_Configuration_Bool_Exp = {
    _and?: Maybe<Array<Conference_Configuration_Bool_Exp>>;
    _not?: Maybe<Conference_Configuration_Bool_Exp>;
    _or?: Maybe<Array<Conference_Configuration_Bool_Exp>>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    createdAt?: Maybe<Timestamptz_Comparison_Exp>;
    key?: Maybe<Conference_ConfigurationKey_Enum_Comparison_Exp>;
    updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
    value?: Maybe<Jsonb_Comparison_Exp>;
};

/** unique or primary key constraints on table "conference.Configuration" */
export enum Conference_Configuration_Constraint {
    /** unique or primary key constraint */
    ConfigurationPkey = "Configuration_pkey",
}

/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export type Conference_Configuration_Delete_At_Path_Input = {
    value?: Maybe<Array<Scalars["String"]>>;
};

/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
export type Conference_Configuration_Delete_Elem_Input = {
    value?: Maybe<Scalars["Int"]>;
};

/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export type Conference_Configuration_Delete_Key_Input = {
    value?: Maybe<Scalars["String"]>;
};

/** input type for inserting data into table "conference.Configuration" */
export type Conference_Configuration_Insert_Input = {
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    key?: Maybe<Conference_ConfigurationKey_Enum>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    value?: Maybe<Scalars["jsonb"]>;
};

/** aggregate max on columns */
export type Conference_Configuration_Max_Fields = {
    __typename?: "conference_Configuration_max_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** order by max() on columns of table "conference.Configuration" */
export type Conference_Configuration_Max_Order_By = {
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Conference_Configuration_Min_Fields = {
    __typename?: "conference_Configuration_min_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** order by min() on columns of table "conference.Configuration" */
export type Conference_Configuration_Min_Order_By = {
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** response of any mutation on the table "conference.Configuration" */
export type Conference_Configuration_Mutation_Response = {
    __typename?: "conference_Configuration_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Conference_Configuration>;
};

/** on conflict condition type for table "conference.Configuration" */
export type Conference_Configuration_On_Conflict = {
    constraint: Conference_Configuration_Constraint;
    update_columns?: Array<Conference_Configuration_Update_Column>;
    where?: Maybe<Conference_Configuration_Bool_Exp>;
};

/** Ordering options when selecting data from "conference.Configuration". */
export type Conference_Configuration_Order_By = {
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    key?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
    value?: Maybe<Order_By>;
};

/** primary key columns input for table: conference_Configuration */
export type Conference_Configuration_Pk_Columns_Input = {
    conferenceId: Scalars["uuid"];
    key: Conference_ConfigurationKey_Enum;
};

/** prepend existing jsonb value of filtered columns with new jsonb value */
export type Conference_Configuration_Prepend_Input = {
    value?: Maybe<Scalars["jsonb"]>;
};

/** select columns of table "conference.Configuration" */
export enum Conference_Configuration_Select_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Key = "key",
    /** column name */
    UpdatedAt = "updatedAt",
    /** column name */
    Value = "value",
}

/** input type for updating data in table "conference.Configuration" */
export type Conference_Configuration_Set_Input = {
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    key?: Maybe<Conference_ConfigurationKey_Enum>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    value?: Maybe<Scalars["jsonb"]>;
};

/** update columns of table "conference.Configuration" */
export enum Conference_Configuration_Update_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Key = "key",
    /** column name */
    UpdatedAt = "updatedAt",
    /** column name */
    Value = "value",
}

/** columns and relationships of "conference.DemoCode" */
export type Conference_DemoCode = {
    __typename?: "conference_DemoCode";
    /** An object relationship */
    conference?: Maybe<Conference_Conference>;
    createdAt: Scalars["timestamptz"];
    id: Scalars["uuid"];
    note?: Maybe<Scalars["String"]>;
    updatedAt: Scalars["timestamptz"];
    /** An object relationship */
    usedBy?: Maybe<User>;
    usedById?: Maybe<Scalars["String"]>;
};

/** aggregated selection of "conference.DemoCode" */
export type Conference_DemoCode_Aggregate = {
    __typename?: "conference_DemoCode_aggregate";
    aggregate?: Maybe<Conference_DemoCode_Aggregate_Fields>;
    nodes: Array<Conference_DemoCode>;
};

/** aggregate fields of "conference.DemoCode" */
export type Conference_DemoCode_Aggregate_Fields = {
    __typename?: "conference_DemoCode_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Conference_DemoCode_Max_Fields>;
    min?: Maybe<Conference_DemoCode_Min_Fields>;
};

/** aggregate fields of "conference.DemoCode" */
export type Conference_DemoCode_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Conference_DemoCode_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "conference.DemoCode" */
export type Conference_DemoCode_Aggregate_Order_By = {
    count?: Maybe<Order_By>;
    max?: Maybe<Conference_DemoCode_Max_Order_By>;
    min?: Maybe<Conference_DemoCode_Min_Order_By>;
};

/** input type for inserting array relation for remote table "conference.DemoCode" */
export type Conference_DemoCode_Arr_Rel_Insert_Input = {
    data: Array<Conference_DemoCode_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Conference_DemoCode_On_Conflict>;
};

/** Boolean expression to filter rows from the table "conference.DemoCode". All fields are combined with a logical 'AND'. */
export type Conference_DemoCode_Bool_Exp = {
    _and?: Maybe<Array<Conference_DemoCode_Bool_Exp>>;
    _not?: Maybe<Conference_DemoCode_Bool_Exp>;
    _or?: Maybe<Array<Conference_DemoCode_Bool_Exp>>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    createdAt?: Maybe<Timestamptz_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    note?: Maybe<String_Comparison_Exp>;
    updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
    usedBy?: Maybe<User_Bool_Exp>;
    usedById?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "conference.DemoCode" */
export enum Conference_DemoCode_Constraint {
    /** unique or primary key constraint */
    DemoCodePkey = "DemoCode_pkey",
}

/** input type for inserting data into table "conference.DemoCode" */
export type Conference_DemoCode_Insert_Input = {
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    note?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    usedBy?: Maybe<User_Obj_Rel_Insert_Input>;
    usedById?: Maybe<Scalars["String"]>;
};

/** aggregate max on columns */
export type Conference_DemoCode_Max_Fields = {
    __typename?: "conference_DemoCode_max_fields";
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    note?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    usedById?: Maybe<Scalars["String"]>;
};

/** order by max() on columns of table "conference.DemoCode" */
export type Conference_DemoCode_Max_Order_By = {
    createdAt?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    note?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
    usedById?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Conference_DemoCode_Min_Fields = {
    __typename?: "conference_DemoCode_min_fields";
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    note?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    usedById?: Maybe<Scalars["String"]>;
};

/** order by min() on columns of table "conference.DemoCode" */
export type Conference_DemoCode_Min_Order_By = {
    createdAt?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    note?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
    usedById?: Maybe<Order_By>;
};

/** response of any mutation on the table "conference.DemoCode" */
export type Conference_DemoCode_Mutation_Response = {
    __typename?: "conference_DemoCode_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Conference_DemoCode>;
};

/** input type for inserting object relation for remote table "conference.DemoCode" */
export type Conference_DemoCode_Obj_Rel_Insert_Input = {
    data: Conference_DemoCode_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Conference_DemoCode_On_Conflict>;
};

/** on conflict condition type for table "conference.DemoCode" */
export type Conference_DemoCode_On_Conflict = {
    constraint: Conference_DemoCode_Constraint;
    update_columns?: Array<Conference_DemoCode_Update_Column>;
    where?: Maybe<Conference_DemoCode_Bool_Exp>;
};

/** Ordering options when selecting data from "conference.DemoCode". */
export type Conference_DemoCode_Order_By = {
    conference?: Maybe<Conference_Conference_Order_By>;
    createdAt?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    note?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
    usedBy?: Maybe<User_Order_By>;
    usedById?: Maybe<Order_By>;
};

/** primary key columns input for table: conference_DemoCode */
export type Conference_DemoCode_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "conference.DemoCode" */
export enum Conference_DemoCode_Select_Column {
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Id = "id",
    /** column name */
    Note = "note",
    /** column name */
    UpdatedAt = "updatedAt",
    /** column name */
    UsedById = "usedById",
}

/** input type for updating data in table "conference.DemoCode" */
export type Conference_DemoCode_Set_Input = {
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    note?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    usedById?: Maybe<Scalars["String"]>;
};

/** update columns of table "conference.DemoCode" */
export enum Conference_DemoCode_Update_Column {
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Id = "id",
    /** column name */
    Note = "note",
    /** column name */
    UpdatedAt = "updatedAt",
    /** column name */
    UsedById = "usedById",
}

/** columns and relationships of "conference.OriginatingData" */
export type Conference_OriginatingData = {
    __typename?: "conference_OriginatingData";
    /** An object relationship */
    conference: Conference_Conference;
    conferenceId: Scalars["uuid"];
    createdAt: Scalars["timestamptz"];
    data?: Maybe<Scalars["jsonb"]>;
    /** An array relationship */
    elements: Array<Content_Element>;
    /** An aggregate relationship */
    elements_aggregate: Content_Element_Aggregate;
    /** An array relationship */
    events: Array<Schedule_Event>;
    /** An aggregate relationship */
    events_aggregate: Schedule_Event_Aggregate;
    id: Scalars["uuid"];
    /** An array relationship */
    items: Array<Content_Item>;
    /** An aggregate relationship */
    items_aggregate: Content_Item_Aggregate;
    /** An array relationship */
    programPeople: Array<Collection_ProgramPerson>;
    /** An aggregate relationship */
    programPeople_aggregate: Collection_ProgramPerson_Aggregate;
    /** An array relationship */
    rooms: Array<Room_Room>;
    /** An aggregate relationship */
    rooms_aggregate: Room_Room_Aggregate;
    sourceId: Scalars["String"];
    /** An array relationship */
    tags: Array<Collection_Tag>;
    /** An aggregate relationship */
    tags_aggregate: Collection_Tag_Aggregate;
    updatedAt: Scalars["timestamptz"];
};

/** columns and relationships of "conference.OriginatingData" */
export type Conference_OriginatingDataDataArgs = {
    path?: Maybe<Scalars["String"]>;
};

/** columns and relationships of "conference.OriginatingData" */
export type Conference_OriginatingDataElementsArgs = {
    distinct_on?: Maybe<Array<Content_Element_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_Element_Order_By>>;
    where?: Maybe<Content_Element_Bool_Exp>;
};

/** columns and relationships of "conference.OriginatingData" */
export type Conference_OriginatingDataElements_AggregateArgs = {
    distinct_on?: Maybe<Array<Content_Element_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_Element_Order_By>>;
    where?: Maybe<Content_Element_Bool_Exp>;
};

/** columns and relationships of "conference.OriginatingData" */
export type Conference_OriginatingDataEventsArgs = {
    distinct_on?: Maybe<Array<Schedule_Event_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_Event_Order_By>>;
    where?: Maybe<Schedule_Event_Bool_Exp>;
};

/** columns and relationships of "conference.OriginatingData" */
export type Conference_OriginatingDataEvents_AggregateArgs = {
    distinct_on?: Maybe<Array<Schedule_Event_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_Event_Order_By>>;
    where?: Maybe<Schedule_Event_Bool_Exp>;
};

/** columns and relationships of "conference.OriginatingData" */
export type Conference_OriginatingDataItemsArgs = {
    distinct_on?: Maybe<Array<Content_Item_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_Item_Order_By>>;
    where?: Maybe<Content_Item_Bool_Exp>;
};

/** columns and relationships of "conference.OriginatingData" */
export type Conference_OriginatingDataItems_AggregateArgs = {
    distinct_on?: Maybe<Array<Content_Item_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_Item_Order_By>>;
    where?: Maybe<Content_Item_Bool_Exp>;
};

/** columns and relationships of "conference.OriginatingData" */
export type Conference_OriginatingDataProgramPeopleArgs = {
    distinct_on?: Maybe<Array<Collection_ProgramPerson_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Collection_ProgramPerson_Order_By>>;
    where?: Maybe<Collection_ProgramPerson_Bool_Exp>;
};

/** columns and relationships of "conference.OriginatingData" */
export type Conference_OriginatingDataProgramPeople_AggregateArgs = {
    distinct_on?: Maybe<Array<Collection_ProgramPerson_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Collection_ProgramPerson_Order_By>>;
    where?: Maybe<Collection_ProgramPerson_Bool_Exp>;
};

/** columns and relationships of "conference.OriginatingData" */
export type Conference_OriginatingDataRoomsArgs = {
    distinct_on?: Maybe<Array<Room_Room_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_Room_Order_By>>;
    where?: Maybe<Room_Room_Bool_Exp>;
};

/** columns and relationships of "conference.OriginatingData" */
export type Conference_OriginatingDataRooms_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_Room_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_Room_Order_By>>;
    where?: Maybe<Room_Room_Bool_Exp>;
};

/** columns and relationships of "conference.OriginatingData" */
export type Conference_OriginatingDataTagsArgs = {
    distinct_on?: Maybe<Array<Collection_Tag_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Collection_Tag_Order_By>>;
    where?: Maybe<Collection_Tag_Bool_Exp>;
};

/** columns and relationships of "conference.OriginatingData" */
export type Conference_OriginatingDataTags_AggregateArgs = {
    distinct_on?: Maybe<Array<Collection_Tag_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Collection_Tag_Order_By>>;
    where?: Maybe<Collection_Tag_Bool_Exp>;
};

/** aggregated selection of "conference.OriginatingData" */
export type Conference_OriginatingData_Aggregate = {
    __typename?: "conference_OriginatingData_aggregate";
    aggregate?: Maybe<Conference_OriginatingData_Aggregate_Fields>;
    nodes: Array<Conference_OriginatingData>;
};

/** aggregate fields of "conference.OriginatingData" */
export type Conference_OriginatingData_Aggregate_Fields = {
    __typename?: "conference_OriginatingData_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Conference_OriginatingData_Max_Fields>;
    min?: Maybe<Conference_OriginatingData_Min_Fields>;
};

/** aggregate fields of "conference.OriginatingData" */
export type Conference_OriginatingData_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Conference_OriginatingData_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "conference.OriginatingData" */
export type Conference_OriginatingData_Aggregate_Order_By = {
    count?: Maybe<Order_By>;
    max?: Maybe<Conference_OriginatingData_Max_Order_By>;
    min?: Maybe<Conference_OriginatingData_Min_Order_By>;
};

/** append existing jsonb value of filtered columns with new jsonb value */
export type Conference_OriginatingData_Append_Input = {
    data?: Maybe<Scalars["jsonb"]>;
};

/** input type for inserting array relation for remote table "conference.OriginatingData" */
export type Conference_OriginatingData_Arr_Rel_Insert_Input = {
    data: Array<Conference_OriginatingData_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Conference_OriginatingData_On_Conflict>;
};

/** Boolean expression to filter rows from the table "conference.OriginatingData". All fields are combined with a logical 'AND'. */
export type Conference_OriginatingData_Bool_Exp = {
    _and?: Maybe<Array<Conference_OriginatingData_Bool_Exp>>;
    _not?: Maybe<Conference_OriginatingData_Bool_Exp>;
    _or?: Maybe<Array<Conference_OriginatingData_Bool_Exp>>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    createdAt?: Maybe<Timestamptz_Comparison_Exp>;
    data?: Maybe<Jsonb_Comparison_Exp>;
    elements?: Maybe<Content_Element_Bool_Exp>;
    events?: Maybe<Schedule_Event_Bool_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    items?: Maybe<Content_Item_Bool_Exp>;
    programPeople?: Maybe<Collection_ProgramPerson_Bool_Exp>;
    rooms?: Maybe<Room_Room_Bool_Exp>;
    sourceId?: Maybe<String_Comparison_Exp>;
    tags?: Maybe<Collection_Tag_Bool_Exp>;
    updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "conference.OriginatingData" */
export enum Conference_OriginatingData_Constraint {
    /** unique or primary key constraint */
    OriginatingDataPkey = "OriginatingData_pkey",
    /** unique or primary key constraint */
    OriginatingDataSourceIdConferenceIdKey = "OriginatingData_sourceId_conferenceId_key",
}

/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export type Conference_OriginatingData_Delete_At_Path_Input = {
    data?: Maybe<Array<Scalars["String"]>>;
};

/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
export type Conference_OriginatingData_Delete_Elem_Input = {
    data?: Maybe<Scalars["Int"]>;
};

/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export type Conference_OriginatingData_Delete_Key_Input = {
    data?: Maybe<Scalars["String"]>;
};

/** input type for inserting data into table "conference.OriginatingData" */
export type Conference_OriginatingData_Insert_Input = {
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    data?: Maybe<Scalars["jsonb"]>;
    elements?: Maybe<Content_Element_Arr_Rel_Insert_Input>;
    events?: Maybe<Schedule_Event_Arr_Rel_Insert_Input>;
    id?: Maybe<Scalars["uuid"]>;
    items?: Maybe<Content_Item_Arr_Rel_Insert_Input>;
    programPeople?: Maybe<Collection_ProgramPerson_Arr_Rel_Insert_Input>;
    rooms?: Maybe<Room_Room_Arr_Rel_Insert_Input>;
    sourceId?: Maybe<Scalars["String"]>;
    tags?: Maybe<Collection_Tag_Arr_Rel_Insert_Input>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Conference_OriginatingData_Max_Fields = {
    __typename?: "conference_OriginatingData_max_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    sourceId?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** order by max() on columns of table "conference.OriginatingData" */
export type Conference_OriginatingData_Max_Order_By = {
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    sourceId?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Conference_OriginatingData_Min_Fields = {
    __typename?: "conference_OriginatingData_min_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    sourceId?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** order by min() on columns of table "conference.OriginatingData" */
export type Conference_OriginatingData_Min_Order_By = {
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    sourceId?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** response of any mutation on the table "conference.OriginatingData" */
export type Conference_OriginatingData_Mutation_Response = {
    __typename?: "conference_OriginatingData_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Conference_OriginatingData>;
};

/** input type for inserting object relation for remote table "conference.OriginatingData" */
export type Conference_OriginatingData_Obj_Rel_Insert_Input = {
    data: Conference_OriginatingData_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Conference_OriginatingData_On_Conflict>;
};

/** on conflict condition type for table "conference.OriginatingData" */
export type Conference_OriginatingData_On_Conflict = {
    constraint: Conference_OriginatingData_Constraint;
    update_columns?: Array<Conference_OriginatingData_Update_Column>;
    where?: Maybe<Conference_OriginatingData_Bool_Exp>;
};

/** Ordering options when selecting data from "conference.OriginatingData". */
export type Conference_OriginatingData_Order_By = {
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    data?: Maybe<Order_By>;
    elements_aggregate?: Maybe<Content_Element_Aggregate_Order_By>;
    events_aggregate?: Maybe<Schedule_Event_Aggregate_Order_By>;
    id?: Maybe<Order_By>;
    items_aggregate?: Maybe<Content_Item_Aggregate_Order_By>;
    programPeople_aggregate?: Maybe<Collection_ProgramPerson_Aggregate_Order_By>;
    rooms_aggregate?: Maybe<Room_Room_Aggregate_Order_By>;
    sourceId?: Maybe<Order_By>;
    tags_aggregate?: Maybe<Collection_Tag_Aggregate_Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** primary key columns input for table: conference_OriginatingData */
export type Conference_OriginatingData_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** prepend existing jsonb value of filtered columns with new jsonb value */
export type Conference_OriginatingData_Prepend_Input = {
    data?: Maybe<Scalars["jsonb"]>;
};

/** select columns of table "conference.OriginatingData" */
export enum Conference_OriginatingData_Select_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Data = "data",
    /** column name */
    Id = "id",
    /** column name */
    SourceId = "sourceId",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** input type for updating data in table "conference.OriginatingData" */
export type Conference_OriginatingData_Set_Input = {
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    data?: Maybe<Scalars["jsonb"]>;
    id?: Maybe<Scalars["uuid"]>;
    sourceId?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** update columns of table "conference.OriginatingData" */
export enum Conference_OriginatingData_Update_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Data = "data",
    /** column name */
    Id = "id",
    /** column name */
    SourceId = "sourceId",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** columns and relationships of "conference.PrepareJob" */
export type Conference_PrepareJob = {
    __typename?: "conference_PrepareJob";
    /** An object relationship */
    conference: Conference_Conference;
    conferenceId: Scalars["uuid"];
    createdAt: Scalars["timestamptz"];
    id: Scalars["uuid"];
    /** An object relationship */
    jobStatus: Video_JobStatus;
    jobStatusName: Video_JobStatus_Enum;
    message?: Maybe<Scalars["String"]>;
    updatedAt: Scalars["timestamptz"];
    /** An array relationship */
    videoRenderJobs: Array<Video_VideoRenderJob>;
    /** An aggregate relationship */
    videoRenderJobs_aggregate: Video_VideoRenderJob_Aggregate;
};

/** columns and relationships of "conference.PrepareJob" */
export type Conference_PrepareJobVideoRenderJobsArgs = {
    distinct_on?: Maybe<Array<Video_VideoRenderJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_VideoRenderJob_Order_By>>;
    where?: Maybe<Video_VideoRenderJob_Bool_Exp>;
};

/** columns and relationships of "conference.PrepareJob" */
export type Conference_PrepareJobVideoRenderJobs_AggregateArgs = {
    distinct_on?: Maybe<Array<Video_VideoRenderJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_VideoRenderJob_Order_By>>;
    where?: Maybe<Video_VideoRenderJob_Bool_Exp>;
};

/** aggregated selection of "conference.PrepareJob" */
export type Conference_PrepareJob_Aggregate = {
    __typename?: "conference_PrepareJob_aggregate";
    aggregate?: Maybe<Conference_PrepareJob_Aggregate_Fields>;
    nodes: Array<Conference_PrepareJob>;
};

/** aggregate fields of "conference.PrepareJob" */
export type Conference_PrepareJob_Aggregate_Fields = {
    __typename?: "conference_PrepareJob_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Conference_PrepareJob_Max_Fields>;
    min?: Maybe<Conference_PrepareJob_Min_Fields>;
};

/** aggregate fields of "conference.PrepareJob" */
export type Conference_PrepareJob_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Conference_PrepareJob_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** Boolean expression to filter rows from the table "conference.PrepareJob". All fields are combined with a logical 'AND'. */
export type Conference_PrepareJob_Bool_Exp = {
    _and?: Maybe<Array<Conference_PrepareJob_Bool_Exp>>;
    _not?: Maybe<Conference_PrepareJob_Bool_Exp>;
    _or?: Maybe<Array<Conference_PrepareJob_Bool_Exp>>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    createdAt?: Maybe<Timestamptz_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    jobStatus?: Maybe<Video_JobStatus_Bool_Exp>;
    jobStatusName?: Maybe<Video_JobStatus_Enum_Comparison_Exp>;
    message?: Maybe<String_Comparison_Exp>;
    updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
    videoRenderJobs?: Maybe<Video_VideoRenderJob_Bool_Exp>;
};

/** unique or primary key constraints on table "conference.PrepareJob" */
export enum Conference_PrepareJob_Constraint {
    /** unique or primary key constraint */
    PrepareJobPkey = "PrepareJob_pkey",
}

/** input type for inserting data into table "conference.PrepareJob" */
export type Conference_PrepareJob_Insert_Input = {
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    jobStatus?: Maybe<Video_JobStatus_Obj_Rel_Insert_Input>;
    jobStatusName?: Maybe<Video_JobStatus_Enum>;
    message?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    videoRenderJobs?: Maybe<Video_VideoRenderJob_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Conference_PrepareJob_Max_Fields = {
    __typename?: "conference_PrepareJob_max_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    message?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate min on columns */
export type Conference_PrepareJob_Min_Fields = {
    __typename?: "conference_PrepareJob_min_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    message?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** response of any mutation on the table "conference.PrepareJob" */
export type Conference_PrepareJob_Mutation_Response = {
    __typename?: "conference_PrepareJob_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Conference_PrepareJob>;
};

/** input type for inserting object relation for remote table "conference.PrepareJob" */
export type Conference_PrepareJob_Obj_Rel_Insert_Input = {
    data: Conference_PrepareJob_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Conference_PrepareJob_On_Conflict>;
};

/** on conflict condition type for table "conference.PrepareJob" */
export type Conference_PrepareJob_On_Conflict = {
    constraint: Conference_PrepareJob_Constraint;
    update_columns?: Array<Conference_PrepareJob_Update_Column>;
    where?: Maybe<Conference_PrepareJob_Bool_Exp>;
};

/** Ordering options when selecting data from "conference.PrepareJob". */
export type Conference_PrepareJob_Order_By = {
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    jobStatus?: Maybe<Video_JobStatus_Order_By>;
    jobStatusName?: Maybe<Order_By>;
    message?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
    videoRenderJobs_aggregate?: Maybe<Video_VideoRenderJob_Aggregate_Order_By>;
};

/** primary key columns input for table: conference_PrepareJob */
export type Conference_PrepareJob_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "conference.PrepareJob" */
export enum Conference_PrepareJob_Select_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Id = "id",
    /** column name */
    JobStatusName = "jobStatusName",
    /** column name */
    Message = "message",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** input type for updating data in table "conference.PrepareJob" */
export type Conference_PrepareJob_Set_Input = {
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    jobStatusName?: Maybe<Video_JobStatus_Enum>;
    message?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** update columns of table "conference.PrepareJob" */
export enum Conference_PrepareJob_Update_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Id = "id",
    /** column name */
    JobStatusName = "jobStatusName",
    /** column name */
    Message = "message",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** columns and relationships of "content.Element" */
export type Content_Element = {
    __typename?: "content_Element";
    accessToken: Scalars["String"];
    /** An object relationship */
    conference: Conference_Conference;
    conferenceId: Scalars["uuid"];
    createdAt: Scalars["timestamptz"];
    data: Scalars["jsonb"];
    id: Scalars["uuid"];
    isHidden: Scalars["Boolean"];
    /** An object relationship */
    item: Content_Item;
    itemId: Scalars["uuid"];
    /** A computed field, executes function "content.Element_itemTitle" */
    itemTitle?: Maybe<Scalars["String"]>;
    layoutData?: Maybe<Scalars["jsonb"]>;
    name: Scalars["String"];
    /** An object relationship */
    originatingData?: Maybe<Conference_OriginatingData>;
    originatingDataId?: Maybe<Scalars["uuid"]>;
    /** An array relationship */
    permissionGrants: Array<Content_ElementPermissionGrant>;
    /** An aggregate relationship */
    permissionGrants_aggregate: Content_ElementPermissionGrant_Aggregate;
    /** An array relationship */
    stats: Array<Analytics_ContentElementStats>;
    /** An aggregate relationship */
    stats_aggregate: Analytics_ContentElementStats_Aggregate;
    /** An object relationship */
    totalViewsStat?: Maybe<Analytics_ElementTotalViews>;
    /** An object relationship */
    type: Content_ElementType;
    typeName: Content_ElementType_Enum;
    updatedAt: Scalars["timestamptz"];
    /** An array relationship */
    uploaders: Array<Content_Uploader>;
    /** An aggregate relationship */
    uploaders_aggregate: Content_Uploader_Aggregate;
    uploadsRemaining?: Maybe<Scalars["Int"]>;
    /** An array relationship */
    youTubeUploads: Array<Video_YouTubeUpload>;
    /** An aggregate relationship */
    youTubeUploads_aggregate: Video_YouTubeUpload_Aggregate;
};

/** columns and relationships of "content.Element" */
export type Content_ElementDataArgs = {
    path?: Maybe<Scalars["String"]>;
};

/** columns and relationships of "content.Element" */
export type Content_ElementLayoutDataArgs = {
    path?: Maybe<Scalars["String"]>;
};

/** columns and relationships of "content.Element" */
export type Content_ElementPermissionGrantsArgs = {
    distinct_on?: Maybe<Array<Content_ElementPermissionGrant_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ElementPermissionGrant_Order_By>>;
    where?: Maybe<Content_ElementPermissionGrant_Bool_Exp>;
};

/** columns and relationships of "content.Element" */
export type Content_ElementPermissionGrants_AggregateArgs = {
    distinct_on?: Maybe<Array<Content_ElementPermissionGrant_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ElementPermissionGrant_Order_By>>;
    where?: Maybe<Content_ElementPermissionGrant_Bool_Exp>;
};

/** columns and relationships of "content.Element" */
export type Content_ElementStatsArgs = {
    distinct_on?: Maybe<Array<Analytics_ContentElementStats_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_ContentElementStats_Order_By>>;
    where?: Maybe<Analytics_ContentElementStats_Bool_Exp>;
};

/** columns and relationships of "content.Element" */
export type Content_ElementStats_AggregateArgs = {
    distinct_on?: Maybe<Array<Analytics_ContentElementStats_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_ContentElementStats_Order_By>>;
    where?: Maybe<Analytics_ContentElementStats_Bool_Exp>;
};

/** columns and relationships of "content.Element" */
export type Content_ElementUploadersArgs = {
    distinct_on?: Maybe<Array<Content_Uploader_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_Uploader_Order_By>>;
    where?: Maybe<Content_Uploader_Bool_Exp>;
};

/** columns and relationships of "content.Element" */
export type Content_ElementUploaders_AggregateArgs = {
    distinct_on?: Maybe<Array<Content_Uploader_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_Uploader_Order_By>>;
    where?: Maybe<Content_Uploader_Bool_Exp>;
};

/** columns and relationships of "content.Element" */
export type Content_ElementYouTubeUploadsArgs = {
    distinct_on?: Maybe<Array<Video_YouTubeUpload_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_YouTubeUpload_Order_By>>;
    where?: Maybe<Video_YouTubeUpload_Bool_Exp>;
};

/** columns and relationships of "content.Element" */
export type Content_ElementYouTubeUploads_AggregateArgs = {
    distinct_on?: Maybe<Array<Video_YouTubeUpload_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_YouTubeUpload_Order_By>>;
    where?: Maybe<Video_YouTubeUpload_Bool_Exp>;
};

/** columns and relationships of "content.ElementByAccessToken" */
export type Content_ElementByAccessToken = {
    __typename?: "content_ElementByAccessToken";
    accessToken?: Maybe<Scalars["String"]>;
    data?: Maybe<Scalars["jsonb"]>;
    id?: Maybe<Scalars["uuid"]>;
    itemTitle?: Maybe<Scalars["String"]>;
    layoutData?: Maybe<Scalars["jsonb"]>;
    name?: Maybe<Scalars["String"]>;
    typeName?: Maybe<Scalars["String"]>;
    uploadsRemaining?: Maybe<Scalars["Int"]>;
};

/** columns and relationships of "content.ElementByAccessToken" */
export type Content_ElementByAccessTokenDataArgs = {
    path?: Maybe<Scalars["String"]>;
};

/** columns and relationships of "content.ElementByAccessToken" */
export type Content_ElementByAccessTokenLayoutDataArgs = {
    path?: Maybe<Scalars["String"]>;
};

/** aggregated selection of "content.ElementByAccessToken" */
export type Content_ElementByAccessToken_Aggregate = {
    __typename?: "content_ElementByAccessToken_aggregate";
    aggregate?: Maybe<Content_ElementByAccessToken_Aggregate_Fields>;
    nodes: Array<Content_ElementByAccessToken>;
};

/** aggregate fields of "content.ElementByAccessToken" */
export type Content_ElementByAccessToken_Aggregate_Fields = {
    __typename?: "content_ElementByAccessToken_aggregate_fields";
    avg?: Maybe<Content_ElementByAccessToken_Avg_Fields>;
    count: Scalars["Int"];
    max?: Maybe<Content_ElementByAccessToken_Max_Fields>;
    min?: Maybe<Content_ElementByAccessToken_Min_Fields>;
    stddev?: Maybe<Content_ElementByAccessToken_Stddev_Fields>;
    stddev_pop?: Maybe<Content_ElementByAccessToken_Stddev_Pop_Fields>;
    stddev_samp?: Maybe<Content_ElementByAccessToken_Stddev_Samp_Fields>;
    sum?: Maybe<Content_ElementByAccessToken_Sum_Fields>;
    var_pop?: Maybe<Content_ElementByAccessToken_Var_Pop_Fields>;
    var_samp?: Maybe<Content_ElementByAccessToken_Var_Samp_Fields>;
    variance?: Maybe<Content_ElementByAccessToken_Variance_Fields>;
};

/** aggregate fields of "content.ElementByAccessToken" */
export type Content_ElementByAccessToken_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Content_ElementByAccessToken_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** aggregate avg on columns */
export type Content_ElementByAccessToken_Avg_Fields = {
    __typename?: "content_ElementByAccessToken_avg_fields";
    uploadsRemaining?: Maybe<Scalars["Float"]>;
};

/** Boolean expression to filter rows from the table "content.ElementByAccessToken". All fields are combined with a logical 'AND'. */
export type Content_ElementByAccessToken_Bool_Exp = {
    _and?: Maybe<Array<Content_ElementByAccessToken_Bool_Exp>>;
    _not?: Maybe<Content_ElementByAccessToken_Bool_Exp>;
    _or?: Maybe<Array<Content_ElementByAccessToken_Bool_Exp>>;
    accessToken?: Maybe<String_Comparison_Exp>;
    data?: Maybe<Jsonb_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    itemTitle?: Maybe<String_Comparison_Exp>;
    layoutData?: Maybe<Jsonb_Comparison_Exp>;
    name?: Maybe<String_Comparison_Exp>;
    typeName?: Maybe<String_Comparison_Exp>;
    uploadsRemaining?: Maybe<Int_Comparison_Exp>;
};

/** aggregate max on columns */
export type Content_ElementByAccessToken_Max_Fields = {
    __typename?: "content_ElementByAccessToken_max_fields";
    accessToken?: Maybe<Scalars["String"]>;
    id?: Maybe<Scalars["uuid"]>;
    itemTitle?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
    typeName?: Maybe<Scalars["String"]>;
    uploadsRemaining?: Maybe<Scalars["Int"]>;
};

/** aggregate min on columns */
export type Content_ElementByAccessToken_Min_Fields = {
    __typename?: "content_ElementByAccessToken_min_fields";
    accessToken?: Maybe<Scalars["String"]>;
    id?: Maybe<Scalars["uuid"]>;
    itemTitle?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
    typeName?: Maybe<Scalars["String"]>;
    uploadsRemaining?: Maybe<Scalars["Int"]>;
};

/** Ordering options when selecting data from "content.ElementByAccessToken". */
export type Content_ElementByAccessToken_Order_By = {
    accessToken?: Maybe<Order_By>;
    data?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    itemTitle?: Maybe<Order_By>;
    layoutData?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    typeName?: Maybe<Order_By>;
    uploadsRemaining?: Maybe<Order_By>;
};

/** select columns of table "content.ElementByAccessToken" */
export enum Content_ElementByAccessToken_Select_Column {
    /** column name */
    AccessToken = "accessToken",
    /** column name */
    Data = "data",
    /** column name */
    Id = "id",
    /** column name */
    ItemTitle = "itemTitle",
    /** column name */
    LayoutData = "layoutData",
    /** column name */
    Name = "name",
    /** column name */
    TypeName = "typeName",
    /** column name */
    UploadsRemaining = "uploadsRemaining",
}

/** aggregate stddev on columns */
export type Content_ElementByAccessToken_Stddev_Fields = {
    __typename?: "content_ElementByAccessToken_stddev_fields";
    uploadsRemaining?: Maybe<Scalars["Float"]>;
};

/** aggregate stddev_pop on columns */
export type Content_ElementByAccessToken_Stddev_Pop_Fields = {
    __typename?: "content_ElementByAccessToken_stddev_pop_fields";
    uploadsRemaining?: Maybe<Scalars["Float"]>;
};

/** aggregate stddev_samp on columns */
export type Content_ElementByAccessToken_Stddev_Samp_Fields = {
    __typename?: "content_ElementByAccessToken_stddev_samp_fields";
    uploadsRemaining?: Maybe<Scalars["Float"]>;
};

/** aggregate sum on columns */
export type Content_ElementByAccessToken_Sum_Fields = {
    __typename?: "content_ElementByAccessToken_sum_fields";
    uploadsRemaining?: Maybe<Scalars["Int"]>;
};

/** aggregate var_pop on columns */
export type Content_ElementByAccessToken_Var_Pop_Fields = {
    __typename?: "content_ElementByAccessToken_var_pop_fields";
    uploadsRemaining?: Maybe<Scalars["Float"]>;
};

/** aggregate var_samp on columns */
export type Content_ElementByAccessToken_Var_Samp_Fields = {
    __typename?: "content_ElementByAccessToken_var_samp_fields";
    uploadsRemaining?: Maybe<Scalars["Float"]>;
};

/** aggregate variance on columns */
export type Content_ElementByAccessToken_Variance_Fields = {
    __typename?: "content_ElementByAccessToken_variance_fields";
    uploadsRemaining?: Maybe<Scalars["Float"]>;
};

/** columns and relationships of "content.ElementPermissionGrant" */
export type Content_ElementPermissionGrant = {
    __typename?: "content_ElementPermissionGrant";
    /** An object relationship */
    conference: Conference_Conference;
    conferenceSlug: Scalars["String"];
    created_at: Scalars["timestamptz"];
    /** An object relationship */
    entity?: Maybe<Content_Element>;
    entityId?: Maybe<Scalars["uuid"]>;
    /** An object relationship */
    group?: Maybe<Permissions_Group>;
    groupId?: Maybe<Scalars["uuid"]>;
    id: Scalars["uuid"];
    /** An object relationship */
    permissionSet: Permissions_Role;
    permissionSetId: Scalars["uuid"];
    updated_at: Scalars["timestamptz"];
};

/** aggregated selection of "content.ElementPermissionGrant" */
export type Content_ElementPermissionGrant_Aggregate = {
    __typename?: "content_ElementPermissionGrant_aggregate";
    aggregate?: Maybe<Content_ElementPermissionGrant_Aggregate_Fields>;
    nodes: Array<Content_ElementPermissionGrant>;
};

/** aggregate fields of "content.ElementPermissionGrant" */
export type Content_ElementPermissionGrant_Aggregate_Fields = {
    __typename?: "content_ElementPermissionGrant_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Content_ElementPermissionGrant_Max_Fields>;
    min?: Maybe<Content_ElementPermissionGrant_Min_Fields>;
};

/** aggregate fields of "content.ElementPermissionGrant" */
export type Content_ElementPermissionGrant_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Content_ElementPermissionGrant_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "content.ElementPermissionGrant" */
export type Content_ElementPermissionGrant_Aggregate_Order_By = {
    count?: Maybe<Order_By>;
    max?: Maybe<Content_ElementPermissionGrant_Max_Order_By>;
    min?: Maybe<Content_ElementPermissionGrant_Min_Order_By>;
};

/** input type for inserting array relation for remote table "content.ElementPermissionGrant" */
export type Content_ElementPermissionGrant_Arr_Rel_Insert_Input = {
    data: Array<Content_ElementPermissionGrant_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Content_ElementPermissionGrant_On_Conflict>;
};

/** Boolean expression to filter rows from the table "content.ElementPermissionGrant". All fields are combined with a logical 'AND'. */
export type Content_ElementPermissionGrant_Bool_Exp = {
    _and?: Maybe<Array<Content_ElementPermissionGrant_Bool_Exp>>;
    _not?: Maybe<Content_ElementPermissionGrant_Bool_Exp>;
    _or?: Maybe<Array<Content_ElementPermissionGrant_Bool_Exp>>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceSlug?: Maybe<String_Comparison_Exp>;
    created_at?: Maybe<Timestamptz_Comparison_Exp>;
    entity?: Maybe<Content_Element_Bool_Exp>;
    entityId?: Maybe<Uuid_Comparison_Exp>;
    group?: Maybe<Permissions_Group_Bool_Exp>;
    groupId?: Maybe<Uuid_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    permissionSet?: Maybe<Permissions_Role_Bool_Exp>;
    permissionSetId?: Maybe<Uuid_Comparison_Exp>;
    updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "content.ElementPermissionGrant" */
export enum Content_ElementPermissionGrant_Constraint {
    /** unique or primary key constraint */
    ElementPermissionGrantPermissionSetIdGroupIdEntityIdKey = "ElementPermissionGrant_permissionSetId_groupId_entityId_key",
    /** unique or primary key constraint */
    ElementPermissionGrantPkey = "ElementPermissionGrant_pkey",
}

/** input type for inserting data into table "content.ElementPermissionGrant" */
export type Content_ElementPermissionGrant_Insert_Input = {
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceSlug?: Maybe<Scalars["String"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    entity?: Maybe<Content_Element_Obj_Rel_Insert_Input>;
    entityId?: Maybe<Scalars["uuid"]>;
    group?: Maybe<Permissions_Group_Obj_Rel_Insert_Input>;
    groupId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    permissionSet?: Maybe<Permissions_Role_Obj_Rel_Insert_Input>;
    permissionSetId?: Maybe<Scalars["uuid"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Content_ElementPermissionGrant_Max_Fields = {
    __typename?: "content_ElementPermissionGrant_max_fields";
    conferenceSlug?: Maybe<Scalars["String"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    entityId?: Maybe<Scalars["uuid"]>;
    groupId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    permissionSetId?: Maybe<Scalars["uuid"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** order by max() on columns of table "content.ElementPermissionGrant" */
export type Content_ElementPermissionGrant_Max_Order_By = {
    conferenceSlug?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    entityId?: Maybe<Order_By>;
    groupId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    permissionSetId?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Content_ElementPermissionGrant_Min_Fields = {
    __typename?: "content_ElementPermissionGrant_min_fields";
    conferenceSlug?: Maybe<Scalars["String"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    entityId?: Maybe<Scalars["uuid"]>;
    groupId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    permissionSetId?: Maybe<Scalars["uuid"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** order by min() on columns of table "content.ElementPermissionGrant" */
export type Content_ElementPermissionGrant_Min_Order_By = {
    conferenceSlug?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    entityId?: Maybe<Order_By>;
    groupId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    permissionSetId?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** response of any mutation on the table "content.ElementPermissionGrant" */
export type Content_ElementPermissionGrant_Mutation_Response = {
    __typename?: "content_ElementPermissionGrant_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Content_ElementPermissionGrant>;
};

/** on conflict condition type for table "content.ElementPermissionGrant" */
export type Content_ElementPermissionGrant_On_Conflict = {
    constraint: Content_ElementPermissionGrant_Constraint;
    update_columns?: Array<Content_ElementPermissionGrant_Update_Column>;
    where?: Maybe<Content_ElementPermissionGrant_Bool_Exp>;
};

/** Ordering options when selecting data from "content.ElementPermissionGrant". */
export type Content_ElementPermissionGrant_Order_By = {
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceSlug?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    entity?: Maybe<Content_Element_Order_By>;
    entityId?: Maybe<Order_By>;
    group?: Maybe<Permissions_Group_Order_By>;
    groupId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    permissionSet?: Maybe<Permissions_Role_Order_By>;
    permissionSetId?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** primary key columns input for table: content_ElementPermissionGrant */
export type Content_ElementPermissionGrant_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "content.ElementPermissionGrant" */
export enum Content_ElementPermissionGrant_Select_Column {
    /** column name */
    ConferenceSlug = "conferenceSlug",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    EntityId = "entityId",
    /** column name */
    GroupId = "groupId",
    /** column name */
    Id = "id",
    /** column name */
    PermissionSetId = "permissionSetId",
    /** column name */
    UpdatedAt = "updated_at",
}

/** input type for updating data in table "content.ElementPermissionGrant" */
export type Content_ElementPermissionGrant_Set_Input = {
    conferenceSlug?: Maybe<Scalars["String"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    entityId?: Maybe<Scalars["uuid"]>;
    groupId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    permissionSetId?: Maybe<Scalars["uuid"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** update columns of table "content.ElementPermissionGrant" */
export enum Content_ElementPermissionGrant_Update_Column {
    /** column name */
    ConferenceSlug = "conferenceSlug",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    EntityId = "entityId",
    /** column name */
    GroupId = "groupId",
    /** column name */
    Id = "id",
    /** column name */
    PermissionSetId = "permissionSetId",
    /** column name */
    UpdatedAt = "updated_at",
}

/** columns and relationships of "content.ElementType" */
export type Content_ElementType = {
    __typename?: "content_ElementType";
    description: Scalars["String"];
    name: Scalars["String"];
};

/** aggregated selection of "content.ElementType" */
export type Content_ElementType_Aggregate = {
    __typename?: "content_ElementType_aggregate";
    aggregate?: Maybe<Content_ElementType_Aggregate_Fields>;
    nodes: Array<Content_ElementType>;
};

/** aggregate fields of "content.ElementType" */
export type Content_ElementType_Aggregate_Fields = {
    __typename?: "content_ElementType_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Content_ElementType_Max_Fields>;
    min?: Maybe<Content_ElementType_Min_Fields>;
};

/** aggregate fields of "content.ElementType" */
export type Content_ElementType_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Content_ElementType_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** Boolean expression to filter rows from the table "content.ElementType". All fields are combined with a logical 'AND'. */
export type Content_ElementType_Bool_Exp = {
    _and?: Maybe<Array<Content_ElementType_Bool_Exp>>;
    _not?: Maybe<Content_ElementType_Bool_Exp>;
    _or?: Maybe<Array<Content_ElementType_Bool_Exp>>;
    description?: Maybe<String_Comparison_Exp>;
    name?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "content.ElementType" */
export enum Content_ElementType_Constraint {
    /** unique or primary key constraint */
    ElementTypePkey = "ElementType_pkey",
}

export enum Content_ElementType_Enum {
    /** Abstract Markdown text. */
    Abstract = "ABSTRACT",
    /** Show a summary of the currently active social and discussion rooms */
    ActiveSocialRooms = "ACTIVE_SOCIAL_ROOMS",
    /** File for an audio clip (stored by Clowdr). */
    AudioFile = "AUDIO_FILE",
    /** Link to an audio clip (audio is not embedded in Clowdr UI). */
    AudioLink = "AUDIO_LINK",
    /** URL for an audio clip (audio is embedded in Clowdr UI). */
    AudioUrl = "AUDIO_URL",
    /** List of content groups in the system. */
    ContentGroupList = "CONTENT_GROUP_LIST",
    /** A horizontal divider */
    Divider = "DIVIDER",
    /** Button that opens the explore program modal. Intended for use on the landing page. */
    ExploreProgramButton = "EXPLORE_PROGRAM_BUTTON",
    /** Button that opens the explore program modal with the Schedule tab open. Intended for use on the landing page. */
    ExploreScheduleButton = "EXPLORE_SCHEDULE_BUTTON",
    /** File for an image (stored by Clowdr). */
    ImageFile = "IMAGE_FILE",
    /** URL to an image (embedded in Clowdr UI). */
    ImageUrl = "IMAGE_URL",
    /** A generic URL. */
    Link = "LINK",
    /** A URL for a link button. */
    LinkButton = "LINK_BUTTON",
    /** Show a summary of the currently live program rooms */
    LiveProgramRooms = "LIVE_PROGRAM_ROOMS",
    /** File for a paper (stored by Clowdr). */
    PaperFile = "PAPER_FILE",
    /** Link for a paper (preview is not embedded in Clowdr UI). */
    PaperLink = "PAPER_LINK",
    /** URL to a paper (preview may be embedded in Clowdr UI e.g. PDF JS viewer). */
    PaperUrl = "PAPER_URL",
    /** File for a poster image (stored by Clowdr). */
    PosterFile = "POSTER_FILE",
    /** URL to a poster image (embedded in Clowdr UI). */
    PosterUrl = "POSTER_URL",
    /** Show a summary of the sponsor booths */
    SponsorBooths = "SPONSOR_BOOTHS",
    /** General-purpose Markdown text. */
    Text = "TEXT",
    /** Video file to be broadcast. */
    VideoBroadcast = "VIDEO_BROADCAST",
    /** Video file for counting down to a transition in a broadcast. */
    VideoCountdown = "VIDEO_COUNTDOWN",
    /** File for a video (stored by Clowdr). */
    VideoFile = "VIDEO_FILE",
    /** Video file for filler loop between events/during breaks in a broadcast. */
    VideoFiller = "VIDEO_FILLER",
    /** Link to a video (video is not embedded in Clowdr UI). */
    VideoLink = "VIDEO_LINK",
    /** Video file to be published in advance of the conference. */
    VideoPrepublish = "VIDEO_PREPUBLISH",
    /** Video file for sponsors filler loop between events/during breaks in a broadcast. */
    VideoSponsorsFiller = "VIDEO_SPONSORS_FILLER",
    /** Video file for titles introducing an event during a broadcast. */
    VideoTitles = "VIDEO_TITLES",
    /** URL for a video (video is embedded in Clowdr UI). */
    VideoUrl = "VIDEO_URL",
    /** Schedule view for the whole conference. */
    WholeSchedule = "WHOLE_SCHEDULE",
    /** Data for a Zoom meeting. */
    Zoom = "ZOOM",
}

/** Boolean expression to compare columns of type "content_ElementType_enum". All fields are combined with logical 'AND'. */
export type Content_ElementType_Enum_Comparison_Exp = {
    _eq?: Maybe<Content_ElementType_Enum>;
    _in?: Maybe<Array<Content_ElementType_Enum>>;
    _is_null?: Maybe<Scalars["Boolean"]>;
    _neq?: Maybe<Content_ElementType_Enum>;
    _nin?: Maybe<Array<Content_ElementType_Enum>>;
};

/** input type for inserting data into table "content.ElementType" */
export type Content_ElementType_Insert_Input = {
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** aggregate max on columns */
export type Content_ElementType_Max_Fields = {
    __typename?: "content_ElementType_max_fields";
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** aggregate min on columns */
export type Content_ElementType_Min_Fields = {
    __typename?: "content_ElementType_min_fields";
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** response of any mutation on the table "content.ElementType" */
export type Content_ElementType_Mutation_Response = {
    __typename?: "content_ElementType_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Content_ElementType>;
};

/** input type for inserting object relation for remote table "content.ElementType" */
export type Content_ElementType_Obj_Rel_Insert_Input = {
    data: Content_ElementType_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Content_ElementType_On_Conflict>;
};

/** on conflict condition type for table "content.ElementType" */
export type Content_ElementType_On_Conflict = {
    constraint: Content_ElementType_Constraint;
    update_columns?: Array<Content_ElementType_Update_Column>;
    where?: Maybe<Content_ElementType_Bool_Exp>;
};

/** Ordering options when selecting data from "content.ElementType". */
export type Content_ElementType_Order_By = {
    description?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
};

/** primary key columns input for table: content_ElementType */
export type Content_ElementType_Pk_Columns_Input = {
    name: Scalars["String"];
};

/** select columns of table "content.ElementType" */
export enum Content_ElementType_Select_Column {
    /** column name */
    Description = "description",
    /** column name */
    Name = "name",
}

/** input type for updating data in table "content.ElementType" */
export type Content_ElementType_Set_Input = {
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** update columns of table "content.ElementType" */
export enum Content_ElementType_Update_Column {
    /** column name */
    Description = "description",
    /** column name */
    Name = "name",
}

/** aggregated selection of "content.Element" */
export type Content_Element_Aggregate = {
    __typename?: "content_Element_aggregate";
    aggregate?: Maybe<Content_Element_Aggregate_Fields>;
    nodes: Array<Content_Element>;
};

/** aggregate fields of "content.Element" */
export type Content_Element_Aggregate_Fields = {
    __typename?: "content_Element_aggregate_fields";
    avg?: Maybe<Content_Element_Avg_Fields>;
    count: Scalars["Int"];
    max?: Maybe<Content_Element_Max_Fields>;
    min?: Maybe<Content_Element_Min_Fields>;
    stddev?: Maybe<Content_Element_Stddev_Fields>;
    stddev_pop?: Maybe<Content_Element_Stddev_Pop_Fields>;
    stddev_samp?: Maybe<Content_Element_Stddev_Samp_Fields>;
    sum?: Maybe<Content_Element_Sum_Fields>;
    var_pop?: Maybe<Content_Element_Var_Pop_Fields>;
    var_samp?: Maybe<Content_Element_Var_Samp_Fields>;
    variance?: Maybe<Content_Element_Variance_Fields>;
};

/** aggregate fields of "content.Element" */
export type Content_Element_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Content_Element_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "content.Element" */
export type Content_Element_Aggregate_Order_By = {
    avg?: Maybe<Content_Element_Avg_Order_By>;
    count?: Maybe<Order_By>;
    max?: Maybe<Content_Element_Max_Order_By>;
    min?: Maybe<Content_Element_Min_Order_By>;
    stddev?: Maybe<Content_Element_Stddev_Order_By>;
    stddev_pop?: Maybe<Content_Element_Stddev_Pop_Order_By>;
    stddev_samp?: Maybe<Content_Element_Stddev_Samp_Order_By>;
    sum?: Maybe<Content_Element_Sum_Order_By>;
    var_pop?: Maybe<Content_Element_Var_Pop_Order_By>;
    var_samp?: Maybe<Content_Element_Var_Samp_Order_By>;
    variance?: Maybe<Content_Element_Variance_Order_By>;
};

/** append existing jsonb value of filtered columns with new jsonb value */
export type Content_Element_Append_Input = {
    data?: Maybe<Scalars["jsonb"]>;
    layoutData?: Maybe<Scalars["jsonb"]>;
};

/** input type for inserting array relation for remote table "content.Element" */
export type Content_Element_Arr_Rel_Insert_Input = {
    data: Array<Content_Element_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Content_Element_On_Conflict>;
};

/** aggregate avg on columns */
export type Content_Element_Avg_Fields = {
    __typename?: "content_Element_avg_fields";
    uploadsRemaining?: Maybe<Scalars["Float"]>;
};

/** order by avg() on columns of table "content.Element" */
export type Content_Element_Avg_Order_By = {
    uploadsRemaining?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "content.Element". All fields are combined with a logical 'AND'. */
export type Content_Element_Bool_Exp = {
    _and?: Maybe<Array<Content_Element_Bool_Exp>>;
    _not?: Maybe<Content_Element_Bool_Exp>;
    _or?: Maybe<Array<Content_Element_Bool_Exp>>;
    accessToken?: Maybe<String_Comparison_Exp>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    createdAt?: Maybe<Timestamptz_Comparison_Exp>;
    data?: Maybe<Jsonb_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    isHidden?: Maybe<Boolean_Comparison_Exp>;
    item?: Maybe<Content_Item_Bool_Exp>;
    itemId?: Maybe<Uuid_Comparison_Exp>;
    itemTitle?: Maybe<String_Comparison_Exp>;
    layoutData?: Maybe<Jsonb_Comparison_Exp>;
    name?: Maybe<String_Comparison_Exp>;
    originatingData?: Maybe<Conference_OriginatingData_Bool_Exp>;
    originatingDataId?: Maybe<Uuid_Comparison_Exp>;
    permissionGrants?: Maybe<Content_ElementPermissionGrant_Bool_Exp>;
    stats?: Maybe<Analytics_ContentElementStats_Bool_Exp>;
    totalViewsStat?: Maybe<Analytics_ElementTotalViews_Bool_Exp>;
    type?: Maybe<Content_ElementType_Bool_Exp>;
    typeName?: Maybe<Content_ElementType_Enum_Comparison_Exp>;
    updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
    uploaders?: Maybe<Content_Uploader_Bool_Exp>;
    uploadsRemaining?: Maybe<Int_Comparison_Exp>;
    youTubeUploads?: Maybe<Video_YouTubeUpload_Bool_Exp>;
};

/** unique or primary key constraints on table "content.Element" */
export enum Content_Element_Constraint {
    /** unique or primary key constraint */
    ElementPkey = "Element_pkey",
}

/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export type Content_Element_Delete_At_Path_Input = {
    data?: Maybe<Array<Scalars["String"]>>;
    layoutData?: Maybe<Array<Scalars["String"]>>;
};

/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
export type Content_Element_Delete_Elem_Input = {
    data?: Maybe<Scalars["Int"]>;
    layoutData?: Maybe<Scalars["Int"]>;
};

/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export type Content_Element_Delete_Key_Input = {
    data?: Maybe<Scalars["String"]>;
    layoutData?: Maybe<Scalars["String"]>;
};

/** input type for incrementing numeric columns in table "content.Element" */
export type Content_Element_Inc_Input = {
    uploadsRemaining?: Maybe<Scalars["Int"]>;
};

/** input type for inserting data into table "content.Element" */
export type Content_Element_Insert_Input = {
    accessToken?: Maybe<Scalars["String"]>;
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    data?: Maybe<Scalars["jsonb"]>;
    id?: Maybe<Scalars["uuid"]>;
    isHidden?: Maybe<Scalars["Boolean"]>;
    item?: Maybe<Content_Item_Obj_Rel_Insert_Input>;
    itemId?: Maybe<Scalars["uuid"]>;
    layoutData?: Maybe<Scalars["jsonb"]>;
    name?: Maybe<Scalars["String"]>;
    originatingData?: Maybe<Conference_OriginatingData_Obj_Rel_Insert_Input>;
    originatingDataId?: Maybe<Scalars["uuid"]>;
    permissionGrants?: Maybe<Content_ElementPermissionGrant_Arr_Rel_Insert_Input>;
    stats?: Maybe<Analytics_ContentElementStats_Arr_Rel_Insert_Input>;
    totalViewsStat?: Maybe<Analytics_ElementTotalViews_Obj_Rel_Insert_Input>;
    type?: Maybe<Content_ElementType_Obj_Rel_Insert_Input>;
    typeName?: Maybe<Content_ElementType_Enum>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    uploaders?: Maybe<Content_Uploader_Arr_Rel_Insert_Input>;
    uploadsRemaining?: Maybe<Scalars["Int"]>;
    youTubeUploads?: Maybe<Video_YouTubeUpload_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Content_Element_Max_Fields = {
    __typename?: "content_Element_max_fields";
    accessToken?: Maybe<Scalars["String"]>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    itemId?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
    originatingDataId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    uploadsRemaining?: Maybe<Scalars["Int"]>;
};

/** order by max() on columns of table "content.Element" */
export type Content_Element_Max_Order_By = {
    accessToken?: Maybe<Order_By>;
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    itemId?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    originatingDataId?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
    uploadsRemaining?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Content_Element_Min_Fields = {
    __typename?: "content_Element_min_fields";
    accessToken?: Maybe<Scalars["String"]>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    itemId?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
    originatingDataId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    uploadsRemaining?: Maybe<Scalars["Int"]>;
};

/** order by min() on columns of table "content.Element" */
export type Content_Element_Min_Order_By = {
    accessToken?: Maybe<Order_By>;
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    itemId?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    originatingDataId?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
    uploadsRemaining?: Maybe<Order_By>;
};

/** response of any mutation on the table "content.Element" */
export type Content_Element_Mutation_Response = {
    __typename?: "content_Element_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Content_Element>;
};

/** input type for inserting object relation for remote table "content.Element" */
export type Content_Element_Obj_Rel_Insert_Input = {
    data: Content_Element_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Content_Element_On_Conflict>;
};

/** on conflict condition type for table "content.Element" */
export type Content_Element_On_Conflict = {
    constraint: Content_Element_Constraint;
    update_columns?: Array<Content_Element_Update_Column>;
    where?: Maybe<Content_Element_Bool_Exp>;
};

/** Ordering options when selecting data from "content.Element". */
export type Content_Element_Order_By = {
    accessToken?: Maybe<Order_By>;
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    data?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    isHidden?: Maybe<Order_By>;
    item?: Maybe<Content_Item_Order_By>;
    itemId?: Maybe<Order_By>;
    itemTitle?: Maybe<Order_By>;
    layoutData?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    originatingData?: Maybe<Conference_OriginatingData_Order_By>;
    originatingDataId?: Maybe<Order_By>;
    permissionGrants_aggregate?: Maybe<Content_ElementPermissionGrant_Aggregate_Order_By>;
    stats_aggregate?: Maybe<Analytics_ContentElementStats_Aggregate_Order_By>;
    totalViewsStat?: Maybe<Analytics_ElementTotalViews_Order_By>;
    type?: Maybe<Content_ElementType_Order_By>;
    typeName?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
    uploaders_aggregate?: Maybe<Content_Uploader_Aggregate_Order_By>;
    uploadsRemaining?: Maybe<Order_By>;
    youTubeUploads_aggregate?: Maybe<Video_YouTubeUpload_Aggregate_Order_By>;
};

/** primary key columns input for table: content_Element */
export type Content_Element_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** prepend existing jsonb value of filtered columns with new jsonb value */
export type Content_Element_Prepend_Input = {
    data?: Maybe<Scalars["jsonb"]>;
    layoutData?: Maybe<Scalars["jsonb"]>;
};

/** select columns of table "content.Element" */
export enum Content_Element_Select_Column {
    /** column name */
    AccessToken = "accessToken",
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Data = "data",
    /** column name */
    Id = "id",
    /** column name */
    IsHidden = "isHidden",
    /** column name */
    ItemId = "itemId",
    /** column name */
    LayoutData = "layoutData",
    /** column name */
    Name = "name",
    /** column name */
    OriginatingDataId = "originatingDataId",
    /** column name */
    TypeName = "typeName",
    /** column name */
    UpdatedAt = "updatedAt",
    /** column name */
    UploadsRemaining = "uploadsRemaining",
}

/** input type for updating data in table "content.Element" */
export type Content_Element_Set_Input = {
    accessToken?: Maybe<Scalars["String"]>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    data?: Maybe<Scalars["jsonb"]>;
    id?: Maybe<Scalars["uuid"]>;
    isHidden?: Maybe<Scalars["Boolean"]>;
    itemId?: Maybe<Scalars["uuid"]>;
    layoutData?: Maybe<Scalars["jsonb"]>;
    name?: Maybe<Scalars["String"]>;
    originatingDataId?: Maybe<Scalars["uuid"]>;
    typeName?: Maybe<Content_ElementType_Enum>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    uploadsRemaining?: Maybe<Scalars["Int"]>;
};

/** aggregate stddev on columns */
export type Content_Element_Stddev_Fields = {
    __typename?: "content_Element_stddev_fields";
    uploadsRemaining?: Maybe<Scalars["Float"]>;
};

/** order by stddev() on columns of table "content.Element" */
export type Content_Element_Stddev_Order_By = {
    uploadsRemaining?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Content_Element_Stddev_Pop_Fields = {
    __typename?: "content_Element_stddev_pop_fields";
    uploadsRemaining?: Maybe<Scalars["Float"]>;
};

/** order by stddev_pop() on columns of table "content.Element" */
export type Content_Element_Stddev_Pop_Order_By = {
    uploadsRemaining?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Content_Element_Stddev_Samp_Fields = {
    __typename?: "content_Element_stddev_samp_fields";
    uploadsRemaining?: Maybe<Scalars["Float"]>;
};

/** order by stddev_samp() on columns of table "content.Element" */
export type Content_Element_Stddev_Samp_Order_By = {
    uploadsRemaining?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Content_Element_Sum_Fields = {
    __typename?: "content_Element_sum_fields";
    uploadsRemaining?: Maybe<Scalars["Int"]>;
};

/** order by sum() on columns of table "content.Element" */
export type Content_Element_Sum_Order_By = {
    uploadsRemaining?: Maybe<Order_By>;
};

/** update columns of table "content.Element" */
export enum Content_Element_Update_Column {
    /** column name */
    AccessToken = "accessToken",
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Data = "data",
    /** column name */
    Id = "id",
    /** column name */
    IsHidden = "isHidden",
    /** column name */
    ItemId = "itemId",
    /** column name */
    LayoutData = "layoutData",
    /** column name */
    Name = "name",
    /** column name */
    OriginatingDataId = "originatingDataId",
    /** column name */
    TypeName = "typeName",
    /** column name */
    UpdatedAt = "updatedAt",
    /** column name */
    UploadsRemaining = "uploadsRemaining",
}

/** aggregate var_pop on columns */
export type Content_Element_Var_Pop_Fields = {
    __typename?: "content_Element_var_pop_fields";
    uploadsRemaining?: Maybe<Scalars["Float"]>;
};

/** order by var_pop() on columns of table "content.Element" */
export type Content_Element_Var_Pop_Order_By = {
    uploadsRemaining?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Content_Element_Var_Samp_Fields = {
    __typename?: "content_Element_var_samp_fields";
    uploadsRemaining?: Maybe<Scalars["Float"]>;
};

/** order by var_samp() on columns of table "content.Element" */
export type Content_Element_Var_Samp_Order_By = {
    uploadsRemaining?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Content_Element_Variance_Fields = {
    __typename?: "content_Element_variance_fields";
    uploadsRemaining?: Maybe<Scalars["Float"]>;
};

/** order by variance() on columns of table "content.Element" */
export type Content_Element_Variance_Order_By = {
    uploadsRemaining?: Maybe<Order_By>;
};

/** columns and relationships of "content.Item" */
export type Content_Item = {
    __typename?: "content_Item";
    /** An object relationship */
    chat?: Maybe<Chat_Chat>;
    chatId?: Maybe<Scalars["uuid"]>;
    /** An object relationship */
    conference: Conference_Conference;
    conferenceId: Scalars["uuid"];
    createdAt: Scalars["timestamptz"];
    /** An array relationship */
    elements: Array<Content_Element>;
    /** An aggregate relationship */
    elements_aggregate: Content_Element_Aggregate;
    /** An array relationship */
    events: Array<Schedule_Event>;
    /** An aggregate relationship */
    events_aggregate: Schedule_Event_Aggregate;
    id: Scalars["uuid"];
    /** An array relationship */
    itemExhibitions: Array<Content_ItemExhibition>;
    /** An aggregate relationship */
    itemExhibitions_aggregate: Content_ItemExhibition_Aggregate;
    /** An array relationship */
    itemPeople: Array<Content_ItemProgramPerson>;
    /** An aggregate relationship */
    itemPeople_aggregate: Content_ItemProgramPerson_Aggregate;
    /** An array relationship */
    itemTags: Array<Content_ItemTag>;
    /** An aggregate relationship */
    itemTags_aggregate: Content_ItemTag_Aggregate;
    /** An object relationship */
    originatingData?: Maybe<Conference_OriginatingData>;
    originatingDataId?: Maybe<Scalars["uuid"]>;
    /** An object relationship */
    room?: Maybe<Room_Room>;
    /** An array relationship */
    rooms: Array<Room_Room>;
    /** An aggregate relationship */
    rooms_aggregate: Room_Room_Aggregate;
    shortTitle?: Maybe<Scalars["String"]>;
    /** An array relationship */
    stats: Array<Analytics_ContentItemStats>;
    /** An aggregate relationship */
    stats_aggregate: Analytics_ContentItemStats_Aggregate;
    title: Scalars["String"];
    /** An object relationship */
    totalViewsStat?: Maybe<Analytics_ItemTotalViews>;
    /** An object relationship */
    type: Content_ItemType;
    typeName: Content_ItemType_Enum;
    updatedAt: Scalars["timestamptz"];
};

/** columns and relationships of "content.Item" */
export type Content_ItemElementsArgs = {
    distinct_on?: Maybe<Array<Content_Element_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_Element_Order_By>>;
    where?: Maybe<Content_Element_Bool_Exp>;
};

/** columns and relationships of "content.Item" */
export type Content_ItemElements_AggregateArgs = {
    distinct_on?: Maybe<Array<Content_Element_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_Element_Order_By>>;
    where?: Maybe<Content_Element_Bool_Exp>;
};

/** columns and relationships of "content.Item" */
export type Content_ItemEventsArgs = {
    distinct_on?: Maybe<Array<Schedule_Event_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_Event_Order_By>>;
    where?: Maybe<Schedule_Event_Bool_Exp>;
};

/** columns and relationships of "content.Item" */
export type Content_ItemEvents_AggregateArgs = {
    distinct_on?: Maybe<Array<Schedule_Event_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_Event_Order_By>>;
    where?: Maybe<Schedule_Event_Bool_Exp>;
};

/** columns and relationships of "content.Item" */
export type Content_ItemItemExhibitionsArgs = {
    distinct_on?: Maybe<Array<Content_ItemExhibition_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ItemExhibition_Order_By>>;
    where?: Maybe<Content_ItemExhibition_Bool_Exp>;
};

/** columns and relationships of "content.Item" */
export type Content_ItemItemExhibitions_AggregateArgs = {
    distinct_on?: Maybe<Array<Content_ItemExhibition_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ItemExhibition_Order_By>>;
    where?: Maybe<Content_ItemExhibition_Bool_Exp>;
};

/** columns and relationships of "content.Item" */
export type Content_ItemItemPeopleArgs = {
    distinct_on?: Maybe<Array<Content_ItemProgramPerson_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ItemProgramPerson_Order_By>>;
    where?: Maybe<Content_ItemProgramPerson_Bool_Exp>;
};

/** columns and relationships of "content.Item" */
export type Content_ItemItemPeople_AggregateArgs = {
    distinct_on?: Maybe<Array<Content_ItemProgramPerson_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ItemProgramPerson_Order_By>>;
    where?: Maybe<Content_ItemProgramPerson_Bool_Exp>;
};

/** columns and relationships of "content.Item" */
export type Content_ItemItemTagsArgs = {
    distinct_on?: Maybe<Array<Content_ItemTag_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ItemTag_Order_By>>;
    where?: Maybe<Content_ItemTag_Bool_Exp>;
};

/** columns and relationships of "content.Item" */
export type Content_ItemItemTags_AggregateArgs = {
    distinct_on?: Maybe<Array<Content_ItemTag_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ItemTag_Order_By>>;
    where?: Maybe<Content_ItemTag_Bool_Exp>;
};

/** columns and relationships of "content.Item" */
export type Content_ItemRoomsArgs = {
    distinct_on?: Maybe<Array<Room_Room_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_Room_Order_By>>;
    where?: Maybe<Room_Room_Bool_Exp>;
};

/** columns and relationships of "content.Item" */
export type Content_ItemRooms_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_Room_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_Room_Order_By>>;
    where?: Maybe<Room_Room_Bool_Exp>;
};

/** columns and relationships of "content.Item" */
export type Content_ItemStatsArgs = {
    distinct_on?: Maybe<Array<Analytics_ContentItemStats_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_ContentItemStats_Order_By>>;
    where?: Maybe<Analytics_ContentItemStats_Bool_Exp>;
};

/** columns and relationships of "content.Item" */
export type Content_ItemStats_AggregateArgs = {
    distinct_on?: Maybe<Array<Analytics_ContentItemStats_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_ContentItemStats_Order_By>>;
    where?: Maybe<Analytics_ContentItemStats_Bool_Exp>;
};

/** columns and relationships of "content.ItemExhibition" */
export type Content_ItemExhibition = {
    __typename?: "content_ItemExhibition";
    /** An object relationship */
    conference: Conference_Conference;
    conferenceId: Scalars["uuid"];
    /** An object relationship */
    exhibition: Collection_Exhibition;
    exhibitionId: Scalars["uuid"];
    id: Scalars["uuid"];
    /** An object relationship */
    item: Content_Item;
    itemId: Scalars["uuid"];
    layout?: Maybe<Scalars["jsonb"]>;
    priority?: Maybe<Scalars["Int"]>;
};

/** columns and relationships of "content.ItemExhibition" */
export type Content_ItemExhibitionLayoutArgs = {
    path?: Maybe<Scalars["String"]>;
};

/** aggregated selection of "content.ItemExhibition" */
export type Content_ItemExhibition_Aggregate = {
    __typename?: "content_ItemExhibition_aggregate";
    aggregate?: Maybe<Content_ItemExhibition_Aggregate_Fields>;
    nodes: Array<Content_ItemExhibition>;
};

/** aggregate fields of "content.ItemExhibition" */
export type Content_ItemExhibition_Aggregate_Fields = {
    __typename?: "content_ItemExhibition_aggregate_fields";
    avg?: Maybe<Content_ItemExhibition_Avg_Fields>;
    count: Scalars["Int"];
    max?: Maybe<Content_ItemExhibition_Max_Fields>;
    min?: Maybe<Content_ItemExhibition_Min_Fields>;
    stddev?: Maybe<Content_ItemExhibition_Stddev_Fields>;
    stddev_pop?: Maybe<Content_ItemExhibition_Stddev_Pop_Fields>;
    stddev_samp?: Maybe<Content_ItemExhibition_Stddev_Samp_Fields>;
    sum?: Maybe<Content_ItemExhibition_Sum_Fields>;
    var_pop?: Maybe<Content_ItemExhibition_Var_Pop_Fields>;
    var_samp?: Maybe<Content_ItemExhibition_Var_Samp_Fields>;
    variance?: Maybe<Content_ItemExhibition_Variance_Fields>;
};

/** aggregate fields of "content.ItemExhibition" */
export type Content_ItemExhibition_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Content_ItemExhibition_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "content.ItemExhibition" */
export type Content_ItemExhibition_Aggregate_Order_By = {
    avg?: Maybe<Content_ItemExhibition_Avg_Order_By>;
    count?: Maybe<Order_By>;
    max?: Maybe<Content_ItemExhibition_Max_Order_By>;
    min?: Maybe<Content_ItemExhibition_Min_Order_By>;
    stddev?: Maybe<Content_ItemExhibition_Stddev_Order_By>;
    stddev_pop?: Maybe<Content_ItemExhibition_Stddev_Pop_Order_By>;
    stddev_samp?: Maybe<Content_ItemExhibition_Stddev_Samp_Order_By>;
    sum?: Maybe<Content_ItemExhibition_Sum_Order_By>;
    var_pop?: Maybe<Content_ItemExhibition_Var_Pop_Order_By>;
    var_samp?: Maybe<Content_ItemExhibition_Var_Samp_Order_By>;
    variance?: Maybe<Content_ItemExhibition_Variance_Order_By>;
};

/** append existing jsonb value of filtered columns with new jsonb value */
export type Content_ItemExhibition_Append_Input = {
    layout?: Maybe<Scalars["jsonb"]>;
};

/** input type for inserting array relation for remote table "content.ItemExhibition" */
export type Content_ItemExhibition_Arr_Rel_Insert_Input = {
    data: Array<Content_ItemExhibition_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Content_ItemExhibition_On_Conflict>;
};

/** aggregate avg on columns */
export type Content_ItemExhibition_Avg_Fields = {
    __typename?: "content_ItemExhibition_avg_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by avg() on columns of table "content.ItemExhibition" */
export type Content_ItemExhibition_Avg_Order_By = {
    priority?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "content.ItemExhibition". All fields are combined with a logical 'AND'. */
export type Content_ItemExhibition_Bool_Exp = {
    _and?: Maybe<Array<Content_ItemExhibition_Bool_Exp>>;
    _not?: Maybe<Content_ItemExhibition_Bool_Exp>;
    _or?: Maybe<Array<Content_ItemExhibition_Bool_Exp>>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    exhibition?: Maybe<Collection_Exhibition_Bool_Exp>;
    exhibitionId?: Maybe<Uuid_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    item?: Maybe<Content_Item_Bool_Exp>;
    itemId?: Maybe<Uuid_Comparison_Exp>;
    layout?: Maybe<Jsonb_Comparison_Exp>;
    priority?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "content.ItemExhibition" */
export enum Content_ItemExhibition_Constraint {
    /** unique or primary key constraint */
    ItemExhibitionPkey = "ItemExhibition_pkey",
}

/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export type Content_ItemExhibition_Delete_At_Path_Input = {
    layout?: Maybe<Array<Scalars["String"]>>;
};

/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
export type Content_ItemExhibition_Delete_Elem_Input = {
    layout?: Maybe<Scalars["Int"]>;
};

/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export type Content_ItemExhibition_Delete_Key_Input = {
    layout?: Maybe<Scalars["String"]>;
};

/** input type for incrementing numeric columns in table "content.ItemExhibition" */
export type Content_ItemExhibition_Inc_Input = {
    priority?: Maybe<Scalars["Int"]>;
};

/** input type for inserting data into table "content.ItemExhibition" */
export type Content_ItemExhibition_Insert_Input = {
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    exhibition?: Maybe<Collection_Exhibition_Obj_Rel_Insert_Input>;
    exhibitionId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    item?: Maybe<Content_Item_Obj_Rel_Insert_Input>;
    itemId?: Maybe<Scalars["uuid"]>;
    layout?: Maybe<Scalars["jsonb"]>;
    priority?: Maybe<Scalars["Int"]>;
};

/** aggregate max on columns */
export type Content_ItemExhibition_Max_Fields = {
    __typename?: "content_ItemExhibition_max_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    exhibitionId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    itemId?: Maybe<Scalars["uuid"]>;
    priority?: Maybe<Scalars["Int"]>;
};

/** order by max() on columns of table "content.ItemExhibition" */
export type Content_ItemExhibition_Max_Order_By = {
    conferenceId?: Maybe<Order_By>;
    exhibitionId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    itemId?: Maybe<Order_By>;
    priority?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Content_ItemExhibition_Min_Fields = {
    __typename?: "content_ItemExhibition_min_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    exhibitionId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    itemId?: Maybe<Scalars["uuid"]>;
    priority?: Maybe<Scalars["Int"]>;
};

/** order by min() on columns of table "content.ItemExhibition" */
export type Content_ItemExhibition_Min_Order_By = {
    conferenceId?: Maybe<Order_By>;
    exhibitionId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    itemId?: Maybe<Order_By>;
    priority?: Maybe<Order_By>;
};

/** response of any mutation on the table "content.ItemExhibition" */
export type Content_ItemExhibition_Mutation_Response = {
    __typename?: "content_ItemExhibition_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Content_ItemExhibition>;
};

/** on conflict condition type for table "content.ItemExhibition" */
export type Content_ItemExhibition_On_Conflict = {
    constraint: Content_ItemExhibition_Constraint;
    update_columns?: Array<Content_ItemExhibition_Update_Column>;
    where?: Maybe<Content_ItemExhibition_Bool_Exp>;
};

/** Ordering options when selecting data from "content.ItemExhibition". */
export type Content_ItemExhibition_Order_By = {
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    exhibition?: Maybe<Collection_Exhibition_Order_By>;
    exhibitionId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    item?: Maybe<Content_Item_Order_By>;
    itemId?: Maybe<Order_By>;
    layout?: Maybe<Order_By>;
    priority?: Maybe<Order_By>;
};

/** primary key columns input for table: content_ItemExhibition */
export type Content_ItemExhibition_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** prepend existing jsonb value of filtered columns with new jsonb value */
export type Content_ItemExhibition_Prepend_Input = {
    layout?: Maybe<Scalars["jsonb"]>;
};

/** select columns of table "content.ItemExhibition" */
export enum Content_ItemExhibition_Select_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    ExhibitionId = "exhibitionId",
    /** column name */
    Id = "id",
    /** column name */
    ItemId = "itemId",
    /** column name */
    Layout = "layout",
    /** column name */
    Priority = "priority",
}

/** input type for updating data in table "content.ItemExhibition" */
export type Content_ItemExhibition_Set_Input = {
    conferenceId?: Maybe<Scalars["uuid"]>;
    exhibitionId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    itemId?: Maybe<Scalars["uuid"]>;
    layout?: Maybe<Scalars["jsonb"]>;
    priority?: Maybe<Scalars["Int"]>;
};

/** aggregate stddev on columns */
export type Content_ItemExhibition_Stddev_Fields = {
    __typename?: "content_ItemExhibition_stddev_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by stddev() on columns of table "content.ItemExhibition" */
export type Content_ItemExhibition_Stddev_Order_By = {
    priority?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Content_ItemExhibition_Stddev_Pop_Fields = {
    __typename?: "content_ItemExhibition_stddev_pop_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by stddev_pop() on columns of table "content.ItemExhibition" */
export type Content_ItemExhibition_Stddev_Pop_Order_By = {
    priority?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Content_ItemExhibition_Stddev_Samp_Fields = {
    __typename?: "content_ItemExhibition_stddev_samp_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by stddev_samp() on columns of table "content.ItemExhibition" */
export type Content_ItemExhibition_Stddev_Samp_Order_By = {
    priority?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Content_ItemExhibition_Sum_Fields = {
    __typename?: "content_ItemExhibition_sum_fields";
    priority?: Maybe<Scalars["Int"]>;
};

/** order by sum() on columns of table "content.ItemExhibition" */
export type Content_ItemExhibition_Sum_Order_By = {
    priority?: Maybe<Order_By>;
};

/** update columns of table "content.ItemExhibition" */
export enum Content_ItemExhibition_Update_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    ExhibitionId = "exhibitionId",
    /** column name */
    Id = "id",
    /** column name */
    ItemId = "itemId",
    /** column name */
    Layout = "layout",
    /** column name */
    Priority = "priority",
}

/** aggregate var_pop on columns */
export type Content_ItemExhibition_Var_Pop_Fields = {
    __typename?: "content_ItemExhibition_var_pop_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by var_pop() on columns of table "content.ItemExhibition" */
export type Content_ItemExhibition_Var_Pop_Order_By = {
    priority?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Content_ItemExhibition_Var_Samp_Fields = {
    __typename?: "content_ItemExhibition_var_samp_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by var_samp() on columns of table "content.ItemExhibition" */
export type Content_ItemExhibition_Var_Samp_Order_By = {
    priority?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Content_ItemExhibition_Variance_Fields = {
    __typename?: "content_ItemExhibition_variance_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by variance() on columns of table "content.ItemExhibition" */
export type Content_ItemExhibition_Variance_Order_By = {
    priority?: Maybe<Order_By>;
};

/** columns and relationships of "content.ItemProgramPerson" */
export type Content_ItemProgramPerson = {
    __typename?: "content_ItemProgramPerson";
    /** An object relationship */
    conference: Conference_Conference;
    conferenceId: Scalars["uuid"];
    id: Scalars["uuid"];
    /** An object relationship */
    item: Content_Item;
    itemId: Scalars["uuid"];
    /** An object relationship */
    person: Collection_ProgramPerson;
    personId: Scalars["uuid"];
    priority?: Maybe<Scalars["Int"]>;
    roleName: Scalars["String"];
};

/** aggregated selection of "content.ItemProgramPerson" */
export type Content_ItemProgramPerson_Aggregate = {
    __typename?: "content_ItemProgramPerson_aggregate";
    aggregate?: Maybe<Content_ItemProgramPerson_Aggregate_Fields>;
    nodes: Array<Content_ItemProgramPerson>;
};

/** aggregate fields of "content.ItemProgramPerson" */
export type Content_ItemProgramPerson_Aggregate_Fields = {
    __typename?: "content_ItemProgramPerson_aggregate_fields";
    avg?: Maybe<Content_ItemProgramPerson_Avg_Fields>;
    count: Scalars["Int"];
    max?: Maybe<Content_ItemProgramPerson_Max_Fields>;
    min?: Maybe<Content_ItemProgramPerson_Min_Fields>;
    stddev?: Maybe<Content_ItemProgramPerson_Stddev_Fields>;
    stddev_pop?: Maybe<Content_ItemProgramPerson_Stddev_Pop_Fields>;
    stddev_samp?: Maybe<Content_ItemProgramPerson_Stddev_Samp_Fields>;
    sum?: Maybe<Content_ItemProgramPerson_Sum_Fields>;
    var_pop?: Maybe<Content_ItemProgramPerson_Var_Pop_Fields>;
    var_samp?: Maybe<Content_ItemProgramPerson_Var_Samp_Fields>;
    variance?: Maybe<Content_ItemProgramPerson_Variance_Fields>;
};

/** aggregate fields of "content.ItemProgramPerson" */
export type Content_ItemProgramPerson_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Content_ItemProgramPerson_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "content.ItemProgramPerson" */
export type Content_ItemProgramPerson_Aggregate_Order_By = {
    avg?: Maybe<Content_ItemProgramPerson_Avg_Order_By>;
    count?: Maybe<Order_By>;
    max?: Maybe<Content_ItemProgramPerson_Max_Order_By>;
    min?: Maybe<Content_ItemProgramPerson_Min_Order_By>;
    stddev?: Maybe<Content_ItemProgramPerson_Stddev_Order_By>;
    stddev_pop?: Maybe<Content_ItemProgramPerson_Stddev_Pop_Order_By>;
    stddev_samp?: Maybe<Content_ItemProgramPerson_Stddev_Samp_Order_By>;
    sum?: Maybe<Content_ItemProgramPerson_Sum_Order_By>;
    var_pop?: Maybe<Content_ItemProgramPerson_Var_Pop_Order_By>;
    var_samp?: Maybe<Content_ItemProgramPerson_Var_Samp_Order_By>;
    variance?: Maybe<Content_ItemProgramPerson_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "content.ItemProgramPerson" */
export type Content_ItemProgramPerson_Arr_Rel_Insert_Input = {
    data: Array<Content_ItemProgramPerson_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Content_ItemProgramPerson_On_Conflict>;
};

/** aggregate avg on columns */
export type Content_ItemProgramPerson_Avg_Fields = {
    __typename?: "content_ItemProgramPerson_avg_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by avg() on columns of table "content.ItemProgramPerson" */
export type Content_ItemProgramPerson_Avg_Order_By = {
    priority?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "content.ItemProgramPerson". All fields are combined with a logical 'AND'. */
export type Content_ItemProgramPerson_Bool_Exp = {
    _and?: Maybe<Array<Content_ItemProgramPerson_Bool_Exp>>;
    _not?: Maybe<Content_ItemProgramPerson_Bool_Exp>;
    _or?: Maybe<Array<Content_ItemProgramPerson_Bool_Exp>>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    item?: Maybe<Content_Item_Bool_Exp>;
    itemId?: Maybe<Uuid_Comparison_Exp>;
    person?: Maybe<Collection_ProgramPerson_Bool_Exp>;
    personId?: Maybe<Uuid_Comparison_Exp>;
    priority?: Maybe<Int_Comparison_Exp>;
    roleName?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "content.ItemProgramPerson" */
export enum Content_ItemProgramPerson_Constraint {
    /** unique or primary key constraint */
    ItemProgramPersonPkey = "ItemProgramPerson_pkey",
    /** unique or primary key constraint */
    ItemProgramPersonRoleNamePersonIdItemIdKey = "ItemProgramPerson_roleName_personId_itemId_key",
}

/** input type for incrementing numeric columns in table "content.ItemProgramPerson" */
export type Content_ItemProgramPerson_Inc_Input = {
    priority?: Maybe<Scalars["Int"]>;
};

/** input type for inserting data into table "content.ItemProgramPerson" */
export type Content_ItemProgramPerson_Insert_Input = {
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    item?: Maybe<Content_Item_Obj_Rel_Insert_Input>;
    itemId?: Maybe<Scalars["uuid"]>;
    person?: Maybe<Collection_ProgramPerson_Obj_Rel_Insert_Input>;
    personId?: Maybe<Scalars["uuid"]>;
    priority?: Maybe<Scalars["Int"]>;
    roleName?: Maybe<Scalars["String"]>;
};

/** aggregate max on columns */
export type Content_ItemProgramPerson_Max_Fields = {
    __typename?: "content_ItemProgramPerson_max_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    itemId?: Maybe<Scalars["uuid"]>;
    personId?: Maybe<Scalars["uuid"]>;
    priority?: Maybe<Scalars["Int"]>;
    roleName?: Maybe<Scalars["String"]>;
};

/** order by max() on columns of table "content.ItemProgramPerson" */
export type Content_ItemProgramPerson_Max_Order_By = {
    conferenceId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    itemId?: Maybe<Order_By>;
    personId?: Maybe<Order_By>;
    priority?: Maybe<Order_By>;
    roleName?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Content_ItemProgramPerson_Min_Fields = {
    __typename?: "content_ItemProgramPerson_min_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    itemId?: Maybe<Scalars["uuid"]>;
    personId?: Maybe<Scalars["uuid"]>;
    priority?: Maybe<Scalars["Int"]>;
    roleName?: Maybe<Scalars["String"]>;
};

/** order by min() on columns of table "content.ItemProgramPerson" */
export type Content_ItemProgramPerson_Min_Order_By = {
    conferenceId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    itemId?: Maybe<Order_By>;
    personId?: Maybe<Order_By>;
    priority?: Maybe<Order_By>;
    roleName?: Maybe<Order_By>;
};

/** response of any mutation on the table "content.ItemProgramPerson" */
export type Content_ItemProgramPerson_Mutation_Response = {
    __typename?: "content_ItemProgramPerson_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Content_ItemProgramPerson>;
};

/** on conflict condition type for table "content.ItemProgramPerson" */
export type Content_ItemProgramPerson_On_Conflict = {
    constraint: Content_ItemProgramPerson_Constraint;
    update_columns?: Array<Content_ItemProgramPerson_Update_Column>;
    where?: Maybe<Content_ItemProgramPerson_Bool_Exp>;
};

/** Ordering options when selecting data from "content.ItemProgramPerson". */
export type Content_ItemProgramPerson_Order_By = {
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    item?: Maybe<Content_Item_Order_By>;
    itemId?: Maybe<Order_By>;
    person?: Maybe<Collection_ProgramPerson_Order_By>;
    personId?: Maybe<Order_By>;
    priority?: Maybe<Order_By>;
    roleName?: Maybe<Order_By>;
};

/** primary key columns input for table: content_ItemProgramPerson */
export type Content_ItemProgramPerson_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "content.ItemProgramPerson" */
export enum Content_ItemProgramPerson_Select_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    Id = "id",
    /** column name */
    ItemId = "itemId",
    /** column name */
    PersonId = "personId",
    /** column name */
    Priority = "priority",
    /** column name */
    RoleName = "roleName",
}

/** input type for updating data in table "content.ItemProgramPerson" */
export type Content_ItemProgramPerson_Set_Input = {
    conferenceId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    itemId?: Maybe<Scalars["uuid"]>;
    personId?: Maybe<Scalars["uuid"]>;
    priority?: Maybe<Scalars["Int"]>;
    roleName?: Maybe<Scalars["String"]>;
};

/** aggregate stddev on columns */
export type Content_ItemProgramPerson_Stddev_Fields = {
    __typename?: "content_ItemProgramPerson_stddev_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by stddev() on columns of table "content.ItemProgramPerson" */
export type Content_ItemProgramPerson_Stddev_Order_By = {
    priority?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Content_ItemProgramPerson_Stddev_Pop_Fields = {
    __typename?: "content_ItemProgramPerson_stddev_pop_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by stddev_pop() on columns of table "content.ItemProgramPerson" */
export type Content_ItemProgramPerson_Stddev_Pop_Order_By = {
    priority?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Content_ItemProgramPerson_Stddev_Samp_Fields = {
    __typename?: "content_ItemProgramPerson_stddev_samp_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by stddev_samp() on columns of table "content.ItemProgramPerson" */
export type Content_ItemProgramPerson_Stddev_Samp_Order_By = {
    priority?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Content_ItemProgramPerson_Sum_Fields = {
    __typename?: "content_ItemProgramPerson_sum_fields";
    priority?: Maybe<Scalars["Int"]>;
};

/** order by sum() on columns of table "content.ItemProgramPerson" */
export type Content_ItemProgramPerson_Sum_Order_By = {
    priority?: Maybe<Order_By>;
};

/** update columns of table "content.ItemProgramPerson" */
export enum Content_ItemProgramPerson_Update_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    Id = "id",
    /** column name */
    ItemId = "itemId",
    /** column name */
    PersonId = "personId",
    /** column name */
    Priority = "priority",
    /** column name */
    RoleName = "roleName",
}

/** aggregate var_pop on columns */
export type Content_ItemProgramPerson_Var_Pop_Fields = {
    __typename?: "content_ItemProgramPerson_var_pop_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by var_pop() on columns of table "content.ItemProgramPerson" */
export type Content_ItemProgramPerson_Var_Pop_Order_By = {
    priority?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Content_ItemProgramPerson_Var_Samp_Fields = {
    __typename?: "content_ItemProgramPerson_var_samp_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by var_samp() on columns of table "content.ItemProgramPerson" */
export type Content_ItemProgramPerson_Var_Samp_Order_By = {
    priority?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Content_ItemProgramPerson_Variance_Fields = {
    __typename?: "content_ItemProgramPerson_variance_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by variance() on columns of table "content.ItemProgramPerson" */
export type Content_ItemProgramPerson_Variance_Order_By = {
    priority?: Maybe<Order_By>;
};

/** columns and relationships of "content.ItemTag" */
export type Content_ItemTag = {
    __typename?: "content_ItemTag";
    id: Scalars["uuid"];
    /** An object relationship */
    item: Content_Item;
    itemId: Scalars["uuid"];
    /** An object relationship */
    tag: Collection_Tag;
    tagId: Scalars["uuid"];
};

/** aggregated selection of "content.ItemTag" */
export type Content_ItemTag_Aggregate = {
    __typename?: "content_ItemTag_aggregate";
    aggregate?: Maybe<Content_ItemTag_Aggregate_Fields>;
    nodes: Array<Content_ItemTag>;
};

/** aggregate fields of "content.ItemTag" */
export type Content_ItemTag_Aggregate_Fields = {
    __typename?: "content_ItemTag_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Content_ItemTag_Max_Fields>;
    min?: Maybe<Content_ItemTag_Min_Fields>;
};

/** aggregate fields of "content.ItemTag" */
export type Content_ItemTag_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Content_ItemTag_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "content.ItemTag" */
export type Content_ItemTag_Aggregate_Order_By = {
    count?: Maybe<Order_By>;
    max?: Maybe<Content_ItemTag_Max_Order_By>;
    min?: Maybe<Content_ItemTag_Min_Order_By>;
};

/** input type for inserting array relation for remote table "content.ItemTag" */
export type Content_ItemTag_Arr_Rel_Insert_Input = {
    data: Array<Content_ItemTag_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Content_ItemTag_On_Conflict>;
};

/** Boolean expression to filter rows from the table "content.ItemTag". All fields are combined with a logical 'AND'. */
export type Content_ItemTag_Bool_Exp = {
    _and?: Maybe<Array<Content_ItemTag_Bool_Exp>>;
    _not?: Maybe<Content_ItemTag_Bool_Exp>;
    _or?: Maybe<Array<Content_ItemTag_Bool_Exp>>;
    id?: Maybe<Uuid_Comparison_Exp>;
    item?: Maybe<Content_Item_Bool_Exp>;
    itemId?: Maybe<Uuid_Comparison_Exp>;
    tag?: Maybe<Collection_Tag_Bool_Exp>;
    tagId?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "content.ItemTag" */
export enum Content_ItemTag_Constraint {
    /** unique or primary key constraint */
    ItemTagItemIdTagIdKey = "ItemTag_itemId_tagId_key",
    /** unique or primary key constraint */
    ItemTagPkey = "ItemTag_pkey",
}

/** input type for inserting data into table "content.ItemTag" */
export type Content_ItemTag_Insert_Input = {
    id?: Maybe<Scalars["uuid"]>;
    item?: Maybe<Content_Item_Obj_Rel_Insert_Input>;
    itemId?: Maybe<Scalars["uuid"]>;
    tag?: Maybe<Collection_Tag_Obj_Rel_Insert_Input>;
    tagId?: Maybe<Scalars["uuid"]>;
};

/** aggregate max on columns */
export type Content_ItemTag_Max_Fields = {
    __typename?: "content_ItemTag_max_fields";
    id?: Maybe<Scalars["uuid"]>;
    itemId?: Maybe<Scalars["uuid"]>;
    tagId?: Maybe<Scalars["uuid"]>;
};

/** order by max() on columns of table "content.ItemTag" */
export type Content_ItemTag_Max_Order_By = {
    id?: Maybe<Order_By>;
    itemId?: Maybe<Order_By>;
    tagId?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Content_ItemTag_Min_Fields = {
    __typename?: "content_ItemTag_min_fields";
    id?: Maybe<Scalars["uuid"]>;
    itemId?: Maybe<Scalars["uuid"]>;
    tagId?: Maybe<Scalars["uuid"]>;
};

/** order by min() on columns of table "content.ItemTag" */
export type Content_ItemTag_Min_Order_By = {
    id?: Maybe<Order_By>;
    itemId?: Maybe<Order_By>;
    tagId?: Maybe<Order_By>;
};

/** response of any mutation on the table "content.ItemTag" */
export type Content_ItemTag_Mutation_Response = {
    __typename?: "content_ItemTag_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Content_ItemTag>;
};

/** on conflict condition type for table "content.ItemTag" */
export type Content_ItemTag_On_Conflict = {
    constraint: Content_ItemTag_Constraint;
    update_columns?: Array<Content_ItemTag_Update_Column>;
    where?: Maybe<Content_ItemTag_Bool_Exp>;
};

/** Ordering options when selecting data from "content.ItemTag". */
export type Content_ItemTag_Order_By = {
    id?: Maybe<Order_By>;
    item?: Maybe<Content_Item_Order_By>;
    itemId?: Maybe<Order_By>;
    tag?: Maybe<Collection_Tag_Order_By>;
    tagId?: Maybe<Order_By>;
};

/** primary key columns input for table: content_ItemTag */
export type Content_ItemTag_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "content.ItemTag" */
export enum Content_ItemTag_Select_Column {
    /** column name */
    Id = "id",
    /** column name */
    ItemId = "itemId",
    /** column name */
    TagId = "tagId",
}

/** input type for updating data in table "content.ItemTag" */
export type Content_ItemTag_Set_Input = {
    id?: Maybe<Scalars["uuid"]>;
    itemId?: Maybe<Scalars["uuid"]>;
    tagId?: Maybe<Scalars["uuid"]>;
};

/** update columns of table "content.ItemTag" */
export enum Content_ItemTag_Update_Column {
    /** column name */
    Id = "id",
    /** column name */
    ItemId = "itemId",
    /** column name */
    TagId = "tagId",
}

/** columns and relationships of "content.ItemType" */
export type Content_ItemType = {
    __typename?: "content_ItemType";
    description: Scalars["String"];
    name: Scalars["String"];
};

/** aggregated selection of "content.ItemType" */
export type Content_ItemType_Aggregate = {
    __typename?: "content_ItemType_aggregate";
    aggregate?: Maybe<Content_ItemType_Aggregate_Fields>;
    nodes: Array<Content_ItemType>;
};

/** aggregate fields of "content.ItemType" */
export type Content_ItemType_Aggregate_Fields = {
    __typename?: "content_ItemType_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Content_ItemType_Max_Fields>;
    min?: Maybe<Content_ItemType_Min_Fields>;
};

/** aggregate fields of "content.ItemType" */
export type Content_ItemType_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Content_ItemType_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** Boolean expression to filter rows from the table "content.ItemType". All fields are combined with a logical 'AND'. */
export type Content_ItemType_Bool_Exp = {
    _and?: Maybe<Array<Content_ItemType_Bool_Exp>>;
    _not?: Maybe<Content_ItemType_Bool_Exp>;
    _or?: Maybe<Array<Content_ItemType_Bool_Exp>>;
    description?: Maybe<String_Comparison_Exp>;
    name?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "content.ItemType" */
export enum Content_ItemType_Constraint {
    /** unique or primary key constraint */
    ItemTypePkey = "ItemType_pkey",
}

export enum Content_ItemType_Enum {
    /** A demonstration. */
    Demonstration = "DEMONSTRATION",
    /** A keynote. */
    Keynote = "KEYNOTE",
    /** Conference main landing page. */
    LandingPage = "LANDING_PAGE",
    /** A generic group type - use sparingly. */
    Other = "OTHER",
    /** A paper. */
    Paper = "PAPER",
    /** A poster. */
    Poster = "POSTER",
    /** A presentation. */
    Presentation = "PRESENTATION",
    /** Content representing a whole session. */
    Session = "SESSION",
    /** A Q&A covering the whole session. */
    SessionQAndA = "SESSION_Q_AND_A",
    /** A scheduled social. */
    Social = "SOCIAL",
    /** A sponsor. */
    Sponsor = "SPONSOR",
    /** A symposium. */
    Symposium = "SYMPOSIUM",
    /** A tutorial. */
    Tutorial = "TUTORIAL",
    /** A workshop. */
    Workshop = "WORKSHOP",
}

/** Boolean expression to compare columns of type "content_ItemType_enum". All fields are combined with logical 'AND'. */
export type Content_ItemType_Enum_Comparison_Exp = {
    _eq?: Maybe<Content_ItemType_Enum>;
    _in?: Maybe<Array<Content_ItemType_Enum>>;
    _is_null?: Maybe<Scalars["Boolean"]>;
    _neq?: Maybe<Content_ItemType_Enum>;
    _nin?: Maybe<Array<Content_ItemType_Enum>>;
};

/** input type for inserting data into table "content.ItemType" */
export type Content_ItemType_Insert_Input = {
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** aggregate max on columns */
export type Content_ItemType_Max_Fields = {
    __typename?: "content_ItemType_max_fields";
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** aggregate min on columns */
export type Content_ItemType_Min_Fields = {
    __typename?: "content_ItemType_min_fields";
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** response of any mutation on the table "content.ItemType" */
export type Content_ItemType_Mutation_Response = {
    __typename?: "content_ItemType_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Content_ItemType>;
};

/** input type for inserting object relation for remote table "content.ItemType" */
export type Content_ItemType_Obj_Rel_Insert_Input = {
    data: Content_ItemType_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Content_ItemType_On_Conflict>;
};

/** on conflict condition type for table "content.ItemType" */
export type Content_ItemType_On_Conflict = {
    constraint: Content_ItemType_Constraint;
    update_columns?: Array<Content_ItemType_Update_Column>;
    where?: Maybe<Content_ItemType_Bool_Exp>;
};

/** Ordering options when selecting data from "content.ItemType". */
export type Content_ItemType_Order_By = {
    description?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
};

/** primary key columns input for table: content_ItemType */
export type Content_ItemType_Pk_Columns_Input = {
    name: Scalars["String"];
};

/** select columns of table "content.ItemType" */
export enum Content_ItemType_Select_Column {
    /** column name */
    Description = "description",
    /** column name */
    Name = "name",
}

/** input type for updating data in table "content.ItemType" */
export type Content_ItemType_Set_Input = {
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** update columns of table "content.ItemType" */
export enum Content_ItemType_Update_Column {
    /** column name */
    Description = "description",
    /** column name */
    Name = "name",
}

/** aggregated selection of "content.Item" */
export type Content_Item_Aggregate = {
    __typename?: "content_Item_aggregate";
    aggregate?: Maybe<Content_Item_Aggregate_Fields>;
    nodes: Array<Content_Item>;
};

/** aggregate fields of "content.Item" */
export type Content_Item_Aggregate_Fields = {
    __typename?: "content_Item_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Content_Item_Max_Fields>;
    min?: Maybe<Content_Item_Min_Fields>;
};

/** aggregate fields of "content.Item" */
export type Content_Item_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Content_Item_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "content.Item" */
export type Content_Item_Aggregate_Order_By = {
    count?: Maybe<Order_By>;
    max?: Maybe<Content_Item_Max_Order_By>;
    min?: Maybe<Content_Item_Min_Order_By>;
};

/** input type for inserting array relation for remote table "content.Item" */
export type Content_Item_Arr_Rel_Insert_Input = {
    data: Array<Content_Item_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Content_Item_On_Conflict>;
};

/** Boolean expression to filter rows from the table "content.Item". All fields are combined with a logical 'AND'. */
export type Content_Item_Bool_Exp = {
    _and?: Maybe<Array<Content_Item_Bool_Exp>>;
    _not?: Maybe<Content_Item_Bool_Exp>;
    _or?: Maybe<Array<Content_Item_Bool_Exp>>;
    chat?: Maybe<Chat_Chat_Bool_Exp>;
    chatId?: Maybe<Uuid_Comparison_Exp>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    createdAt?: Maybe<Timestamptz_Comparison_Exp>;
    elements?: Maybe<Content_Element_Bool_Exp>;
    events?: Maybe<Schedule_Event_Bool_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    itemExhibitions?: Maybe<Content_ItemExhibition_Bool_Exp>;
    itemPeople?: Maybe<Content_ItemProgramPerson_Bool_Exp>;
    itemTags?: Maybe<Content_ItemTag_Bool_Exp>;
    originatingData?: Maybe<Conference_OriginatingData_Bool_Exp>;
    originatingDataId?: Maybe<Uuid_Comparison_Exp>;
    room?: Maybe<Room_Room_Bool_Exp>;
    rooms?: Maybe<Room_Room_Bool_Exp>;
    shortTitle?: Maybe<String_Comparison_Exp>;
    stats?: Maybe<Analytics_ContentItemStats_Bool_Exp>;
    title?: Maybe<String_Comparison_Exp>;
    totalViewsStat?: Maybe<Analytics_ItemTotalViews_Bool_Exp>;
    type?: Maybe<Content_ItemType_Bool_Exp>;
    typeName?: Maybe<Content_ItemType_Enum_Comparison_Exp>;
    updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "content.Item" */
export enum Content_Item_Constraint {
    /** unique or primary key constraint */
    ItemPkey = "Item_pkey",
}

/** input type for inserting data into table "content.Item" */
export type Content_Item_Insert_Input = {
    chat?: Maybe<Chat_Chat_Obj_Rel_Insert_Input>;
    chatId?: Maybe<Scalars["uuid"]>;
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    elements?: Maybe<Content_Element_Arr_Rel_Insert_Input>;
    events?: Maybe<Schedule_Event_Arr_Rel_Insert_Input>;
    id?: Maybe<Scalars["uuid"]>;
    itemExhibitions?: Maybe<Content_ItemExhibition_Arr_Rel_Insert_Input>;
    itemPeople?: Maybe<Content_ItemProgramPerson_Arr_Rel_Insert_Input>;
    itemTags?: Maybe<Content_ItemTag_Arr_Rel_Insert_Input>;
    originatingData?: Maybe<Conference_OriginatingData_Obj_Rel_Insert_Input>;
    originatingDataId?: Maybe<Scalars["uuid"]>;
    room?: Maybe<Room_Room_Obj_Rel_Insert_Input>;
    rooms?: Maybe<Room_Room_Arr_Rel_Insert_Input>;
    shortTitle?: Maybe<Scalars["String"]>;
    stats?: Maybe<Analytics_ContentItemStats_Arr_Rel_Insert_Input>;
    title?: Maybe<Scalars["String"]>;
    totalViewsStat?: Maybe<Analytics_ItemTotalViews_Obj_Rel_Insert_Input>;
    type?: Maybe<Content_ItemType_Obj_Rel_Insert_Input>;
    typeName?: Maybe<Content_ItemType_Enum>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Content_Item_Max_Fields = {
    __typename?: "content_Item_max_fields";
    chatId?: Maybe<Scalars["uuid"]>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    originatingDataId?: Maybe<Scalars["uuid"]>;
    shortTitle?: Maybe<Scalars["String"]>;
    title?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** order by max() on columns of table "content.Item" */
export type Content_Item_Max_Order_By = {
    chatId?: Maybe<Order_By>;
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    originatingDataId?: Maybe<Order_By>;
    shortTitle?: Maybe<Order_By>;
    title?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Content_Item_Min_Fields = {
    __typename?: "content_Item_min_fields";
    chatId?: Maybe<Scalars["uuid"]>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    originatingDataId?: Maybe<Scalars["uuid"]>;
    shortTitle?: Maybe<Scalars["String"]>;
    title?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** order by min() on columns of table "content.Item" */
export type Content_Item_Min_Order_By = {
    chatId?: Maybe<Order_By>;
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    originatingDataId?: Maybe<Order_By>;
    shortTitle?: Maybe<Order_By>;
    title?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** response of any mutation on the table "content.Item" */
export type Content_Item_Mutation_Response = {
    __typename?: "content_Item_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Content_Item>;
};

/** input type for inserting object relation for remote table "content.Item" */
export type Content_Item_Obj_Rel_Insert_Input = {
    data: Content_Item_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Content_Item_On_Conflict>;
};

/** on conflict condition type for table "content.Item" */
export type Content_Item_On_Conflict = {
    constraint: Content_Item_Constraint;
    update_columns?: Array<Content_Item_Update_Column>;
    where?: Maybe<Content_Item_Bool_Exp>;
};

/** Ordering options when selecting data from "content.Item". */
export type Content_Item_Order_By = {
    chat?: Maybe<Chat_Chat_Order_By>;
    chatId?: Maybe<Order_By>;
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    elements_aggregate?: Maybe<Content_Element_Aggregate_Order_By>;
    events_aggregate?: Maybe<Schedule_Event_Aggregate_Order_By>;
    id?: Maybe<Order_By>;
    itemExhibitions_aggregate?: Maybe<Content_ItemExhibition_Aggregate_Order_By>;
    itemPeople_aggregate?: Maybe<Content_ItemProgramPerson_Aggregate_Order_By>;
    itemTags_aggregate?: Maybe<Content_ItemTag_Aggregate_Order_By>;
    originatingData?: Maybe<Conference_OriginatingData_Order_By>;
    originatingDataId?: Maybe<Order_By>;
    room?: Maybe<Room_Room_Order_By>;
    rooms_aggregate?: Maybe<Room_Room_Aggregate_Order_By>;
    shortTitle?: Maybe<Order_By>;
    stats_aggregate?: Maybe<Analytics_ContentItemStats_Aggregate_Order_By>;
    title?: Maybe<Order_By>;
    totalViewsStat?: Maybe<Analytics_ItemTotalViews_Order_By>;
    type?: Maybe<Content_ItemType_Order_By>;
    typeName?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** primary key columns input for table: content_Item */
export type Content_Item_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "content.Item" */
export enum Content_Item_Select_Column {
    /** column name */
    ChatId = "chatId",
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Id = "id",
    /** column name */
    OriginatingDataId = "originatingDataId",
    /** column name */
    ShortTitle = "shortTitle",
    /** column name */
    Title = "title",
    /** column name */
    TypeName = "typeName",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** input type for updating data in table "content.Item" */
export type Content_Item_Set_Input = {
    chatId?: Maybe<Scalars["uuid"]>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    originatingDataId?: Maybe<Scalars["uuid"]>;
    shortTitle?: Maybe<Scalars["String"]>;
    title?: Maybe<Scalars["String"]>;
    typeName?: Maybe<Content_ItemType_Enum>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** update columns of table "content.Item" */
export enum Content_Item_Update_Column {
    /** column name */
    ChatId = "chatId",
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Id = "id",
    /** column name */
    OriginatingDataId = "originatingDataId",
    /** column name */
    ShortTitle = "shortTitle",
    /** column name */
    Title = "title",
    /** column name */
    TypeName = "typeName",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** columns and relationships of "content.Uploader" */
export type Content_Uploader = {
    __typename?: "content_Uploader";
    /** An object relationship */
    conference: Conference_Conference;
    conferenceId: Scalars["uuid"];
    createdAt: Scalars["timestamptz"];
    /** An object relationship */
    element: Content_Element;
    elementId: Scalars["uuid"];
    email: Scalars["String"];
    emailsSentCount: Scalars["Int"];
    id: Scalars["uuid"];
    name: Scalars["String"];
    updatedAt: Scalars["timestamptz"];
};

/** aggregated selection of "content.Uploader" */
export type Content_Uploader_Aggregate = {
    __typename?: "content_Uploader_aggregate";
    aggregate?: Maybe<Content_Uploader_Aggregate_Fields>;
    nodes: Array<Content_Uploader>;
};

/** aggregate fields of "content.Uploader" */
export type Content_Uploader_Aggregate_Fields = {
    __typename?: "content_Uploader_aggregate_fields";
    avg?: Maybe<Content_Uploader_Avg_Fields>;
    count: Scalars["Int"];
    max?: Maybe<Content_Uploader_Max_Fields>;
    min?: Maybe<Content_Uploader_Min_Fields>;
    stddev?: Maybe<Content_Uploader_Stddev_Fields>;
    stddev_pop?: Maybe<Content_Uploader_Stddev_Pop_Fields>;
    stddev_samp?: Maybe<Content_Uploader_Stddev_Samp_Fields>;
    sum?: Maybe<Content_Uploader_Sum_Fields>;
    var_pop?: Maybe<Content_Uploader_Var_Pop_Fields>;
    var_samp?: Maybe<Content_Uploader_Var_Samp_Fields>;
    variance?: Maybe<Content_Uploader_Variance_Fields>;
};

/** aggregate fields of "content.Uploader" */
export type Content_Uploader_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Content_Uploader_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "content.Uploader" */
export type Content_Uploader_Aggregate_Order_By = {
    avg?: Maybe<Content_Uploader_Avg_Order_By>;
    count?: Maybe<Order_By>;
    max?: Maybe<Content_Uploader_Max_Order_By>;
    min?: Maybe<Content_Uploader_Min_Order_By>;
    stddev?: Maybe<Content_Uploader_Stddev_Order_By>;
    stddev_pop?: Maybe<Content_Uploader_Stddev_Pop_Order_By>;
    stddev_samp?: Maybe<Content_Uploader_Stddev_Samp_Order_By>;
    sum?: Maybe<Content_Uploader_Sum_Order_By>;
    var_pop?: Maybe<Content_Uploader_Var_Pop_Order_By>;
    var_samp?: Maybe<Content_Uploader_Var_Samp_Order_By>;
    variance?: Maybe<Content_Uploader_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "content.Uploader" */
export type Content_Uploader_Arr_Rel_Insert_Input = {
    data: Array<Content_Uploader_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Content_Uploader_On_Conflict>;
};

/** aggregate avg on columns */
export type Content_Uploader_Avg_Fields = {
    __typename?: "content_Uploader_avg_fields";
    emailsSentCount?: Maybe<Scalars["Float"]>;
};

/** order by avg() on columns of table "content.Uploader" */
export type Content_Uploader_Avg_Order_By = {
    emailsSentCount?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "content.Uploader". All fields are combined with a logical 'AND'. */
export type Content_Uploader_Bool_Exp = {
    _and?: Maybe<Array<Content_Uploader_Bool_Exp>>;
    _not?: Maybe<Content_Uploader_Bool_Exp>;
    _or?: Maybe<Array<Content_Uploader_Bool_Exp>>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    createdAt?: Maybe<Timestamptz_Comparison_Exp>;
    element?: Maybe<Content_Element_Bool_Exp>;
    elementId?: Maybe<Uuid_Comparison_Exp>;
    email?: Maybe<String_Comparison_Exp>;
    emailsSentCount?: Maybe<Int_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    name?: Maybe<String_Comparison_Exp>;
    updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "content.Uploader" */
export enum Content_Uploader_Constraint {
    /** unique or primary key constraint */
    UploaderElementIdEmailKey = "Uploader_elementId_email_key",
    /** unique or primary key constraint */
    UploaderPkey = "Uploader_pkey",
}

/** input type for incrementing numeric columns in table "content.Uploader" */
export type Content_Uploader_Inc_Input = {
    emailsSentCount?: Maybe<Scalars["Int"]>;
};

/** input type for inserting data into table "content.Uploader" */
export type Content_Uploader_Insert_Input = {
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    element?: Maybe<Content_Element_Obj_Rel_Insert_Input>;
    elementId?: Maybe<Scalars["uuid"]>;
    email?: Maybe<Scalars["String"]>;
    emailsSentCount?: Maybe<Scalars["Int"]>;
    id?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Content_Uploader_Max_Fields = {
    __typename?: "content_Uploader_max_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    elementId?: Maybe<Scalars["uuid"]>;
    email?: Maybe<Scalars["String"]>;
    emailsSentCount?: Maybe<Scalars["Int"]>;
    id?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** order by max() on columns of table "content.Uploader" */
export type Content_Uploader_Max_Order_By = {
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    elementId?: Maybe<Order_By>;
    email?: Maybe<Order_By>;
    emailsSentCount?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Content_Uploader_Min_Fields = {
    __typename?: "content_Uploader_min_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    elementId?: Maybe<Scalars["uuid"]>;
    email?: Maybe<Scalars["String"]>;
    emailsSentCount?: Maybe<Scalars["Int"]>;
    id?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** order by min() on columns of table "content.Uploader" */
export type Content_Uploader_Min_Order_By = {
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    elementId?: Maybe<Order_By>;
    email?: Maybe<Order_By>;
    emailsSentCount?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** response of any mutation on the table "content.Uploader" */
export type Content_Uploader_Mutation_Response = {
    __typename?: "content_Uploader_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Content_Uploader>;
};

/** input type for inserting object relation for remote table "content.Uploader" */
export type Content_Uploader_Obj_Rel_Insert_Input = {
    data: Content_Uploader_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Content_Uploader_On_Conflict>;
};

/** on conflict condition type for table "content.Uploader" */
export type Content_Uploader_On_Conflict = {
    constraint: Content_Uploader_Constraint;
    update_columns?: Array<Content_Uploader_Update_Column>;
    where?: Maybe<Content_Uploader_Bool_Exp>;
};

/** Ordering options when selecting data from "content.Uploader". */
export type Content_Uploader_Order_By = {
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    element?: Maybe<Content_Element_Order_By>;
    elementId?: Maybe<Order_By>;
    email?: Maybe<Order_By>;
    emailsSentCount?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** primary key columns input for table: content_Uploader */
export type Content_Uploader_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "content.Uploader" */
export enum Content_Uploader_Select_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    ElementId = "elementId",
    /** column name */
    Email = "email",
    /** column name */
    EmailsSentCount = "emailsSentCount",
    /** column name */
    Id = "id",
    /** column name */
    Name = "name",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** input type for updating data in table "content.Uploader" */
export type Content_Uploader_Set_Input = {
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    elementId?: Maybe<Scalars["uuid"]>;
    email?: Maybe<Scalars["String"]>;
    emailsSentCount?: Maybe<Scalars["Int"]>;
    id?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate stddev on columns */
export type Content_Uploader_Stddev_Fields = {
    __typename?: "content_Uploader_stddev_fields";
    emailsSentCount?: Maybe<Scalars["Float"]>;
};

/** order by stddev() on columns of table "content.Uploader" */
export type Content_Uploader_Stddev_Order_By = {
    emailsSentCount?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Content_Uploader_Stddev_Pop_Fields = {
    __typename?: "content_Uploader_stddev_pop_fields";
    emailsSentCount?: Maybe<Scalars["Float"]>;
};

/** order by stddev_pop() on columns of table "content.Uploader" */
export type Content_Uploader_Stddev_Pop_Order_By = {
    emailsSentCount?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Content_Uploader_Stddev_Samp_Fields = {
    __typename?: "content_Uploader_stddev_samp_fields";
    emailsSentCount?: Maybe<Scalars["Float"]>;
};

/** order by stddev_samp() on columns of table "content.Uploader" */
export type Content_Uploader_Stddev_Samp_Order_By = {
    emailsSentCount?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Content_Uploader_Sum_Fields = {
    __typename?: "content_Uploader_sum_fields";
    emailsSentCount?: Maybe<Scalars["Int"]>;
};

/** order by sum() on columns of table "content.Uploader" */
export type Content_Uploader_Sum_Order_By = {
    emailsSentCount?: Maybe<Order_By>;
};

/** update columns of table "content.Uploader" */
export enum Content_Uploader_Update_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    ElementId = "elementId",
    /** column name */
    Email = "email",
    /** column name */
    EmailsSentCount = "emailsSentCount",
    /** column name */
    Id = "id",
    /** column name */
    Name = "name",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** aggregate var_pop on columns */
export type Content_Uploader_Var_Pop_Fields = {
    __typename?: "content_Uploader_var_pop_fields";
    emailsSentCount?: Maybe<Scalars["Float"]>;
};

/** order by var_pop() on columns of table "content.Uploader" */
export type Content_Uploader_Var_Pop_Order_By = {
    emailsSentCount?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Content_Uploader_Var_Samp_Fields = {
    __typename?: "content_Uploader_var_samp_fields";
    emailsSentCount?: Maybe<Scalars["Float"]>;
};

/** order by var_samp() on columns of table "content.Uploader" */
export type Content_Uploader_Var_Samp_Order_By = {
    emailsSentCount?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Content_Uploader_Variance_Fields = {
    __typename?: "content_Uploader_variance_fields";
    emailsSentCount?: Maybe<Scalars["Float"]>;
};

/** order by variance() on columns of table "content.Uploader" */
export type Content_Uploader_Variance_Order_By = {
    emailsSentCount?: Maybe<Order_By>;
};

/** columns and relationships of "job_queues.ChannelStackCreateJob" */
export type Job_Queues_ChannelStackCreateJob = {
    __typename?: "job_queues_ChannelStackCreateJob";
    /** An object relationship */
    conference: Conference_Conference;
    conferenceId: Scalars["uuid"];
    created_at: Scalars["timestamptz"];
    id: Scalars["uuid"];
    /** An object relationship */
    jobStatus: Video_JobStatus;
    jobStatusName: Video_JobStatus_Enum;
    message?: Maybe<Scalars["String"]>;
    /** An object relationship */
    room: Room_Room;
    roomId: Scalars["uuid"];
    stackLogicalResourceId: Scalars["String"];
    updated_at: Scalars["timestamptz"];
};

/** aggregated selection of "job_queues.ChannelStackCreateJob" */
export type Job_Queues_ChannelStackCreateJob_Aggregate = {
    __typename?: "job_queues_ChannelStackCreateJob_aggregate";
    aggregate?: Maybe<Job_Queues_ChannelStackCreateJob_Aggregate_Fields>;
    nodes: Array<Job_Queues_ChannelStackCreateJob>;
};

/** aggregate fields of "job_queues.ChannelStackCreateJob" */
export type Job_Queues_ChannelStackCreateJob_Aggregate_Fields = {
    __typename?: "job_queues_ChannelStackCreateJob_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Job_Queues_ChannelStackCreateJob_Max_Fields>;
    min?: Maybe<Job_Queues_ChannelStackCreateJob_Min_Fields>;
};

/** aggregate fields of "job_queues.ChannelStackCreateJob" */
export type Job_Queues_ChannelStackCreateJob_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Job_Queues_ChannelStackCreateJob_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "job_queues.ChannelStackCreateJob" */
export type Job_Queues_ChannelStackCreateJob_Aggregate_Order_By = {
    count?: Maybe<Order_By>;
    max?: Maybe<Job_Queues_ChannelStackCreateJob_Max_Order_By>;
    min?: Maybe<Job_Queues_ChannelStackCreateJob_Min_Order_By>;
};

/** input type for inserting array relation for remote table "job_queues.ChannelStackCreateJob" */
export type Job_Queues_ChannelStackCreateJob_Arr_Rel_Insert_Input = {
    data: Array<Job_Queues_ChannelStackCreateJob_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Job_Queues_ChannelStackCreateJob_On_Conflict>;
};

/** Boolean expression to filter rows from the table "job_queues.ChannelStackCreateJob". All fields are combined with a logical 'AND'. */
export type Job_Queues_ChannelStackCreateJob_Bool_Exp = {
    _and?: Maybe<Array<Job_Queues_ChannelStackCreateJob_Bool_Exp>>;
    _not?: Maybe<Job_Queues_ChannelStackCreateJob_Bool_Exp>;
    _or?: Maybe<Array<Job_Queues_ChannelStackCreateJob_Bool_Exp>>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    created_at?: Maybe<Timestamptz_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    jobStatus?: Maybe<Video_JobStatus_Bool_Exp>;
    jobStatusName?: Maybe<Video_JobStatus_Enum_Comparison_Exp>;
    message?: Maybe<String_Comparison_Exp>;
    room?: Maybe<Room_Room_Bool_Exp>;
    roomId?: Maybe<Uuid_Comparison_Exp>;
    stackLogicalResourceId?: Maybe<String_Comparison_Exp>;
    updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "job_queues.ChannelStackCreateJob" */
export enum Job_Queues_ChannelStackCreateJob_Constraint {
    /** unique or primary key constraint */
    ChannelStackCreateJobPkey = "ChannelStackCreateJob_pkey",
    /** unique or primary key constraint */
    ChannelStackCreateJobStackLogicalResourceIdKey = "ChannelStackCreateJob_stackLogicalResourceId_key",
}

/** input type for inserting data into table "job_queues.ChannelStackCreateJob" */
export type Job_Queues_ChannelStackCreateJob_Insert_Input = {
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    jobStatus?: Maybe<Video_JobStatus_Obj_Rel_Insert_Input>;
    jobStatusName?: Maybe<Video_JobStatus_Enum>;
    message?: Maybe<Scalars["String"]>;
    room?: Maybe<Room_Room_Obj_Rel_Insert_Input>;
    roomId?: Maybe<Scalars["uuid"]>;
    stackLogicalResourceId?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Job_Queues_ChannelStackCreateJob_Max_Fields = {
    __typename?: "job_queues_ChannelStackCreateJob_max_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    message?: Maybe<Scalars["String"]>;
    roomId?: Maybe<Scalars["uuid"]>;
    stackLogicalResourceId?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** order by max() on columns of table "job_queues.ChannelStackCreateJob" */
export type Job_Queues_ChannelStackCreateJob_Max_Order_By = {
    conferenceId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    message?: Maybe<Order_By>;
    roomId?: Maybe<Order_By>;
    stackLogicalResourceId?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Job_Queues_ChannelStackCreateJob_Min_Fields = {
    __typename?: "job_queues_ChannelStackCreateJob_min_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    message?: Maybe<Scalars["String"]>;
    roomId?: Maybe<Scalars["uuid"]>;
    stackLogicalResourceId?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** order by min() on columns of table "job_queues.ChannelStackCreateJob" */
export type Job_Queues_ChannelStackCreateJob_Min_Order_By = {
    conferenceId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    message?: Maybe<Order_By>;
    roomId?: Maybe<Order_By>;
    stackLogicalResourceId?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** response of any mutation on the table "job_queues.ChannelStackCreateJob" */
export type Job_Queues_ChannelStackCreateJob_Mutation_Response = {
    __typename?: "job_queues_ChannelStackCreateJob_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Job_Queues_ChannelStackCreateJob>;
};

/** input type for inserting object relation for remote table "job_queues.ChannelStackCreateJob" */
export type Job_Queues_ChannelStackCreateJob_Obj_Rel_Insert_Input = {
    data: Job_Queues_ChannelStackCreateJob_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Job_Queues_ChannelStackCreateJob_On_Conflict>;
};

/** on conflict condition type for table "job_queues.ChannelStackCreateJob" */
export type Job_Queues_ChannelStackCreateJob_On_Conflict = {
    constraint: Job_Queues_ChannelStackCreateJob_Constraint;
    update_columns?: Array<Job_Queues_ChannelStackCreateJob_Update_Column>;
    where?: Maybe<Job_Queues_ChannelStackCreateJob_Bool_Exp>;
};

/** Ordering options when selecting data from "job_queues.ChannelStackCreateJob". */
export type Job_Queues_ChannelStackCreateJob_Order_By = {
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    jobStatus?: Maybe<Video_JobStatus_Order_By>;
    jobStatusName?: Maybe<Order_By>;
    message?: Maybe<Order_By>;
    room?: Maybe<Room_Room_Order_By>;
    roomId?: Maybe<Order_By>;
    stackLogicalResourceId?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** primary key columns input for table: job_queues_ChannelStackCreateJob */
export type Job_Queues_ChannelStackCreateJob_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "job_queues.ChannelStackCreateJob" */
export enum Job_Queues_ChannelStackCreateJob_Select_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    Id = "id",
    /** column name */
    JobStatusName = "jobStatusName",
    /** column name */
    Message = "message",
    /** column name */
    RoomId = "roomId",
    /** column name */
    StackLogicalResourceId = "stackLogicalResourceId",
    /** column name */
    UpdatedAt = "updated_at",
}

/** input type for updating data in table "job_queues.ChannelStackCreateJob" */
export type Job_Queues_ChannelStackCreateJob_Set_Input = {
    conferenceId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    jobStatusName?: Maybe<Video_JobStatus_Enum>;
    message?: Maybe<Scalars["String"]>;
    roomId?: Maybe<Scalars["uuid"]>;
    stackLogicalResourceId?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** update columns of table "job_queues.ChannelStackCreateJob" */
export enum Job_Queues_ChannelStackCreateJob_Update_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    Id = "id",
    /** column name */
    JobStatusName = "jobStatusName",
    /** column name */
    Message = "message",
    /** column name */
    RoomId = "roomId",
    /** column name */
    StackLogicalResourceId = "stackLogicalResourceId",
    /** column name */
    UpdatedAt = "updated_at",
}

/** columns and relationships of "job_queues.ChannelStackDeleteJob" */
export type Job_Queues_ChannelStackDeleteJob = {
    __typename?: "job_queues_ChannelStackDeleteJob";
    cloudFormationStackArn: Scalars["String"];
    createdAt: Scalars["timestamptz"];
    id: Scalars["uuid"];
    jobStatusName: Video_JobStatus_Enum;
    mediaLiveChannelId: Scalars["String"];
    message?: Maybe<Scalars["String"]>;
    updatedAt: Scalars["timestamptz"];
};

/** aggregated selection of "job_queues.ChannelStackDeleteJob" */
export type Job_Queues_ChannelStackDeleteJob_Aggregate = {
    __typename?: "job_queues_ChannelStackDeleteJob_aggregate";
    aggregate?: Maybe<Job_Queues_ChannelStackDeleteJob_Aggregate_Fields>;
    nodes: Array<Job_Queues_ChannelStackDeleteJob>;
};

/** aggregate fields of "job_queues.ChannelStackDeleteJob" */
export type Job_Queues_ChannelStackDeleteJob_Aggregate_Fields = {
    __typename?: "job_queues_ChannelStackDeleteJob_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Job_Queues_ChannelStackDeleteJob_Max_Fields>;
    min?: Maybe<Job_Queues_ChannelStackDeleteJob_Min_Fields>;
};

/** aggregate fields of "job_queues.ChannelStackDeleteJob" */
export type Job_Queues_ChannelStackDeleteJob_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Job_Queues_ChannelStackDeleteJob_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** Boolean expression to filter rows from the table "job_queues.ChannelStackDeleteJob". All fields are combined with a logical 'AND'. */
export type Job_Queues_ChannelStackDeleteJob_Bool_Exp = {
    _and?: Maybe<Array<Job_Queues_ChannelStackDeleteJob_Bool_Exp>>;
    _not?: Maybe<Job_Queues_ChannelStackDeleteJob_Bool_Exp>;
    _or?: Maybe<Array<Job_Queues_ChannelStackDeleteJob_Bool_Exp>>;
    cloudFormationStackArn?: Maybe<String_Comparison_Exp>;
    createdAt?: Maybe<Timestamptz_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    jobStatusName?: Maybe<Video_JobStatus_Enum_Comparison_Exp>;
    mediaLiveChannelId?: Maybe<String_Comparison_Exp>;
    message?: Maybe<String_Comparison_Exp>;
    updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "job_queues.ChannelStackDeleteJob" */
export enum Job_Queues_ChannelStackDeleteJob_Constraint {
    /** unique or primary key constraint */
    ChannelStackDeleteJobPkey = "ChannelStackDeleteJob_pkey",
}

/** input type for inserting data into table "job_queues.ChannelStackDeleteJob" */
export type Job_Queues_ChannelStackDeleteJob_Insert_Input = {
    cloudFormationStackArn?: Maybe<Scalars["String"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    jobStatusName?: Maybe<Video_JobStatus_Enum>;
    mediaLiveChannelId?: Maybe<Scalars["String"]>;
    message?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Job_Queues_ChannelStackDeleteJob_Max_Fields = {
    __typename?: "job_queues_ChannelStackDeleteJob_max_fields";
    cloudFormationStackArn?: Maybe<Scalars["String"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    mediaLiveChannelId?: Maybe<Scalars["String"]>;
    message?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate min on columns */
export type Job_Queues_ChannelStackDeleteJob_Min_Fields = {
    __typename?: "job_queues_ChannelStackDeleteJob_min_fields";
    cloudFormationStackArn?: Maybe<Scalars["String"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    mediaLiveChannelId?: Maybe<Scalars["String"]>;
    message?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** response of any mutation on the table "job_queues.ChannelStackDeleteJob" */
export type Job_Queues_ChannelStackDeleteJob_Mutation_Response = {
    __typename?: "job_queues_ChannelStackDeleteJob_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Job_Queues_ChannelStackDeleteJob>;
};

/** on conflict condition type for table "job_queues.ChannelStackDeleteJob" */
export type Job_Queues_ChannelStackDeleteJob_On_Conflict = {
    constraint: Job_Queues_ChannelStackDeleteJob_Constraint;
    update_columns?: Array<Job_Queues_ChannelStackDeleteJob_Update_Column>;
    where?: Maybe<Job_Queues_ChannelStackDeleteJob_Bool_Exp>;
};

/** Ordering options when selecting data from "job_queues.ChannelStackDeleteJob". */
export type Job_Queues_ChannelStackDeleteJob_Order_By = {
    cloudFormationStackArn?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    jobStatusName?: Maybe<Order_By>;
    mediaLiveChannelId?: Maybe<Order_By>;
    message?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** primary key columns input for table: job_queues_ChannelStackDeleteJob */
export type Job_Queues_ChannelStackDeleteJob_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "job_queues.ChannelStackDeleteJob" */
export enum Job_Queues_ChannelStackDeleteJob_Select_Column {
    /** column name */
    CloudFormationStackArn = "cloudFormationStackArn",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Id = "id",
    /** column name */
    JobStatusName = "jobStatusName",
    /** column name */
    MediaLiveChannelId = "mediaLiveChannelId",
    /** column name */
    Message = "message",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** input type for updating data in table "job_queues.ChannelStackDeleteJob" */
export type Job_Queues_ChannelStackDeleteJob_Set_Input = {
    cloudFormationStackArn?: Maybe<Scalars["String"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    jobStatusName?: Maybe<Video_JobStatus_Enum>;
    mediaLiveChannelId?: Maybe<Scalars["String"]>;
    message?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** update columns of table "job_queues.ChannelStackDeleteJob" */
export enum Job_Queues_ChannelStackDeleteJob_Update_Column {
    /** column name */
    CloudFormationStackArn = "cloudFormationStackArn",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Id = "id",
    /** column name */
    JobStatusName = "jobStatusName",
    /** column name */
    MediaLiveChannelId = "mediaLiveChannelId",
    /** column name */
    Message = "message",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** columns and relationships of "job_queues.CombineVideosJob" */
export type Job_Queues_CombineVideosJob = {
    __typename?: "job_queues_CombineVideosJob";
    /** An object relationship */
    conference: Conference_Conference;
    conferenceId: Scalars["uuid"];
    createdByRegistrantId?: Maybe<Scalars["uuid"]>;
    created_at: Scalars["timestamptz"];
    data: Scalars["jsonb"];
    id: Scalars["uuid"];
    /** An object relationship */
    jobStatus: Video_JobStatus;
    jobStatusName: Video_JobStatus_Enum;
    mediaConvertJobId?: Maybe<Scalars["String"]>;
    message?: Maybe<Scalars["String"]>;
    outputName: Scalars["String"];
    /** An object relationship */
    registrant?: Maybe<Registrant_Registrant>;
    updated_at: Scalars["timestamptz"];
};

/** columns and relationships of "job_queues.CombineVideosJob" */
export type Job_Queues_CombineVideosJobDataArgs = {
    path?: Maybe<Scalars["String"]>;
};

/** aggregated selection of "job_queues.CombineVideosJob" */
export type Job_Queues_CombineVideosJob_Aggregate = {
    __typename?: "job_queues_CombineVideosJob_aggregate";
    aggregate?: Maybe<Job_Queues_CombineVideosJob_Aggregate_Fields>;
    nodes: Array<Job_Queues_CombineVideosJob>;
};

/** aggregate fields of "job_queues.CombineVideosJob" */
export type Job_Queues_CombineVideosJob_Aggregate_Fields = {
    __typename?: "job_queues_CombineVideosJob_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Job_Queues_CombineVideosJob_Max_Fields>;
    min?: Maybe<Job_Queues_CombineVideosJob_Min_Fields>;
};

/** aggregate fields of "job_queues.CombineVideosJob" */
export type Job_Queues_CombineVideosJob_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Job_Queues_CombineVideosJob_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** append existing jsonb value of filtered columns with new jsonb value */
export type Job_Queues_CombineVideosJob_Append_Input = {
    data?: Maybe<Scalars["jsonb"]>;
};

/** Boolean expression to filter rows from the table "job_queues.CombineVideosJob". All fields are combined with a logical 'AND'. */
export type Job_Queues_CombineVideosJob_Bool_Exp = {
    _and?: Maybe<Array<Job_Queues_CombineVideosJob_Bool_Exp>>;
    _not?: Maybe<Job_Queues_CombineVideosJob_Bool_Exp>;
    _or?: Maybe<Array<Job_Queues_CombineVideosJob_Bool_Exp>>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    createdByRegistrantId?: Maybe<Uuid_Comparison_Exp>;
    created_at?: Maybe<Timestamptz_Comparison_Exp>;
    data?: Maybe<Jsonb_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    jobStatus?: Maybe<Video_JobStatus_Bool_Exp>;
    jobStatusName?: Maybe<Video_JobStatus_Enum_Comparison_Exp>;
    mediaConvertJobId?: Maybe<String_Comparison_Exp>;
    message?: Maybe<String_Comparison_Exp>;
    outputName?: Maybe<String_Comparison_Exp>;
    registrant?: Maybe<Registrant_Registrant_Bool_Exp>;
    updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "job_queues.CombineVideosJob" */
export enum Job_Queues_CombineVideosJob_Constraint {
    /** unique or primary key constraint */
    CombineVideosJobPkey = "CombineVideosJob_pkey",
}

/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export type Job_Queues_CombineVideosJob_Delete_At_Path_Input = {
    data?: Maybe<Array<Scalars["String"]>>;
};

/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
export type Job_Queues_CombineVideosJob_Delete_Elem_Input = {
    data?: Maybe<Scalars["Int"]>;
};

/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export type Job_Queues_CombineVideosJob_Delete_Key_Input = {
    data?: Maybe<Scalars["String"]>;
};

/** input type for inserting data into table "job_queues.CombineVideosJob" */
export type Job_Queues_CombineVideosJob_Insert_Input = {
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdByRegistrantId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    data?: Maybe<Scalars["jsonb"]>;
    id?: Maybe<Scalars["uuid"]>;
    jobStatus?: Maybe<Video_JobStatus_Obj_Rel_Insert_Input>;
    jobStatusName?: Maybe<Video_JobStatus_Enum>;
    mediaConvertJobId?: Maybe<Scalars["String"]>;
    message?: Maybe<Scalars["String"]>;
    outputName?: Maybe<Scalars["String"]>;
    registrant?: Maybe<Registrant_Registrant_Obj_Rel_Insert_Input>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Job_Queues_CombineVideosJob_Max_Fields = {
    __typename?: "job_queues_CombineVideosJob_max_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdByRegistrantId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    mediaConvertJobId?: Maybe<Scalars["String"]>;
    message?: Maybe<Scalars["String"]>;
    outputName?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate min on columns */
export type Job_Queues_CombineVideosJob_Min_Fields = {
    __typename?: "job_queues_CombineVideosJob_min_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdByRegistrantId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    mediaConvertJobId?: Maybe<Scalars["String"]>;
    message?: Maybe<Scalars["String"]>;
    outputName?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** response of any mutation on the table "job_queues.CombineVideosJob" */
export type Job_Queues_CombineVideosJob_Mutation_Response = {
    __typename?: "job_queues_CombineVideosJob_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Job_Queues_CombineVideosJob>;
};

/** on conflict condition type for table "job_queues.CombineVideosJob" */
export type Job_Queues_CombineVideosJob_On_Conflict = {
    constraint: Job_Queues_CombineVideosJob_Constraint;
    update_columns?: Array<Job_Queues_CombineVideosJob_Update_Column>;
    where?: Maybe<Job_Queues_CombineVideosJob_Bool_Exp>;
};

/** Ordering options when selecting data from "job_queues.CombineVideosJob". */
export type Job_Queues_CombineVideosJob_Order_By = {
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    createdByRegistrantId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    data?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    jobStatus?: Maybe<Video_JobStatus_Order_By>;
    jobStatusName?: Maybe<Order_By>;
    mediaConvertJobId?: Maybe<Order_By>;
    message?: Maybe<Order_By>;
    outputName?: Maybe<Order_By>;
    registrant?: Maybe<Registrant_Registrant_Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** primary key columns input for table: job_queues_CombineVideosJob */
export type Job_Queues_CombineVideosJob_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** prepend existing jsonb value of filtered columns with new jsonb value */
export type Job_Queues_CombineVideosJob_Prepend_Input = {
    data?: Maybe<Scalars["jsonb"]>;
};

/** select columns of table "job_queues.CombineVideosJob" */
export enum Job_Queues_CombineVideosJob_Select_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedByRegistrantId = "createdByRegistrantId",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    Data = "data",
    /** column name */
    Id = "id",
    /** column name */
    JobStatusName = "jobStatusName",
    /** column name */
    MediaConvertJobId = "mediaConvertJobId",
    /** column name */
    Message = "message",
    /** column name */
    OutputName = "outputName",
    /** column name */
    UpdatedAt = "updated_at",
}

/** input type for updating data in table "job_queues.CombineVideosJob" */
export type Job_Queues_CombineVideosJob_Set_Input = {
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdByRegistrantId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    data?: Maybe<Scalars["jsonb"]>;
    id?: Maybe<Scalars["uuid"]>;
    jobStatusName?: Maybe<Video_JobStatus_Enum>;
    mediaConvertJobId?: Maybe<Scalars["String"]>;
    message?: Maybe<Scalars["String"]>;
    outputName?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** update columns of table "job_queues.CombineVideosJob" */
export enum Job_Queues_CombineVideosJob_Update_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedByRegistrantId = "createdByRegistrantId",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    Data = "data",
    /** column name */
    Id = "id",
    /** column name */
    JobStatusName = "jobStatusName",
    /** column name */
    MediaConvertJobId = "mediaConvertJobId",
    /** column name */
    Message = "message",
    /** column name */
    OutputName = "outputName",
    /** column name */
    UpdatedAt = "updated_at",
}

/** columns and relationships of "job_queues.CustomEmailJob" */
export type Job_Queues_CustomEmailJob = {
    __typename?: "job_queues_CustomEmailJob";
    /** An object relationship */
    conference: Conference_Conference;
    conferenceId: Scalars["uuid"];
    created_at: Scalars["timestamptz"];
    htmlBody: Scalars["String"];
    id: Scalars["uuid"];
    processed: Scalars["Boolean"];
    registrantIds: Scalars["jsonb"];
    subject: Scalars["String"];
    updated_at: Scalars["timestamptz"];
};

/** columns and relationships of "job_queues.CustomEmailJob" */
export type Job_Queues_CustomEmailJobRegistrantIdsArgs = {
    path?: Maybe<Scalars["String"]>;
};

/** aggregated selection of "job_queues.CustomEmailJob" */
export type Job_Queues_CustomEmailJob_Aggregate = {
    __typename?: "job_queues_CustomEmailJob_aggregate";
    aggregate?: Maybe<Job_Queues_CustomEmailJob_Aggregate_Fields>;
    nodes: Array<Job_Queues_CustomEmailJob>;
};

/** aggregate fields of "job_queues.CustomEmailJob" */
export type Job_Queues_CustomEmailJob_Aggregate_Fields = {
    __typename?: "job_queues_CustomEmailJob_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Job_Queues_CustomEmailJob_Max_Fields>;
    min?: Maybe<Job_Queues_CustomEmailJob_Min_Fields>;
};

/** aggregate fields of "job_queues.CustomEmailJob" */
export type Job_Queues_CustomEmailJob_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Job_Queues_CustomEmailJob_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** append existing jsonb value of filtered columns with new jsonb value */
export type Job_Queues_CustomEmailJob_Append_Input = {
    registrantIds?: Maybe<Scalars["jsonb"]>;
};

/** Boolean expression to filter rows from the table "job_queues.CustomEmailJob". All fields are combined with a logical 'AND'. */
export type Job_Queues_CustomEmailJob_Bool_Exp = {
    _and?: Maybe<Array<Job_Queues_CustomEmailJob_Bool_Exp>>;
    _not?: Maybe<Job_Queues_CustomEmailJob_Bool_Exp>;
    _or?: Maybe<Array<Job_Queues_CustomEmailJob_Bool_Exp>>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    created_at?: Maybe<Timestamptz_Comparison_Exp>;
    htmlBody?: Maybe<String_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    processed?: Maybe<Boolean_Comparison_Exp>;
    registrantIds?: Maybe<Jsonb_Comparison_Exp>;
    subject?: Maybe<String_Comparison_Exp>;
    updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "job_queues.CustomEmailJob" */
export enum Job_Queues_CustomEmailJob_Constraint {
    /** unique or primary key constraint */
    CustomEmailJobPkey = "CustomEmailJob_pkey",
}

/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export type Job_Queues_CustomEmailJob_Delete_At_Path_Input = {
    registrantIds?: Maybe<Array<Scalars["String"]>>;
};

/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
export type Job_Queues_CustomEmailJob_Delete_Elem_Input = {
    registrantIds?: Maybe<Scalars["Int"]>;
};

/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export type Job_Queues_CustomEmailJob_Delete_Key_Input = {
    registrantIds?: Maybe<Scalars["String"]>;
};

/** input type for inserting data into table "job_queues.CustomEmailJob" */
export type Job_Queues_CustomEmailJob_Insert_Input = {
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    htmlBody?: Maybe<Scalars["String"]>;
    id?: Maybe<Scalars["uuid"]>;
    processed?: Maybe<Scalars["Boolean"]>;
    registrantIds?: Maybe<Scalars["jsonb"]>;
    subject?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Job_Queues_CustomEmailJob_Max_Fields = {
    __typename?: "job_queues_CustomEmailJob_max_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    htmlBody?: Maybe<Scalars["String"]>;
    id?: Maybe<Scalars["uuid"]>;
    subject?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate min on columns */
export type Job_Queues_CustomEmailJob_Min_Fields = {
    __typename?: "job_queues_CustomEmailJob_min_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    htmlBody?: Maybe<Scalars["String"]>;
    id?: Maybe<Scalars["uuid"]>;
    subject?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** response of any mutation on the table "job_queues.CustomEmailJob" */
export type Job_Queues_CustomEmailJob_Mutation_Response = {
    __typename?: "job_queues_CustomEmailJob_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Job_Queues_CustomEmailJob>;
};

/** on conflict condition type for table "job_queues.CustomEmailJob" */
export type Job_Queues_CustomEmailJob_On_Conflict = {
    constraint: Job_Queues_CustomEmailJob_Constraint;
    update_columns?: Array<Job_Queues_CustomEmailJob_Update_Column>;
    where?: Maybe<Job_Queues_CustomEmailJob_Bool_Exp>;
};

/** Ordering options when selecting data from "job_queues.CustomEmailJob". */
export type Job_Queues_CustomEmailJob_Order_By = {
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    htmlBody?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    processed?: Maybe<Order_By>;
    registrantIds?: Maybe<Order_By>;
    subject?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** primary key columns input for table: job_queues_CustomEmailJob */
export type Job_Queues_CustomEmailJob_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** prepend existing jsonb value of filtered columns with new jsonb value */
export type Job_Queues_CustomEmailJob_Prepend_Input = {
    registrantIds?: Maybe<Scalars["jsonb"]>;
};

/** select columns of table "job_queues.CustomEmailJob" */
export enum Job_Queues_CustomEmailJob_Select_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    HtmlBody = "htmlBody",
    /** column name */
    Id = "id",
    /** column name */
    Processed = "processed",
    /** column name */
    RegistrantIds = "registrantIds",
    /** column name */
    Subject = "subject",
    /** column name */
    UpdatedAt = "updated_at",
}

/** input type for updating data in table "job_queues.CustomEmailJob" */
export type Job_Queues_CustomEmailJob_Set_Input = {
    conferenceId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    htmlBody?: Maybe<Scalars["String"]>;
    id?: Maybe<Scalars["uuid"]>;
    processed?: Maybe<Scalars["Boolean"]>;
    registrantIds?: Maybe<Scalars["jsonb"]>;
    subject?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** update columns of table "job_queues.CustomEmailJob" */
export enum Job_Queues_CustomEmailJob_Update_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    HtmlBody = "htmlBody",
    /** column name */
    Id = "id",
    /** column name */
    Processed = "processed",
    /** column name */
    RegistrantIds = "registrantIds",
    /** column name */
    Subject = "subject",
    /** column name */
    UpdatedAt = "updated_at",
}

/** columns and relationships of "job_queues.InvitationEmailJob" */
export type Job_Queues_InvitationEmailJob = {
    __typename?: "job_queues_InvitationEmailJob";
    /** An object relationship */
    conference: Conference_Conference;
    conferenceId: Scalars["uuid"];
    createdAt: Scalars["timestamptz"];
    id: Scalars["uuid"];
    processed: Scalars["Boolean"];
    registrantIds: Scalars["jsonb"];
    sendRepeat: Scalars["Boolean"];
    updatedAt: Scalars["timestamptz"];
};

/** columns and relationships of "job_queues.InvitationEmailJob" */
export type Job_Queues_InvitationEmailJobRegistrantIdsArgs = {
    path?: Maybe<Scalars["String"]>;
};

/** aggregated selection of "job_queues.InvitationEmailJob" */
export type Job_Queues_InvitationEmailJob_Aggregate = {
    __typename?: "job_queues_InvitationEmailJob_aggregate";
    aggregate?: Maybe<Job_Queues_InvitationEmailJob_Aggregate_Fields>;
    nodes: Array<Job_Queues_InvitationEmailJob>;
};

/** aggregate fields of "job_queues.InvitationEmailJob" */
export type Job_Queues_InvitationEmailJob_Aggregate_Fields = {
    __typename?: "job_queues_InvitationEmailJob_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Job_Queues_InvitationEmailJob_Max_Fields>;
    min?: Maybe<Job_Queues_InvitationEmailJob_Min_Fields>;
};

/** aggregate fields of "job_queues.InvitationEmailJob" */
export type Job_Queues_InvitationEmailJob_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Job_Queues_InvitationEmailJob_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** append existing jsonb value of filtered columns with new jsonb value */
export type Job_Queues_InvitationEmailJob_Append_Input = {
    registrantIds?: Maybe<Scalars["jsonb"]>;
};

/** Boolean expression to filter rows from the table "job_queues.InvitationEmailJob". All fields are combined with a logical 'AND'. */
export type Job_Queues_InvitationEmailJob_Bool_Exp = {
    _and?: Maybe<Array<Job_Queues_InvitationEmailJob_Bool_Exp>>;
    _not?: Maybe<Job_Queues_InvitationEmailJob_Bool_Exp>;
    _or?: Maybe<Array<Job_Queues_InvitationEmailJob_Bool_Exp>>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    createdAt?: Maybe<Timestamptz_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    processed?: Maybe<Boolean_Comparison_Exp>;
    registrantIds?: Maybe<Jsonb_Comparison_Exp>;
    sendRepeat?: Maybe<Boolean_Comparison_Exp>;
    updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "job_queues.InvitationEmailJob" */
export enum Job_Queues_InvitationEmailJob_Constraint {
    /** unique or primary key constraint */
    InvitationEmailJobsPkey = "InvitationEmailJobs_pkey",
}

/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export type Job_Queues_InvitationEmailJob_Delete_At_Path_Input = {
    registrantIds?: Maybe<Array<Scalars["String"]>>;
};

/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
export type Job_Queues_InvitationEmailJob_Delete_Elem_Input = {
    registrantIds?: Maybe<Scalars["Int"]>;
};

/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export type Job_Queues_InvitationEmailJob_Delete_Key_Input = {
    registrantIds?: Maybe<Scalars["String"]>;
};

/** input type for inserting data into table "job_queues.InvitationEmailJob" */
export type Job_Queues_InvitationEmailJob_Insert_Input = {
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    processed?: Maybe<Scalars["Boolean"]>;
    registrantIds?: Maybe<Scalars["jsonb"]>;
    sendRepeat?: Maybe<Scalars["Boolean"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Job_Queues_InvitationEmailJob_Max_Fields = {
    __typename?: "job_queues_InvitationEmailJob_max_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate min on columns */
export type Job_Queues_InvitationEmailJob_Min_Fields = {
    __typename?: "job_queues_InvitationEmailJob_min_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** response of any mutation on the table "job_queues.InvitationEmailJob" */
export type Job_Queues_InvitationEmailJob_Mutation_Response = {
    __typename?: "job_queues_InvitationEmailJob_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Job_Queues_InvitationEmailJob>;
};

/** on conflict condition type for table "job_queues.InvitationEmailJob" */
export type Job_Queues_InvitationEmailJob_On_Conflict = {
    constraint: Job_Queues_InvitationEmailJob_Constraint;
    update_columns?: Array<Job_Queues_InvitationEmailJob_Update_Column>;
    where?: Maybe<Job_Queues_InvitationEmailJob_Bool_Exp>;
};

/** Ordering options when selecting data from "job_queues.InvitationEmailJob". */
export type Job_Queues_InvitationEmailJob_Order_By = {
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    processed?: Maybe<Order_By>;
    registrantIds?: Maybe<Order_By>;
    sendRepeat?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** primary key columns input for table: job_queues_InvitationEmailJob */
export type Job_Queues_InvitationEmailJob_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** prepend existing jsonb value of filtered columns with new jsonb value */
export type Job_Queues_InvitationEmailJob_Prepend_Input = {
    registrantIds?: Maybe<Scalars["jsonb"]>;
};

/** select columns of table "job_queues.InvitationEmailJob" */
export enum Job_Queues_InvitationEmailJob_Select_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Id = "id",
    /** column name */
    Processed = "processed",
    /** column name */
    RegistrantIds = "registrantIds",
    /** column name */
    SendRepeat = "sendRepeat",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** input type for updating data in table "job_queues.InvitationEmailJob" */
export type Job_Queues_InvitationEmailJob_Set_Input = {
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    processed?: Maybe<Scalars["Boolean"]>;
    registrantIds?: Maybe<Scalars["jsonb"]>;
    sendRepeat?: Maybe<Scalars["Boolean"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** update columns of table "job_queues.InvitationEmailJob" */
export enum Job_Queues_InvitationEmailJob_Update_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Id = "id",
    /** column name */
    Processed = "processed",
    /** column name */
    RegistrantIds = "registrantIds",
    /** column name */
    SendRepeat = "sendRepeat",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** columns and relationships of "job_queues.MediaPackageHarvestJob" */
export type Job_Queues_MediaPackageHarvestJob = {
    __typename?: "job_queues_MediaPackageHarvestJob";
    /** An object relationship */
    conference: Conference_Conference;
    conferenceId: Scalars["uuid"];
    created_at: Scalars["timestamptz"];
    /** An object relationship */
    event: Schedule_Event;
    eventId: Scalars["uuid"];
    id: Scalars["uuid"];
    /** An object relationship */
    jobStatus: Video_JobStatus;
    jobStatusName: Video_JobStatus_Enum;
    mediaPackageHarvestJobId?: Maybe<Scalars["String"]>;
    message?: Maybe<Scalars["String"]>;
    updated_at: Scalars["timestamptz"];
};

/** aggregated selection of "job_queues.MediaPackageHarvestJob" */
export type Job_Queues_MediaPackageHarvestJob_Aggregate = {
    __typename?: "job_queues_MediaPackageHarvestJob_aggregate";
    aggregate?: Maybe<Job_Queues_MediaPackageHarvestJob_Aggregate_Fields>;
    nodes: Array<Job_Queues_MediaPackageHarvestJob>;
};

/** aggregate fields of "job_queues.MediaPackageHarvestJob" */
export type Job_Queues_MediaPackageHarvestJob_Aggregate_Fields = {
    __typename?: "job_queues_MediaPackageHarvestJob_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Job_Queues_MediaPackageHarvestJob_Max_Fields>;
    min?: Maybe<Job_Queues_MediaPackageHarvestJob_Min_Fields>;
};

/** aggregate fields of "job_queues.MediaPackageHarvestJob" */
export type Job_Queues_MediaPackageHarvestJob_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Job_Queues_MediaPackageHarvestJob_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** Boolean expression to filter rows from the table "job_queues.MediaPackageHarvestJob". All fields are combined with a logical 'AND'. */
export type Job_Queues_MediaPackageHarvestJob_Bool_Exp = {
    _and?: Maybe<Array<Job_Queues_MediaPackageHarvestJob_Bool_Exp>>;
    _not?: Maybe<Job_Queues_MediaPackageHarvestJob_Bool_Exp>;
    _or?: Maybe<Array<Job_Queues_MediaPackageHarvestJob_Bool_Exp>>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    created_at?: Maybe<Timestamptz_Comparison_Exp>;
    event?: Maybe<Schedule_Event_Bool_Exp>;
    eventId?: Maybe<Uuid_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    jobStatus?: Maybe<Video_JobStatus_Bool_Exp>;
    jobStatusName?: Maybe<Video_JobStatus_Enum_Comparison_Exp>;
    mediaPackageHarvestJobId?: Maybe<String_Comparison_Exp>;
    message?: Maybe<String_Comparison_Exp>;
    updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "job_queues.MediaPackageHarvestJob" */
export enum Job_Queues_MediaPackageHarvestJob_Constraint {
    /** unique or primary key constraint */
    MediaPackageHarvestJobMediaPackageHarvestJobIdKey = "MediaPackageHarvestJob_mediaPackageHarvestJobId_key",
    /** unique or primary key constraint */
    MediaPackageHarvestJobPkey = "MediaPackageHarvestJob_pkey",
}

/** input type for inserting data into table "job_queues.MediaPackageHarvestJob" */
export type Job_Queues_MediaPackageHarvestJob_Insert_Input = {
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    event?: Maybe<Schedule_Event_Obj_Rel_Insert_Input>;
    eventId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    jobStatus?: Maybe<Video_JobStatus_Obj_Rel_Insert_Input>;
    jobStatusName?: Maybe<Video_JobStatus_Enum>;
    mediaPackageHarvestJobId?: Maybe<Scalars["String"]>;
    message?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Job_Queues_MediaPackageHarvestJob_Max_Fields = {
    __typename?: "job_queues_MediaPackageHarvestJob_max_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    eventId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    mediaPackageHarvestJobId?: Maybe<Scalars["String"]>;
    message?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate min on columns */
export type Job_Queues_MediaPackageHarvestJob_Min_Fields = {
    __typename?: "job_queues_MediaPackageHarvestJob_min_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    eventId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    mediaPackageHarvestJobId?: Maybe<Scalars["String"]>;
    message?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** response of any mutation on the table "job_queues.MediaPackageHarvestJob" */
export type Job_Queues_MediaPackageHarvestJob_Mutation_Response = {
    __typename?: "job_queues_MediaPackageHarvestJob_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Job_Queues_MediaPackageHarvestJob>;
};

/** on conflict condition type for table "job_queues.MediaPackageHarvestJob" */
export type Job_Queues_MediaPackageHarvestJob_On_Conflict = {
    constraint: Job_Queues_MediaPackageHarvestJob_Constraint;
    update_columns?: Array<Job_Queues_MediaPackageHarvestJob_Update_Column>;
    where?: Maybe<Job_Queues_MediaPackageHarvestJob_Bool_Exp>;
};

/** Ordering options when selecting data from "job_queues.MediaPackageHarvestJob". */
export type Job_Queues_MediaPackageHarvestJob_Order_By = {
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    event?: Maybe<Schedule_Event_Order_By>;
    eventId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    jobStatus?: Maybe<Video_JobStatus_Order_By>;
    jobStatusName?: Maybe<Order_By>;
    mediaPackageHarvestJobId?: Maybe<Order_By>;
    message?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** primary key columns input for table: job_queues_MediaPackageHarvestJob */
export type Job_Queues_MediaPackageHarvestJob_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "job_queues.MediaPackageHarvestJob" */
export enum Job_Queues_MediaPackageHarvestJob_Select_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    EventId = "eventId",
    /** column name */
    Id = "id",
    /** column name */
    JobStatusName = "jobStatusName",
    /** column name */
    MediaPackageHarvestJobId = "mediaPackageHarvestJobId",
    /** column name */
    Message = "message",
    /** column name */
    UpdatedAt = "updated_at",
}

/** input type for updating data in table "job_queues.MediaPackageHarvestJob" */
export type Job_Queues_MediaPackageHarvestJob_Set_Input = {
    conferenceId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    eventId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    jobStatusName?: Maybe<Video_JobStatus_Enum>;
    mediaPackageHarvestJobId?: Maybe<Scalars["String"]>;
    message?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** update columns of table "job_queues.MediaPackageHarvestJob" */
export enum Job_Queues_MediaPackageHarvestJob_Update_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    EventId = "eventId",
    /** column name */
    Id = "id",
    /** column name */
    JobStatusName = "jobStatusName",
    /** column name */
    MediaPackageHarvestJobId = "mediaPackageHarvestJobId",
    /** column name */
    Message = "message",
    /** column name */
    UpdatedAt = "updated_at",
}

/** columns and relationships of "job_queues.PublishVideoJob" */
export type Job_Queues_PublishVideoJob = {
    __typename?: "job_queues_PublishVideoJob";
    /** An object relationship */
    conference: Conference_Conference;
    conferenceId: Scalars["uuid"];
    createdAt: Scalars["timestamptz"];
    /** An object relationship */
    element: Content_Element;
    elementId: Scalars["uuid"];
    id: Scalars["uuid"];
    jobStatusName: Scalars["String"];
    updatedAt: Scalars["timestamptz"];
    vimeoVideoUrl?: Maybe<Scalars["String"]>;
};

/** aggregated selection of "job_queues.PublishVideoJob" */
export type Job_Queues_PublishVideoJob_Aggregate = {
    __typename?: "job_queues_PublishVideoJob_aggregate";
    aggregate?: Maybe<Job_Queues_PublishVideoJob_Aggregate_Fields>;
    nodes: Array<Job_Queues_PublishVideoJob>;
};

/** aggregate fields of "job_queues.PublishVideoJob" */
export type Job_Queues_PublishVideoJob_Aggregate_Fields = {
    __typename?: "job_queues_PublishVideoJob_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Job_Queues_PublishVideoJob_Max_Fields>;
    min?: Maybe<Job_Queues_PublishVideoJob_Min_Fields>;
};

/** aggregate fields of "job_queues.PublishVideoJob" */
export type Job_Queues_PublishVideoJob_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Job_Queues_PublishVideoJob_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** Boolean expression to filter rows from the table "job_queues.PublishVideoJob". All fields are combined with a logical 'AND'. */
export type Job_Queues_PublishVideoJob_Bool_Exp = {
    _and?: Maybe<Array<Job_Queues_PublishVideoJob_Bool_Exp>>;
    _not?: Maybe<Job_Queues_PublishVideoJob_Bool_Exp>;
    _or?: Maybe<Array<Job_Queues_PublishVideoJob_Bool_Exp>>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    createdAt?: Maybe<Timestamptz_Comparison_Exp>;
    element?: Maybe<Content_Element_Bool_Exp>;
    elementId?: Maybe<Uuid_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    jobStatusName?: Maybe<String_Comparison_Exp>;
    updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
    vimeoVideoUrl?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "job_queues.PublishVideoJob" */
export enum Job_Queues_PublishVideoJob_Constraint {
    /** unique or primary key constraint */
    PublishVideoJobPkey = "PublishVideoJob_pkey",
}

/** input type for inserting data into table "job_queues.PublishVideoJob" */
export type Job_Queues_PublishVideoJob_Insert_Input = {
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    element?: Maybe<Content_Element_Obj_Rel_Insert_Input>;
    elementId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    jobStatusName?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    vimeoVideoUrl?: Maybe<Scalars["String"]>;
};

/** aggregate max on columns */
export type Job_Queues_PublishVideoJob_Max_Fields = {
    __typename?: "job_queues_PublishVideoJob_max_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    elementId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    jobStatusName?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    vimeoVideoUrl?: Maybe<Scalars["String"]>;
};

/** aggregate min on columns */
export type Job_Queues_PublishVideoJob_Min_Fields = {
    __typename?: "job_queues_PublishVideoJob_min_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    elementId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    jobStatusName?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    vimeoVideoUrl?: Maybe<Scalars["String"]>;
};

/** response of any mutation on the table "job_queues.PublishVideoJob" */
export type Job_Queues_PublishVideoJob_Mutation_Response = {
    __typename?: "job_queues_PublishVideoJob_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Job_Queues_PublishVideoJob>;
};

/** on conflict condition type for table "job_queues.PublishVideoJob" */
export type Job_Queues_PublishVideoJob_On_Conflict = {
    constraint: Job_Queues_PublishVideoJob_Constraint;
    update_columns?: Array<Job_Queues_PublishVideoJob_Update_Column>;
    where?: Maybe<Job_Queues_PublishVideoJob_Bool_Exp>;
};

/** Ordering options when selecting data from "job_queues.PublishVideoJob". */
export type Job_Queues_PublishVideoJob_Order_By = {
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    element?: Maybe<Content_Element_Order_By>;
    elementId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    jobStatusName?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
    vimeoVideoUrl?: Maybe<Order_By>;
};

/** primary key columns input for table: job_queues_PublishVideoJob */
export type Job_Queues_PublishVideoJob_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "job_queues.PublishVideoJob" */
export enum Job_Queues_PublishVideoJob_Select_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    ElementId = "elementId",
    /** column name */
    Id = "id",
    /** column name */
    JobStatusName = "jobStatusName",
    /** column name */
    UpdatedAt = "updatedAt",
    /** column name */
    VimeoVideoUrl = "vimeoVideoUrl",
}

/** input type for updating data in table "job_queues.PublishVideoJob" */
export type Job_Queues_PublishVideoJob_Set_Input = {
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    elementId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    jobStatusName?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    vimeoVideoUrl?: Maybe<Scalars["String"]>;
};

/** update columns of table "job_queues.PublishVideoJob" */
export enum Job_Queues_PublishVideoJob_Update_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    ElementId = "elementId",
    /** column name */
    Id = "id",
    /** column name */
    JobStatusName = "jobStatusName",
    /** column name */
    UpdatedAt = "updatedAt",
    /** column name */
    VimeoVideoUrl = "vimeoVideoUrl",
}

/** columns and relationships of "job_queues.SubmissionRequestEmailJob" */
export type Job_Queues_SubmissionRequestEmailJob = {
    __typename?: "job_queues_SubmissionRequestEmailJob";
    created_at: Scalars["timestamptz"];
    emailTemplate?: Maybe<Scalars["jsonb"]>;
    id: Scalars["uuid"];
    processed: Scalars["Boolean"];
    updated_at: Scalars["timestamptz"];
    /** An object relationship */
    uploader: Content_Uploader;
    uploaderId: Scalars["uuid"];
};

/** columns and relationships of "job_queues.SubmissionRequestEmailJob" */
export type Job_Queues_SubmissionRequestEmailJobEmailTemplateArgs = {
    path?: Maybe<Scalars["String"]>;
};

/** aggregated selection of "job_queues.SubmissionRequestEmailJob" */
export type Job_Queues_SubmissionRequestEmailJob_Aggregate = {
    __typename?: "job_queues_SubmissionRequestEmailJob_aggregate";
    aggregate?: Maybe<Job_Queues_SubmissionRequestEmailJob_Aggregate_Fields>;
    nodes: Array<Job_Queues_SubmissionRequestEmailJob>;
};

/** aggregate fields of "job_queues.SubmissionRequestEmailJob" */
export type Job_Queues_SubmissionRequestEmailJob_Aggregate_Fields = {
    __typename?: "job_queues_SubmissionRequestEmailJob_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Job_Queues_SubmissionRequestEmailJob_Max_Fields>;
    min?: Maybe<Job_Queues_SubmissionRequestEmailJob_Min_Fields>;
};

/** aggregate fields of "job_queues.SubmissionRequestEmailJob" */
export type Job_Queues_SubmissionRequestEmailJob_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Job_Queues_SubmissionRequestEmailJob_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** append existing jsonb value of filtered columns with new jsonb value */
export type Job_Queues_SubmissionRequestEmailJob_Append_Input = {
    emailTemplate?: Maybe<Scalars["jsonb"]>;
};

/** Boolean expression to filter rows from the table "job_queues.SubmissionRequestEmailJob". All fields are combined with a logical 'AND'. */
export type Job_Queues_SubmissionRequestEmailJob_Bool_Exp = {
    _and?: Maybe<Array<Job_Queues_SubmissionRequestEmailJob_Bool_Exp>>;
    _not?: Maybe<Job_Queues_SubmissionRequestEmailJob_Bool_Exp>;
    _or?: Maybe<Array<Job_Queues_SubmissionRequestEmailJob_Bool_Exp>>;
    created_at?: Maybe<Timestamptz_Comparison_Exp>;
    emailTemplate?: Maybe<Jsonb_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    processed?: Maybe<Boolean_Comparison_Exp>;
    updated_at?: Maybe<Timestamptz_Comparison_Exp>;
    uploader?: Maybe<Content_Uploader_Bool_Exp>;
    uploaderId?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "job_queues.SubmissionRequestEmailJob" */
export enum Job_Queues_SubmissionRequestEmailJob_Constraint {
    /** unique or primary key constraint */
    SubmissionRequestEmailJobPkey = "SubmissionRequestEmailJob_pkey",
}

/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export type Job_Queues_SubmissionRequestEmailJob_Delete_At_Path_Input = {
    emailTemplate?: Maybe<Array<Scalars["String"]>>;
};

/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
export type Job_Queues_SubmissionRequestEmailJob_Delete_Elem_Input = {
    emailTemplate?: Maybe<Scalars["Int"]>;
};

/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export type Job_Queues_SubmissionRequestEmailJob_Delete_Key_Input = {
    emailTemplate?: Maybe<Scalars["String"]>;
};

/** input type for inserting data into table "job_queues.SubmissionRequestEmailJob" */
export type Job_Queues_SubmissionRequestEmailJob_Insert_Input = {
    created_at?: Maybe<Scalars["timestamptz"]>;
    emailTemplate?: Maybe<Scalars["jsonb"]>;
    id?: Maybe<Scalars["uuid"]>;
    processed?: Maybe<Scalars["Boolean"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
    uploader?: Maybe<Content_Uploader_Obj_Rel_Insert_Input>;
    uploaderId?: Maybe<Scalars["uuid"]>;
};

/** aggregate max on columns */
export type Job_Queues_SubmissionRequestEmailJob_Max_Fields = {
    __typename?: "job_queues_SubmissionRequestEmailJob_max_fields";
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
    uploaderId?: Maybe<Scalars["uuid"]>;
};

/** aggregate min on columns */
export type Job_Queues_SubmissionRequestEmailJob_Min_Fields = {
    __typename?: "job_queues_SubmissionRequestEmailJob_min_fields";
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
    uploaderId?: Maybe<Scalars["uuid"]>;
};

/** response of any mutation on the table "job_queues.SubmissionRequestEmailJob" */
export type Job_Queues_SubmissionRequestEmailJob_Mutation_Response = {
    __typename?: "job_queues_SubmissionRequestEmailJob_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Job_Queues_SubmissionRequestEmailJob>;
};

/** on conflict condition type for table "job_queues.SubmissionRequestEmailJob" */
export type Job_Queues_SubmissionRequestEmailJob_On_Conflict = {
    constraint: Job_Queues_SubmissionRequestEmailJob_Constraint;
    update_columns?: Array<Job_Queues_SubmissionRequestEmailJob_Update_Column>;
    where?: Maybe<Job_Queues_SubmissionRequestEmailJob_Bool_Exp>;
};

/** Ordering options when selecting data from "job_queues.SubmissionRequestEmailJob". */
export type Job_Queues_SubmissionRequestEmailJob_Order_By = {
    created_at?: Maybe<Order_By>;
    emailTemplate?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    processed?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
    uploader?: Maybe<Content_Uploader_Order_By>;
    uploaderId?: Maybe<Order_By>;
};

/** primary key columns input for table: job_queues_SubmissionRequestEmailJob */
export type Job_Queues_SubmissionRequestEmailJob_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** prepend existing jsonb value of filtered columns with new jsonb value */
export type Job_Queues_SubmissionRequestEmailJob_Prepend_Input = {
    emailTemplate?: Maybe<Scalars["jsonb"]>;
};

/** select columns of table "job_queues.SubmissionRequestEmailJob" */
export enum Job_Queues_SubmissionRequestEmailJob_Select_Column {
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    EmailTemplate = "emailTemplate",
    /** column name */
    Id = "id",
    /** column name */
    Processed = "processed",
    /** column name */
    UpdatedAt = "updated_at",
    /** column name */
    UploaderId = "uploaderId",
}

/** input type for updating data in table "job_queues.SubmissionRequestEmailJob" */
export type Job_Queues_SubmissionRequestEmailJob_Set_Input = {
    created_at?: Maybe<Scalars["timestamptz"]>;
    emailTemplate?: Maybe<Scalars["jsonb"]>;
    id?: Maybe<Scalars["uuid"]>;
    processed?: Maybe<Scalars["Boolean"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
    uploaderId?: Maybe<Scalars["uuid"]>;
};

/** update columns of table "job_queues.SubmissionRequestEmailJob" */
export enum Job_Queues_SubmissionRequestEmailJob_Update_Column {
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    EmailTemplate = "emailTemplate",
    /** column name */
    Id = "id",
    /** column name */
    Processed = "processed",
    /** column name */
    UpdatedAt = "updated_at",
    /** column name */
    UploaderId = "uploaderId",
}

/** columns and relationships of "job_queues.UploadYouTubeVideoJob" */
export type Job_Queues_UploadYouTubeVideoJob = {
    __typename?: "job_queues_UploadYouTubeVideoJob";
    /** An object relationship */
    conference: Conference_Conference;
    conferenceId: Scalars["uuid"];
    createdAt: Scalars["timestamptz"];
    /** An object relationship */
    element: Content_Element;
    elementId: Scalars["uuid"];
    id: Scalars["uuid"];
    /** An object relationship */
    jobStatus: Video_JobStatus;
    jobStatusName: Video_JobStatus_Enum;
    message?: Maybe<Scalars["String"]>;
    playlistId?: Maybe<Scalars["String"]>;
    /** An object relationship */
    registrantGoogleAccount: Registrant_GoogleAccount;
    registrantGoogleAccountId: Scalars["uuid"];
    retriesCount: Scalars["Int"];
    updatedAt: Scalars["timestamptz"];
    videoDescription: Scalars["String"];
    videoPrivacyStatus: Scalars["String"];
    videoTitle: Scalars["String"];
};

/** aggregated selection of "job_queues.UploadYouTubeVideoJob" */
export type Job_Queues_UploadYouTubeVideoJob_Aggregate = {
    __typename?: "job_queues_UploadYouTubeVideoJob_aggregate";
    aggregate?: Maybe<Job_Queues_UploadYouTubeVideoJob_Aggregate_Fields>;
    nodes: Array<Job_Queues_UploadYouTubeVideoJob>;
};

/** aggregate fields of "job_queues.UploadYouTubeVideoJob" */
export type Job_Queues_UploadYouTubeVideoJob_Aggregate_Fields = {
    __typename?: "job_queues_UploadYouTubeVideoJob_aggregate_fields";
    avg?: Maybe<Job_Queues_UploadYouTubeVideoJob_Avg_Fields>;
    count: Scalars["Int"];
    max?: Maybe<Job_Queues_UploadYouTubeVideoJob_Max_Fields>;
    min?: Maybe<Job_Queues_UploadYouTubeVideoJob_Min_Fields>;
    stddev?: Maybe<Job_Queues_UploadYouTubeVideoJob_Stddev_Fields>;
    stddev_pop?: Maybe<Job_Queues_UploadYouTubeVideoJob_Stddev_Pop_Fields>;
    stddev_samp?: Maybe<Job_Queues_UploadYouTubeVideoJob_Stddev_Samp_Fields>;
    sum?: Maybe<Job_Queues_UploadYouTubeVideoJob_Sum_Fields>;
    var_pop?: Maybe<Job_Queues_UploadYouTubeVideoJob_Var_Pop_Fields>;
    var_samp?: Maybe<Job_Queues_UploadYouTubeVideoJob_Var_Samp_Fields>;
    variance?: Maybe<Job_Queues_UploadYouTubeVideoJob_Variance_Fields>;
};

/** aggregate fields of "job_queues.UploadYouTubeVideoJob" */
export type Job_Queues_UploadYouTubeVideoJob_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Job_Queues_UploadYouTubeVideoJob_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** aggregate avg on columns */
export type Job_Queues_UploadYouTubeVideoJob_Avg_Fields = {
    __typename?: "job_queues_UploadYouTubeVideoJob_avg_fields";
    retriesCount?: Maybe<Scalars["Float"]>;
};

/** Boolean expression to filter rows from the table "job_queues.UploadYouTubeVideoJob". All fields are combined with a logical 'AND'. */
export type Job_Queues_UploadYouTubeVideoJob_Bool_Exp = {
    _and?: Maybe<Array<Job_Queues_UploadYouTubeVideoJob_Bool_Exp>>;
    _not?: Maybe<Job_Queues_UploadYouTubeVideoJob_Bool_Exp>;
    _or?: Maybe<Array<Job_Queues_UploadYouTubeVideoJob_Bool_Exp>>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    createdAt?: Maybe<Timestamptz_Comparison_Exp>;
    element?: Maybe<Content_Element_Bool_Exp>;
    elementId?: Maybe<Uuid_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    jobStatus?: Maybe<Video_JobStatus_Bool_Exp>;
    jobStatusName?: Maybe<Video_JobStatus_Enum_Comparison_Exp>;
    message?: Maybe<String_Comparison_Exp>;
    playlistId?: Maybe<String_Comparison_Exp>;
    registrantGoogleAccount?: Maybe<Registrant_GoogleAccount_Bool_Exp>;
    registrantGoogleAccountId?: Maybe<Uuid_Comparison_Exp>;
    retriesCount?: Maybe<Int_Comparison_Exp>;
    updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
    videoDescription?: Maybe<String_Comparison_Exp>;
    videoPrivacyStatus?: Maybe<String_Comparison_Exp>;
    videoTitle?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "job_queues.UploadYouTubeVideoJob" */
export enum Job_Queues_UploadYouTubeVideoJob_Constraint {
    /** unique or primary key constraint */
    UploadYouTubeVideoJobPkey = "UploadYouTubeVideoJob_pkey",
}

/** input type for incrementing numeric columns in table "job_queues.UploadYouTubeVideoJob" */
export type Job_Queues_UploadYouTubeVideoJob_Inc_Input = {
    retriesCount?: Maybe<Scalars["Int"]>;
};

/** input type for inserting data into table "job_queues.UploadYouTubeVideoJob" */
export type Job_Queues_UploadYouTubeVideoJob_Insert_Input = {
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    element?: Maybe<Content_Element_Obj_Rel_Insert_Input>;
    elementId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    jobStatus?: Maybe<Video_JobStatus_Obj_Rel_Insert_Input>;
    jobStatusName?: Maybe<Video_JobStatus_Enum>;
    message?: Maybe<Scalars["String"]>;
    playlistId?: Maybe<Scalars["String"]>;
    registrantGoogleAccount?: Maybe<Registrant_GoogleAccount_Obj_Rel_Insert_Input>;
    registrantGoogleAccountId?: Maybe<Scalars["uuid"]>;
    retriesCount?: Maybe<Scalars["Int"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    videoDescription?: Maybe<Scalars["String"]>;
    videoPrivacyStatus?: Maybe<Scalars["String"]>;
    videoTitle?: Maybe<Scalars["String"]>;
};

/** aggregate max on columns */
export type Job_Queues_UploadYouTubeVideoJob_Max_Fields = {
    __typename?: "job_queues_UploadYouTubeVideoJob_max_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    elementId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    message?: Maybe<Scalars["String"]>;
    playlistId?: Maybe<Scalars["String"]>;
    registrantGoogleAccountId?: Maybe<Scalars["uuid"]>;
    retriesCount?: Maybe<Scalars["Int"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    videoDescription?: Maybe<Scalars["String"]>;
    videoPrivacyStatus?: Maybe<Scalars["String"]>;
    videoTitle?: Maybe<Scalars["String"]>;
};

/** aggregate min on columns */
export type Job_Queues_UploadYouTubeVideoJob_Min_Fields = {
    __typename?: "job_queues_UploadYouTubeVideoJob_min_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    elementId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    message?: Maybe<Scalars["String"]>;
    playlistId?: Maybe<Scalars["String"]>;
    registrantGoogleAccountId?: Maybe<Scalars["uuid"]>;
    retriesCount?: Maybe<Scalars["Int"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    videoDescription?: Maybe<Scalars["String"]>;
    videoPrivacyStatus?: Maybe<Scalars["String"]>;
    videoTitle?: Maybe<Scalars["String"]>;
};

/** response of any mutation on the table "job_queues.UploadYouTubeVideoJob" */
export type Job_Queues_UploadYouTubeVideoJob_Mutation_Response = {
    __typename?: "job_queues_UploadYouTubeVideoJob_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Job_Queues_UploadYouTubeVideoJob>;
};

/** on conflict condition type for table "job_queues.UploadYouTubeVideoJob" */
export type Job_Queues_UploadYouTubeVideoJob_On_Conflict = {
    constraint: Job_Queues_UploadYouTubeVideoJob_Constraint;
    update_columns?: Array<Job_Queues_UploadYouTubeVideoJob_Update_Column>;
    where?: Maybe<Job_Queues_UploadYouTubeVideoJob_Bool_Exp>;
};

/** Ordering options when selecting data from "job_queues.UploadYouTubeVideoJob". */
export type Job_Queues_UploadYouTubeVideoJob_Order_By = {
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    element?: Maybe<Content_Element_Order_By>;
    elementId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    jobStatus?: Maybe<Video_JobStatus_Order_By>;
    jobStatusName?: Maybe<Order_By>;
    message?: Maybe<Order_By>;
    playlistId?: Maybe<Order_By>;
    registrantGoogleAccount?: Maybe<Registrant_GoogleAccount_Order_By>;
    registrantGoogleAccountId?: Maybe<Order_By>;
    retriesCount?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
    videoDescription?: Maybe<Order_By>;
    videoPrivacyStatus?: Maybe<Order_By>;
    videoTitle?: Maybe<Order_By>;
};

/** primary key columns input for table: job_queues_UploadYouTubeVideoJob */
export type Job_Queues_UploadYouTubeVideoJob_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "job_queues.UploadYouTubeVideoJob" */
export enum Job_Queues_UploadYouTubeVideoJob_Select_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    ElementId = "elementId",
    /** column name */
    Id = "id",
    /** column name */
    JobStatusName = "jobStatusName",
    /** column name */
    Message = "message",
    /** column name */
    PlaylistId = "playlistId",
    /** column name */
    RegistrantGoogleAccountId = "registrantGoogleAccountId",
    /** column name */
    RetriesCount = "retriesCount",
    /** column name */
    UpdatedAt = "updatedAt",
    /** column name */
    VideoDescription = "videoDescription",
    /** column name */
    VideoPrivacyStatus = "videoPrivacyStatus",
    /** column name */
    VideoTitle = "videoTitle",
}

/** input type for updating data in table "job_queues.UploadYouTubeVideoJob" */
export type Job_Queues_UploadYouTubeVideoJob_Set_Input = {
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    elementId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    jobStatusName?: Maybe<Video_JobStatus_Enum>;
    message?: Maybe<Scalars["String"]>;
    playlistId?: Maybe<Scalars["String"]>;
    registrantGoogleAccountId?: Maybe<Scalars["uuid"]>;
    retriesCount?: Maybe<Scalars["Int"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    videoDescription?: Maybe<Scalars["String"]>;
    videoPrivacyStatus?: Maybe<Scalars["String"]>;
    videoTitle?: Maybe<Scalars["String"]>;
};

/** aggregate stddev on columns */
export type Job_Queues_UploadYouTubeVideoJob_Stddev_Fields = {
    __typename?: "job_queues_UploadYouTubeVideoJob_stddev_fields";
    retriesCount?: Maybe<Scalars["Float"]>;
};

/** aggregate stddev_pop on columns */
export type Job_Queues_UploadYouTubeVideoJob_Stddev_Pop_Fields = {
    __typename?: "job_queues_UploadYouTubeVideoJob_stddev_pop_fields";
    retriesCount?: Maybe<Scalars["Float"]>;
};

/** aggregate stddev_samp on columns */
export type Job_Queues_UploadYouTubeVideoJob_Stddev_Samp_Fields = {
    __typename?: "job_queues_UploadYouTubeVideoJob_stddev_samp_fields";
    retriesCount?: Maybe<Scalars["Float"]>;
};

/** aggregate sum on columns */
export type Job_Queues_UploadYouTubeVideoJob_Sum_Fields = {
    __typename?: "job_queues_UploadYouTubeVideoJob_sum_fields";
    retriesCount?: Maybe<Scalars["Int"]>;
};

/** update columns of table "job_queues.UploadYouTubeVideoJob" */
export enum Job_Queues_UploadYouTubeVideoJob_Update_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    ElementId = "elementId",
    /** column name */
    Id = "id",
    /** column name */
    JobStatusName = "jobStatusName",
    /** column name */
    Message = "message",
    /** column name */
    PlaylistId = "playlistId",
    /** column name */
    RegistrantGoogleAccountId = "registrantGoogleAccountId",
    /** column name */
    RetriesCount = "retriesCount",
    /** column name */
    UpdatedAt = "updatedAt",
    /** column name */
    VideoDescription = "videoDescription",
    /** column name */
    VideoPrivacyStatus = "videoPrivacyStatus",
    /** column name */
    VideoTitle = "videoTitle",
}

/** aggregate var_pop on columns */
export type Job_Queues_UploadYouTubeVideoJob_Var_Pop_Fields = {
    __typename?: "job_queues_UploadYouTubeVideoJob_var_pop_fields";
    retriesCount?: Maybe<Scalars["Float"]>;
};

/** aggregate var_samp on columns */
export type Job_Queues_UploadYouTubeVideoJob_Var_Samp_Fields = {
    __typename?: "job_queues_UploadYouTubeVideoJob_var_samp_fields";
    retriesCount?: Maybe<Scalars["Float"]>;
};

/** aggregate variance on columns */
export type Job_Queues_UploadYouTubeVideoJob_Variance_Fields = {
    __typename?: "job_queues_UploadYouTubeVideoJob_variance_fields";
    retriesCount?: Maybe<Scalars["Float"]>;
};

/** Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'. */
export type Jsonb_Comparison_Exp = {
    /** is the column contained in the given json value */
    _contained_in?: Maybe<Scalars["jsonb"]>;
    /** does the column contain the given json value at the top level */
    _contains?: Maybe<Scalars["jsonb"]>;
    _eq?: Maybe<Scalars["jsonb"]>;
    _gt?: Maybe<Scalars["jsonb"]>;
    _gte?: Maybe<Scalars["jsonb"]>;
    /** does the string exist as a top-level key in the column */
    _has_key?: Maybe<Scalars["String"]>;
    /** do all of these strings exist as top-level keys in the column */
    _has_keys_all?: Maybe<Array<Scalars["String"]>>;
    /** do any of these strings exist as top-level keys in the column */
    _has_keys_any?: Maybe<Array<Scalars["String"]>>;
    _in?: Maybe<Array<Scalars["jsonb"]>>;
    _is_null?: Maybe<Scalars["Boolean"]>;
    _lt?: Maybe<Scalars["jsonb"]>;
    _lte?: Maybe<Scalars["jsonb"]>;
    _neq?: Maybe<Scalars["jsonb"]>;
    _nin?: Maybe<Array<Scalars["jsonb"]>>;
};

/** mutation root */
export type Mutation_Root = {
    __typename?: "mutation_root";
    createItemRoom?: Maybe<CreateItemRoomOutput>;
    createRoomDm?: Maybe<CreateRoomDmOutput>;
    /** delete data from the table: "Email" */
    delete_Email?: Maybe<Email_Mutation_Response>;
    /** delete single row from the table: "Email" */
    delete_Email_by_pk?: Maybe<Email>;
    /** delete data from the table: "PushNotificationSubscription" */
    delete_PushNotificationSubscription?: Maybe<PushNotificationSubscription_Mutation_Response>;
    /** delete single row from the table: "PushNotificationSubscription" */
    delete_PushNotificationSubscription_by_pk?: Maybe<PushNotificationSubscription>;
    /** delete data from the table: "User" */
    delete_User?: Maybe<User_Mutation_Response>;
    /** delete single row from the table: "User" */
    delete_User_by_pk?: Maybe<User>;
    /** delete data from the table: "analytics.AppStats" */
    delete_analytics_AppStats?: Maybe<Analytics_AppStats_Mutation_Response>;
    /** delete single row from the table: "analytics.AppStats" */
    delete_analytics_AppStats_by_pk?: Maybe<Analytics_AppStats>;
    /** delete data from the table: "analytics.ContentElementStats" */
    delete_analytics_ContentElementStats?: Maybe<Analytics_ContentElementStats_Mutation_Response>;
    /** delete single row from the table: "analytics.ContentElementStats" */
    delete_analytics_ContentElementStats_by_pk?: Maybe<Analytics_ContentElementStats>;
    /** delete data from the table: "analytics.ContentItemStats" */
    delete_analytics_ContentItemStats?: Maybe<Analytics_ContentItemStats_Mutation_Response>;
    /** delete single row from the table: "analytics.ContentItemStats" */
    delete_analytics_ContentItemStats_by_pk?: Maybe<Analytics_ContentItemStats>;
    /** delete data from the table: "analytics.RoomStats" */
    delete_analytics_RoomStats?: Maybe<Analytics_RoomStats_Mutation_Response>;
    /** delete single row from the table: "analytics.RoomStats" */
    delete_analytics_RoomStats_by_pk?: Maybe<Analytics_RoomStats>;
    /** delete data from the table: "analytics.mat_ElementTotalViews" */
    delete_analytics_mat_ElementTotalViews?: Maybe<Analytics_Mat_ElementTotalViews_Mutation_Response>;
    /** delete data from the table: "analytics.mat_ItemTotalViews" */
    delete_analytics_mat_ItemTotalViews?: Maybe<Analytics_Mat_ItemTotalViews_Mutation_Response>;
    /** delete data from the table: "analytics.mat_RoomPresence" */
    delete_analytics_mat_RoomPresence?: Maybe<Analytics_Mat_RoomPresence_Mutation_Response>;
    /** delete data from the table: "chat.Chat" */
    delete_chat_Chat?: Maybe<Chat_Chat_Mutation_Response>;
    /** delete single row from the table: "chat.Chat" */
    delete_chat_Chat_by_pk?: Maybe<Chat_Chat>;
    /** delete data from the table: "chat.Flag" */
    delete_chat_Flag?: Maybe<Chat_Flag_Mutation_Response>;
    /** delete data from the table: "chat.FlagType" */
    delete_chat_FlagType?: Maybe<Chat_FlagType_Mutation_Response>;
    /** delete single row from the table: "chat.FlagType" */
    delete_chat_FlagType_by_pk?: Maybe<Chat_FlagType>;
    /** delete single row from the table: "chat.Flag" */
    delete_chat_Flag_by_pk?: Maybe<Chat_Flag>;
    /** delete data from the table: "chat.Message" */
    delete_chat_Message?: Maybe<Chat_Message_Mutation_Response>;
    /** delete data from the table: "chat.MessageType" */
    delete_chat_MessageType?: Maybe<Chat_MessageType_Mutation_Response>;
    /** delete single row from the table: "chat.MessageType" */
    delete_chat_MessageType_by_pk?: Maybe<Chat_MessageType>;
    /** delete single row from the table: "chat.Message" */
    delete_chat_Message_by_pk?: Maybe<Chat_Message>;
    /** delete data from the table: "chat.Pin" */
    delete_chat_Pin?: Maybe<Chat_Pin_Mutation_Response>;
    /** delete single row from the table: "chat.Pin" */
    delete_chat_Pin_by_pk?: Maybe<Chat_Pin>;
    /** delete data from the table: "chat.Reaction" */
    delete_chat_Reaction?: Maybe<Chat_Reaction_Mutation_Response>;
    /** delete data from the table: "chat.ReactionType" */
    delete_chat_ReactionType?: Maybe<Chat_ReactionType_Mutation_Response>;
    /** delete single row from the table: "chat.ReactionType" */
    delete_chat_ReactionType_by_pk?: Maybe<Chat_ReactionType>;
    /** delete single row from the table: "chat.Reaction" */
    delete_chat_Reaction_by_pk?: Maybe<Chat_Reaction>;
    /** delete data from the table: "chat.ReadUpToIndex" */
    delete_chat_ReadUpToIndex?: Maybe<Chat_ReadUpToIndex_Mutation_Response>;
    /** delete single row from the table: "chat.ReadUpToIndex" */
    delete_chat_ReadUpToIndex_by_pk?: Maybe<Chat_ReadUpToIndex>;
    /** delete data from the table: "chat.Subscription" */
    delete_chat_Subscription?: Maybe<Chat_Subscription_Mutation_Response>;
    /** delete single row from the table: "chat.Subscription" */
    delete_chat_Subscription_by_pk?: Maybe<Chat_Subscription>;
    /** delete data from the table: "collection.Exhibition" */
    delete_collection_Exhibition?: Maybe<Collection_Exhibition_Mutation_Response>;
    /** delete single row from the table: "collection.Exhibition" */
    delete_collection_Exhibition_by_pk?: Maybe<Collection_Exhibition>;
    /** delete data from the table: "collection.ProgramPerson" */
    delete_collection_ProgramPerson?: Maybe<Collection_ProgramPerson_Mutation_Response>;
    /** delete single row from the table: "collection.ProgramPerson" */
    delete_collection_ProgramPerson_by_pk?: Maybe<Collection_ProgramPerson>;
    /** delete data from the table: "collection.Tag" */
    delete_collection_Tag?: Maybe<Collection_Tag_Mutation_Response>;
    /** delete single row from the table: "collection.Tag" */
    delete_collection_Tag_by_pk?: Maybe<Collection_Tag>;
    /** delete data from the table: "conference.Conference" */
    delete_conference_Conference?: Maybe<Conference_Conference_Mutation_Response>;
    /** delete single row from the table: "conference.Conference" */
    delete_conference_Conference_by_pk?: Maybe<Conference_Conference>;
    /** delete data from the table: "conference.Configuration" */
    delete_conference_Configuration?: Maybe<Conference_Configuration_Mutation_Response>;
    /** delete data from the table: "conference.ConfigurationKey" */
    delete_conference_ConfigurationKey?: Maybe<Conference_ConfigurationKey_Mutation_Response>;
    /** delete single row from the table: "conference.ConfigurationKey" */
    delete_conference_ConfigurationKey_by_pk?: Maybe<Conference_ConfigurationKey>;
    /** delete single row from the table: "conference.Configuration" */
    delete_conference_Configuration_by_pk?: Maybe<Conference_Configuration>;
    /** delete data from the table: "conference.DemoCode" */
    delete_conference_DemoCode?: Maybe<Conference_DemoCode_Mutation_Response>;
    /** delete single row from the table: "conference.DemoCode" */
    delete_conference_DemoCode_by_pk?: Maybe<Conference_DemoCode>;
    /** delete data from the table: "conference.OriginatingData" */
    delete_conference_OriginatingData?: Maybe<Conference_OriginatingData_Mutation_Response>;
    /** delete single row from the table: "conference.OriginatingData" */
    delete_conference_OriginatingData_by_pk?: Maybe<Conference_OriginatingData>;
    /** delete data from the table: "conference.PrepareJob" */
    delete_conference_PrepareJob?: Maybe<Conference_PrepareJob_Mutation_Response>;
    /** delete single row from the table: "conference.PrepareJob" */
    delete_conference_PrepareJob_by_pk?: Maybe<Conference_PrepareJob>;
    /** delete data from the table: "content.Element" */
    delete_content_Element?: Maybe<Content_Element_Mutation_Response>;
    /** delete data from the table: "content.ElementPermissionGrant" */
    delete_content_ElementPermissionGrant?: Maybe<Content_ElementPermissionGrant_Mutation_Response>;
    /** delete single row from the table: "content.ElementPermissionGrant" */
    delete_content_ElementPermissionGrant_by_pk?: Maybe<Content_ElementPermissionGrant>;
    /** delete data from the table: "content.ElementType" */
    delete_content_ElementType?: Maybe<Content_ElementType_Mutation_Response>;
    /** delete single row from the table: "content.ElementType" */
    delete_content_ElementType_by_pk?: Maybe<Content_ElementType>;
    /** delete single row from the table: "content.Element" */
    delete_content_Element_by_pk?: Maybe<Content_Element>;
    /** delete data from the table: "content.Item" */
    delete_content_Item?: Maybe<Content_Item_Mutation_Response>;
    /** delete data from the table: "content.ItemExhibition" */
    delete_content_ItemExhibition?: Maybe<Content_ItemExhibition_Mutation_Response>;
    /** delete single row from the table: "content.ItemExhibition" */
    delete_content_ItemExhibition_by_pk?: Maybe<Content_ItemExhibition>;
    /** delete data from the table: "content.ItemProgramPerson" */
    delete_content_ItemProgramPerson?: Maybe<Content_ItemProgramPerson_Mutation_Response>;
    /** delete single row from the table: "content.ItemProgramPerson" */
    delete_content_ItemProgramPerson_by_pk?: Maybe<Content_ItemProgramPerson>;
    /** delete data from the table: "content.ItemTag" */
    delete_content_ItemTag?: Maybe<Content_ItemTag_Mutation_Response>;
    /** delete single row from the table: "content.ItemTag" */
    delete_content_ItemTag_by_pk?: Maybe<Content_ItemTag>;
    /** delete data from the table: "content.ItemType" */
    delete_content_ItemType?: Maybe<Content_ItemType_Mutation_Response>;
    /** delete single row from the table: "content.ItemType" */
    delete_content_ItemType_by_pk?: Maybe<Content_ItemType>;
    /** delete single row from the table: "content.Item" */
    delete_content_Item_by_pk?: Maybe<Content_Item>;
    /** delete data from the table: "content.Uploader" */
    delete_content_Uploader?: Maybe<Content_Uploader_Mutation_Response>;
    /** delete single row from the table: "content.Uploader" */
    delete_content_Uploader_by_pk?: Maybe<Content_Uploader>;
    /** delete data from the table: "job_queues.ChannelStackCreateJob" */
    delete_job_queues_ChannelStackCreateJob?: Maybe<Job_Queues_ChannelStackCreateJob_Mutation_Response>;
    /** delete single row from the table: "job_queues.ChannelStackCreateJob" */
    delete_job_queues_ChannelStackCreateJob_by_pk?: Maybe<Job_Queues_ChannelStackCreateJob>;
    /** delete data from the table: "job_queues.ChannelStackDeleteJob" */
    delete_job_queues_ChannelStackDeleteJob?: Maybe<Job_Queues_ChannelStackDeleteJob_Mutation_Response>;
    /** delete single row from the table: "job_queues.ChannelStackDeleteJob" */
    delete_job_queues_ChannelStackDeleteJob_by_pk?: Maybe<Job_Queues_ChannelStackDeleteJob>;
    /** delete data from the table: "job_queues.CombineVideosJob" */
    delete_job_queues_CombineVideosJob?: Maybe<Job_Queues_CombineVideosJob_Mutation_Response>;
    /** delete single row from the table: "job_queues.CombineVideosJob" */
    delete_job_queues_CombineVideosJob_by_pk?: Maybe<Job_Queues_CombineVideosJob>;
    /** delete data from the table: "job_queues.CustomEmailJob" */
    delete_job_queues_CustomEmailJob?: Maybe<Job_Queues_CustomEmailJob_Mutation_Response>;
    /** delete single row from the table: "job_queues.CustomEmailJob" */
    delete_job_queues_CustomEmailJob_by_pk?: Maybe<Job_Queues_CustomEmailJob>;
    /** delete data from the table: "job_queues.InvitationEmailJob" */
    delete_job_queues_InvitationEmailJob?: Maybe<Job_Queues_InvitationEmailJob_Mutation_Response>;
    /** delete single row from the table: "job_queues.InvitationEmailJob" */
    delete_job_queues_InvitationEmailJob_by_pk?: Maybe<Job_Queues_InvitationEmailJob>;
    /** delete data from the table: "job_queues.MediaPackageHarvestJob" */
    delete_job_queues_MediaPackageHarvestJob?: Maybe<Job_Queues_MediaPackageHarvestJob_Mutation_Response>;
    /** delete single row from the table: "job_queues.MediaPackageHarvestJob" */
    delete_job_queues_MediaPackageHarvestJob_by_pk?: Maybe<Job_Queues_MediaPackageHarvestJob>;
    /** delete data from the table: "job_queues.PublishVideoJob" */
    delete_job_queues_PublishVideoJob?: Maybe<Job_Queues_PublishVideoJob_Mutation_Response>;
    /** delete single row from the table: "job_queues.PublishVideoJob" */
    delete_job_queues_PublishVideoJob_by_pk?: Maybe<Job_Queues_PublishVideoJob>;
    /** delete data from the table: "job_queues.SubmissionRequestEmailJob" */
    delete_job_queues_SubmissionRequestEmailJob?: Maybe<Job_Queues_SubmissionRequestEmailJob_Mutation_Response>;
    /** delete single row from the table: "job_queues.SubmissionRequestEmailJob" */
    delete_job_queues_SubmissionRequestEmailJob_by_pk?: Maybe<Job_Queues_SubmissionRequestEmailJob>;
    /** delete data from the table: "job_queues.UploadYouTubeVideoJob" */
    delete_job_queues_UploadYouTubeVideoJob?: Maybe<Job_Queues_UploadYouTubeVideoJob_Mutation_Response>;
    /** delete single row from the table: "job_queues.UploadYouTubeVideoJob" */
    delete_job_queues_UploadYouTubeVideoJob_by_pk?: Maybe<Job_Queues_UploadYouTubeVideoJob>;
    /** delete data from the table: "permissions.Group" */
    delete_permissions_Group?: Maybe<Permissions_Group_Mutation_Response>;
    /** delete data from the table: "permissions.GroupRegistrant" */
    delete_permissions_GroupRegistrant?: Maybe<Permissions_GroupRegistrant_Mutation_Response>;
    /** delete single row from the table: "permissions.GroupRegistrant" */
    delete_permissions_GroupRegistrant_by_pk?: Maybe<Permissions_GroupRegistrant>;
    /** delete data from the table: "permissions.GroupRole" */
    delete_permissions_GroupRole?: Maybe<Permissions_GroupRole_Mutation_Response>;
    /** delete single row from the table: "permissions.GroupRole" */
    delete_permissions_GroupRole_by_pk?: Maybe<Permissions_GroupRole>;
    /** delete single row from the table: "permissions.Group" */
    delete_permissions_Group_by_pk?: Maybe<Permissions_Group>;
    /** delete data from the table: "permissions.Permission" */
    delete_permissions_Permission?: Maybe<Permissions_Permission_Mutation_Response>;
    /** delete single row from the table: "permissions.Permission" */
    delete_permissions_Permission_by_pk?: Maybe<Permissions_Permission>;
    /** delete data from the table: "permissions.Role" */
    delete_permissions_Role?: Maybe<Permissions_Role_Mutation_Response>;
    /** delete data from the table: "permissions.RolePermission" */
    delete_permissions_RolePermission?: Maybe<Permissions_RolePermission_Mutation_Response>;
    /** delete single row from the table: "permissions.RolePermission" */
    delete_permissions_RolePermission_by_pk?: Maybe<Permissions_RolePermission>;
    /** delete single row from the table: "permissions.Role" */
    delete_permissions_Role_by_pk?: Maybe<Permissions_Role>;
    /** delete data from the table: "registrant.GoogleAccount" */
    delete_registrant_GoogleAccount?: Maybe<Registrant_GoogleAccount_Mutation_Response>;
    /** delete single row from the table: "registrant.GoogleAccount" */
    delete_registrant_GoogleAccount_by_pk?: Maybe<Registrant_GoogleAccount>;
    /** delete data from the table: "registrant.Invitation" */
    delete_registrant_Invitation?: Maybe<Registrant_Invitation_Mutation_Response>;
    /** delete single row from the table: "registrant.Invitation" */
    delete_registrant_Invitation_by_pk?: Maybe<Registrant_Invitation>;
    /** delete data from the table: "registrant.Profile" */
    delete_registrant_Profile?: Maybe<Registrant_Profile_Mutation_Response>;
    /** delete single row from the table: "registrant.Profile" */
    delete_registrant_Profile_by_pk?: Maybe<Registrant_Profile>;
    /** delete data from the table: "registrant.Registrant" */
    delete_registrant_Registrant?: Maybe<Registrant_Registrant_Mutation_Response>;
    /** delete single row from the table: "registrant.Registrant" */
    delete_registrant_Registrant_by_pk?: Maybe<Registrant_Registrant>;
    /** delete data from the table: "room.Backend" */
    delete_room_Backend?: Maybe<Room_Backend_Mutation_Response>;
    /** delete single row from the table: "room.Backend" */
    delete_room_Backend_by_pk?: Maybe<Room_Backend>;
    /** delete data from the table: "room.ChimeMeeting" */
    delete_room_ChimeMeeting?: Maybe<Room_ChimeMeeting_Mutation_Response>;
    /** delete single row from the table: "room.ChimeMeeting" */
    delete_room_ChimeMeeting_by_pk?: Maybe<Room_ChimeMeeting>;
    /** delete data from the table: "room.ManagementMode" */
    delete_room_ManagementMode?: Maybe<Room_ManagementMode_Mutation_Response>;
    /** delete single row from the table: "room.ManagementMode" */
    delete_room_ManagementMode_by_pk?: Maybe<Room_ManagementMode>;
    /** delete data from the table: "room.Mode" */
    delete_room_Mode?: Maybe<Room_Mode_Mutation_Response>;
    /** delete single row from the table: "room.Mode" */
    delete_room_Mode_by_pk?: Maybe<Room_Mode>;
    /** delete data from the table: "room.Participant" */
    delete_room_Participant?: Maybe<Room_Participant_Mutation_Response>;
    /** delete single row from the table: "room.Participant" */
    delete_room_Participant_by_pk?: Maybe<Room_Participant>;
    /** delete data from the table: "room.PersonRole" */
    delete_room_PersonRole?: Maybe<Room_PersonRole_Mutation_Response>;
    /** delete single row from the table: "room.PersonRole" */
    delete_room_PersonRole_by_pk?: Maybe<Room_PersonRole>;
    /** delete data from the table: "room.Room" */
    delete_room_Room?: Maybe<Room_Room_Mutation_Response>;
    /** delete data from the table: "room.RoomPerson" */
    delete_room_RoomPerson?: Maybe<Room_RoomPerson_Mutation_Response>;
    /** delete single row from the table: "room.RoomPerson" */
    delete_room_RoomPerson_by_pk?: Maybe<Room_RoomPerson>;
    /** delete single row from the table: "room.Room" */
    delete_room_Room_by_pk?: Maybe<Room_Room>;
    /** delete data from the table: "room.ShuffleAlgorithm" */
    delete_room_ShuffleAlgorithm?: Maybe<Room_ShuffleAlgorithm_Mutation_Response>;
    /** delete single row from the table: "room.ShuffleAlgorithm" */
    delete_room_ShuffleAlgorithm_by_pk?: Maybe<Room_ShuffleAlgorithm>;
    /** delete data from the table: "room.ShufflePeriod" */
    delete_room_ShufflePeriod?: Maybe<Room_ShufflePeriod_Mutation_Response>;
    /** delete single row from the table: "room.ShufflePeriod" */
    delete_room_ShufflePeriod_by_pk?: Maybe<Room_ShufflePeriod>;
    /** delete data from the table: "room.ShuffleQueueEntry" */
    delete_room_ShuffleQueueEntry?: Maybe<Room_ShuffleQueueEntry_Mutation_Response>;
    /** delete single row from the table: "room.ShuffleQueueEntry" */
    delete_room_ShuffleQueueEntry_by_pk?: Maybe<Room_ShuffleQueueEntry>;
    /** delete data from the table: "room.ShuffleRoom" */
    delete_room_ShuffleRoom?: Maybe<Room_ShuffleRoom_Mutation_Response>;
    /** delete single row from the table: "room.ShuffleRoom" */
    delete_room_ShuffleRoom_by_pk?: Maybe<Room_ShuffleRoom>;
    /** delete data from the table: "schedule.Continuation" */
    delete_schedule_Continuation?: Maybe<Schedule_Continuation_Mutation_Response>;
    /** delete single row from the table: "schedule.Continuation" */
    delete_schedule_Continuation_by_pk?: Maybe<Schedule_Continuation>;
    /** delete data from the table: "schedule.Event" */
    delete_schedule_Event?: Maybe<Schedule_Event_Mutation_Response>;
    /** delete data from the table: "schedule.EventProgramPerson" */
    delete_schedule_EventProgramPerson?: Maybe<Schedule_EventProgramPerson_Mutation_Response>;
    /** delete data from the table: "schedule.EventProgramPersonRole" */
    delete_schedule_EventProgramPersonRole?: Maybe<Schedule_EventProgramPersonRole_Mutation_Response>;
    /** delete single row from the table: "schedule.EventProgramPersonRole" */
    delete_schedule_EventProgramPersonRole_by_pk?: Maybe<Schedule_EventProgramPersonRole>;
    /** delete single row from the table: "schedule.EventProgramPerson" */
    delete_schedule_EventProgramPerson_by_pk?: Maybe<Schedule_EventProgramPerson>;
    /** delete data from the table: "schedule.EventTag" */
    delete_schedule_EventTag?: Maybe<Schedule_EventTag_Mutation_Response>;
    /** delete single row from the table: "schedule.EventTag" */
    delete_schedule_EventTag_by_pk?: Maybe<Schedule_EventTag>;
    /** delete single row from the table: "schedule.Event" */
    delete_schedule_Event_by_pk?: Maybe<Schedule_Event>;
    /** delete data from the table: "schedule.StarredEvent" */
    delete_schedule_StarredEvent?: Maybe<Schedule_StarredEvent_Mutation_Response>;
    /** delete single row from the table: "schedule.StarredEvent" */
    delete_schedule_StarredEvent_by_pk?: Maybe<Schedule_StarredEvent>;
    /** delete data from the table: "system.Configuration" */
    delete_system_Configuration?: Maybe<System_Configuration_Mutation_Response>;
    /** delete data from the table: "system.ConfigurationKey" */
    delete_system_ConfigurationKey?: Maybe<System_ConfigurationKey_Mutation_Response>;
    /** delete single row from the table: "system.ConfigurationKey" */
    delete_system_ConfigurationKey_by_pk?: Maybe<System_ConfigurationKey>;
    /** delete single row from the table: "system.Configuration" */
    delete_system_Configuration_by_pk?: Maybe<System_Configuration>;
    /** delete data from the table: "video.ChannelStack" */
    delete_video_ChannelStack?: Maybe<Video_ChannelStack_Mutation_Response>;
    /** delete single row from the table: "video.ChannelStack" */
    delete_video_ChannelStack_by_pk?: Maybe<Video_ChannelStack>;
    /** delete data from the table: "video.EventParticipantStream" */
    delete_video_EventParticipantStream?: Maybe<Video_EventParticipantStream_Mutation_Response>;
    /** delete single row from the table: "video.EventParticipantStream" */
    delete_video_EventParticipantStream_by_pk?: Maybe<Video_EventParticipantStream>;
    /** delete data from the table: "video.EventVonageSession" */
    delete_video_EventVonageSession?: Maybe<Video_EventVonageSession_Mutation_Response>;
    /** delete single row from the table: "video.EventVonageSession" */
    delete_video_EventVonageSession_by_pk?: Maybe<Video_EventVonageSession>;
    /** delete data from the table: "video.ImmediateSwitch" */
    delete_video_ImmediateSwitch?: Maybe<Video_ImmediateSwitch_Mutation_Response>;
    /** delete single row from the table: "video.ImmediateSwitch" */
    delete_video_ImmediateSwitch_by_pk?: Maybe<Video_ImmediateSwitch>;
    /** delete data from the table: "video.InputType" */
    delete_video_InputType?: Maybe<Video_InputType_Mutation_Response>;
    /** delete single row from the table: "video.InputType" */
    delete_video_InputType_by_pk?: Maybe<Video_InputType>;
    /** delete data from the table: "video.JobStatus" */
    delete_video_JobStatus?: Maybe<Video_JobStatus_Mutation_Response>;
    /** delete single row from the table: "video.JobStatus" */
    delete_video_JobStatus_by_pk?: Maybe<Video_JobStatus>;
    /** delete data from the table: "video.MediaLiveChannelStatus" */
    delete_video_MediaLiveChannelStatus?: Maybe<Video_MediaLiveChannelStatus_Mutation_Response>;
    /** delete single row from the table: "video.MediaLiveChannelStatus" */
    delete_video_MediaLiveChannelStatus_by_pk?: Maybe<Video_MediaLiveChannelStatus>;
    /** delete data from the table: "video.RtmpInput" */
    delete_video_RtmpInput?: Maybe<Video_RtmpInput_Mutation_Response>;
    /** delete single row from the table: "video.RtmpInput" */
    delete_video_RtmpInput_by_pk?: Maybe<Video_RtmpInput>;
    /** delete data from the table: "video.TranscriptionJob" */
    delete_video_TranscriptionJob?: Maybe<Video_TranscriptionJob_Mutation_Response>;
    /** delete single row from the table: "video.TranscriptionJob" */
    delete_video_TranscriptionJob_by_pk?: Maybe<Video_TranscriptionJob>;
    /** delete data from the table: "video.VideoRenderJob" */
    delete_video_VideoRenderJob?: Maybe<Video_VideoRenderJob_Mutation_Response>;
    /** delete single row from the table: "video.VideoRenderJob" */
    delete_video_VideoRenderJob_by_pk?: Maybe<Video_VideoRenderJob>;
    /** delete data from the table: "video.YouTubeUpload" */
    delete_video_YouTubeUpload?: Maybe<Video_YouTubeUpload_Mutation_Response>;
    /** delete single row from the table: "video.YouTubeUpload" */
    delete_video_YouTubeUpload_by_pk?: Maybe<Video_YouTubeUpload>;
    getGoogleOAuthUrl?: Maybe<GetGoogleOAuthUrlOutput>;
    /** insert data into the table: "Email" */
    insert_Email?: Maybe<Email_Mutation_Response>;
    /** insert a single row into the table: "Email" */
    insert_Email_one?: Maybe<Email>;
    /** insert data into the table: "PushNotificationSubscription" */
    insert_PushNotificationSubscription?: Maybe<PushNotificationSubscription_Mutation_Response>;
    /** insert a single row into the table: "PushNotificationSubscription" */
    insert_PushNotificationSubscription_one?: Maybe<PushNotificationSubscription>;
    /** insert data into the table: "User" */
    insert_User?: Maybe<User_Mutation_Response>;
    /** insert a single row into the table: "User" */
    insert_User_one?: Maybe<User>;
    /** insert data into the table: "analytics.AppStats" */
    insert_analytics_AppStats?: Maybe<Analytics_AppStats_Mutation_Response>;
    /** insert a single row into the table: "analytics.AppStats" */
    insert_analytics_AppStats_one?: Maybe<Analytics_AppStats>;
    /** insert data into the table: "analytics.ContentElementStats" */
    insert_analytics_ContentElementStats?: Maybe<Analytics_ContentElementStats_Mutation_Response>;
    /** insert a single row into the table: "analytics.ContentElementStats" */
    insert_analytics_ContentElementStats_one?: Maybe<Analytics_ContentElementStats>;
    /** insert data into the table: "analytics.ContentItemStats" */
    insert_analytics_ContentItemStats?: Maybe<Analytics_ContentItemStats_Mutation_Response>;
    /** insert a single row into the table: "analytics.ContentItemStats" */
    insert_analytics_ContentItemStats_one?: Maybe<Analytics_ContentItemStats>;
    /** insert data into the table: "analytics.RoomStats" */
    insert_analytics_RoomStats?: Maybe<Analytics_RoomStats_Mutation_Response>;
    /** insert a single row into the table: "analytics.RoomStats" */
    insert_analytics_RoomStats_one?: Maybe<Analytics_RoomStats>;
    /** insert data into the table: "analytics.mat_ElementTotalViews" */
    insert_analytics_mat_ElementTotalViews?: Maybe<Analytics_Mat_ElementTotalViews_Mutation_Response>;
    /** insert a single row into the table: "analytics.mat_ElementTotalViews" */
    insert_analytics_mat_ElementTotalViews_one?: Maybe<Analytics_Mat_ElementTotalViews>;
    /** insert data into the table: "analytics.mat_ItemTotalViews" */
    insert_analytics_mat_ItemTotalViews?: Maybe<Analytics_Mat_ItemTotalViews_Mutation_Response>;
    /** insert a single row into the table: "analytics.mat_ItemTotalViews" */
    insert_analytics_mat_ItemTotalViews_one?: Maybe<Analytics_Mat_ItemTotalViews>;
    /** insert data into the table: "analytics.mat_RoomPresence" */
    insert_analytics_mat_RoomPresence?: Maybe<Analytics_Mat_RoomPresence_Mutation_Response>;
    /** insert a single row into the table: "analytics.mat_RoomPresence" */
    insert_analytics_mat_RoomPresence_one?: Maybe<Analytics_Mat_RoomPresence>;
    /** insert data into the table: "chat.Chat" */
    insert_chat_Chat?: Maybe<Chat_Chat_Mutation_Response>;
    /** insert a single row into the table: "chat.Chat" */
    insert_chat_Chat_one?: Maybe<Chat_Chat>;
    /** insert data into the table: "chat.Flag" */
    insert_chat_Flag?: Maybe<Chat_Flag_Mutation_Response>;
    /** insert data into the table: "chat.FlagType" */
    insert_chat_FlagType?: Maybe<Chat_FlagType_Mutation_Response>;
    /** insert a single row into the table: "chat.FlagType" */
    insert_chat_FlagType_one?: Maybe<Chat_FlagType>;
    /** insert a single row into the table: "chat.Flag" */
    insert_chat_Flag_one?: Maybe<Chat_Flag>;
    /** insert data into the table: "chat.Message" */
    insert_chat_Message?: Maybe<Chat_Message_Mutation_Response>;
    /** insert data into the table: "chat.MessageType" */
    insert_chat_MessageType?: Maybe<Chat_MessageType_Mutation_Response>;
    /** insert a single row into the table: "chat.MessageType" */
    insert_chat_MessageType_one?: Maybe<Chat_MessageType>;
    /** insert a single row into the table: "chat.Message" */
    insert_chat_Message_one?: Maybe<Chat_Message>;
    /** insert data into the table: "chat.Pin" */
    insert_chat_Pin?: Maybe<Chat_Pin_Mutation_Response>;
    /** insert a single row into the table: "chat.Pin" */
    insert_chat_Pin_one?: Maybe<Chat_Pin>;
    /** insert data into the table: "chat.Reaction" */
    insert_chat_Reaction?: Maybe<Chat_Reaction_Mutation_Response>;
    /** insert data into the table: "chat.ReactionType" */
    insert_chat_ReactionType?: Maybe<Chat_ReactionType_Mutation_Response>;
    /** insert a single row into the table: "chat.ReactionType" */
    insert_chat_ReactionType_one?: Maybe<Chat_ReactionType>;
    /** insert a single row into the table: "chat.Reaction" */
    insert_chat_Reaction_one?: Maybe<Chat_Reaction>;
    /** insert data into the table: "chat.ReadUpToIndex" */
    insert_chat_ReadUpToIndex?: Maybe<Chat_ReadUpToIndex_Mutation_Response>;
    /** insert a single row into the table: "chat.ReadUpToIndex" */
    insert_chat_ReadUpToIndex_one?: Maybe<Chat_ReadUpToIndex>;
    /** insert data into the table: "chat.Subscription" */
    insert_chat_Subscription?: Maybe<Chat_Subscription_Mutation_Response>;
    /** insert a single row into the table: "chat.Subscription" */
    insert_chat_Subscription_one?: Maybe<Chat_Subscription>;
    /** insert data into the table: "collection.Exhibition" */
    insert_collection_Exhibition?: Maybe<Collection_Exhibition_Mutation_Response>;
    /** insert a single row into the table: "collection.Exhibition" */
    insert_collection_Exhibition_one?: Maybe<Collection_Exhibition>;
    /** insert data into the table: "collection.ProgramPerson" */
    insert_collection_ProgramPerson?: Maybe<Collection_ProgramPerson_Mutation_Response>;
    /** insert a single row into the table: "collection.ProgramPerson" */
    insert_collection_ProgramPerson_one?: Maybe<Collection_ProgramPerson>;
    /** insert data into the table: "collection.Tag" */
    insert_collection_Tag?: Maybe<Collection_Tag_Mutation_Response>;
    /** insert a single row into the table: "collection.Tag" */
    insert_collection_Tag_one?: Maybe<Collection_Tag>;
    /** insert data into the table: "conference.Conference" */
    insert_conference_Conference?: Maybe<Conference_Conference_Mutation_Response>;
    /** insert a single row into the table: "conference.Conference" */
    insert_conference_Conference_one?: Maybe<Conference_Conference>;
    /** insert data into the table: "conference.Configuration" */
    insert_conference_Configuration?: Maybe<Conference_Configuration_Mutation_Response>;
    /** insert data into the table: "conference.ConfigurationKey" */
    insert_conference_ConfigurationKey?: Maybe<Conference_ConfigurationKey_Mutation_Response>;
    /** insert a single row into the table: "conference.ConfigurationKey" */
    insert_conference_ConfigurationKey_one?: Maybe<Conference_ConfigurationKey>;
    /** insert a single row into the table: "conference.Configuration" */
    insert_conference_Configuration_one?: Maybe<Conference_Configuration>;
    /** insert data into the table: "conference.DemoCode" */
    insert_conference_DemoCode?: Maybe<Conference_DemoCode_Mutation_Response>;
    /** insert a single row into the table: "conference.DemoCode" */
    insert_conference_DemoCode_one?: Maybe<Conference_DemoCode>;
    /** insert data into the table: "conference.OriginatingData" */
    insert_conference_OriginatingData?: Maybe<Conference_OriginatingData_Mutation_Response>;
    /** insert a single row into the table: "conference.OriginatingData" */
    insert_conference_OriginatingData_one?: Maybe<Conference_OriginatingData>;
    /** insert data into the table: "conference.PrepareJob" */
    insert_conference_PrepareJob?: Maybe<Conference_PrepareJob_Mutation_Response>;
    /** insert a single row into the table: "conference.PrepareJob" */
    insert_conference_PrepareJob_one?: Maybe<Conference_PrepareJob>;
    /** insert data into the table: "content.Element" */
    insert_content_Element?: Maybe<Content_Element_Mutation_Response>;
    /** insert data into the table: "content.ElementPermissionGrant" */
    insert_content_ElementPermissionGrant?: Maybe<Content_ElementPermissionGrant_Mutation_Response>;
    /** insert a single row into the table: "content.ElementPermissionGrant" */
    insert_content_ElementPermissionGrant_one?: Maybe<Content_ElementPermissionGrant>;
    /** insert data into the table: "content.ElementType" */
    insert_content_ElementType?: Maybe<Content_ElementType_Mutation_Response>;
    /** insert a single row into the table: "content.ElementType" */
    insert_content_ElementType_one?: Maybe<Content_ElementType>;
    /** insert a single row into the table: "content.Element" */
    insert_content_Element_one?: Maybe<Content_Element>;
    /** insert data into the table: "content.Item" */
    insert_content_Item?: Maybe<Content_Item_Mutation_Response>;
    /** insert data into the table: "content.ItemExhibition" */
    insert_content_ItemExhibition?: Maybe<Content_ItemExhibition_Mutation_Response>;
    /** insert a single row into the table: "content.ItemExhibition" */
    insert_content_ItemExhibition_one?: Maybe<Content_ItemExhibition>;
    /** insert data into the table: "content.ItemProgramPerson" */
    insert_content_ItemProgramPerson?: Maybe<Content_ItemProgramPerson_Mutation_Response>;
    /** insert a single row into the table: "content.ItemProgramPerson" */
    insert_content_ItemProgramPerson_one?: Maybe<Content_ItemProgramPerson>;
    /** insert data into the table: "content.ItemTag" */
    insert_content_ItemTag?: Maybe<Content_ItemTag_Mutation_Response>;
    /** insert a single row into the table: "content.ItemTag" */
    insert_content_ItemTag_one?: Maybe<Content_ItemTag>;
    /** insert data into the table: "content.ItemType" */
    insert_content_ItemType?: Maybe<Content_ItemType_Mutation_Response>;
    /** insert a single row into the table: "content.ItemType" */
    insert_content_ItemType_one?: Maybe<Content_ItemType>;
    /** insert a single row into the table: "content.Item" */
    insert_content_Item_one?: Maybe<Content_Item>;
    /** insert data into the table: "content.Uploader" */
    insert_content_Uploader?: Maybe<Content_Uploader_Mutation_Response>;
    /** insert a single row into the table: "content.Uploader" */
    insert_content_Uploader_one?: Maybe<Content_Uploader>;
    /** insert data into the table: "job_queues.ChannelStackCreateJob" */
    insert_job_queues_ChannelStackCreateJob?: Maybe<Job_Queues_ChannelStackCreateJob_Mutation_Response>;
    /** insert a single row into the table: "job_queues.ChannelStackCreateJob" */
    insert_job_queues_ChannelStackCreateJob_one?: Maybe<Job_Queues_ChannelStackCreateJob>;
    /** insert data into the table: "job_queues.ChannelStackDeleteJob" */
    insert_job_queues_ChannelStackDeleteJob?: Maybe<Job_Queues_ChannelStackDeleteJob_Mutation_Response>;
    /** insert a single row into the table: "job_queues.ChannelStackDeleteJob" */
    insert_job_queues_ChannelStackDeleteJob_one?: Maybe<Job_Queues_ChannelStackDeleteJob>;
    /** insert data into the table: "job_queues.CombineVideosJob" */
    insert_job_queues_CombineVideosJob?: Maybe<Job_Queues_CombineVideosJob_Mutation_Response>;
    /** insert a single row into the table: "job_queues.CombineVideosJob" */
    insert_job_queues_CombineVideosJob_one?: Maybe<Job_Queues_CombineVideosJob>;
    /** insert data into the table: "job_queues.CustomEmailJob" */
    insert_job_queues_CustomEmailJob?: Maybe<Job_Queues_CustomEmailJob_Mutation_Response>;
    /** insert a single row into the table: "job_queues.CustomEmailJob" */
    insert_job_queues_CustomEmailJob_one?: Maybe<Job_Queues_CustomEmailJob>;
    /** insert data into the table: "job_queues.InvitationEmailJob" */
    insert_job_queues_InvitationEmailJob?: Maybe<Job_Queues_InvitationEmailJob_Mutation_Response>;
    /** insert a single row into the table: "job_queues.InvitationEmailJob" */
    insert_job_queues_InvitationEmailJob_one?: Maybe<Job_Queues_InvitationEmailJob>;
    /** insert data into the table: "job_queues.MediaPackageHarvestJob" */
    insert_job_queues_MediaPackageHarvestJob?: Maybe<Job_Queues_MediaPackageHarvestJob_Mutation_Response>;
    /** insert a single row into the table: "job_queues.MediaPackageHarvestJob" */
    insert_job_queues_MediaPackageHarvestJob_one?: Maybe<Job_Queues_MediaPackageHarvestJob>;
    /** insert data into the table: "job_queues.PublishVideoJob" */
    insert_job_queues_PublishVideoJob?: Maybe<Job_Queues_PublishVideoJob_Mutation_Response>;
    /** insert a single row into the table: "job_queues.PublishVideoJob" */
    insert_job_queues_PublishVideoJob_one?: Maybe<Job_Queues_PublishVideoJob>;
    /** insert data into the table: "job_queues.SubmissionRequestEmailJob" */
    insert_job_queues_SubmissionRequestEmailJob?: Maybe<Job_Queues_SubmissionRequestEmailJob_Mutation_Response>;
    /** insert a single row into the table: "job_queues.SubmissionRequestEmailJob" */
    insert_job_queues_SubmissionRequestEmailJob_one?: Maybe<Job_Queues_SubmissionRequestEmailJob>;
    /** insert data into the table: "job_queues.UploadYouTubeVideoJob" */
    insert_job_queues_UploadYouTubeVideoJob?: Maybe<Job_Queues_UploadYouTubeVideoJob_Mutation_Response>;
    /** insert a single row into the table: "job_queues.UploadYouTubeVideoJob" */
    insert_job_queues_UploadYouTubeVideoJob_one?: Maybe<Job_Queues_UploadYouTubeVideoJob>;
    /** insert data into the table: "permissions.Group" */
    insert_permissions_Group?: Maybe<Permissions_Group_Mutation_Response>;
    /** insert data into the table: "permissions.GroupRegistrant" */
    insert_permissions_GroupRegistrant?: Maybe<Permissions_GroupRegistrant_Mutation_Response>;
    /** insert a single row into the table: "permissions.GroupRegistrant" */
    insert_permissions_GroupRegistrant_one?: Maybe<Permissions_GroupRegistrant>;
    /** insert data into the table: "permissions.GroupRole" */
    insert_permissions_GroupRole?: Maybe<Permissions_GroupRole_Mutation_Response>;
    /** insert a single row into the table: "permissions.GroupRole" */
    insert_permissions_GroupRole_one?: Maybe<Permissions_GroupRole>;
    /** insert a single row into the table: "permissions.Group" */
    insert_permissions_Group_one?: Maybe<Permissions_Group>;
    /** insert data into the table: "permissions.Permission" */
    insert_permissions_Permission?: Maybe<Permissions_Permission_Mutation_Response>;
    /** insert a single row into the table: "permissions.Permission" */
    insert_permissions_Permission_one?: Maybe<Permissions_Permission>;
    /** insert data into the table: "permissions.Role" */
    insert_permissions_Role?: Maybe<Permissions_Role_Mutation_Response>;
    /** insert data into the table: "permissions.RolePermission" */
    insert_permissions_RolePermission?: Maybe<Permissions_RolePermission_Mutation_Response>;
    /** insert a single row into the table: "permissions.RolePermission" */
    insert_permissions_RolePermission_one?: Maybe<Permissions_RolePermission>;
    /** insert a single row into the table: "permissions.Role" */
    insert_permissions_Role_one?: Maybe<Permissions_Role>;
    /** insert data into the table: "registrant.GoogleAccount" */
    insert_registrant_GoogleAccount?: Maybe<Registrant_GoogleAccount_Mutation_Response>;
    /** insert a single row into the table: "registrant.GoogleAccount" */
    insert_registrant_GoogleAccount_one?: Maybe<Registrant_GoogleAccount>;
    /** insert data into the table: "registrant.Invitation" */
    insert_registrant_Invitation?: Maybe<Registrant_Invitation_Mutation_Response>;
    /** insert a single row into the table: "registrant.Invitation" */
    insert_registrant_Invitation_one?: Maybe<Registrant_Invitation>;
    /** insert data into the table: "registrant.Profile" */
    insert_registrant_Profile?: Maybe<Registrant_Profile_Mutation_Response>;
    /** insert a single row into the table: "registrant.Profile" */
    insert_registrant_Profile_one?: Maybe<Registrant_Profile>;
    /** insert data into the table: "registrant.Registrant" */
    insert_registrant_Registrant?: Maybe<Registrant_Registrant_Mutation_Response>;
    /** insert a single row into the table: "registrant.Registrant" */
    insert_registrant_Registrant_one?: Maybe<Registrant_Registrant>;
    /** insert data into the table: "room.Backend" */
    insert_room_Backend?: Maybe<Room_Backend_Mutation_Response>;
    /** insert a single row into the table: "room.Backend" */
    insert_room_Backend_one?: Maybe<Room_Backend>;
    /** insert data into the table: "room.ChimeMeeting" */
    insert_room_ChimeMeeting?: Maybe<Room_ChimeMeeting_Mutation_Response>;
    /** insert a single row into the table: "room.ChimeMeeting" */
    insert_room_ChimeMeeting_one?: Maybe<Room_ChimeMeeting>;
    /** insert data into the table: "room.ManagementMode" */
    insert_room_ManagementMode?: Maybe<Room_ManagementMode_Mutation_Response>;
    /** insert a single row into the table: "room.ManagementMode" */
    insert_room_ManagementMode_one?: Maybe<Room_ManagementMode>;
    /** insert data into the table: "room.Mode" */
    insert_room_Mode?: Maybe<Room_Mode_Mutation_Response>;
    /** insert a single row into the table: "room.Mode" */
    insert_room_Mode_one?: Maybe<Room_Mode>;
    /** insert data into the table: "room.Participant" */
    insert_room_Participant?: Maybe<Room_Participant_Mutation_Response>;
    /** insert a single row into the table: "room.Participant" */
    insert_room_Participant_one?: Maybe<Room_Participant>;
    /** insert data into the table: "room.PersonRole" */
    insert_room_PersonRole?: Maybe<Room_PersonRole_Mutation_Response>;
    /** insert a single row into the table: "room.PersonRole" */
    insert_room_PersonRole_one?: Maybe<Room_PersonRole>;
    /** insert data into the table: "room.Room" */
    insert_room_Room?: Maybe<Room_Room_Mutation_Response>;
    /** insert data into the table: "room.RoomPerson" */
    insert_room_RoomPerson?: Maybe<Room_RoomPerson_Mutation_Response>;
    /** insert a single row into the table: "room.RoomPerson" */
    insert_room_RoomPerson_one?: Maybe<Room_RoomPerson>;
    /** insert a single row into the table: "room.Room" */
    insert_room_Room_one?: Maybe<Room_Room>;
    /** insert data into the table: "room.ShuffleAlgorithm" */
    insert_room_ShuffleAlgorithm?: Maybe<Room_ShuffleAlgorithm_Mutation_Response>;
    /** insert a single row into the table: "room.ShuffleAlgorithm" */
    insert_room_ShuffleAlgorithm_one?: Maybe<Room_ShuffleAlgorithm>;
    /** insert data into the table: "room.ShufflePeriod" */
    insert_room_ShufflePeriod?: Maybe<Room_ShufflePeriod_Mutation_Response>;
    /** insert a single row into the table: "room.ShufflePeriod" */
    insert_room_ShufflePeriod_one?: Maybe<Room_ShufflePeriod>;
    /** insert data into the table: "room.ShuffleQueueEntry" */
    insert_room_ShuffleQueueEntry?: Maybe<Room_ShuffleQueueEntry_Mutation_Response>;
    /** insert a single row into the table: "room.ShuffleQueueEntry" */
    insert_room_ShuffleQueueEntry_one?: Maybe<Room_ShuffleQueueEntry>;
    /** insert data into the table: "room.ShuffleRoom" */
    insert_room_ShuffleRoom?: Maybe<Room_ShuffleRoom_Mutation_Response>;
    /** insert a single row into the table: "room.ShuffleRoom" */
    insert_room_ShuffleRoom_one?: Maybe<Room_ShuffleRoom>;
    /** insert data into the table: "schedule.Continuation" */
    insert_schedule_Continuation?: Maybe<Schedule_Continuation_Mutation_Response>;
    /** insert a single row into the table: "schedule.Continuation" */
    insert_schedule_Continuation_one?: Maybe<Schedule_Continuation>;
    /** insert data into the table: "schedule.Event" */
    insert_schedule_Event?: Maybe<Schedule_Event_Mutation_Response>;
    /** insert data into the table: "schedule.EventProgramPerson" */
    insert_schedule_EventProgramPerson?: Maybe<Schedule_EventProgramPerson_Mutation_Response>;
    /** insert data into the table: "schedule.EventProgramPersonRole" */
    insert_schedule_EventProgramPersonRole?: Maybe<Schedule_EventProgramPersonRole_Mutation_Response>;
    /** insert a single row into the table: "schedule.EventProgramPersonRole" */
    insert_schedule_EventProgramPersonRole_one?: Maybe<Schedule_EventProgramPersonRole>;
    /** insert a single row into the table: "schedule.EventProgramPerson" */
    insert_schedule_EventProgramPerson_one?: Maybe<Schedule_EventProgramPerson>;
    /** insert data into the table: "schedule.EventTag" */
    insert_schedule_EventTag?: Maybe<Schedule_EventTag_Mutation_Response>;
    /** insert a single row into the table: "schedule.EventTag" */
    insert_schedule_EventTag_one?: Maybe<Schedule_EventTag>;
    /** insert a single row into the table: "schedule.Event" */
    insert_schedule_Event_one?: Maybe<Schedule_Event>;
    /** insert data into the table: "schedule.StarredEvent" */
    insert_schedule_StarredEvent?: Maybe<Schedule_StarredEvent_Mutation_Response>;
    /** insert a single row into the table: "schedule.StarredEvent" */
    insert_schedule_StarredEvent_one?: Maybe<Schedule_StarredEvent>;
    /** insert data into the table: "system.Configuration" */
    insert_system_Configuration?: Maybe<System_Configuration_Mutation_Response>;
    /** insert data into the table: "system.ConfigurationKey" */
    insert_system_ConfigurationKey?: Maybe<System_ConfigurationKey_Mutation_Response>;
    /** insert a single row into the table: "system.ConfigurationKey" */
    insert_system_ConfigurationKey_one?: Maybe<System_ConfigurationKey>;
    /** insert a single row into the table: "system.Configuration" */
    insert_system_Configuration_one?: Maybe<System_Configuration>;
    /** insert data into the table: "video.ChannelStack" */
    insert_video_ChannelStack?: Maybe<Video_ChannelStack_Mutation_Response>;
    /** insert a single row into the table: "video.ChannelStack" */
    insert_video_ChannelStack_one?: Maybe<Video_ChannelStack>;
    /** insert data into the table: "video.EventParticipantStream" */
    insert_video_EventParticipantStream?: Maybe<Video_EventParticipantStream_Mutation_Response>;
    /** insert a single row into the table: "video.EventParticipantStream" */
    insert_video_EventParticipantStream_one?: Maybe<Video_EventParticipantStream>;
    /** insert data into the table: "video.EventVonageSession" */
    insert_video_EventVonageSession?: Maybe<Video_EventVonageSession_Mutation_Response>;
    /** insert a single row into the table: "video.EventVonageSession" */
    insert_video_EventVonageSession_one?: Maybe<Video_EventVonageSession>;
    /** insert data into the table: "video.ImmediateSwitch" */
    insert_video_ImmediateSwitch?: Maybe<Video_ImmediateSwitch_Mutation_Response>;
    /** insert a single row into the table: "video.ImmediateSwitch" */
    insert_video_ImmediateSwitch_one?: Maybe<Video_ImmediateSwitch>;
    /** insert data into the table: "video.InputType" */
    insert_video_InputType?: Maybe<Video_InputType_Mutation_Response>;
    /** insert a single row into the table: "video.InputType" */
    insert_video_InputType_one?: Maybe<Video_InputType>;
    /** insert data into the table: "video.JobStatus" */
    insert_video_JobStatus?: Maybe<Video_JobStatus_Mutation_Response>;
    /** insert a single row into the table: "video.JobStatus" */
    insert_video_JobStatus_one?: Maybe<Video_JobStatus>;
    /** insert data into the table: "video.MediaLiveChannelStatus" */
    insert_video_MediaLiveChannelStatus?: Maybe<Video_MediaLiveChannelStatus_Mutation_Response>;
    /** insert a single row into the table: "video.MediaLiveChannelStatus" */
    insert_video_MediaLiveChannelStatus_one?: Maybe<Video_MediaLiveChannelStatus>;
    /** insert data into the table: "video.RtmpInput" */
    insert_video_RtmpInput?: Maybe<Video_RtmpInput_Mutation_Response>;
    /** insert a single row into the table: "video.RtmpInput" */
    insert_video_RtmpInput_one?: Maybe<Video_RtmpInput>;
    /** insert data into the table: "video.TranscriptionJob" */
    insert_video_TranscriptionJob?: Maybe<Video_TranscriptionJob_Mutation_Response>;
    /** insert a single row into the table: "video.TranscriptionJob" */
    insert_video_TranscriptionJob_one?: Maybe<Video_TranscriptionJob>;
    /** insert data into the table: "video.VideoRenderJob" */
    insert_video_VideoRenderJob?: Maybe<Video_VideoRenderJob_Mutation_Response>;
    /** insert a single row into the table: "video.VideoRenderJob" */
    insert_video_VideoRenderJob_one?: Maybe<Video_VideoRenderJob>;
    /** insert data into the table: "video.YouTubeUpload" */
    insert_video_YouTubeUpload?: Maybe<Video_YouTubeUpload_Mutation_Response>;
    /** insert a single row into the table: "video.YouTubeUpload" */
    insert_video_YouTubeUpload_one?: Maybe<Video_YouTubeUpload>;
    invitationConfirmCurrent?: Maybe<ConfirmInvitationOutput>;
    joinEventVonageSession?: Maybe<JoinEventVonageSessionOutput>;
    joinRoomChimeSession?: Maybe<JoinRoomChimeSessionOutput>;
    joinRoomVonageSession?: Maybe<JoinRoomVonageSessionOutput>;
    notifyEventEnded: NotifyEventEnded;
    presence_Flush: PresenceFlushOutput;
    refreshYouTubeData?: Maybe<RefreshYouTubeDataOutput>;
    stopEventBroadcast?: Maybe<StopEventBroadcastOutput>;
    submitGoogleOAuthCode?: Maybe<SubmitGoogleOAuthCodeOutput>;
    submitUploadableElement?: Maybe<SubmitUploadableElementOutput>;
    updateProfilePhoto?: Maybe<UpdateProfilePhotoResponse>;
    updateSubtitles?: Maybe<SubmitUpdatedSubtitlesOutput>;
    /** update data of the table: "Email" */
    update_Email?: Maybe<Email_Mutation_Response>;
    /** update single row of the table: "Email" */
    update_Email_by_pk?: Maybe<Email>;
    /** update data of the table: "PushNotificationSubscription" */
    update_PushNotificationSubscription?: Maybe<PushNotificationSubscription_Mutation_Response>;
    /** update single row of the table: "PushNotificationSubscription" */
    update_PushNotificationSubscription_by_pk?: Maybe<PushNotificationSubscription>;
    /** update data of the table: "User" */
    update_User?: Maybe<User_Mutation_Response>;
    /** update single row of the table: "User" */
    update_User_by_pk?: Maybe<User>;
    /** update data of the table: "analytics.AppStats" */
    update_analytics_AppStats?: Maybe<Analytics_AppStats_Mutation_Response>;
    /** update single row of the table: "analytics.AppStats" */
    update_analytics_AppStats_by_pk?: Maybe<Analytics_AppStats>;
    /** update data of the table: "analytics.ContentElementStats" */
    update_analytics_ContentElementStats?: Maybe<Analytics_ContentElementStats_Mutation_Response>;
    /** update single row of the table: "analytics.ContentElementStats" */
    update_analytics_ContentElementStats_by_pk?: Maybe<Analytics_ContentElementStats>;
    /** update data of the table: "analytics.ContentItemStats" */
    update_analytics_ContentItemStats?: Maybe<Analytics_ContentItemStats_Mutation_Response>;
    /** update single row of the table: "analytics.ContentItemStats" */
    update_analytics_ContentItemStats_by_pk?: Maybe<Analytics_ContentItemStats>;
    /** update data of the table: "analytics.RoomStats" */
    update_analytics_RoomStats?: Maybe<Analytics_RoomStats_Mutation_Response>;
    /** update single row of the table: "analytics.RoomStats" */
    update_analytics_RoomStats_by_pk?: Maybe<Analytics_RoomStats>;
    /** update data of the table: "analytics.mat_ElementTotalViews" */
    update_analytics_mat_ElementTotalViews?: Maybe<Analytics_Mat_ElementTotalViews_Mutation_Response>;
    /** update data of the table: "analytics.mat_ItemTotalViews" */
    update_analytics_mat_ItemTotalViews?: Maybe<Analytics_Mat_ItemTotalViews_Mutation_Response>;
    /** update data of the table: "analytics.mat_RoomPresence" */
    update_analytics_mat_RoomPresence?: Maybe<Analytics_Mat_RoomPresence_Mutation_Response>;
    /** update data of the table: "chat.Chat" */
    update_chat_Chat?: Maybe<Chat_Chat_Mutation_Response>;
    /** update single row of the table: "chat.Chat" */
    update_chat_Chat_by_pk?: Maybe<Chat_Chat>;
    /** update data of the table: "chat.Flag" */
    update_chat_Flag?: Maybe<Chat_Flag_Mutation_Response>;
    /** update data of the table: "chat.FlagType" */
    update_chat_FlagType?: Maybe<Chat_FlagType_Mutation_Response>;
    /** update single row of the table: "chat.FlagType" */
    update_chat_FlagType_by_pk?: Maybe<Chat_FlagType>;
    /** update single row of the table: "chat.Flag" */
    update_chat_Flag_by_pk?: Maybe<Chat_Flag>;
    /** update data of the table: "chat.Message" */
    update_chat_Message?: Maybe<Chat_Message_Mutation_Response>;
    /** update data of the table: "chat.MessageType" */
    update_chat_MessageType?: Maybe<Chat_MessageType_Mutation_Response>;
    /** update single row of the table: "chat.MessageType" */
    update_chat_MessageType_by_pk?: Maybe<Chat_MessageType>;
    /** update single row of the table: "chat.Message" */
    update_chat_Message_by_pk?: Maybe<Chat_Message>;
    /** update data of the table: "chat.Pin" */
    update_chat_Pin?: Maybe<Chat_Pin_Mutation_Response>;
    /** update single row of the table: "chat.Pin" */
    update_chat_Pin_by_pk?: Maybe<Chat_Pin>;
    /** update data of the table: "chat.Reaction" */
    update_chat_Reaction?: Maybe<Chat_Reaction_Mutation_Response>;
    /** update data of the table: "chat.ReactionType" */
    update_chat_ReactionType?: Maybe<Chat_ReactionType_Mutation_Response>;
    /** update single row of the table: "chat.ReactionType" */
    update_chat_ReactionType_by_pk?: Maybe<Chat_ReactionType>;
    /** update single row of the table: "chat.Reaction" */
    update_chat_Reaction_by_pk?: Maybe<Chat_Reaction>;
    /** update data of the table: "chat.ReadUpToIndex" */
    update_chat_ReadUpToIndex?: Maybe<Chat_ReadUpToIndex_Mutation_Response>;
    /** update single row of the table: "chat.ReadUpToIndex" */
    update_chat_ReadUpToIndex_by_pk?: Maybe<Chat_ReadUpToIndex>;
    /** update data of the table: "chat.Subscription" */
    update_chat_Subscription?: Maybe<Chat_Subscription_Mutation_Response>;
    /** update single row of the table: "chat.Subscription" */
    update_chat_Subscription_by_pk?: Maybe<Chat_Subscription>;
    /** update data of the table: "collection.Exhibition" */
    update_collection_Exhibition?: Maybe<Collection_Exhibition_Mutation_Response>;
    /** update single row of the table: "collection.Exhibition" */
    update_collection_Exhibition_by_pk?: Maybe<Collection_Exhibition>;
    /** update data of the table: "collection.ProgramPerson" */
    update_collection_ProgramPerson?: Maybe<Collection_ProgramPerson_Mutation_Response>;
    /** update single row of the table: "collection.ProgramPerson" */
    update_collection_ProgramPerson_by_pk?: Maybe<Collection_ProgramPerson>;
    /** update data of the table: "collection.Tag" */
    update_collection_Tag?: Maybe<Collection_Tag_Mutation_Response>;
    /** update single row of the table: "collection.Tag" */
    update_collection_Tag_by_pk?: Maybe<Collection_Tag>;
    /** update data of the table: "conference.Conference" */
    update_conference_Conference?: Maybe<Conference_Conference_Mutation_Response>;
    /** update single row of the table: "conference.Conference" */
    update_conference_Conference_by_pk?: Maybe<Conference_Conference>;
    /** update data of the table: "conference.Configuration" */
    update_conference_Configuration?: Maybe<Conference_Configuration_Mutation_Response>;
    /** update data of the table: "conference.ConfigurationKey" */
    update_conference_ConfigurationKey?: Maybe<Conference_ConfigurationKey_Mutation_Response>;
    /** update single row of the table: "conference.ConfigurationKey" */
    update_conference_ConfigurationKey_by_pk?: Maybe<Conference_ConfigurationKey>;
    /** update single row of the table: "conference.Configuration" */
    update_conference_Configuration_by_pk?: Maybe<Conference_Configuration>;
    /** update data of the table: "conference.DemoCode" */
    update_conference_DemoCode?: Maybe<Conference_DemoCode_Mutation_Response>;
    /** update single row of the table: "conference.DemoCode" */
    update_conference_DemoCode_by_pk?: Maybe<Conference_DemoCode>;
    /** update data of the table: "conference.OriginatingData" */
    update_conference_OriginatingData?: Maybe<Conference_OriginatingData_Mutation_Response>;
    /** update single row of the table: "conference.OriginatingData" */
    update_conference_OriginatingData_by_pk?: Maybe<Conference_OriginatingData>;
    /** update data of the table: "conference.PrepareJob" */
    update_conference_PrepareJob?: Maybe<Conference_PrepareJob_Mutation_Response>;
    /** update single row of the table: "conference.PrepareJob" */
    update_conference_PrepareJob_by_pk?: Maybe<Conference_PrepareJob>;
    /** update data of the table: "content.Element" */
    update_content_Element?: Maybe<Content_Element_Mutation_Response>;
    /** update data of the table: "content.ElementPermissionGrant" */
    update_content_ElementPermissionGrant?: Maybe<Content_ElementPermissionGrant_Mutation_Response>;
    /** update single row of the table: "content.ElementPermissionGrant" */
    update_content_ElementPermissionGrant_by_pk?: Maybe<Content_ElementPermissionGrant>;
    /** update data of the table: "content.ElementType" */
    update_content_ElementType?: Maybe<Content_ElementType_Mutation_Response>;
    /** update single row of the table: "content.ElementType" */
    update_content_ElementType_by_pk?: Maybe<Content_ElementType>;
    /** update single row of the table: "content.Element" */
    update_content_Element_by_pk?: Maybe<Content_Element>;
    /** update data of the table: "content.Item" */
    update_content_Item?: Maybe<Content_Item_Mutation_Response>;
    /** update data of the table: "content.ItemExhibition" */
    update_content_ItemExhibition?: Maybe<Content_ItemExhibition_Mutation_Response>;
    /** update single row of the table: "content.ItemExhibition" */
    update_content_ItemExhibition_by_pk?: Maybe<Content_ItemExhibition>;
    /** update data of the table: "content.ItemProgramPerson" */
    update_content_ItemProgramPerson?: Maybe<Content_ItemProgramPerson_Mutation_Response>;
    /** update single row of the table: "content.ItemProgramPerson" */
    update_content_ItemProgramPerson_by_pk?: Maybe<Content_ItemProgramPerson>;
    /** update data of the table: "content.ItemTag" */
    update_content_ItemTag?: Maybe<Content_ItemTag_Mutation_Response>;
    /** update single row of the table: "content.ItemTag" */
    update_content_ItemTag_by_pk?: Maybe<Content_ItemTag>;
    /** update data of the table: "content.ItemType" */
    update_content_ItemType?: Maybe<Content_ItemType_Mutation_Response>;
    /** update single row of the table: "content.ItemType" */
    update_content_ItemType_by_pk?: Maybe<Content_ItemType>;
    /** update single row of the table: "content.Item" */
    update_content_Item_by_pk?: Maybe<Content_Item>;
    /** update data of the table: "content.Uploader" */
    update_content_Uploader?: Maybe<Content_Uploader_Mutation_Response>;
    /** update single row of the table: "content.Uploader" */
    update_content_Uploader_by_pk?: Maybe<Content_Uploader>;
    /** update data of the table: "job_queues.ChannelStackCreateJob" */
    update_job_queues_ChannelStackCreateJob?: Maybe<Job_Queues_ChannelStackCreateJob_Mutation_Response>;
    /** update single row of the table: "job_queues.ChannelStackCreateJob" */
    update_job_queues_ChannelStackCreateJob_by_pk?: Maybe<Job_Queues_ChannelStackCreateJob>;
    /** update data of the table: "job_queues.ChannelStackDeleteJob" */
    update_job_queues_ChannelStackDeleteJob?: Maybe<Job_Queues_ChannelStackDeleteJob_Mutation_Response>;
    /** update single row of the table: "job_queues.ChannelStackDeleteJob" */
    update_job_queues_ChannelStackDeleteJob_by_pk?: Maybe<Job_Queues_ChannelStackDeleteJob>;
    /** update data of the table: "job_queues.CombineVideosJob" */
    update_job_queues_CombineVideosJob?: Maybe<Job_Queues_CombineVideosJob_Mutation_Response>;
    /** update single row of the table: "job_queues.CombineVideosJob" */
    update_job_queues_CombineVideosJob_by_pk?: Maybe<Job_Queues_CombineVideosJob>;
    /** update data of the table: "job_queues.CustomEmailJob" */
    update_job_queues_CustomEmailJob?: Maybe<Job_Queues_CustomEmailJob_Mutation_Response>;
    /** update single row of the table: "job_queues.CustomEmailJob" */
    update_job_queues_CustomEmailJob_by_pk?: Maybe<Job_Queues_CustomEmailJob>;
    /** update data of the table: "job_queues.InvitationEmailJob" */
    update_job_queues_InvitationEmailJob?: Maybe<Job_Queues_InvitationEmailJob_Mutation_Response>;
    /** update single row of the table: "job_queues.InvitationEmailJob" */
    update_job_queues_InvitationEmailJob_by_pk?: Maybe<Job_Queues_InvitationEmailJob>;
    /** update data of the table: "job_queues.MediaPackageHarvestJob" */
    update_job_queues_MediaPackageHarvestJob?: Maybe<Job_Queues_MediaPackageHarvestJob_Mutation_Response>;
    /** update single row of the table: "job_queues.MediaPackageHarvestJob" */
    update_job_queues_MediaPackageHarvestJob_by_pk?: Maybe<Job_Queues_MediaPackageHarvestJob>;
    /** update data of the table: "job_queues.PublishVideoJob" */
    update_job_queues_PublishVideoJob?: Maybe<Job_Queues_PublishVideoJob_Mutation_Response>;
    /** update single row of the table: "job_queues.PublishVideoJob" */
    update_job_queues_PublishVideoJob_by_pk?: Maybe<Job_Queues_PublishVideoJob>;
    /** update data of the table: "job_queues.SubmissionRequestEmailJob" */
    update_job_queues_SubmissionRequestEmailJob?: Maybe<Job_Queues_SubmissionRequestEmailJob_Mutation_Response>;
    /** update single row of the table: "job_queues.SubmissionRequestEmailJob" */
    update_job_queues_SubmissionRequestEmailJob_by_pk?: Maybe<Job_Queues_SubmissionRequestEmailJob>;
    /** update data of the table: "job_queues.UploadYouTubeVideoJob" */
    update_job_queues_UploadYouTubeVideoJob?: Maybe<Job_Queues_UploadYouTubeVideoJob_Mutation_Response>;
    /** update single row of the table: "job_queues.UploadYouTubeVideoJob" */
    update_job_queues_UploadYouTubeVideoJob_by_pk?: Maybe<Job_Queues_UploadYouTubeVideoJob>;
    /** update data of the table: "permissions.Group" */
    update_permissions_Group?: Maybe<Permissions_Group_Mutation_Response>;
    /** update data of the table: "permissions.GroupRegistrant" */
    update_permissions_GroupRegistrant?: Maybe<Permissions_GroupRegistrant_Mutation_Response>;
    /** update single row of the table: "permissions.GroupRegistrant" */
    update_permissions_GroupRegistrant_by_pk?: Maybe<Permissions_GroupRegistrant>;
    /** update data of the table: "permissions.GroupRole" */
    update_permissions_GroupRole?: Maybe<Permissions_GroupRole_Mutation_Response>;
    /** update single row of the table: "permissions.GroupRole" */
    update_permissions_GroupRole_by_pk?: Maybe<Permissions_GroupRole>;
    /** update single row of the table: "permissions.Group" */
    update_permissions_Group_by_pk?: Maybe<Permissions_Group>;
    /** update data of the table: "permissions.Permission" */
    update_permissions_Permission?: Maybe<Permissions_Permission_Mutation_Response>;
    /** update single row of the table: "permissions.Permission" */
    update_permissions_Permission_by_pk?: Maybe<Permissions_Permission>;
    /** update data of the table: "permissions.Role" */
    update_permissions_Role?: Maybe<Permissions_Role_Mutation_Response>;
    /** update data of the table: "permissions.RolePermission" */
    update_permissions_RolePermission?: Maybe<Permissions_RolePermission_Mutation_Response>;
    /** update single row of the table: "permissions.RolePermission" */
    update_permissions_RolePermission_by_pk?: Maybe<Permissions_RolePermission>;
    /** update single row of the table: "permissions.Role" */
    update_permissions_Role_by_pk?: Maybe<Permissions_Role>;
    /** update data of the table: "registrant.GoogleAccount" */
    update_registrant_GoogleAccount?: Maybe<Registrant_GoogleAccount_Mutation_Response>;
    /** update single row of the table: "registrant.GoogleAccount" */
    update_registrant_GoogleAccount_by_pk?: Maybe<Registrant_GoogleAccount>;
    /** update data of the table: "registrant.Invitation" */
    update_registrant_Invitation?: Maybe<Registrant_Invitation_Mutation_Response>;
    /** update single row of the table: "registrant.Invitation" */
    update_registrant_Invitation_by_pk?: Maybe<Registrant_Invitation>;
    /** update data of the table: "registrant.Profile" */
    update_registrant_Profile?: Maybe<Registrant_Profile_Mutation_Response>;
    /** update single row of the table: "registrant.Profile" */
    update_registrant_Profile_by_pk?: Maybe<Registrant_Profile>;
    /** update data of the table: "registrant.Registrant" */
    update_registrant_Registrant?: Maybe<Registrant_Registrant_Mutation_Response>;
    /** update single row of the table: "registrant.Registrant" */
    update_registrant_Registrant_by_pk?: Maybe<Registrant_Registrant>;
    /** update data of the table: "room.Backend" */
    update_room_Backend?: Maybe<Room_Backend_Mutation_Response>;
    /** update single row of the table: "room.Backend" */
    update_room_Backend_by_pk?: Maybe<Room_Backend>;
    /** update data of the table: "room.ChimeMeeting" */
    update_room_ChimeMeeting?: Maybe<Room_ChimeMeeting_Mutation_Response>;
    /** update single row of the table: "room.ChimeMeeting" */
    update_room_ChimeMeeting_by_pk?: Maybe<Room_ChimeMeeting>;
    /** update data of the table: "room.ManagementMode" */
    update_room_ManagementMode?: Maybe<Room_ManagementMode_Mutation_Response>;
    /** update single row of the table: "room.ManagementMode" */
    update_room_ManagementMode_by_pk?: Maybe<Room_ManagementMode>;
    /** update data of the table: "room.Mode" */
    update_room_Mode?: Maybe<Room_Mode_Mutation_Response>;
    /** update single row of the table: "room.Mode" */
    update_room_Mode_by_pk?: Maybe<Room_Mode>;
    /** update data of the table: "room.Participant" */
    update_room_Participant?: Maybe<Room_Participant_Mutation_Response>;
    /** update single row of the table: "room.Participant" */
    update_room_Participant_by_pk?: Maybe<Room_Participant>;
    /** update data of the table: "room.PersonRole" */
    update_room_PersonRole?: Maybe<Room_PersonRole_Mutation_Response>;
    /** update single row of the table: "room.PersonRole" */
    update_room_PersonRole_by_pk?: Maybe<Room_PersonRole>;
    /** update data of the table: "room.Room" */
    update_room_Room?: Maybe<Room_Room_Mutation_Response>;
    /** update data of the table: "room.RoomPerson" */
    update_room_RoomPerson?: Maybe<Room_RoomPerson_Mutation_Response>;
    /** update single row of the table: "room.RoomPerson" */
    update_room_RoomPerson_by_pk?: Maybe<Room_RoomPerson>;
    /** update single row of the table: "room.Room" */
    update_room_Room_by_pk?: Maybe<Room_Room>;
    /** update data of the table: "room.ShuffleAlgorithm" */
    update_room_ShuffleAlgorithm?: Maybe<Room_ShuffleAlgorithm_Mutation_Response>;
    /** update single row of the table: "room.ShuffleAlgorithm" */
    update_room_ShuffleAlgorithm_by_pk?: Maybe<Room_ShuffleAlgorithm>;
    /** update data of the table: "room.ShufflePeriod" */
    update_room_ShufflePeriod?: Maybe<Room_ShufflePeriod_Mutation_Response>;
    /** update single row of the table: "room.ShufflePeriod" */
    update_room_ShufflePeriod_by_pk?: Maybe<Room_ShufflePeriod>;
    /** update data of the table: "room.ShuffleQueueEntry" */
    update_room_ShuffleQueueEntry?: Maybe<Room_ShuffleQueueEntry_Mutation_Response>;
    /** update single row of the table: "room.ShuffleQueueEntry" */
    update_room_ShuffleQueueEntry_by_pk?: Maybe<Room_ShuffleQueueEntry>;
    /** update data of the table: "room.ShuffleRoom" */
    update_room_ShuffleRoom?: Maybe<Room_ShuffleRoom_Mutation_Response>;
    /** update single row of the table: "room.ShuffleRoom" */
    update_room_ShuffleRoom_by_pk?: Maybe<Room_ShuffleRoom>;
    /** update data of the table: "schedule.Continuation" */
    update_schedule_Continuation?: Maybe<Schedule_Continuation_Mutation_Response>;
    /** update single row of the table: "schedule.Continuation" */
    update_schedule_Continuation_by_pk?: Maybe<Schedule_Continuation>;
    /** update data of the table: "schedule.Event" */
    update_schedule_Event?: Maybe<Schedule_Event_Mutation_Response>;
    /** update data of the table: "schedule.EventProgramPerson" */
    update_schedule_EventProgramPerson?: Maybe<Schedule_EventProgramPerson_Mutation_Response>;
    /** update data of the table: "schedule.EventProgramPersonRole" */
    update_schedule_EventProgramPersonRole?: Maybe<Schedule_EventProgramPersonRole_Mutation_Response>;
    /** update single row of the table: "schedule.EventProgramPersonRole" */
    update_schedule_EventProgramPersonRole_by_pk?: Maybe<Schedule_EventProgramPersonRole>;
    /** update single row of the table: "schedule.EventProgramPerson" */
    update_schedule_EventProgramPerson_by_pk?: Maybe<Schedule_EventProgramPerson>;
    /** update data of the table: "schedule.EventTag" */
    update_schedule_EventTag?: Maybe<Schedule_EventTag_Mutation_Response>;
    /** update single row of the table: "schedule.EventTag" */
    update_schedule_EventTag_by_pk?: Maybe<Schedule_EventTag>;
    /** update single row of the table: "schedule.Event" */
    update_schedule_Event_by_pk?: Maybe<Schedule_Event>;
    /** update data of the table: "schedule.StarredEvent" */
    update_schedule_StarredEvent?: Maybe<Schedule_StarredEvent_Mutation_Response>;
    /** update single row of the table: "schedule.StarredEvent" */
    update_schedule_StarredEvent_by_pk?: Maybe<Schedule_StarredEvent>;
    /** update data of the table: "system.Configuration" */
    update_system_Configuration?: Maybe<System_Configuration_Mutation_Response>;
    /** update data of the table: "system.ConfigurationKey" */
    update_system_ConfigurationKey?: Maybe<System_ConfigurationKey_Mutation_Response>;
    /** update single row of the table: "system.ConfigurationKey" */
    update_system_ConfigurationKey_by_pk?: Maybe<System_ConfigurationKey>;
    /** update single row of the table: "system.Configuration" */
    update_system_Configuration_by_pk?: Maybe<System_Configuration>;
    /** update data of the table: "video.ChannelStack" */
    update_video_ChannelStack?: Maybe<Video_ChannelStack_Mutation_Response>;
    /** update single row of the table: "video.ChannelStack" */
    update_video_ChannelStack_by_pk?: Maybe<Video_ChannelStack>;
    /** update data of the table: "video.EventParticipantStream" */
    update_video_EventParticipantStream?: Maybe<Video_EventParticipantStream_Mutation_Response>;
    /** update single row of the table: "video.EventParticipantStream" */
    update_video_EventParticipantStream_by_pk?: Maybe<Video_EventParticipantStream>;
    /** update data of the table: "video.EventVonageSession" */
    update_video_EventVonageSession?: Maybe<Video_EventVonageSession_Mutation_Response>;
    /** update single row of the table: "video.EventVonageSession" */
    update_video_EventVonageSession_by_pk?: Maybe<Video_EventVonageSession>;
    /** update data of the table: "video.ImmediateSwitch" */
    update_video_ImmediateSwitch?: Maybe<Video_ImmediateSwitch_Mutation_Response>;
    /** update single row of the table: "video.ImmediateSwitch" */
    update_video_ImmediateSwitch_by_pk?: Maybe<Video_ImmediateSwitch>;
    /** update data of the table: "video.InputType" */
    update_video_InputType?: Maybe<Video_InputType_Mutation_Response>;
    /** update single row of the table: "video.InputType" */
    update_video_InputType_by_pk?: Maybe<Video_InputType>;
    /** update data of the table: "video.JobStatus" */
    update_video_JobStatus?: Maybe<Video_JobStatus_Mutation_Response>;
    /** update single row of the table: "video.JobStatus" */
    update_video_JobStatus_by_pk?: Maybe<Video_JobStatus>;
    /** update data of the table: "video.MediaLiveChannelStatus" */
    update_video_MediaLiveChannelStatus?: Maybe<Video_MediaLiveChannelStatus_Mutation_Response>;
    /** update single row of the table: "video.MediaLiveChannelStatus" */
    update_video_MediaLiveChannelStatus_by_pk?: Maybe<Video_MediaLiveChannelStatus>;
    /** update data of the table: "video.RtmpInput" */
    update_video_RtmpInput?: Maybe<Video_RtmpInput_Mutation_Response>;
    /** update single row of the table: "video.RtmpInput" */
    update_video_RtmpInput_by_pk?: Maybe<Video_RtmpInput>;
    /** update data of the table: "video.TranscriptionJob" */
    update_video_TranscriptionJob?: Maybe<Video_TranscriptionJob_Mutation_Response>;
    /** update single row of the table: "video.TranscriptionJob" */
    update_video_TranscriptionJob_by_pk?: Maybe<Video_TranscriptionJob>;
    /** update data of the table: "video.VideoRenderJob" */
    update_video_VideoRenderJob?: Maybe<Video_VideoRenderJob_Mutation_Response>;
    /** update single row of the table: "video.VideoRenderJob" */
    update_video_VideoRenderJob_by_pk?: Maybe<Video_VideoRenderJob>;
    /** update data of the table: "video.YouTubeUpload" */
    update_video_YouTubeUpload?: Maybe<Video_YouTubeUpload_Mutation_Response>;
    /** update single row of the table: "video.YouTubeUpload" */
    update_video_YouTubeUpload_by_pk?: Maybe<Video_YouTubeUpload>;
};

/** mutation root */
export type Mutation_RootCreateItemRoomArgs = {
    conferenceId: Scalars["uuid"];
    itemId: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootCreateRoomDmArgs = {
    conferenceId: Scalars["uuid"];
    registrantIds: Array<Maybe<Scalars["uuid"]>>;
};

/** mutation root */
export type Mutation_RootDelete_EmailArgs = {
    where: Email_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Email_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_PushNotificationSubscriptionArgs = {
    where: PushNotificationSubscription_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_PushNotificationSubscription_By_PkArgs = {
    endpoint: Scalars["String"];
};

/** mutation root */
export type Mutation_RootDelete_UserArgs = {
    where: User_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_User_By_PkArgs = {
    id: Scalars["String"];
};

/** mutation root */
export type Mutation_RootDelete_Analytics_AppStatsArgs = {
    where: Analytics_AppStats_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Analytics_AppStats_By_PkArgs = {
    id: Scalars["Int"];
};

/** mutation root */
export type Mutation_RootDelete_Analytics_ContentElementStatsArgs = {
    where: Analytics_ContentElementStats_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Analytics_ContentElementStats_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Analytics_ContentItemStatsArgs = {
    where: Analytics_ContentItemStats_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Analytics_ContentItemStats_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Analytics_RoomStatsArgs = {
    where: Analytics_RoomStats_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Analytics_RoomStats_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Analytics_Mat_ElementTotalViewsArgs = {
    where: Analytics_Mat_ElementTotalViews_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Analytics_Mat_ItemTotalViewsArgs = {
    where: Analytics_Mat_ItemTotalViews_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Analytics_Mat_RoomPresenceArgs = {
    where: Analytics_Mat_RoomPresence_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Chat_ChatArgs = {
    where: Chat_Chat_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Chat_Chat_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Chat_FlagArgs = {
    where: Chat_Flag_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Chat_FlagTypeArgs = {
    where: Chat_FlagType_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Chat_FlagType_By_PkArgs = {
    name: Scalars["String"];
};

/** mutation root */
export type Mutation_RootDelete_Chat_Flag_By_PkArgs = {
    id: Scalars["Int"];
};

/** mutation root */
export type Mutation_RootDelete_Chat_MessageArgs = {
    where: Chat_Message_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Chat_MessageTypeArgs = {
    where: Chat_MessageType_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Chat_MessageType_By_PkArgs = {
    name: Scalars["String"];
};

/** mutation root */
export type Mutation_RootDelete_Chat_Message_By_PkArgs = {
    id: Scalars["Int"];
};

/** mutation root */
export type Mutation_RootDelete_Chat_PinArgs = {
    where: Chat_Pin_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Chat_Pin_By_PkArgs = {
    chatId: Scalars["uuid"];
    registrantId: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Chat_ReactionArgs = {
    where: Chat_Reaction_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Chat_ReactionTypeArgs = {
    where: Chat_ReactionType_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Chat_ReactionType_By_PkArgs = {
    name: Scalars["String"];
};

/** mutation root */
export type Mutation_RootDelete_Chat_Reaction_By_PkArgs = {
    sId: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Chat_ReadUpToIndexArgs = {
    where: Chat_ReadUpToIndex_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Chat_ReadUpToIndex_By_PkArgs = {
    chatId: Scalars["uuid"];
    registrantId: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Chat_SubscriptionArgs = {
    where: Chat_Subscription_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Chat_Subscription_By_PkArgs = {
    chatId: Scalars["uuid"];
    registrantId: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Collection_ExhibitionArgs = {
    where: Collection_Exhibition_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Collection_Exhibition_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Collection_ProgramPersonArgs = {
    where: Collection_ProgramPerson_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Collection_ProgramPerson_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Collection_TagArgs = {
    where: Collection_Tag_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Collection_Tag_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Conference_ConferenceArgs = {
    where: Conference_Conference_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Conference_Conference_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Conference_ConfigurationArgs = {
    where: Conference_Configuration_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Conference_ConfigurationKeyArgs = {
    where: Conference_ConfigurationKey_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Conference_ConfigurationKey_By_PkArgs = {
    name: Scalars["String"];
};

/** mutation root */
export type Mutation_RootDelete_Conference_Configuration_By_PkArgs = {
    conferenceId: Scalars["uuid"];
    key: Conference_ConfigurationKey_Enum;
};

/** mutation root */
export type Mutation_RootDelete_Conference_DemoCodeArgs = {
    where: Conference_DemoCode_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Conference_DemoCode_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Conference_OriginatingDataArgs = {
    where: Conference_OriginatingData_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Conference_OriginatingData_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Conference_PrepareJobArgs = {
    where: Conference_PrepareJob_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Conference_PrepareJob_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Content_ElementArgs = {
    where: Content_Element_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Content_ElementPermissionGrantArgs = {
    where: Content_ElementPermissionGrant_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Content_ElementPermissionGrant_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Content_ElementTypeArgs = {
    where: Content_ElementType_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Content_ElementType_By_PkArgs = {
    name: Scalars["String"];
};

/** mutation root */
export type Mutation_RootDelete_Content_Element_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Content_ItemArgs = {
    where: Content_Item_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Content_ItemExhibitionArgs = {
    where: Content_ItemExhibition_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Content_ItemExhibition_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Content_ItemProgramPersonArgs = {
    where: Content_ItemProgramPerson_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Content_ItemProgramPerson_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Content_ItemTagArgs = {
    where: Content_ItemTag_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Content_ItemTag_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Content_ItemTypeArgs = {
    where: Content_ItemType_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Content_ItemType_By_PkArgs = {
    name: Scalars["String"];
};

/** mutation root */
export type Mutation_RootDelete_Content_Item_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Content_UploaderArgs = {
    where: Content_Uploader_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Content_Uploader_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Job_Queues_ChannelStackCreateJobArgs = {
    where: Job_Queues_ChannelStackCreateJob_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Job_Queues_ChannelStackCreateJob_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Job_Queues_ChannelStackDeleteJobArgs = {
    where: Job_Queues_ChannelStackDeleteJob_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Job_Queues_ChannelStackDeleteJob_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Job_Queues_CombineVideosJobArgs = {
    where: Job_Queues_CombineVideosJob_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Job_Queues_CombineVideosJob_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Job_Queues_CustomEmailJobArgs = {
    where: Job_Queues_CustomEmailJob_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Job_Queues_CustomEmailJob_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Job_Queues_InvitationEmailJobArgs = {
    where: Job_Queues_InvitationEmailJob_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Job_Queues_InvitationEmailJob_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Job_Queues_MediaPackageHarvestJobArgs = {
    where: Job_Queues_MediaPackageHarvestJob_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Job_Queues_MediaPackageHarvestJob_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Job_Queues_PublishVideoJobArgs = {
    where: Job_Queues_PublishVideoJob_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Job_Queues_PublishVideoJob_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Job_Queues_SubmissionRequestEmailJobArgs = {
    where: Job_Queues_SubmissionRequestEmailJob_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Job_Queues_SubmissionRequestEmailJob_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Job_Queues_UploadYouTubeVideoJobArgs = {
    where: Job_Queues_UploadYouTubeVideoJob_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Job_Queues_UploadYouTubeVideoJob_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Permissions_GroupArgs = {
    where: Permissions_Group_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Permissions_GroupRegistrantArgs = {
    where: Permissions_GroupRegistrant_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Permissions_GroupRegistrant_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Permissions_GroupRoleArgs = {
    where: Permissions_GroupRole_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Permissions_GroupRole_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Permissions_Group_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Permissions_PermissionArgs = {
    where: Permissions_Permission_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Permissions_Permission_By_PkArgs = {
    name: Scalars["String"];
};

/** mutation root */
export type Mutation_RootDelete_Permissions_RoleArgs = {
    where: Permissions_Role_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Permissions_RolePermissionArgs = {
    where: Permissions_RolePermission_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Permissions_RolePermission_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Permissions_Role_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Registrant_GoogleAccountArgs = {
    where: Registrant_GoogleAccount_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Registrant_GoogleAccount_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Registrant_InvitationArgs = {
    where: Registrant_Invitation_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Registrant_Invitation_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Registrant_ProfileArgs = {
    where: Registrant_Profile_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Registrant_Profile_By_PkArgs = {
    registrantId: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Registrant_RegistrantArgs = {
    where: Registrant_Registrant_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Registrant_Registrant_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Room_BackendArgs = {
    where: Room_Backend_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Room_Backend_By_PkArgs = {
    name: Scalars["String"];
};

/** mutation root */
export type Mutation_RootDelete_Room_ChimeMeetingArgs = {
    where: Room_ChimeMeeting_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Room_ChimeMeeting_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Room_ManagementModeArgs = {
    where: Room_ManagementMode_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Room_ManagementMode_By_PkArgs = {
    name: Scalars["String"];
};

/** mutation root */
export type Mutation_RootDelete_Room_ModeArgs = {
    where: Room_Mode_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Room_Mode_By_PkArgs = {
    name: Scalars["String"];
};

/** mutation root */
export type Mutation_RootDelete_Room_ParticipantArgs = {
    where: Room_Participant_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Room_Participant_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Room_PersonRoleArgs = {
    where: Room_PersonRole_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Room_PersonRole_By_PkArgs = {
    name: Scalars["String"];
};

/** mutation root */
export type Mutation_RootDelete_Room_RoomArgs = {
    where: Room_Room_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Room_RoomPersonArgs = {
    where: Room_RoomPerson_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Room_RoomPerson_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Room_Room_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Room_ShuffleAlgorithmArgs = {
    where: Room_ShuffleAlgorithm_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Room_ShuffleAlgorithm_By_PkArgs = {
    name: Scalars["String"];
};

/** mutation root */
export type Mutation_RootDelete_Room_ShufflePeriodArgs = {
    where: Room_ShufflePeriod_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Room_ShufflePeriod_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Room_ShuffleQueueEntryArgs = {
    where: Room_ShuffleQueueEntry_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Room_ShuffleQueueEntry_By_PkArgs = {
    id: Scalars["bigint"];
};

/** mutation root */
export type Mutation_RootDelete_Room_ShuffleRoomArgs = {
    where: Room_ShuffleRoom_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Room_ShuffleRoom_By_PkArgs = {
    id: Scalars["bigint"];
};

/** mutation root */
export type Mutation_RootDelete_Schedule_ContinuationArgs = {
    where: Schedule_Continuation_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Schedule_Continuation_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Schedule_EventArgs = {
    where: Schedule_Event_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Schedule_EventProgramPersonArgs = {
    where: Schedule_EventProgramPerson_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Schedule_EventProgramPersonRoleArgs = {
    where: Schedule_EventProgramPersonRole_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Schedule_EventProgramPersonRole_By_PkArgs = {
    name: Scalars["String"];
};

/** mutation root */
export type Mutation_RootDelete_Schedule_EventProgramPerson_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Schedule_EventTagArgs = {
    where: Schedule_EventTag_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Schedule_EventTag_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Schedule_Event_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Schedule_StarredEventArgs = {
    where: Schedule_StarredEvent_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Schedule_StarredEvent_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_System_ConfigurationArgs = {
    where: System_Configuration_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_System_ConfigurationKeyArgs = {
    where: System_ConfigurationKey_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_System_ConfigurationKey_By_PkArgs = {
    name: Scalars["String"];
};

/** mutation root */
export type Mutation_RootDelete_System_Configuration_By_PkArgs = {
    key: System_ConfigurationKey_Enum;
};

/** mutation root */
export type Mutation_RootDelete_Video_ChannelStackArgs = {
    where: Video_ChannelStack_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Video_ChannelStack_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Video_EventParticipantStreamArgs = {
    where: Video_EventParticipantStream_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Video_EventParticipantStream_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Video_EventVonageSessionArgs = {
    where: Video_EventVonageSession_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Video_EventVonageSession_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Video_ImmediateSwitchArgs = {
    where: Video_ImmediateSwitch_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Video_ImmediateSwitch_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Video_InputTypeArgs = {
    where: Video_InputType_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Video_InputType_By_PkArgs = {
    name: Scalars["String"];
};

/** mutation root */
export type Mutation_RootDelete_Video_JobStatusArgs = {
    where: Video_JobStatus_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Video_JobStatus_By_PkArgs = {
    name: Scalars["String"];
};

/** mutation root */
export type Mutation_RootDelete_Video_MediaLiveChannelStatusArgs = {
    where: Video_MediaLiveChannelStatus_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Video_MediaLiveChannelStatus_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Video_RtmpInputArgs = {
    where: Video_RtmpInput_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Video_RtmpInput_By_PkArgs = {
    name: Scalars["String"];
};

/** mutation root */
export type Mutation_RootDelete_Video_TranscriptionJobArgs = {
    where: Video_TranscriptionJob_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Video_TranscriptionJob_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Video_VideoRenderJobArgs = {
    where: Video_VideoRenderJob_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Video_VideoRenderJob_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_Video_YouTubeUploadArgs = {
    where: Video_YouTubeUpload_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Video_YouTubeUpload_By_PkArgs = {
    id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootGetGoogleOAuthUrlArgs = {
    registrantId: Scalars["uuid"];
    scopes: Array<Scalars["String"]>;
};

/** mutation root */
export type Mutation_RootInsert_EmailArgs = {
    objects: Array<Email_Insert_Input>;
    on_conflict?: Maybe<Email_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Email_OneArgs = {
    object: Email_Insert_Input;
    on_conflict?: Maybe<Email_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_PushNotificationSubscriptionArgs = {
    objects: Array<PushNotificationSubscription_Insert_Input>;
    on_conflict?: Maybe<PushNotificationSubscription_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_PushNotificationSubscription_OneArgs = {
    object: PushNotificationSubscription_Insert_Input;
    on_conflict?: Maybe<PushNotificationSubscription_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_UserArgs = {
    objects: Array<User_Insert_Input>;
    on_conflict?: Maybe<User_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_User_OneArgs = {
    object: User_Insert_Input;
    on_conflict?: Maybe<User_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Analytics_AppStatsArgs = {
    objects: Array<Analytics_AppStats_Insert_Input>;
    on_conflict?: Maybe<Analytics_AppStats_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Analytics_AppStats_OneArgs = {
    object: Analytics_AppStats_Insert_Input;
    on_conflict?: Maybe<Analytics_AppStats_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Analytics_ContentElementStatsArgs = {
    objects: Array<Analytics_ContentElementStats_Insert_Input>;
    on_conflict?: Maybe<Analytics_ContentElementStats_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Analytics_ContentElementStats_OneArgs = {
    object: Analytics_ContentElementStats_Insert_Input;
    on_conflict?: Maybe<Analytics_ContentElementStats_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Analytics_ContentItemStatsArgs = {
    objects: Array<Analytics_ContentItemStats_Insert_Input>;
    on_conflict?: Maybe<Analytics_ContentItemStats_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Analytics_ContentItemStats_OneArgs = {
    object: Analytics_ContentItemStats_Insert_Input;
    on_conflict?: Maybe<Analytics_ContentItemStats_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Analytics_RoomStatsArgs = {
    objects: Array<Analytics_RoomStats_Insert_Input>;
    on_conflict?: Maybe<Analytics_RoomStats_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Analytics_RoomStats_OneArgs = {
    object: Analytics_RoomStats_Insert_Input;
    on_conflict?: Maybe<Analytics_RoomStats_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Analytics_Mat_ElementTotalViewsArgs = {
    objects: Array<Analytics_Mat_ElementTotalViews_Insert_Input>;
};

/** mutation root */
export type Mutation_RootInsert_Analytics_Mat_ElementTotalViews_OneArgs = {
    object: Analytics_Mat_ElementTotalViews_Insert_Input;
};

/** mutation root */
export type Mutation_RootInsert_Analytics_Mat_ItemTotalViewsArgs = {
    objects: Array<Analytics_Mat_ItemTotalViews_Insert_Input>;
};

/** mutation root */
export type Mutation_RootInsert_Analytics_Mat_ItemTotalViews_OneArgs = {
    object: Analytics_Mat_ItemTotalViews_Insert_Input;
};

/** mutation root */
export type Mutation_RootInsert_Analytics_Mat_RoomPresenceArgs = {
    objects: Array<Analytics_Mat_RoomPresence_Insert_Input>;
};

/** mutation root */
export type Mutation_RootInsert_Analytics_Mat_RoomPresence_OneArgs = {
    object: Analytics_Mat_RoomPresence_Insert_Input;
};

/** mutation root */
export type Mutation_RootInsert_Chat_ChatArgs = {
    objects: Array<Chat_Chat_Insert_Input>;
    on_conflict?: Maybe<Chat_Chat_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Chat_Chat_OneArgs = {
    object: Chat_Chat_Insert_Input;
    on_conflict?: Maybe<Chat_Chat_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Chat_FlagArgs = {
    objects: Array<Chat_Flag_Insert_Input>;
    on_conflict?: Maybe<Chat_Flag_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Chat_FlagTypeArgs = {
    objects: Array<Chat_FlagType_Insert_Input>;
    on_conflict?: Maybe<Chat_FlagType_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Chat_FlagType_OneArgs = {
    object: Chat_FlagType_Insert_Input;
    on_conflict?: Maybe<Chat_FlagType_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Chat_Flag_OneArgs = {
    object: Chat_Flag_Insert_Input;
    on_conflict?: Maybe<Chat_Flag_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Chat_MessageArgs = {
    objects: Array<Chat_Message_Insert_Input>;
    on_conflict?: Maybe<Chat_Message_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Chat_MessageTypeArgs = {
    objects: Array<Chat_MessageType_Insert_Input>;
    on_conflict?: Maybe<Chat_MessageType_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Chat_MessageType_OneArgs = {
    object: Chat_MessageType_Insert_Input;
    on_conflict?: Maybe<Chat_MessageType_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Chat_Message_OneArgs = {
    object: Chat_Message_Insert_Input;
    on_conflict?: Maybe<Chat_Message_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Chat_PinArgs = {
    objects: Array<Chat_Pin_Insert_Input>;
    on_conflict?: Maybe<Chat_Pin_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Chat_Pin_OneArgs = {
    object: Chat_Pin_Insert_Input;
    on_conflict?: Maybe<Chat_Pin_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Chat_ReactionArgs = {
    objects: Array<Chat_Reaction_Insert_Input>;
    on_conflict?: Maybe<Chat_Reaction_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Chat_ReactionTypeArgs = {
    objects: Array<Chat_ReactionType_Insert_Input>;
    on_conflict?: Maybe<Chat_ReactionType_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Chat_ReactionType_OneArgs = {
    object: Chat_ReactionType_Insert_Input;
    on_conflict?: Maybe<Chat_ReactionType_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Chat_Reaction_OneArgs = {
    object: Chat_Reaction_Insert_Input;
    on_conflict?: Maybe<Chat_Reaction_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Chat_ReadUpToIndexArgs = {
    objects: Array<Chat_ReadUpToIndex_Insert_Input>;
    on_conflict?: Maybe<Chat_ReadUpToIndex_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Chat_ReadUpToIndex_OneArgs = {
    object: Chat_ReadUpToIndex_Insert_Input;
    on_conflict?: Maybe<Chat_ReadUpToIndex_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Chat_SubscriptionArgs = {
    objects: Array<Chat_Subscription_Insert_Input>;
    on_conflict?: Maybe<Chat_Subscription_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Chat_Subscription_OneArgs = {
    object: Chat_Subscription_Insert_Input;
    on_conflict?: Maybe<Chat_Subscription_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Collection_ExhibitionArgs = {
    objects: Array<Collection_Exhibition_Insert_Input>;
    on_conflict?: Maybe<Collection_Exhibition_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Collection_Exhibition_OneArgs = {
    object: Collection_Exhibition_Insert_Input;
    on_conflict?: Maybe<Collection_Exhibition_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Collection_ProgramPersonArgs = {
    objects: Array<Collection_ProgramPerson_Insert_Input>;
    on_conflict?: Maybe<Collection_ProgramPerson_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Collection_ProgramPerson_OneArgs = {
    object: Collection_ProgramPerson_Insert_Input;
    on_conflict?: Maybe<Collection_ProgramPerson_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Collection_TagArgs = {
    objects: Array<Collection_Tag_Insert_Input>;
    on_conflict?: Maybe<Collection_Tag_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Collection_Tag_OneArgs = {
    object: Collection_Tag_Insert_Input;
    on_conflict?: Maybe<Collection_Tag_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Conference_ConferenceArgs = {
    objects: Array<Conference_Conference_Insert_Input>;
    on_conflict?: Maybe<Conference_Conference_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Conference_Conference_OneArgs = {
    object: Conference_Conference_Insert_Input;
    on_conflict?: Maybe<Conference_Conference_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Conference_ConfigurationArgs = {
    objects: Array<Conference_Configuration_Insert_Input>;
    on_conflict?: Maybe<Conference_Configuration_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Conference_ConfigurationKeyArgs = {
    objects: Array<Conference_ConfigurationKey_Insert_Input>;
    on_conflict?: Maybe<Conference_ConfigurationKey_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Conference_ConfigurationKey_OneArgs = {
    object: Conference_ConfigurationKey_Insert_Input;
    on_conflict?: Maybe<Conference_ConfigurationKey_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Conference_Configuration_OneArgs = {
    object: Conference_Configuration_Insert_Input;
    on_conflict?: Maybe<Conference_Configuration_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Conference_DemoCodeArgs = {
    objects: Array<Conference_DemoCode_Insert_Input>;
    on_conflict?: Maybe<Conference_DemoCode_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Conference_DemoCode_OneArgs = {
    object: Conference_DemoCode_Insert_Input;
    on_conflict?: Maybe<Conference_DemoCode_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Conference_OriginatingDataArgs = {
    objects: Array<Conference_OriginatingData_Insert_Input>;
    on_conflict?: Maybe<Conference_OriginatingData_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Conference_OriginatingData_OneArgs = {
    object: Conference_OriginatingData_Insert_Input;
    on_conflict?: Maybe<Conference_OriginatingData_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Conference_PrepareJobArgs = {
    objects: Array<Conference_PrepareJob_Insert_Input>;
    on_conflict?: Maybe<Conference_PrepareJob_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Conference_PrepareJob_OneArgs = {
    object: Conference_PrepareJob_Insert_Input;
    on_conflict?: Maybe<Conference_PrepareJob_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Content_ElementArgs = {
    objects: Array<Content_Element_Insert_Input>;
    on_conflict?: Maybe<Content_Element_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Content_ElementPermissionGrantArgs = {
    objects: Array<Content_ElementPermissionGrant_Insert_Input>;
    on_conflict?: Maybe<Content_ElementPermissionGrant_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Content_ElementPermissionGrant_OneArgs = {
    object: Content_ElementPermissionGrant_Insert_Input;
    on_conflict?: Maybe<Content_ElementPermissionGrant_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Content_ElementTypeArgs = {
    objects: Array<Content_ElementType_Insert_Input>;
    on_conflict?: Maybe<Content_ElementType_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Content_ElementType_OneArgs = {
    object: Content_ElementType_Insert_Input;
    on_conflict?: Maybe<Content_ElementType_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Content_Element_OneArgs = {
    object: Content_Element_Insert_Input;
    on_conflict?: Maybe<Content_Element_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Content_ItemArgs = {
    objects: Array<Content_Item_Insert_Input>;
    on_conflict?: Maybe<Content_Item_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Content_ItemExhibitionArgs = {
    objects: Array<Content_ItemExhibition_Insert_Input>;
    on_conflict?: Maybe<Content_ItemExhibition_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Content_ItemExhibition_OneArgs = {
    object: Content_ItemExhibition_Insert_Input;
    on_conflict?: Maybe<Content_ItemExhibition_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Content_ItemProgramPersonArgs = {
    objects: Array<Content_ItemProgramPerson_Insert_Input>;
    on_conflict?: Maybe<Content_ItemProgramPerson_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Content_ItemProgramPerson_OneArgs = {
    object: Content_ItemProgramPerson_Insert_Input;
    on_conflict?: Maybe<Content_ItemProgramPerson_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Content_ItemTagArgs = {
    objects: Array<Content_ItemTag_Insert_Input>;
    on_conflict?: Maybe<Content_ItemTag_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Content_ItemTag_OneArgs = {
    object: Content_ItemTag_Insert_Input;
    on_conflict?: Maybe<Content_ItemTag_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Content_ItemTypeArgs = {
    objects: Array<Content_ItemType_Insert_Input>;
    on_conflict?: Maybe<Content_ItemType_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Content_ItemType_OneArgs = {
    object: Content_ItemType_Insert_Input;
    on_conflict?: Maybe<Content_ItemType_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Content_Item_OneArgs = {
    object: Content_Item_Insert_Input;
    on_conflict?: Maybe<Content_Item_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Content_UploaderArgs = {
    objects: Array<Content_Uploader_Insert_Input>;
    on_conflict?: Maybe<Content_Uploader_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Content_Uploader_OneArgs = {
    object: Content_Uploader_Insert_Input;
    on_conflict?: Maybe<Content_Uploader_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Job_Queues_ChannelStackCreateJobArgs = {
    objects: Array<Job_Queues_ChannelStackCreateJob_Insert_Input>;
    on_conflict?: Maybe<Job_Queues_ChannelStackCreateJob_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Job_Queues_ChannelStackCreateJob_OneArgs = {
    object: Job_Queues_ChannelStackCreateJob_Insert_Input;
    on_conflict?: Maybe<Job_Queues_ChannelStackCreateJob_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Job_Queues_ChannelStackDeleteJobArgs = {
    objects: Array<Job_Queues_ChannelStackDeleteJob_Insert_Input>;
    on_conflict?: Maybe<Job_Queues_ChannelStackDeleteJob_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Job_Queues_ChannelStackDeleteJob_OneArgs = {
    object: Job_Queues_ChannelStackDeleteJob_Insert_Input;
    on_conflict?: Maybe<Job_Queues_ChannelStackDeleteJob_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Job_Queues_CombineVideosJobArgs = {
    objects: Array<Job_Queues_CombineVideosJob_Insert_Input>;
    on_conflict?: Maybe<Job_Queues_CombineVideosJob_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Job_Queues_CombineVideosJob_OneArgs = {
    object: Job_Queues_CombineVideosJob_Insert_Input;
    on_conflict?: Maybe<Job_Queues_CombineVideosJob_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Job_Queues_CustomEmailJobArgs = {
    objects: Array<Job_Queues_CustomEmailJob_Insert_Input>;
    on_conflict?: Maybe<Job_Queues_CustomEmailJob_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Job_Queues_CustomEmailJob_OneArgs = {
    object: Job_Queues_CustomEmailJob_Insert_Input;
    on_conflict?: Maybe<Job_Queues_CustomEmailJob_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Job_Queues_InvitationEmailJobArgs = {
    objects: Array<Job_Queues_InvitationEmailJob_Insert_Input>;
    on_conflict?: Maybe<Job_Queues_InvitationEmailJob_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Job_Queues_InvitationEmailJob_OneArgs = {
    object: Job_Queues_InvitationEmailJob_Insert_Input;
    on_conflict?: Maybe<Job_Queues_InvitationEmailJob_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Job_Queues_MediaPackageHarvestJobArgs = {
    objects: Array<Job_Queues_MediaPackageHarvestJob_Insert_Input>;
    on_conflict?: Maybe<Job_Queues_MediaPackageHarvestJob_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Job_Queues_MediaPackageHarvestJob_OneArgs = {
    object: Job_Queues_MediaPackageHarvestJob_Insert_Input;
    on_conflict?: Maybe<Job_Queues_MediaPackageHarvestJob_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Job_Queues_PublishVideoJobArgs = {
    objects: Array<Job_Queues_PublishVideoJob_Insert_Input>;
    on_conflict?: Maybe<Job_Queues_PublishVideoJob_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Job_Queues_PublishVideoJob_OneArgs = {
    object: Job_Queues_PublishVideoJob_Insert_Input;
    on_conflict?: Maybe<Job_Queues_PublishVideoJob_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Job_Queues_SubmissionRequestEmailJobArgs = {
    objects: Array<Job_Queues_SubmissionRequestEmailJob_Insert_Input>;
    on_conflict?: Maybe<Job_Queues_SubmissionRequestEmailJob_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Job_Queues_SubmissionRequestEmailJob_OneArgs = {
    object: Job_Queues_SubmissionRequestEmailJob_Insert_Input;
    on_conflict?: Maybe<Job_Queues_SubmissionRequestEmailJob_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Job_Queues_UploadYouTubeVideoJobArgs = {
    objects: Array<Job_Queues_UploadYouTubeVideoJob_Insert_Input>;
    on_conflict?: Maybe<Job_Queues_UploadYouTubeVideoJob_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Job_Queues_UploadYouTubeVideoJob_OneArgs = {
    object: Job_Queues_UploadYouTubeVideoJob_Insert_Input;
    on_conflict?: Maybe<Job_Queues_UploadYouTubeVideoJob_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Permissions_GroupArgs = {
    objects: Array<Permissions_Group_Insert_Input>;
    on_conflict?: Maybe<Permissions_Group_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Permissions_GroupRegistrantArgs = {
    objects: Array<Permissions_GroupRegistrant_Insert_Input>;
    on_conflict?: Maybe<Permissions_GroupRegistrant_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Permissions_GroupRegistrant_OneArgs = {
    object: Permissions_GroupRegistrant_Insert_Input;
    on_conflict?: Maybe<Permissions_GroupRegistrant_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Permissions_GroupRoleArgs = {
    objects: Array<Permissions_GroupRole_Insert_Input>;
    on_conflict?: Maybe<Permissions_GroupRole_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Permissions_GroupRole_OneArgs = {
    object: Permissions_GroupRole_Insert_Input;
    on_conflict?: Maybe<Permissions_GroupRole_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Permissions_Group_OneArgs = {
    object: Permissions_Group_Insert_Input;
    on_conflict?: Maybe<Permissions_Group_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Permissions_PermissionArgs = {
    objects: Array<Permissions_Permission_Insert_Input>;
    on_conflict?: Maybe<Permissions_Permission_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Permissions_Permission_OneArgs = {
    object: Permissions_Permission_Insert_Input;
    on_conflict?: Maybe<Permissions_Permission_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Permissions_RoleArgs = {
    objects: Array<Permissions_Role_Insert_Input>;
    on_conflict?: Maybe<Permissions_Role_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Permissions_RolePermissionArgs = {
    objects: Array<Permissions_RolePermission_Insert_Input>;
    on_conflict?: Maybe<Permissions_RolePermission_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Permissions_RolePermission_OneArgs = {
    object: Permissions_RolePermission_Insert_Input;
    on_conflict?: Maybe<Permissions_RolePermission_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Permissions_Role_OneArgs = {
    object: Permissions_Role_Insert_Input;
    on_conflict?: Maybe<Permissions_Role_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Registrant_GoogleAccountArgs = {
    objects: Array<Registrant_GoogleAccount_Insert_Input>;
    on_conflict?: Maybe<Registrant_GoogleAccount_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Registrant_GoogleAccount_OneArgs = {
    object: Registrant_GoogleAccount_Insert_Input;
    on_conflict?: Maybe<Registrant_GoogleAccount_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Registrant_InvitationArgs = {
    objects: Array<Registrant_Invitation_Insert_Input>;
    on_conflict?: Maybe<Registrant_Invitation_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Registrant_Invitation_OneArgs = {
    object: Registrant_Invitation_Insert_Input;
    on_conflict?: Maybe<Registrant_Invitation_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Registrant_ProfileArgs = {
    objects: Array<Registrant_Profile_Insert_Input>;
    on_conflict?: Maybe<Registrant_Profile_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Registrant_Profile_OneArgs = {
    object: Registrant_Profile_Insert_Input;
    on_conflict?: Maybe<Registrant_Profile_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Registrant_RegistrantArgs = {
    objects: Array<Registrant_Registrant_Insert_Input>;
    on_conflict?: Maybe<Registrant_Registrant_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Registrant_Registrant_OneArgs = {
    object: Registrant_Registrant_Insert_Input;
    on_conflict?: Maybe<Registrant_Registrant_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Room_BackendArgs = {
    objects: Array<Room_Backend_Insert_Input>;
    on_conflict?: Maybe<Room_Backend_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Room_Backend_OneArgs = {
    object: Room_Backend_Insert_Input;
    on_conflict?: Maybe<Room_Backend_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Room_ChimeMeetingArgs = {
    objects: Array<Room_ChimeMeeting_Insert_Input>;
    on_conflict?: Maybe<Room_ChimeMeeting_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Room_ChimeMeeting_OneArgs = {
    object: Room_ChimeMeeting_Insert_Input;
    on_conflict?: Maybe<Room_ChimeMeeting_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Room_ManagementModeArgs = {
    objects: Array<Room_ManagementMode_Insert_Input>;
    on_conflict?: Maybe<Room_ManagementMode_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Room_ManagementMode_OneArgs = {
    object: Room_ManagementMode_Insert_Input;
    on_conflict?: Maybe<Room_ManagementMode_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Room_ModeArgs = {
    objects: Array<Room_Mode_Insert_Input>;
    on_conflict?: Maybe<Room_Mode_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Room_Mode_OneArgs = {
    object: Room_Mode_Insert_Input;
    on_conflict?: Maybe<Room_Mode_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Room_ParticipantArgs = {
    objects: Array<Room_Participant_Insert_Input>;
    on_conflict?: Maybe<Room_Participant_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Room_Participant_OneArgs = {
    object: Room_Participant_Insert_Input;
    on_conflict?: Maybe<Room_Participant_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Room_PersonRoleArgs = {
    objects: Array<Room_PersonRole_Insert_Input>;
    on_conflict?: Maybe<Room_PersonRole_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Room_PersonRole_OneArgs = {
    object: Room_PersonRole_Insert_Input;
    on_conflict?: Maybe<Room_PersonRole_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Room_RoomArgs = {
    objects: Array<Room_Room_Insert_Input>;
    on_conflict?: Maybe<Room_Room_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Room_RoomPersonArgs = {
    objects: Array<Room_RoomPerson_Insert_Input>;
    on_conflict?: Maybe<Room_RoomPerson_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Room_RoomPerson_OneArgs = {
    object: Room_RoomPerson_Insert_Input;
    on_conflict?: Maybe<Room_RoomPerson_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Room_Room_OneArgs = {
    object: Room_Room_Insert_Input;
    on_conflict?: Maybe<Room_Room_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Room_ShuffleAlgorithmArgs = {
    objects: Array<Room_ShuffleAlgorithm_Insert_Input>;
    on_conflict?: Maybe<Room_ShuffleAlgorithm_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Room_ShuffleAlgorithm_OneArgs = {
    object: Room_ShuffleAlgorithm_Insert_Input;
    on_conflict?: Maybe<Room_ShuffleAlgorithm_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Room_ShufflePeriodArgs = {
    objects: Array<Room_ShufflePeriod_Insert_Input>;
    on_conflict?: Maybe<Room_ShufflePeriod_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Room_ShufflePeriod_OneArgs = {
    object: Room_ShufflePeriod_Insert_Input;
    on_conflict?: Maybe<Room_ShufflePeriod_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Room_ShuffleQueueEntryArgs = {
    objects: Array<Room_ShuffleQueueEntry_Insert_Input>;
    on_conflict?: Maybe<Room_ShuffleQueueEntry_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Room_ShuffleQueueEntry_OneArgs = {
    object: Room_ShuffleQueueEntry_Insert_Input;
    on_conflict?: Maybe<Room_ShuffleQueueEntry_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Room_ShuffleRoomArgs = {
    objects: Array<Room_ShuffleRoom_Insert_Input>;
    on_conflict?: Maybe<Room_ShuffleRoom_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Room_ShuffleRoom_OneArgs = {
    object: Room_ShuffleRoom_Insert_Input;
    on_conflict?: Maybe<Room_ShuffleRoom_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Schedule_ContinuationArgs = {
    objects: Array<Schedule_Continuation_Insert_Input>;
    on_conflict?: Maybe<Schedule_Continuation_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Schedule_Continuation_OneArgs = {
    object: Schedule_Continuation_Insert_Input;
    on_conflict?: Maybe<Schedule_Continuation_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Schedule_EventArgs = {
    objects: Array<Schedule_Event_Insert_Input>;
    on_conflict?: Maybe<Schedule_Event_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Schedule_EventProgramPersonArgs = {
    objects: Array<Schedule_EventProgramPerson_Insert_Input>;
    on_conflict?: Maybe<Schedule_EventProgramPerson_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Schedule_EventProgramPersonRoleArgs = {
    objects: Array<Schedule_EventProgramPersonRole_Insert_Input>;
    on_conflict?: Maybe<Schedule_EventProgramPersonRole_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Schedule_EventProgramPersonRole_OneArgs = {
    object: Schedule_EventProgramPersonRole_Insert_Input;
    on_conflict?: Maybe<Schedule_EventProgramPersonRole_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Schedule_EventProgramPerson_OneArgs = {
    object: Schedule_EventProgramPerson_Insert_Input;
    on_conflict?: Maybe<Schedule_EventProgramPerson_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Schedule_EventTagArgs = {
    objects: Array<Schedule_EventTag_Insert_Input>;
    on_conflict?: Maybe<Schedule_EventTag_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Schedule_EventTag_OneArgs = {
    object: Schedule_EventTag_Insert_Input;
    on_conflict?: Maybe<Schedule_EventTag_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Schedule_Event_OneArgs = {
    object: Schedule_Event_Insert_Input;
    on_conflict?: Maybe<Schedule_Event_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Schedule_StarredEventArgs = {
    objects: Array<Schedule_StarredEvent_Insert_Input>;
    on_conflict?: Maybe<Schedule_StarredEvent_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Schedule_StarredEvent_OneArgs = {
    object: Schedule_StarredEvent_Insert_Input;
    on_conflict?: Maybe<Schedule_StarredEvent_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_System_ConfigurationArgs = {
    objects: Array<System_Configuration_Insert_Input>;
    on_conflict?: Maybe<System_Configuration_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_System_ConfigurationKeyArgs = {
    objects: Array<System_ConfigurationKey_Insert_Input>;
    on_conflict?: Maybe<System_ConfigurationKey_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_System_ConfigurationKey_OneArgs = {
    object: System_ConfigurationKey_Insert_Input;
    on_conflict?: Maybe<System_ConfigurationKey_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_System_Configuration_OneArgs = {
    object: System_Configuration_Insert_Input;
    on_conflict?: Maybe<System_Configuration_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Video_ChannelStackArgs = {
    objects: Array<Video_ChannelStack_Insert_Input>;
    on_conflict?: Maybe<Video_ChannelStack_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Video_ChannelStack_OneArgs = {
    object: Video_ChannelStack_Insert_Input;
    on_conflict?: Maybe<Video_ChannelStack_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Video_EventParticipantStreamArgs = {
    objects: Array<Video_EventParticipantStream_Insert_Input>;
    on_conflict?: Maybe<Video_EventParticipantStream_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Video_EventParticipantStream_OneArgs = {
    object: Video_EventParticipantStream_Insert_Input;
    on_conflict?: Maybe<Video_EventParticipantStream_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Video_EventVonageSessionArgs = {
    objects: Array<Video_EventVonageSession_Insert_Input>;
    on_conflict?: Maybe<Video_EventVonageSession_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Video_EventVonageSession_OneArgs = {
    object: Video_EventVonageSession_Insert_Input;
    on_conflict?: Maybe<Video_EventVonageSession_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Video_ImmediateSwitchArgs = {
    objects: Array<Video_ImmediateSwitch_Insert_Input>;
    on_conflict?: Maybe<Video_ImmediateSwitch_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Video_ImmediateSwitch_OneArgs = {
    object: Video_ImmediateSwitch_Insert_Input;
    on_conflict?: Maybe<Video_ImmediateSwitch_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Video_InputTypeArgs = {
    objects: Array<Video_InputType_Insert_Input>;
    on_conflict?: Maybe<Video_InputType_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Video_InputType_OneArgs = {
    object: Video_InputType_Insert_Input;
    on_conflict?: Maybe<Video_InputType_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Video_JobStatusArgs = {
    objects: Array<Video_JobStatus_Insert_Input>;
    on_conflict?: Maybe<Video_JobStatus_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Video_JobStatus_OneArgs = {
    object: Video_JobStatus_Insert_Input;
    on_conflict?: Maybe<Video_JobStatus_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Video_MediaLiveChannelStatusArgs = {
    objects: Array<Video_MediaLiveChannelStatus_Insert_Input>;
    on_conflict?: Maybe<Video_MediaLiveChannelStatus_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Video_MediaLiveChannelStatus_OneArgs = {
    object: Video_MediaLiveChannelStatus_Insert_Input;
    on_conflict?: Maybe<Video_MediaLiveChannelStatus_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Video_RtmpInputArgs = {
    objects: Array<Video_RtmpInput_Insert_Input>;
    on_conflict?: Maybe<Video_RtmpInput_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Video_RtmpInput_OneArgs = {
    object: Video_RtmpInput_Insert_Input;
    on_conflict?: Maybe<Video_RtmpInput_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Video_TranscriptionJobArgs = {
    objects: Array<Video_TranscriptionJob_Insert_Input>;
    on_conflict?: Maybe<Video_TranscriptionJob_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Video_TranscriptionJob_OneArgs = {
    object: Video_TranscriptionJob_Insert_Input;
    on_conflict?: Maybe<Video_TranscriptionJob_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Video_VideoRenderJobArgs = {
    objects: Array<Video_VideoRenderJob_Insert_Input>;
    on_conflict?: Maybe<Video_VideoRenderJob_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Video_VideoRenderJob_OneArgs = {
    object: Video_VideoRenderJob_Insert_Input;
    on_conflict?: Maybe<Video_VideoRenderJob_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Video_YouTubeUploadArgs = {
    objects: Array<Video_YouTubeUpload_Insert_Input>;
    on_conflict?: Maybe<Video_YouTubeUpload_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Video_YouTubeUpload_OneArgs = {
    object: Video_YouTubeUpload_Insert_Input;
    on_conflict?: Maybe<Video_YouTubeUpload_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInvitationConfirmCurrentArgs = {
    inviteCode: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootJoinEventVonageSessionArgs = {
    eventId: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootJoinRoomChimeSessionArgs = {
    roomId: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootJoinRoomVonageSessionArgs = {
    roomId: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootNotifyEventEndedArgs = {
    eventId: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootRefreshYouTubeDataArgs = {
    registrantGoogleAccountId: Scalars["uuid"];
    registrantId: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootStopEventBroadcastArgs = {
    eventId: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootSubmitGoogleOAuthCodeArgs = {
    code: Scalars["String"];
    state: Scalars["String"];
};

/** mutation root */
export type Mutation_RootSubmitUploadableElementArgs = {
    data: Scalars["jsonb"];
    magicToken: Scalars["String"];
};

/** mutation root */
export type Mutation_RootUpdateProfilePhotoArgs = {
    registrantId: Scalars["uuid"];
    s3URL?: Maybe<Scalars["String"]>;
};

/** mutation root */
export type Mutation_RootUpdateSubtitlesArgs = {
    elementId: Scalars["String"];
    magicToken: Scalars["String"];
    subtitleText: Scalars["String"];
};

/** mutation root */
export type Mutation_RootUpdate_EmailArgs = {
    _inc?: Maybe<Email_Inc_Input>;
    _set?: Maybe<Email_Set_Input>;
    where: Email_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Email_By_PkArgs = {
    _inc?: Maybe<Email_Inc_Input>;
    _set?: Maybe<Email_Set_Input>;
    pk_columns: Email_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_PushNotificationSubscriptionArgs = {
    _set?: Maybe<PushNotificationSubscription_Set_Input>;
    where: PushNotificationSubscription_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_PushNotificationSubscription_By_PkArgs = {
    _set?: Maybe<PushNotificationSubscription_Set_Input>;
    pk_columns: PushNotificationSubscription_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_UserArgs = {
    _set?: Maybe<User_Set_Input>;
    where: User_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_User_By_PkArgs = {
    _set?: Maybe<User_Set_Input>;
    pk_columns: User_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Analytics_AppStatsArgs = {
    _append?: Maybe<Analytics_AppStats_Append_Input>;
    _delete_at_path?: Maybe<Analytics_AppStats_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Analytics_AppStats_Delete_Elem_Input>;
    _delete_key?: Maybe<Analytics_AppStats_Delete_Key_Input>;
    _inc?: Maybe<Analytics_AppStats_Inc_Input>;
    _prepend?: Maybe<Analytics_AppStats_Prepend_Input>;
    _set?: Maybe<Analytics_AppStats_Set_Input>;
    where: Analytics_AppStats_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Analytics_AppStats_By_PkArgs = {
    _append?: Maybe<Analytics_AppStats_Append_Input>;
    _delete_at_path?: Maybe<Analytics_AppStats_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Analytics_AppStats_Delete_Elem_Input>;
    _delete_key?: Maybe<Analytics_AppStats_Delete_Key_Input>;
    _inc?: Maybe<Analytics_AppStats_Inc_Input>;
    _prepend?: Maybe<Analytics_AppStats_Prepend_Input>;
    _set?: Maybe<Analytics_AppStats_Set_Input>;
    pk_columns: Analytics_AppStats_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Analytics_ContentElementStatsArgs = {
    _inc?: Maybe<Analytics_ContentElementStats_Inc_Input>;
    _set?: Maybe<Analytics_ContentElementStats_Set_Input>;
    where: Analytics_ContentElementStats_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Analytics_ContentElementStats_By_PkArgs = {
    _inc?: Maybe<Analytics_ContentElementStats_Inc_Input>;
    _set?: Maybe<Analytics_ContentElementStats_Set_Input>;
    pk_columns: Analytics_ContentElementStats_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Analytics_ContentItemStatsArgs = {
    _inc?: Maybe<Analytics_ContentItemStats_Inc_Input>;
    _set?: Maybe<Analytics_ContentItemStats_Set_Input>;
    where: Analytics_ContentItemStats_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Analytics_ContentItemStats_By_PkArgs = {
    _inc?: Maybe<Analytics_ContentItemStats_Inc_Input>;
    _set?: Maybe<Analytics_ContentItemStats_Set_Input>;
    pk_columns: Analytics_ContentItemStats_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Analytics_RoomStatsArgs = {
    _inc?: Maybe<Analytics_RoomStats_Inc_Input>;
    _set?: Maybe<Analytics_RoomStats_Set_Input>;
    where: Analytics_RoomStats_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Analytics_RoomStats_By_PkArgs = {
    _inc?: Maybe<Analytics_RoomStats_Inc_Input>;
    _set?: Maybe<Analytics_RoomStats_Set_Input>;
    pk_columns: Analytics_RoomStats_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Analytics_Mat_ElementTotalViewsArgs = {
    _inc?: Maybe<Analytics_Mat_ElementTotalViews_Inc_Input>;
    _set?: Maybe<Analytics_Mat_ElementTotalViews_Set_Input>;
    where: Analytics_Mat_ElementTotalViews_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Analytics_Mat_ItemTotalViewsArgs = {
    _inc?: Maybe<Analytics_Mat_ItemTotalViews_Inc_Input>;
    _set?: Maybe<Analytics_Mat_ItemTotalViews_Set_Input>;
    where: Analytics_Mat_ItemTotalViews_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Analytics_Mat_RoomPresenceArgs = {
    _append?: Maybe<Analytics_Mat_RoomPresence_Append_Input>;
    _delete_at_path?: Maybe<Analytics_Mat_RoomPresence_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Analytics_Mat_RoomPresence_Delete_Elem_Input>;
    _delete_key?: Maybe<Analytics_Mat_RoomPresence_Delete_Key_Input>;
    _prepend?: Maybe<Analytics_Mat_RoomPresence_Prepend_Input>;
    _set?: Maybe<Analytics_Mat_RoomPresence_Set_Input>;
    where: Analytics_Mat_RoomPresence_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Chat_ChatArgs = {
    _set?: Maybe<Chat_Chat_Set_Input>;
    where: Chat_Chat_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Chat_Chat_By_PkArgs = {
    _set?: Maybe<Chat_Chat_Set_Input>;
    pk_columns: Chat_Chat_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Chat_FlagArgs = {
    _inc?: Maybe<Chat_Flag_Inc_Input>;
    _set?: Maybe<Chat_Flag_Set_Input>;
    where: Chat_Flag_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Chat_FlagTypeArgs = {
    _set?: Maybe<Chat_FlagType_Set_Input>;
    where: Chat_FlagType_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Chat_FlagType_By_PkArgs = {
    _set?: Maybe<Chat_FlagType_Set_Input>;
    pk_columns: Chat_FlagType_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Chat_Flag_By_PkArgs = {
    _inc?: Maybe<Chat_Flag_Inc_Input>;
    _set?: Maybe<Chat_Flag_Set_Input>;
    pk_columns: Chat_Flag_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Chat_MessageArgs = {
    _append?: Maybe<Chat_Message_Append_Input>;
    _delete_at_path?: Maybe<Chat_Message_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Chat_Message_Delete_Elem_Input>;
    _delete_key?: Maybe<Chat_Message_Delete_Key_Input>;
    _inc?: Maybe<Chat_Message_Inc_Input>;
    _prepend?: Maybe<Chat_Message_Prepend_Input>;
    _set?: Maybe<Chat_Message_Set_Input>;
    where: Chat_Message_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Chat_MessageTypeArgs = {
    _set?: Maybe<Chat_MessageType_Set_Input>;
    where: Chat_MessageType_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Chat_MessageType_By_PkArgs = {
    _set?: Maybe<Chat_MessageType_Set_Input>;
    pk_columns: Chat_MessageType_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Chat_Message_By_PkArgs = {
    _append?: Maybe<Chat_Message_Append_Input>;
    _delete_at_path?: Maybe<Chat_Message_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Chat_Message_Delete_Elem_Input>;
    _delete_key?: Maybe<Chat_Message_Delete_Key_Input>;
    _inc?: Maybe<Chat_Message_Inc_Input>;
    _prepend?: Maybe<Chat_Message_Prepend_Input>;
    _set?: Maybe<Chat_Message_Set_Input>;
    pk_columns: Chat_Message_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Chat_PinArgs = {
    _set?: Maybe<Chat_Pin_Set_Input>;
    where: Chat_Pin_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Chat_Pin_By_PkArgs = {
    _set?: Maybe<Chat_Pin_Set_Input>;
    pk_columns: Chat_Pin_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Chat_ReactionArgs = {
    _append?: Maybe<Chat_Reaction_Append_Input>;
    _delete_at_path?: Maybe<Chat_Reaction_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Chat_Reaction_Delete_Elem_Input>;
    _delete_key?: Maybe<Chat_Reaction_Delete_Key_Input>;
    _prepend?: Maybe<Chat_Reaction_Prepend_Input>;
    _set?: Maybe<Chat_Reaction_Set_Input>;
    where: Chat_Reaction_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Chat_ReactionTypeArgs = {
    _set?: Maybe<Chat_ReactionType_Set_Input>;
    where: Chat_ReactionType_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Chat_ReactionType_By_PkArgs = {
    _set?: Maybe<Chat_ReactionType_Set_Input>;
    pk_columns: Chat_ReactionType_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Chat_Reaction_By_PkArgs = {
    _append?: Maybe<Chat_Reaction_Append_Input>;
    _delete_at_path?: Maybe<Chat_Reaction_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Chat_Reaction_Delete_Elem_Input>;
    _delete_key?: Maybe<Chat_Reaction_Delete_Key_Input>;
    _prepend?: Maybe<Chat_Reaction_Prepend_Input>;
    _set?: Maybe<Chat_Reaction_Set_Input>;
    pk_columns: Chat_Reaction_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Chat_ReadUpToIndexArgs = {
    _set?: Maybe<Chat_ReadUpToIndex_Set_Input>;
    where: Chat_ReadUpToIndex_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Chat_ReadUpToIndex_By_PkArgs = {
    _set?: Maybe<Chat_ReadUpToIndex_Set_Input>;
    pk_columns: Chat_ReadUpToIndex_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Chat_SubscriptionArgs = {
    _set?: Maybe<Chat_Subscription_Set_Input>;
    where: Chat_Subscription_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Chat_Subscription_By_PkArgs = {
    _set?: Maybe<Chat_Subscription_Set_Input>;
    pk_columns: Chat_Subscription_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Collection_ExhibitionArgs = {
    _inc?: Maybe<Collection_Exhibition_Inc_Input>;
    _set?: Maybe<Collection_Exhibition_Set_Input>;
    where: Collection_Exhibition_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Collection_Exhibition_By_PkArgs = {
    _inc?: Maybe<Collection_Exhibition_Inc_Input>;
    _set?: Maybe<Collection_Exhibition_Set_Input>;
    pk_columns: Collection_Exhibition_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Collection_ProgramPersonArgs = {
    _set?: Maybe<Collection_ProgramPerson_Set_Input>;
    where: Collection_ProgramPerson_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Collection_ProgramPerson_By_PkArgs = {
    _set?: Maybe<Collection_ProgramPerson_Set_Input>;
    pk_columns: Collection_ProgramPerson_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Collection_TagArgs = {
    _inc?: Maybe<Collection_Tag_Inc_Input>;
    _set?: Maybe<Collection_Tag_Set_Input>;
    where: Collection_Tag_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Collection_Tag_By_PkArgs = {
    _inc?: Maybe<Collection_Tag_Inc_Input>;
    _set?: Maybe<Collection_Tag_Set_Input>;
    pk_columns: Collection_Tag_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Conference_ConferenceArgs = {
    _set?: Maybe<Conference_Conference_Set_Input>;
    where: Conference_Conference_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Conference_Conference_By_PkArgs = {
    _set?: Maybe<Conference_Conference_Set_Input>;
    pk_columns: Conference_Conference_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Conference_ConfigurationArgs = {
    _append?: Maybe<Conference_Configuration_Append_Input>;
    _delete_at_path?: Maybe<Conference_Configuration_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Conference_Configuration_Delete_Elem_Input>;
    _delete_key?: Maybe<Conference_Configuration_Delete_Key_Input>;
    _prepend?: Maybe<Conference_Configuration_Prepend_Input>;
    _set?: Maybe<Conference_Configuration_Set_Input>;
    where: Conference_Configuration_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Conference_ConfigurationKeyArgs = {
    _set?: Maybe<Conference_ConfigurationKey_Set_Input>;
    where: Conference_ConfigurationKey_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Conference_ConfigurationKey_By_PkArgs = {
    _set?: Maybe<Conference_ConfigurationKey_Set_Input>;
    pk_columns: Conference_ConfigurationKey_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Conference_Configuration_By_PkArgs = {
    _append?: Maybe<Conference_Configuration_Append_Input>;
    _delete_at_path?: Maybe<Conference_Configuration_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Conference_Configuration_Delete_Elem_Input>;
    _delete_key?: Maybe<Conference_Configuration_Delete_Key_Input>;
    _prepend?: Maybe<Conference_Configuration_Prepend_Input>;
    _set?: Maybe<Conference_Configuration_Set_Input>;
    pk_columns: Conference_Configuration_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Conference_DemoCodeArgs = {
    _set?: Maybe<Conference_DemoCode_Set_Input>;
    where: Conference_DemoCode_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Conference_DemoCode_By_PkArgs = {
    _set?: Maybe<Conference_DemoCode_Set_Input>;
    pk_columns: Conference_DemoCode_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Conference_OriginatingDataArgs = {
    _append?: Maybe<Conference_OriginatingData_Append_Input>;
    _delete_at_path?: Maybe<Conference_OriginatingData_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Conference_OriginatingData_Delete_Elem_Input>;
    _delete_key?: Maybe<Conference_OriginatingData_Delete_Key_Input>;
    _prepend?: Maybe<Conference_OriginatingData_Prepend_Input>;
    _set?: Maybe<Conference_OriginatingData_Set_Input>;
    where: Conference_OriginatingData_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Conference_OriginatingData_By_PkArgs = {
    _append?: Maybe<Conference_OriginatingData_Append_Input>;
    _delete_at_path?: Maybe<Conference_OriginatingData_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Conference_OriginatingData_Delete_Elem_Input>;
    _delete_key?: Maybe<Conference_OriginatingData_Delete_Key_Input>;
    _prepend?: Maybe<Conference_OriginatingData_Prepend_Input>;
    _set?: Maybe<Conference_OriginatingData_Set_Input>;
    pk_columns: Conference_OriginatingData_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Conference_PrepareJobArgs = {
    _set?: Maybe<Conference_PrepareJob_Set_Input>;
    where: Conference_PrepareJob_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Conference_PrepareJob_By_PkArgs = {
    _set?: Maybe<Conference_PrepareJob_Set_Input>;
    pk_columns: Conference_PrepareJob_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Content_ElementArgs = {
    _append?: Maybe<Content_Element_Append_Input>;
    _delete_at_path?: Maybe<Content_Element_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Content_Element_Delete_Elem_Input>;
    _delete_key?: Maybe<Content_Element_Delete_Key_Input>;
    _inc?: Maybe<Content_Element_Inc_Input>;
    _prepend?: Maybe<Content_Element_Prepend_Input>;
    _set?: Maybe<Content_Element_Set_Input>;
    where: Content_Element_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Content_ElementPermissionGrantArgs = {
    _set?: Maybe<Content_ElementPermissionGrant_Set_Input>;
    where: Content_ElementPermissionGrant_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Content_ElementPermissionGrant_By_PkArgs = {
    _set?: Maybe<Content_ElementPermissionGrant_Set_Input>;
    pk_columns: Content_ElementPermissionGrant_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Content_ElementTypeArgs = {
    _set?: Maybe<Content_ElementType_Set_Input>;
    where: Content_ElementType_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Content_ElementType_By_PkArgs = {
    _set?: Maybe<Content_ElementType_Set_Input>;
    pk_columns: Content_ElementType_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Content_Element_By_PkArgs = {
    _append?: Maybe<Content_Element_Append_Input>;
    _delete_at_path?: Maybe<Content_Element_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Content_Element_Delete_Elem_Input>;
    _delete_key?: Maybe<Content_Element_Delete_Key_Input>;
    _inc?: Maybe<Content_Element_Inc_Input>;
    _prepend?: Maybe<Content_Element_Prepend_Input>;
    _set?: Maybe<Content_Element_Set_Input>;
    pk_columns: Content_Element_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Content_ItemArgs = {
    _set?: Maybe<Content_Item_Set_Input>;
    where: Content_Item_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Content_ItemExhibitionArgs = {
    _append?: Maybe<Content_ItemExhibition_Append_Input>;
    _delete_at_path?: Maybe<Content_ItemExhibition_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Content_ItemExhibition_Delete_Elem_Input>;
    _delete_key?: Maybe<Content_ItemExhibition_Delete_Key_Input>;
    _inc?: Maybe<Content_ItemExhibition_Inc_Input>;
    _prepend?: Maybe<Content_ItemExhibition_Prepend_Input>;
    _set?: Maybe<Content_ItemExhibition_Set_Input>;
    where: Content_ItemExhibition_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Content_ItemExhibition_By_PkArgs = {
    _append?: Maybe<Content_ItemExhibition_Append_Input>;
    _delete_at_path?: Maybe<Content_ItemExhibition_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Content_ItemExhibition_Delete_Elem_Input>;
    _delete_key?: Maybe<Content_ItemExhibition_Delete_Key_Input>;
    _inc?: Maybe<Content_ItemExhibition_Inc_Input>;
    _prepend?: Maybe<Content_ItemExhibition_Prepend_Input>;
    _set?: Maybe<Content_ItemExhibition_Set_Input>;
    pk_columns: Content_ItemExhibition_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Content_ItemProgramPersonArgs = {
    _inc?: Maybe<Content_ItemProgramPerson_Inc_Input>;
    _set?: Maybe<Content_ItemProgramPerson_Set_Input>;
    where: Content_ItemProgramPerson_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Content_ItemProgramPerson_By_PkArgs = {
    _inc?: Maybe<Content_ItemProgramPerson_Inc_Input>;
    _set?: Maybe<Content_ItemProgramPerson_Set_Input>;
    pk_columns: Content_ItemProgramPerson_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Content_ItemTagArgs = {
    _set?: Maybe<Content_ItemTag_Set_Input>;
    where: Content_ItemTag_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Content_ItemTag_By_PkArgs = {
    _set?: Maybe<Content_ItemTag_Set_Input>;
    pk_columns: Content_ItemTag_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Content_ItemTypeArgs = {
    _set?: Maybe<Content_ItemType_Set_Input>;
    where: Content_ItemType_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Content_ItemType_By_PkArgs = {
    _set?: Maybe<Content_ItemType_Set_Input>;
    pk_columns: Content_ItemType_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Content_Item_By_PkArgs = {
    _set?: Maybe<Content_Item_Set_Input>;
    pk_columns: Content_Item_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Content_UploaderArgs = {
    _inc?: Maybe<Content_Uploader_Inc_Input>;
    _set?: Maybe<Content_Uploader_Set_Input>;
    where: Content_Uploader_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Content_Uploader_By_PkArgs = {
    _inc?: Maybe<Content_Uploader_Inc_Input>;
    _set?: Maybe<Content_Uploader_Set_Input>;
    pk_columns: Content_Uploader_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Job_Queues_ChannelStackCreateJobArgs = {
    _set?: Maybe<Job_Queues_ChannelStackCreateJob_Set_Input>;
    where: Job_Queues_ChannelStackCreateJob_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Job_Queues_ChannelStackCreateJob_By_PkArgs = {
    _set?: Maybe<Job_Queues_ChannelStackCreateJob_Set_Input>;
    pk_columns: Job_Queues_ChannelStackCreateJob_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Job_Queues_ChannelStackDeleteJobArgs = {
    _set?: Maybe<Job_Queues_ChannelStackDeleteJob_Set_Input>;
    where: Job_Queues_ChannelStackDeleteJob_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Job_Queues_ChannelStackDeleteJob_By_PkArgs = {
    _set?: Maybe<Job_Queues_ChannelStackDeleteJob_Set_Input>;
    pk_columns: Job_Queues_ChannelStackDeleteJob_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Job_Queues_CombineVideosJobArgs = {
    _append?: Maybe<Job_Queues_CombineVideosJob_Append_Input>;
    _delete_at_path?: Maybe<Job_Queues_CombineVideosJob_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Job_Queues_CombineVideosJob_Delete_Elem_Input>;
    _delete_key?: Maybe<Job_Queues_CombineVideosJob_Delete_Key_Input>;
    _prepend?: Maybe<Job_Queues_CombineVideosJob_Prepend_Input>;
    _set?: Maybe<Job_Queues_CombineVideosJob_Set_Input>;
    where: Job_Queues_CombineVideosJob_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Job_Queues_CombineVideosJob_By_PkArgs = {
    _append?: Maybe<Job_Queues_CombineVideosJob_Append_Input>;
    _delete_at_path?: Maybe<Job_Queues_CombineVideosJob_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Job_Queues_CombineVideosJob_Delete_Elem_Input>;
    _delete_key?: Maybe<Job_Queues_CombineVideosJob_Delete_Key_Input>;
    _prepend?: Maybe<Job_Queues_CombineVideosJob_Prepend_Input>;
    _set?: Maybe<Job_Queues_CombineVideosJob_Set_Input>;
    pk_columns: Job_Queues_CombineVideosJob_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Job_Queues_CustomEmailJobArgs = {
    _append?: Maybe<Job_Queues_CustomEmailJob_Append_Input>;
    _delete_at_path?: Maybe<Job_Queues_CustomEmailJob_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Job_Queues_CustomEmailJob_Delete_Elem_Input>;
    _delete_key?: Maybe<Job_Queues_CustomEmailJob_Delete_Key_Input>;
    _prepend?: Maybe<Job_Queues_CustomEmailJob_Prepend_Input>;
    _set?: Maybe<Job_Queues_CustomEmailJob_Set_Input>;
    where: Job_Queues_CustomEmailJob_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Job_Queues_CustomEmailJob_By_PkArgs = {
    _append?: Maybe<Job_Queues_CustomEmailJob_Append_Input>;
    _delete_at_path?: Maybe<Job_Queues_CustomEmailJob_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Job_Queues_CustomEmailJob_Delete_Elem_Input>;
    _delete_key?: Maybe<Job_Queues_CustomEmailJob_Delete_Key_Input>;
    _prepend?: Maybe<Job_Queues_CustomEmailJob_Prepend_Input>;
    _set?: Maybe<Job_Queues_CustomEmailJob_Set_Input>;
    pk_columns: Job_Queues_CustomEmailJob_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Job_Queues_InvitationEmailJobArgs = {
    _append?: Maybe<Job_Queues_InvitationEmailJob_Append_Input>;
    _delete_at_path?: Maybe<Job_Queues_InvitationEmailJob_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Job_Queues_InvitationEmailJob_Delete_Elem_Input>;
    _delete_key?: Maybe<Job_Queues_InvitationEmailJob_Delete_Key_Input>;
    _prepend?: Maybe<Job_Queues_InvitationEmailJob_Prepend_Input>;
    _set?: Maybe<Job_Queues_InvitationEmailJob_Set_Input>;
    where: Job_Queues_InvitationEmailJob_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Job_Queues_InvitationEmailJob_By_PkArgs = {
    _append?: Maybe<Job_Queues_InvitationEmailJob_Append_Input>;
    _delete_at_path?: Maybe<Job_Queues_InvitationEmailJob_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Job_Queues_InvitationEmailJob_Delete_Elem_Input>;
    _delete_key?: Maybe<Job_Queues_InvitationEmailJob_Delete_Key_Input>;
    _prepend?: Maybe<Job_Queues_InvitationEmailJob_Prepend_Input>;
    _set?: Maybe<Job_Queues_InvitationEmailJob_Set_Input>;
    pk_columns: Job_Queues_InvitationEmailJob_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Job_Queues_MediaPackageHarvestJobArgs = {
    _set?: Maybe<Job_Queues_MediaPackageHarvestJob_Set_Input>;
    where: Job_Queues_MediaPackageHarvestJob_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Job_Queues_MediaPackageHarvestJob_By_PkArgs = {
    _set?: Maybe<Job_Queues_MediaPackageHarvestJob_Set_Input>;
    pk_columns: Job_Queues_MediaPackageHarvestJob_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Job_Queues_PublishVideoJobArgs = {
    _set?: Maybe<Job_Queues_PublishVideoJob_Set_Input>;
    where: Job_Queues_PublishVideoJob_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Job_Queues_PublishVideoJob_By_PkArgs = {
    _set?: Maybe<Job_Queues_PublishVideoJob_Set_Input>;
    pk_columns: Job_Queues_PublishVideoJob_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Job_Queues_SubmissionRequestEmailJobArgs = {
    _append?: Maybe<Job_Queues_SubmissionRequestEmailJob_Append_Input>;
    _delete_at_path?: Maybe<Job_Queues_SubmissionRequestEmailJob_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Job_Queues_SubmissionRequestEmailJob_Delete_Elem_Input>;
    _delete_key?: Maybe<Job_Queues_SubmissionRequestEmailJob_Delete_Key_Input>;
    _prepend?: Maybe<Job_Queues_SubmissionRequestEmailJob_Prepend_Input>;
    _set?: Maybe<Job_Queues_SubmissionRequestEmailJob_Set_Input>;
    where: Job_Queues_SubmissionRequestEmailJob_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Job_Queues_SubmissionRequestEmailJob_By_PkArgs = {
    _append?: Maybe<Job_Queues_SubmissionRequestEmailJob_Append_Input>;
    _delete_at_path?: Maybe<Job_Queues_SubmissionRequestEmailJob_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Job_Queues_SubmissionRequestEmailJob_Delete_Elem_Input>;
    _delete_key?: Maybe<Job_Queues_SubmissionRequestEmailJob_Delete_Key_Input>;
    _prepend?: Maybe<Job_Queues_SubmissionRequestEmailJob_Prepend_Input>;
    _set?: Maybe<Job_Queues_SubmissionRequestEmailJob_Set_Input>;
    pk_columns: Job_Queues_SubmissionRequestEmailJob_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Job_Queues_UploadYouTubeVideoJobArgs = {
    _inc?: Maybe<Job_Queues_UploadYouTubeVideoJob_Inc_Input>;
    _set?: Maybe<Job_Queues_UploadYouTubeVideoJob_Set_Input>;
    where: Job_Queues_UploadYouTubeVideoJob_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Job_Queues_UploadYouTubeVideoJob_By_PkArgs = {
    _inc?: Maybe<Job_Queues_UploadYouTubeVideoJob_Inc_Input>;
    _set?: Maybe<Job_Queues_UploadYouTubeVideoJob_Set_Input>;
    pk_columns: Job_Queues_UploadYouTubeVideoJob_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Permissions_GroupArgs = {
    _set?: Maybe<Permissions_Group_Set_Input>;
    where: Permissions_Group_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Permissions_GroupRegistrantArgs = {
    _set?: Maybe<Permissions_GroupRegistrant_Set_Input>;
    where: Permissions_GroupRegistrant_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Permissions_GroupRegistrant_By_PkArgs = {
    _set?: Maybe<Permissions_GroupRegistrant_Set_Input>;
    pk_columns: Permissions_GroupRegistrant_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Permissions_GroupRoleArgs = {
    _set?: Maybe<Permissions_GroupRole_Set_Input>;
    where: Permissions_GroupRole_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Permissions_GroupRole_By_PkArgs = {
    _set?: Maybe<Permissions_GroupRole_Set_Input>;
    pk_columns: Permissions_GroupRole_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Permissions_Group_By_PkArgs = {
    _set?: Maybe<Permissions_Group_Set_Input>;
    pk_columns: Permissions_Group_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Permissions_PermissionArgs = {
    _set?: Maybe<Permissions_Permission_Set_Input>;
    where: Permissions_Permission_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Permissions_Permission_By_PkArgs = {
    _set?: Maybe<Permissions_Permission_Set_Input>;
    pk_columns: Permissions_Permission_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Permissions_RoleArgs = {
    _set?: Maybe<Permissions_Role_Set_Input>;
    where: Permissions_Role_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Permissions_RolePermissionArgs = {
    _set?: Maybe<Permissions_RolePermission_Set_Input>;
    where: Permissions_RolePermission_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Permissions_RolePermission_By_PkArgs = {
    _set?: Maybe<Permissions_RolePermission_Set_Input>;
    pk_columns: Permissions_RolePermission_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Permissions_Role_By_PkArgs = {
    _set?: Maybe<Permissions_Role_Set_Input>;
    pk_columns: Permissions_Role_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Registrant_GoogleAccountArgs = {
    _append?: Maybe<Registrant_GoogleAccount_Append_Input>;
    _delete_at_path?: Maybe<Registrant_GoogleAccount_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Registrant_GoogleAccount_Delete_Elem_Input>;
    _delete_key?: Maybe<Registrant_GoogleAccount_Delete_Key_Input>;
    _prepend?: Maybe<Registrant_GoogleAccount_Prepend_Input>;
    _set?: Maybe<Registrant_GoogleAccount_Set_Input>;
    where: Registrant_GoogleAccount_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Registrant_GoogleAccount_By_PkArgs = {
    _append?: Maybe<Registrant_GoogleAccount_Append_Input>;
    _delete_at_path?: Maybe<Registrant_GoogleAccount_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Registrant_GoogleAccount_Delete_Elem_Input>;
    _delete_key?: Maybe<Registrant_GoogleAccount_Delete_Key_Input>;
    _prepend?: Maybe<Registrant_GoogleAccount_Prepend_Input>;
    _set?: Maybe<Registrant_GoogleAccount_Set_Input>;
    pk_columns: Registrant_GoogleAccount_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Registrant_InvitationArgs = {
    _set?: Maybe<Registrant_Invitation_Set_Input>;
    where: Registrant_Invitation_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Registrant_Invitation_By_PkArgs = {
    _set?: Maybe<Registrant_Invitation_Set_Input>;
    pk_columns: Registrant_Invitation_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Registrant_ProfileArgs = {
    _append?: Maybe<Registrant_Profile_Append_Input>;
    _delete_at_path?: Maybe<Registrant_Profile_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Registrant_Profile_Delete_Elem_Input>;
    _delete_key?: Maybe<Registrant_Profile_Delete_Key_Input>;
    _inc?: Maybe<Registrant_Profile_Inc_Input>;
    _prepend?: Maybe<Registrant_Profile_Prepend_Input>;
    _set?: Maybe<Registrant_Profile_Set_Input>;
    where: Registrant_Profile_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Registrant_Profile_By_PkArgs = {
    _append?: Maybe<Registrant_Profile_Append_Input>;
    _delete_at_path?: Maybe<Registrant_Profile_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Registrant_Profile_Delete_Elem_Input>;
    _delete_key?: Maybe<Registrant_Profile_Delete_Key_Input>;
    _inc?: Maybe<Registrant_Profile_Inc_Input>;
    _prepend?: Maybe<Registrant_Profile_Prepend_Input>;
    _set?: Maybe<Registrant_Profile_Set_Input>;
    pk_columns: Registrant_Profile_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Registrant_RegistrantArgs = {
    _set?: Maybe<Registrant_Registrant_Set_Input>;
    where: Registrant_Registrant_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Registrant_Registrant_By_PkArgs = {
    _set?: Maybe<Registrant_Registrant_Set_Input>;
    pk_columns: Registrant_Registrant_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Room_BackendArgs = {
    _set?: Maybe<Room_Backend_Set_Input>;
    where: Room_Backend_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Room_Backend_By_PkArgs = {
    _set?: Maybe<Room_Backend_Set_Input>;
    pk_columns: Room_Backend_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Room_ChimeMeetingArgs = {
    _append?: Maybe<Room_ChimeMeeting_Append_Input>;
    _delete_at_path?: Maybe<Room_ChimeMeeting_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Room_ChimeMeeting_Delete_Elem_Input>;
    _delete_key?: Maybe<Room_ChimeMeeting_Delete_Key_Input>;
    _prepend?: Maybe<Room_ChimeMeeting_Prepend_Input>;
    _set?: Maybe<Room_ChimeMeeting_Set_Input>;
    where: Room_ChimeMeeting_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Room_ChimeMeeting_By_PkArgs = {
    _append?: Maybe<Room_ChimeMeeting_Append_Input>;
    _delete_at_path?: Maybe<Room_ChimeMeeting_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Room_ChimeMeeting_Delete_Elem_Input>;
    _delete_key?: Maybe<Room_ChimeMeeting_Delete_Key_Input>;
    _prepend?: Maybe<Room_ChimeMeeting_Prepend_Input>;
    _set?: Maybe<Room_ChimeMeeting_Set_Input>;
    pk_columns: Room_ChimeMeeting_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Room_ManagementModeArgs = {
    _set?: Maybe<Room_ManagementMode_Set_Input>;
    where: Room_ManagementMode_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Room_ManagementMode_By_PkArgs = {
    _set?: Maybe<Room_ManagementMode_Set_Input>;
    pk_columns: Room_ManagementMode_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Room_ModeArgs = {
    _set?: Maybe<Room_Mode_Set_Input>;
    where: Room_Mode_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Room_Mode_By_PkArgs = {
    _set?: Maybe<Room_Mode_Set_Input>;
    pk_columns: Room_Mode_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Room_ParticipantArgs = {
    _set?: Maybe<Room_Participant_Set_Input>;
    where: Room_Participant_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Room_Participant_By_PkArgs = {
    _set?: Maybe<Room_Participant_Set_Input>;
    pk_columns: Room_Participant_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Room_PersonRoleArgs = {
    _set?: Maybe<Room_PersonRole_Set_Input>;
    where: Room_PersonRole_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Room_PersonRole_By_PkArgs = {
    _set?: Maybe<Room_PersonRole_Set_Input>;
    pk_columns: Room_PersonRole_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Room_RoomArgs = {
    _inc?: Maybe<Room_Room_Inc_Input>;
    _set?: Maybe<Room_Room_Set_Input>;
    where: Room_Room_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Room_RoomPersonArgs = {
    _set?: Maybe<Room_RoomPerson_Set_Input>;
    where: Room_RoomPerson_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Room_RoomPerson_By_PkArgs = {
    _set?: Maybe<Room_RoomPerson_Set_Input>;
    pk_columns: Room_RoomPerson_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Room_Room_By_PkArgs = {
    _inc?: Maybe<Room_Room_Inc_Input>;
    _set?: Maybe<Room_Room_Set_Input>;
    pk_columns: Room_Room_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Room_ShuffleAlgorithmArgs = {
    _set?: Maybe<Room_ShuffleAlgorithm_Set_Input>;
    where: Room_ShuffleAlgorithm_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Room_ShuffleAlgorithm_By_PkArgs = {
    _set?: Maybe<Room_ShuffleAlgorithm_Set_Input>;
    pk_columns: Room_ShuffleAlgorithm_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Room_ShufflePeriodArgs = {
    _inc?: Maybe<Room_ShufflePeriod_Inc_Input>;
    _set?: Maybe<Room_ShufflePeriod_Set_Input>;
    where: Room_ShufflePeriod_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Room_ShufflePeriod_By_PkArgs = {
    _inc?: Maybe<Room_ShufflePeriod_Inc_Input>;
    _set?: Maybe<Room_ShufflePeriod_Set_Input>;
    pk_columns: Room_ShufflePeriod_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Room_ShuffleQueueEntryArgs = {
    _inc?: Maybe<Room_ShuffleQueueEntry_Inc_Input>;
    _set?: Maybe<Room_ShuffleQueueEntry_Set_Input>;
    where: Room_ShuffleQueueEntry_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Room_ShuffleQueueEntry_By_PkArgs = {
    _inc?: Maybe<Room_ShuffleQueueEntry_Inc_Input>;
    _set?: Maybe<Room_ShuffleQueueEntry_Set_Input>;
    pk_columns: Room_ShuffleQueueEntry_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Room_ShuffleRoomArgs = {
    _inc?: Maybe<Room_ShuffleRoom_Inc_Input>;
    _set?: Maybe<Room_ShuffleRoom_Set_Input>;
    where: Room_ShuffleRoom_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Room_ShuffleRoom_By_PkArgs = {
    _inc?: Maybe<Room_ShuffleRoom_Inc_Input>;
    _set?: Maybe<Room_ShuffleRoom_Set_Input>;
    pk_columns: Room_ShuffleRoom_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Schedule_ContinuationArgs = {
    _append?: Maybe<Schedule_Continuation_Append_Input>;
    _delete_at_path?: Maybe<Schedule_Continuation_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Schedule_Continuation_Delete_Elem_Input>;
    _delete_key?: Maybe<Schedule_Continuation_Delete_Key_Input>;
    _inc?: Maybe<Schedule_Continuation_Inc_Input>;
    _prepend?: Maybe<Schedule_Continuation_Prepend_Input>;
    _set?: Maybe<Schedule_Continuation_Set_Input>;
    where: Schedule_Continuation_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Schedule_Continuation_By_PkArgs = {
    _append?: Maybe<Schedule_Continuation_Append_Input>;
    _delete_at_path?: Maybe<Schedule_Continuation_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Schedule_Continuation_Delete_Elem_Input>;
    _delete_key?: Maybe<Schedule_Continuation_Delete_Key_Input>;
    _inc?: Maybe<Schedule_Continuation_Inc_Input>;
    _prepend?: Maybe<Schedule_Continuation_Prepend_Input>;
    _set?: Maybe<Schedule_Continuation_Set_Input>;
    pk_columns: Schedule_Continuation_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Schedule_EventArgs = {
    _inc?: Maybe<Schedule_Event_Inc_Input>;
    _set?: Maybe<Schedule_Event_Set_Input>;
    where: Schedule_Event_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Schedule_EventProgramPersonArgs = {
    _set?: Maybe<Schedule_EventProgramPerson_Set_Input>;
    where: Schedule_EventProgramPerson_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Schedule_EventProgramPersonRoleArgs = {
    _set?: Maybe<Schedule_EventProgramPersonRole_Set_Input>;
    where: Schedule_EventProgramPersonRole_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Schedule_EventProgramPersonRole_By_PkArgs = {
    _set?: Maybe<Schedule_EventProgramPersonRole_Set_Input>;
    pk_columns: Schedule_EventProgramPersonRole_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Schedule_EventProgramPerson_By_PkArgs = {
    _set?: Maybe<Schedule_EventProgramPerson_Set_Input>;
    pk_columns: Schedule_EventProgramPerson_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Schedule_EventTagArgs = {
    _set?: Maybe<Schedule_EventTag_Set_Input>;
    where: Schedule_EventTag_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Schedule_EventTag_By_PkArgs = {
    _set?: Maybe<Schedule_EventTag_Set_Input>;
    pk_columns: Schedule_EventTag_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Schedule_Event_By_PkArgs = {
    _inc?: Maybe<Schedule_Event_Inc_Input>;
    _set?: Maybe<Schedule_Event_Set_Input>;
    pk_columns: Schedule_Event_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Schedule_StarredEventArgs = {
    _set?: Maybe<Schedule_StarredEvent_Set_Input>;
    where: Schedule_StarredEvent_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Schedule_StarredEvent_By_PkArgs = {
    _set?: Maybe<Schedule_StarredEvent_Set_Input>;
    pk_columns: Schedule_StarredEvent_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_System_ConfigurationArgs = {
    _append?: Maybe<System_Configuration_Append_Input>;
    _delete_at_path?: Maybe<System_Configuration_Delete_At_Path_Input>;
    _delete_elem?: Maybe<System_Configuration_Delete_Elem_Input>;
    _delete_key?: Maybe<System_Configuration_Delete_Key_Input>;
    _prepend?: Maybe<System_Configuration_Prepend_Input>;
    _set?: Maybe<System_Configuration_Set_Input>;
    where: System_Configuration_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_System_ConfigurationKeyArgs = {
    _set?: Maybe<System_ConfigurationKey_Set_Input>;
    where: System_ConfigurationKey_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_System_ConfigurationKey_By_PkArgs = {
    _set?: Maybe<System_ConfigurationKey_Set_Input>;
    pk_columns: System_ConfigurationKey_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_System_Configuration_By_PkArgs = {
    _append?: Maybe<System_Configuration_Append_Input>;
    _delete_at_path?: Maybe<System_Configuration_Delete_At_Path_Input>;
    _delete_elem?: Maybe<System_Configuration_Delete_Elem_Input>;
    _delete_key?: Maybe<System_Configuration_Delete_Key_Input>;
    _prepend?: Maybe<System_Configuration_Prepend_Input>;
    _set?: Maybe<System_Configuration_Set_Input>;
    pk_columns: System_Configuration_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Video_ChannelStackArgs = {
    _set?: Maybe<Video_ChannelStack_Set_Input>;
    where: Video_ChannelStack_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Video_ChannelStack_By_PkArgs = {
    _set?: Maybe<Video_ChannelStack_Set_Input>;
    pk_columns: Video_ChannelStack_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Video_EventParticipantStreamArgs = {
    _set?: Maybe<Video_EventParticipantStream_Set_Input>;
    where: Video_EventParticipantStream_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Video_EventParticipantStream_By_PkArgs = {
    _set?: Maybe<Video_EventParticipantStream_Set_Input>;
    pk_columns: Video_EventParticipantStream_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Video_EventVonageSessionArgs = {
    _append?: Maybe<Video_EventVonageSession_Append_Input>;
    _delete_at_path?: Maybe<Video_EventVonageSession_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Video_EventVonageSession_Delete_Elem_Input>;
    _delete_key?: Maybe<Video_EventVonageSession_Delete_Key_Input>;
    _prepend?: Maybe<Video_EventVonageSession_Prepend_Input>;
    _set?: Maybe<Video_EventVonageSession_Set_Input>;
    where: Video_EventVonageSession_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Video_EventVonageSession_By_PkArgs = {
    _append?: Maybe<Video_EventVonageSession_Append_Input>;
    _delete_at_path?: Maybe<Video_EventVonageSession_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Video_EventVonageSession_Delete_Elem_Input>;
    _delete_key?: Maybe<Video_EventVonageSession_Delete_Key_Input>;
    _prepend?: Maybe<Video_EventVonageSession_Prepend_Input>;
    _set?: Maybe<Video_EventVonageSession_Set_Input>;
    pk_columns: Video_EventVonageSession_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Video_ImmediateSwitchArgs = {
    _append?: Maybe<Video_ImmediateSwitch_Append_Input>;
    _delete_at_path?: Maybe<Video_ImmediateSwitch_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Video_ImmediateSwitch_Delete_Elem_Input>;
    _delete_key?: Maybe<Video_ImmediateSwitch_Delete_Key_Input>;
    _prepend?: Maybe<Video_ImmediateSwitch_Prepend_Input>;
    _set?: Maybe<Video_ImmediateSwitch_Set_Input>;
    where: Video_ImmediateSwitch_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Video_ImmediateSwitch_By_PkArgs = {
    _append?: Maybe<Video_ImmediateSwitch_Append_Input>;
    _delete_at_path?: Maybe<Video_ImmediateSwitch_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Video_ImmediateSwitch_Delete_Elem_Input>;
    _delete_key?: Maybe<Video_ImmediateSwitch_Delete_Key_Input>;
    _prepend?: Maybe<Video_ImmediateSwitch_Prepend_Input>;
    _set?: Maybe<Video_ImmediateSwitch_Set_Input>;
    pk_columns: Video_ImmediateSwitch_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Video_InputTypeArgs = {
    _set?: Maybe<Video_InputType_Set_Input>;
    where: Video_InputType_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Video_InputType_By_PkArgs = {
    _set?: Maybe<Video_InputType_Set_Input>;
    pk_columns: Video_InputType_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Video_JobStatusArgs = {
    _set?: Maybe<Video_JobStatus_Set_Input>;
    where: Video_JobStatus_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Video_JobStatus_By_PkArgs = {
    _set?: Maybe<Video_JobStatus_Set_Input>;
    pk_columns: Video_JobStatus_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Video_MediaLiveChannelStatusArgs = {
    _inc?: Maybe<Video_MediaLiveChannelStatus_Inc_Input>;
    _set?: Maybe<Video_MediaLiveChannelStatus_Set_Input>;
    where: Video_MediaLiveChannelStatus_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Video_MediaLiveChannelStatus_By_PkArgs = {
    _inc?: Maybe<Video_MediaLiveChannelStatus_Inc_Input>;
    _set?: Maybe<Video_MediaLiveChannelStatus_Set_Input>;
    pk_columns: Video_MediaLiveChannelStatus_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Video_RtmpInputArgs = {
    _set?: Maybe<Video_RtmpInput_Set_Input>;
    where: Video_RtmpInput_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Video_RtmpInput_By_PkArgs = {
    _set?: Maybe<Video_RtmpInput_Set_Input>;
    pk_columns: Video_RtmpInput_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Video_TranscriptionJobArgs = {
    _set?: Maybe<Video_TranscriptionJob_Set_Input>;
    where: Video_TranscriptionJob_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Video_TranscriptionJob_By_PkArgs = {
    _set?: Maybe<Video_TranscriptionJob_Set_Input>;
    pk_columns: Video_TranscriptionJob_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Video_VideoRenderJobArgs = {
    _append?: Maybe<Video_VideoRenderJob_Append_Input>;
    _delete_at_path?: Maybe<Video_VideoRenderJob_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Video_VideoRenderJob_Delete_Elem_Input>;
    _delete_key?: Maybe<Video_VideoRenderJob_Delete_Key_Input>;
    _inc?: Maybe<Video_VideoRenderJob_Inc_Input>;
    _prepend?: Maybe<Video_VideoRenderJob_Prepend_Input>;
    _set?: Maybe<Video_VideoRenderJob_Set_Input>;
    where: Video_VideoRenderJob_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Video_VideoRenderJob_By_PkArgs = {
    _append?: Maybe<Video_VideoRenderJob_Append_Input>;
    _delete_at_path?: Maybe<Video_VideoRenderJob_Delete_At_Path_Input>;
    _delete_elem?: Maybe<Video_VideoRenderJob_Delete_Elem_Input>;
    _delete_key?: Maybe<Video_VideoRenderJob_Delete_Key_Input>;
    _inc?: Maybe<Video_VideoRenderJob_Inc_Input>;
    _prepend?: Maybe<Video_VideoRenderJob_Prepend_Input>;
    _set?: Maybe<Video_VideoRenderJob_Set_Input>;
    pk_columns: Video_VideoRenderJob_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Video_YouTubeUploadArgs = {
    _set?: Maybe<Video_YouTubeUpload_Set_Input>;
    where: Video_YouTubeUpload_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Video_YouTubeUpload_By_PkArgs = {
    _set?: Maybe<Video_YouTubeUpload_Set_Input>;
    pk_columns: Video_YouTubeUpload_Pk_Columns_Input;
};

/** Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'. */
export type Numeric_Comparison_Exp = {
    _eq?: Maybe<Scalars["numeric"]>;
    _gt?: Maybe<Scalars["numeric"]>;
    _gte?: Maybe<Scalars["numeric"]>;
    _in?: Maybe<Array<Scalars["numeric"]>>;
    _is_null?: Maybe<Scalars["Boolean"]>;
    _lt?: Maybe<Scalars["numeric"]>;
    _lte?: Maybe<Scalars["numeric"]>;
    _neq?: Maybe<Scalars["numeric"]>;
    _nin?: Maybe<Array<Scalars["numeric"]>>;
};

/** column ordering options */
export enum Order_By {
    /** in ascending order, nulls last */
    Asc = "asc",
    /** in ascending order, nulls first */
    AscNullsFirst = "asc_nulls_first",
    /** in ascending order, nulls last */
    AscNullsLast = "asc_nulls_last",
    /** in descending order, nulls first */
    Desc = "desc",
    /** in descending order, nulls first */
    DescNullsFirst = "desc_nulls_first",
    /** in descending order, nulls last */
    DescNullsLast = "desc_nulls_last",
}

/** columns and relationships of "permissions.Group" */
export type Permissions_Group = {
    __typename?: "permissions_Group";
    /** An object relationship */
    conference: Conference_Conference;
    conferenceId: Scalars["uuid"];
    createdAt: Scalars["timestamptz"];
    enabled: Scalars["Boolean"];
    /** An array relationship */
    groupRegistrants: Array<Permissions_GroupRegistrant>;
    /** An aggregate relationship */
    groupRegistrants_aggregate: Permissions_GroupRegistrant_Aggregate;
    /** An array relationship */
    groupRoles: Array<Permissions_GroupRole>;
    /** An aggregate relationship */
    groupRoles_aggregate: Permissions_GroupRole_Aggregate;
    id: Scalars["uuid"];
    includeUnauthenticated: Scalars["Boolean"];
    name: Scalars["String"];
    updatedAt: Scalars["timestamptz"];
};

/** columns and relationships of "permissions.Group" */
export type Permissions_GroupGroupRegistrantsArgs = {
    distinct_on?: Maybe<Array<Permissions_GroupRegistrant_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_GroupRegistrant_Order_By>>;
    where?: Maybe<Permissions_GroupRegistrant_Bool_Exp>;
};

/** columns and relationships of "permissions.Group" */
export type Permissions_GroupGroupRegistrants_AggregateArgs = {
    distinct_on?: Maybe<Array<Permissions_GroupRegistrant_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_GroupRegistrant_Order_By>>;
    where?: Maybe<Permissions_GroupRegistrant_Bool_Exp>;
};

/** columns and relationships of "permissions.Group" */
export type Permissions_GroupGroupRolesArgs = {
    distinct_on?: Maybe<Array<Permissions_GroupRole_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_GroupRole_Order_By>>;
    where?: Maybe<Permissions_GroupRole_Bool_Exp>;
};

/** columns and relationships of "permissions.Group" */
export type Permissions_GroupGroupRoles_AggregateArgs = {
    distinct_on?: Maybe<Array<Permissions_GroupRole_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_GroupRole_Order_By>>;
    where?: Maybe<Permissions_GroupRole_Bool_Exp>;
};

/** columns and relationships of "permissions.GroupRegistrant" */
export type Permissions_GroupRegistrant = {
    __typename?: "permissions_GroupRegistrant";
    createdAt: Scalars["timestamptz"];
    /** An object relationship */
    group: Permissions_Group;
    groupId: Scalars["uuid"];
    id: Scalars["uuid"];
    /** An object relationship */
    registrant: Registrant_Registrant;
    registrantId: Scalars["uuid"];
    updatedAt: Scalars["timestamptz"];
};

/** aggregated selection of "permissions.GroupRegistrant" */
export type Permissions_GroupRegistrant_Aggregate = {
    __typename?: "permissions_GroupRegistrant_aggregate";
    aggregate?: Maybe<Permissions_GroupRegistrant_Aggregate_Fields>;
    nodes: Array<Permissions_GroupRegistrant>;
};

/** aggregate fields of "permissions.GroupRegistrant" */
export type Permissions_GroupRegistrant_Aggregate_Fields = {
    __typename?: "permissions_GroupRegistrant_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Permissions_GroupRegistrant_Max_Fields>;
    min?: Maybe<Permissions_GroupRegistrant_Min_Fields>;
};

/** aggregate fields of "permissions.GroupRegistrant" */
export type Permissions_GroupRegistrant_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Permissions_GroupRegistrant_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "permissions.GroupRegistrant" */
export type Permissions_GroupRegistrant_Aggregate_Order_By = {
    count?: Maybe<Order_By>;
    max?: Maybe<Permissions_GroupRegistrant_Max_Order_By>;
    min?: Maybe<Permissions_GroupRegistrant_Min_Order_By>;
};

/** input type for inserting array relation for remote table "permissions.GroupRegistrant" */
export type Permissions_GroupRegistrant_Arr_Rel_Insert_Input = {
    data: Array<Permissions_GroupRegistrant_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Permissions_GroupRegistrant_On_Conflict>;
};

/** Boolean expression to filter rows from the table "permissions.GroupRegistrant". All fields are combined with a logical 'AND'. */
export type Permissions_GroupRegistrant_Bool_Exp = {
    _and?: Maybe<Array<Permissions_GroupRegistrant_Bool_Exp>>;
    _not?: Maybe<Permissions_GroupRegistrant_Bool_Exp>;
    _or?: Maybe<Array<Permissions_GroupRegistrant_Bool_Exp>>;
    createdAt?: Maybe<Timestamptz_Comparison_Exp>;
    group?: Maybe<Permissions_Group_Bool_Exp>;
    groupId?: Maybe<Uuid_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    registrant?: Maybe<Registrant_Registrant_Bool_Exp>;
    registrantId?: Maybe<Uuid_Comparison_Exp>;
    updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "permissions.GroupRegistrant" */
export enum Permissions_GroupRegistrant_Constraint {
    /** unique or primary key constraint */
    GroupRegistrantGroupIdRegistrantIdKey = "GroupRegistrant_groupId_registrantId_key",
    /** unique or primary key constraint */
    GroupRegistrantPkey = "GroupRegistrant_pkey",
}

/** input type for inserting data into table "permissions.GroupRegistrant" */
export type Permissions_GroupRegistrant_Insert_Input = {
    createdAt?: Maybe<Scalars["timestamptz"]>;
    group?: Maybe<Permissions_Group_Obj_Rel_Insert_Input>;
    groupId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    registrant?: Maybe<Registrant_Registrant_Obj_Rel_Insert_Input>;
    registrantId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Permissions_GroupRegistrant_Max_Fields = {
    __typename?: "permissions_GroupRegistrant_max_fields";
    createdAt?: Maybe<Scalars["timestamptz"]>;
    groupId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** order by max() on columns of table "permissions.GroupRegistrant" */
export type Permissions_GroupRegistrant_Max_Order_By = {
    createdAt?: Maybe<Order_By>;
    groupId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    registrantId?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Permissions_GroupRegistrant_Min_Fields = {
    __typename?: "permissions_GroupRegistrant_min_fields";
    createdAt?: Maybe<Scalars["timestamptz"]>;
    groupId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** order by min() on columns of table "permissions.GroupRegistrant" */
export type Permissions_GroupRegistrant_Min_Order_By = {
    createdAt?: Maybe<Order_By>;
    groupId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    registrantId?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** response of any mutation on the table "permissions.GroupRegistrant" */
export type Permissions_GroupRegistrant_Mutation_Response = {
    __typename?: "permissions_GroupRegistrant_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Permissions_GroupRegistrant>;
};

/** on conflict condition type for table "permissions.GroupRegistrant" */
export type Permissions_GroupRegistrant_On_Conflict = {
    constraint: Permissions_GroupRegistrant_Constraint;
    update_columns?: Array<Permissions_GroupRegistrant_Update_Column>;
    where?: Maybe<Permissions_GroupRegistrant_Bool_Exp>;
};

/** Ordering options when selecting data from "permissions.GroupRegistrant". */
export type Permissions_GroupRegistrant_Order_By = {
    createdAt?: Maybe<Order_By>;
    group?: Maybe<Permissions_Group_Order_By>;
    groupId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    registrant?: Maybe<Registrant_Registrant_Order_By>;
    registrantId?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** primary key columns input for table: permissions_GroupRegistrant */
export type Permissions_GroupRegistrant_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "permissions.GroupRegistrant" */
export enum Permissions_GroupRegistrant_Select_Column {
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    GroupId = "groupId",
    /** column name */
    Id = "id",
    /** column name */
    RegistrantId = "registrantId",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** input type for updating data in table "permissions.GroupRegistrant" */
export type Permissions_GroupRegistrant_Set_Input = {
    createdAt?: Maybe<Scalars["timestamptz"]>;
    groupId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** update columns of table "permissions.GroupRegistrant" */
export enum Permissions_GroupRegistrant_Update_Column {
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    GroupId = "groupId",
    /** column name */
    Id = "id",
    /** column name */
    RegistrantId = "registrantId",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** columns and relationships of "permissions.GroupRole" */
export type Permissions_GroupRole = {
    __typename?: "permissions_GroupRole";
    createdAt: Scalars["timestamptz"];
    /** An object relationship */
    group: Permissions_Group;
    groupId: Scalars["uuid"];
    id: Scalars["uuid"];
    /** An object relationship */
    role: Permissions_Role;
    roleId: Scalars["uuid"];
    updatedAt: Scalars["timestamptz"];
};

/** aggregated selection of "permissions.GroupRole" */
export type Permissions_GroupRole_Aggregate = {
    __typename?: "permissions_GroupRole_aggregate";
    aggregate?: Maybe<Permissions_GroupRole_Aggregate_Fields>;
    nodes: Array<Permissions_GroupRole>;
};

/** aggregate fields of "permissions.GroupRole" */
export type Permissions_GroupRole_Aggregate_Fields = {
    __typename?: "permissions_GroupRole_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Permissions_GroupRole_Max_Fields>;
    min?: Maybe<Permissions_GroupRole_Min_Fields>;
};

/** aggregate fields of "permissions.GroupRole" */
export type Permissions_GroupRole_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Permissions_GroupRole_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "permissions.GroupRole" */
export type Permissions_GroupRole_Aggregate_Order_By = {
    count?: Maybe<Order_By>;
    max?: Maybe<Permissions_GroupRole_Max_Order_By>;
    min?: Maybe<Permissions_GroupRole_Min_Order_By>;
};

/** input type for inserting array relation for remote table "permissions.GroupRole" */
export type Permissions_GroupRole_Arr_Rel_Insert_Input = {
    data: Array<Permissions_GroupRole_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Permissions_GroupRole_On_Conflict>;
};

/** Boolean expression to filter rows from the table "permissions.GroupRole". All fields are combined with a logical 'AND'. */
export type Permissions_GroupRole_Bool_Exp = {
    _and?: Maybe<Array<Permissions_GroupRole_Bool_Exp>>;
    _not?: Maybe<Permissions_GroupRole_Bool_Exp>;
    _or?: Maybe<Array<Permissions_GroupRole_Bool_Exp>>;
    createdAt?: Maybe<Timestamptz_Comparison_Exp>;
    group?: Maybe<Permissions_Group_Bool_Exp>;
    groupId?: Maybe<Uuid_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    role?: Maybe<Permissions_Role_Bool_Exp>;
    roleId?: Maybe<Uuid_Comparison_Exp>;
    updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "permissions.GroupRole" */
export enum Permissions_GroupRole_Constraint {
    /** unique or primary key constraint */
    GroupRoleGroupIdRoleIdKey = "GroupRole_groupId_roleId_key",
    /** unique or primary key constraint */
    GroupRolePkey = "GroupRole_pkey",
}

/** input type for inserting data into table "permissions.GroupRole" */
export type Permissions_GroupRole_Insert_Input = {
    createdAt?: Maybe<Scalars["timestamptz"]>;
    group?: Maybe<Permissions_Group_Obj_Rel_Insert_Input>;
    groupId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    role?: Maybe<Permissions_Role_Obj_Rel_Insert_Input>;
    roleId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Permissions_GroupRole_Max_Fields = {
    __typename?: "permissions_GroupRole_max_fields";
    createdAt?: Maybe<Scalars["timestamptz"]>;
    groupId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    roleId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** order by max() on columns of table "permissions.GroupRole" */
export type Permissions_GroupRole_Max_Order_By = {
    createdAt?: Maybe<Order_By>;
    groupId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    roleId?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Permissions_GroupRole_Min_Fields = {
    __typename?: "permissions_GroupRole_min_fields";
    createdAt?: Maybe<Scalars["timestamptz"]>;
    groupId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    roleId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** order by min() on columns of table "permissions.GroupRole" */
export type Permissions_GroupRole_Min_Order_By = {
    createdAt?: Maybe<Order_By>;
    groupId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    roleId?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** response of any mutation on the table "permissions.GroupRole" */
export type Permissions_GroupRole_Mutation_Response = {
    __typename?: "permissions_GroupRole_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Permissions_GroupRole>;
};

/** on conflict condition type for table "permissions.GroupRole" */
export type Permissions_GroupRole_On_Conflict = {
    constraint: Permissions_GroupRole_Constraint;
    update_columns?: Array<Permissions_GroupRole_Update_Column>;
    where?: Maybe<Permissions_GroupRole_Bool_Exp>;
};

/** Ordering options when selecting data from "permissions.GroupRole". */
export type Permissions_GroupRole_Order_By = {
    createdAt?: Maybe<Order_By>;
    group?: Maybe<Permissions_Group_Order_By>;
    groupId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    role?: Maybe<Permissions_Role_Order_By>;
    roleId?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** primary key columns input for table: permissions_GroupRole */
export type Permissions_GroupRole_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "permissions.GroupRole" */
export enum Permissions_GroupRole_Select_Column {
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    GroupId = "groupId",
    /** column name */
    Id = "id",
    /** column name */
    RoleId = "roleId",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** input type for updating data in table "permissions.GroupRole" */
export type Permissions_GroupRole_Set_Input = {
    createdAt?: Maybe<Scalars["timestamptz"]>;
    groupId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    roleId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** update columns of table "permissions.GroupRole" */
export enum Permissions_GroupRole_Update_Column {
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    GroupId = "groupId",
    /** column name */
    Id = "id",
    /** column name */
    RoleId = "roleId",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** aggregated selection of "permissions.Group" */
export type Permissions_Group_Aggregate = {
    __typename?: "permissions_Group_aggregate";
    aggregate?: Maybe<Permissions_Group_Aggregate_Fields>;
    nodes: Array<Permissions_Group>;
};

/** aggregate fields of "permissions.Group" */
export type Permissions_Group_Aggregate_Fields = {
    __typename?: "permissions_Group_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Permissions_Group_Max_Fields>;
    min?: Maybe<Permissions_Group_Min_Fields>;
};

/** aggregate fields of "permissions.Group" */
export type Permissions_Group_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Permissions_Group_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "permissions.Group" */
export type Permissions_Group_Aggregate_Order_By = {
    count?: Maybe<Order_By>;
    max?: Maybe<Permissions_Group_Max_Order_By>;
    min?: Maybe<Permissions_Group_Min_Order_By>;
};

/** input type for inserting array relation for remote table "permissions.Group" */
export type Permissions_Group_Arr_Rel_Insert_Input = {
    data: Array<Permissions_Group_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Permissions_Group_On_Conflict>;
};

/** Boolean expression to filter rows from the table "permissions.Group". All fields are combined with a logical 'AND'. */
export type Permissions_Group_Bool_Exp = {
    _and?: Maybe<Array<Permissions_Group_Bool_Exp>>;
    _not?: Maybe<Permissions_Group_Bool_Exp>;
    _or?: Maybe<Array<Permissions_Group_Bool_Exp>>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    createdAt?: Maybe<Timestamptz_Comparison_Exp>;
    enabled?: Maybe<Boolean_Comparison_Exp>;
    groupRegistrants?: Maybe<Permissions_GroupRegistrant_Bool_Exp>;
    groupRoles?: Maybe<Permissions_GroupRole_Bool_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    includeUnauthenticated?: Maybe<Boolean_Comparison_Exp>;
    name?: Maybe<String_Comparison_Exp>;
    updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "permissions.Group" */
export enum Permissions_Group_Constraint {
    /** unique or primary key constraint */
    GroupConferenceIdNameKey = "Group_conferenceId_name_key",
    /** unique or primary key constraint */
    GroupPkey = "Group_pkey",
}

/** input type for inserting data into table "permissions.Group" */
export type Permissions_Group_Insert_Input = {
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    enabled?: Maybe<Scalars["Boolean"]>;
    groupRegistrants?: Maybe<Permissions_GroupRegistrant_Arr_Rel_Insert_Input>;
    groupRoles?: Maybe<Permissions_GroupRole_Arr_Rel_Insert_Input>;
    id?: Maybe<Scalars["uuid"]>;
    includeUnauthenticated?: Maybe<Scalars["Boolean"]>;
    name?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Permissions_Group_Max_Fields = {
    __typename?: "permissions_Group_max_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** order by max() on columns of table "permissions.Group" */
export type Permissions_Group_Max_Order_By = {
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Permissions_Group_Min_Fields = {
    __typename?: "permissions_Group_min_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** order by min() on columns of table "permissions.Group" */
export type Permissions_Group_Min_Order_By = {
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** response of any mutation on the table "permissions.Group" */
export type Permissions_Group_Mutation_Response = {
    __typename?: "permissions_Group_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Permissions_Group>;
};

/** input type for inserting object relation for remote table "permissions.Group" */
export type Permissions_Group_Obj_Rel_Insert_Input = {
    data: Permissions_Group_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Permissions_Group_On_Conflict>;
};

/** on conflict condition type for table "permissions.Group" */
export type Permissions_Group_On_Conflict = {
    constraint: Permissions_Group_Constraint;
    update_columns?: Array<Permissions_Group_Update_Column>;
    where?: Maybe<Permissions_Group_Bool_Exp>;
};

/** Ordering options when selecting data from "permissions.Group". */
export type Permissions_Group_Order_By = {
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    enabled?: Maybe<Order_By>;
    groupRegistrants_aggregate?: Maybe<Permissions_GroupRegistrant_Aggregate_Order_By>;
    groupRoles_aggregate?: Maybe<Permissions_GroupRole_Aggregate_Order_By>;
    id?: Maybe<Order_By>;
    includeUnauthenticated?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** primary key columns input for table: permissions_Group */
export type Permissions_Group_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "permissions.Group" */
export enum Permissions_Group_Select_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Enabled = "enabled",
    /** column name */
    Id = "id",
    /** column name */
    IncludeUnauthenticated = "includeUnauthenticated",
    /** column name */
    Name = "name",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** input type for updating data in table "permissions.Group" */
export type Permissions_Group_Set_Input = {
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    enabled?: Maybe<Scalars["Boolean"]>;
    id?: Maybe<Scalars["uuid"]>;
    includeUnauthenticated?: Maybe<Scalars["Boolean"]>;
    name?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** update columns of table "permissions.Group" */
export enum Permissions_Group_Update_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Enabled = "enabled",
    /** column name */
    Id = "id",
    /** column name */
    IncludeUnauthenticated = "includeUnauthenticated",
    /** column name */
    Name = "name",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** columns and relationships of "permissions.Permission" */
export type Permissions_Permission = {
    __typename?: "permissions_Permission";
    description: Scalars["String"];
    name: Scalars["String"];
    /** An array relationship */
    rolePermissions: Array<Permissions_RolePermission>;
    /** An aggregate relationship */
    rolePermissions_aggregate: Permissions_RolePermission_Aggregate;
};

/** columns and relationships of "permissions.Permission" */
export type Permissions_PermissionRolePermissionsArgs = {
    distinct_on?: Maybe<Array<Permissions_RolePermission_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_RolePermission_Order_By>>;
    where?: Maybe<Permissions_RolePermission_Bool_Exp>;
};

/** columns and relationships of "permissions.Permission" */
export type Permissions_PermissionRolePermissions_AggregateArgs = {
    distinct_on?: Maybe<Array<Permissions_RolePermission_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_RolePermission_Order_By>>;
    where?: Maybe<Permissions_RolePermission_Bool_Exp>;
};

/** aggregated selection of "permissions.Permission" */
export type Permissions_Permission_Aggregate = {
    __typename?: "permissions_Permission_aggregate";
    aggregate?: Maybe<Permissions_Permission_Aggregate_Fields>;
    nodes: Array<Permissions_Permission>;
};

/** aggregate fields of "permissions.Permission" */
export type Permissions_Permission_Aggregate_Fields = {
    __typename?: "permissions_Permission_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Permissions_Permission_Max_Fields>;
    min?: Maybe<Permissions_Permission_Min_Fields>;
};

/** aggregate fields of "permissions.Permission" */
export type Permissions_Permission_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Permissions_Permission_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** Boolean expression to filter rows from the table "permissions.Permission". All fields are combined with a logical 'AND'. */
export type Permissions_Permission_Bool_Exp = {
    _and?: Maybe<Array<Permissions_Permission_Bool_Exp>>;
    _not?: Maybe<Permissions_Permission_Bool_Exp>;
    _or?: Maybe<Array<Permissions_Permission_Bool_Exp>>;
    description?: Maybe<String_Comparison_Exp>;
    name?: Maybe<String_Comparison_Exp>;
    rolePermissions?: Maybe<Permissions_RolePermission_Bool_Exp>;
};

/** unique or primary key constraints on table "permissions.Permission" */
export enum Permissions_Permission_Constraint {
    /** unique or primary key constraint */
    PermissionPkey = "Permission_pkey",
}

export enum Permissions_Permission_Enum {
    /** Manage (create/update/delete) conference attendees. */
    ConferenceManageAttendees = "CONFERENCE_MANAGE_ATTENDEES",
    /** Manage Content tables. */
    ConferenceManageContent = "CONFERENCE_MANAGE_CONTENT",
    /** Manage groups of a conference. */
    ConferenceManageGroups = "CONFERENCE_MANAGE_GROUPS",
    /** Manage (update only) conference name, short name and slug. */
    ConferenceManageName = "CONFERENCE_MANAGE_NAME",
    /** Manage roles of a conference. */
    ConferenceManageRoles = "CONFERENCE_MANAGE_ROLES",
    /** Manage Schedule tables. */
    ConferenceManageSchedule = "CONFERENCE_MANAGE_SCHEDULE",
    /** Manage shuffle periods. */
    ConferenceManageShuffle = "CONFERENCE_MANAGE_SHUFFLE",
    /** Moderate (update only) conference attendees. */
    ConferenceModerateAttendees = "CONFERENCE_MODERATE_ATTENDEES",
    /** View the conference. */
    ConferenceView = "CONFERENCE_VIEW",
    /** View conference attendees. */
    ConferenceViewAttendees = "CONFERENCE_VIEW_ATTENDEES",
}

/** Boolean expression to compare columns of type "permissions_Permission_enum". All fields are combined with logical 'AND'. */
export type Permissions_Permission_Enum_Comparison_Exp = {
    _eq?: Maybe<Permissions_Permission_Enum>;
    _in?: Maybe<Array<Permissions_Permission_Enum>>;
    _is_null?: Maybe<Scalars["Boolean"]>;
    _neq?: Maybe<Permissions_Permission_Enum>;
    _nin?: Maybe<Array<Permissions_Permission_Enum>>;
};

/** input type for inserting data into table "permissions.Permission" */
export type Permissions_Permission_Insert_Input = {
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
    rolePermissions?: Maybe<Permissions_RolePermission_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Permissions_Permission_Max_Fields = {
    __typename?: "permissions_Permission_max_fields";
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** aggregate min on columns */
export type Permissions_Permission_Min_Fields = {
    __typename?: "permissions_Permission_min_fields";
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** response of any mutation on the table "permissions.Permission" */
export type Permissions_Permission_Mutation_Response = {
    __typename?: "permissions_Permission_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Permissions_Permission>;
};

/** input type for inserting object relation for remote table "permissions.Permission" */
export type Permissions_Permission_Obj_Rel_Insert_Input = {
    data: Permissions_Permission_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Permissions_Permission_On_Conflict>;
};

/** on conflict condition type for table "permissions.Permission" */
export type Permissions_Permission_On_Conflict = {
    constraint: Permissions_Permission_Constraint;
    update_columns?: Array<Permissions_Permission_Update_Column>;
    where?: Maybe<Permissions_Permission_Bool_Exp>;
};

/** Ordering options when selecting data from "permissions.Permission". */
export type Permissions_Permission_Order_By = {
    description?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    rolePermissions_aggregate?: Maybe<Permissions_RolePermission_Aggregate_Order_By>;
};

/** primary key columns input for table: permissions_Permission */
export type Permissions_Permission_Pk_Columns_Input = {
    name: Scalars["String"];
};

/** select columns of table "permissions.Permission" */
export enum Permissions_Permission_Select_Column {
    /** column name */
    Description = "description",
    /** column name */
    Name = "name",
}

/** input type for updating data in table "permissions.Permission" */
export type Permissions_Permission_Set_Input = {
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** update columns of table "permissions.Permission" */
export enum Permissions_Permission_Update_Column {
    /** column name */
    Description = "description",
    /** column name */
    Name = "name",
}

/** columns and relationships of "permissions.Role" */
export type Permissions_Role = {
    __typename?: "permissions_Role";
    /** An object relationship */
    conference: Conference_Conference;
    conferenceId: Scalars["uuid"];
    createdAt: Scalars["timestamptz"];
    /** An array relationship */
    groupRoles: Array<Permissions_GroupRole>;
    /** An aggregate relationship */
    groupRoles_aggregate: Permissions_GroupRole_Aggregate;
    id: Scalars["uuid"];
    name: Scalars["String"];
    /** An array relationship */
    rolePermissions: Array<Permissions_RolePermission>;
    /** An aggregate relationship */
    rolePermissions_aggregate: Permissions_RolePermission_Aggregate;
    updatedAt: Scalars["timestamptz"];
};

/** columns and relationships of "permissions.Role" */
export type Permissions_RoleGroupRolesArgs = {
    distinct_on?: Maybe<Array<Permissions_GroupRole_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_GroupRole_Order_By>>;
    where?: Maybe<Permissions_GroupRole_Bool_Exp>;
};

/** columns and relationships of "permissions.Role" */
export type Permissions_RoleGroupRoles_AggregateArgs = {
    distinct_on?: Maybe<Array<Permissions_GroupRole_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_GroupRole_Order_By>>;
    where?: Maybe<Permissions_GroupRole_Bool_Exp>;
};

/** columns and relationships of "permissions.Role" */
export type Permissions_RoleRolePermissionsArgs = {
    distinct_on?: Maybe<Array<Permissions_RolePermission_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_RolePermission_Order_By>>;
    where?: Maybe<Permissions_RolePermission_Bool_Exp>;
};

/** columns and relationships of "permissions.Role" */
export type Permissions_RoleRolePermissions_AggregateArgs = {
    distinct_on?: Maybe<Array<Permissions_RolePermission_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_RolePermission_Order_By>>;
    where?: Maybe<Permissions_RolePermission_Bool_Exp>;
};

/** columns and relationships of "permissions.RolePermission" */
export type Permissions_RolePermission = {
    __typename?: "permissions_RolePermission";
    createdAt: Scalars["timestamptz"];
    id: Scalars["uuid"];
    /** An object relationship */
    permission: Permissions_Permission;
    permissionName: Permissions_Permission_Enum;
    /** An object relationship */
    role: Permissions_Role;
    roleId: Scalars["uuid"];
    updatedAt: Scalars["timestamptz"];
};

/** aggregated selection of "permissions.RolePermission" */
export type Permissions_RolePermission_Aggregate = {
    __typename?: "permissions_RolePermission_aggregate";
    aggregate?: Maybe<Permissions_RolePermission_Aggregate_Fields>;
    nodes: Array<Permissions_RolePermission>;
};

/** aggregate fields of "permissions.RolePermission" */
export type Permissions_RolePermission_Aggregate_Fields = {
    __typename?: "permissions_RolePermission_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Permissions_RolePermission_Max_Fields>;
    min?: Maybe<Permissions_RolePermission_Min_Fields>;
};

/** aggregate fields of "permissions.RolePermission" */
export type Permissions_RolePermission_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Permissions_RolePermission_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "permissions.RolePermission" */
export type Permissions_RolePermission_Aggregate_Order_By = {
    count?: Maybe<Order_By>;
    max?: Maybe<Permissions_RolePermission_Max_Order_By>;
    min?: Maybe<Permissions_RolePermission_Min_Order_By>;
};

/** input type for inserting array relation for remote table "permissions.RolePermission" */
export type Permissions_RolePermission_Arr_Rel_Insert_Input = {
    data: Array<Permissions_RolePermission_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Permissions_RolePermission_On_Conflict>;
};

/** Boolean expression to filter rows from the table "permissions.RolePermission". All fields are combined with a logical 'AND'. */
export type Permissions_RolePermission_Bool_Exp = {
    _and?: Maybe<Array<Permissions_RolePermission_Bool_Exp>>;
    _not?: Maybe<Permissions_RolePermission_Bool_Exp>;
    _or?: Maybe<Array<Permissions_RolePermission_Bool_Exp>>;
    createdAt?: Maybe<Timestamptz_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    permission?: Maybe<Permissions_Permission_Bool_Exp>;
    permissionName?: Maybe<Permissions_Permission_Enum_Comparison_Exp>;
    role?: Maybe<Permissions_Role_Bool_Exp>;
    roleId?: Maybe<Uuid_Comparison_Exp>;
    updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "permissions.RolePermission" */
export enum Permissions_RolePermission_Constraint {
    /** unique or primary key constraint */
    RolePermissionPkey = "RolePermission_pkey",
    /** unique or primary key constraint */
    RolePermissionRoleIdPermissionKey = "RolePermission_roleId_permission_key",
}

/** input type for inserting data into table "permissions.RolePermission" */
export type Permissions_RolePermission_Insert_Input = {
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    permission?: Maybe<Permissions_Permission_Obj_Rel_Insert_Input>;
    permissionName?: Maybe<Permissions_Permission_Enum>;
    role?: Maybe<Permissions_Role_Obj_Rel_Insert_Input>;
    roleId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Permissions_RolePermission_Max_Fields = {
    __typename?: "permissions_RolePermission_max_fields";
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    roleId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** order by max() on columns of table "permissions.RolePermission" */
export type Permissions_RolePermission_Max_Order_By = {
    createdAt?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    roleId?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Permissions_RolePermission_Min_Fields = {
    __typename?: "permissions_RolePermission_min_fields";
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    roleId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** order by min() on columns of table "permissions.RolePermission" */
export type Permissions_RolePermission_Min_Order_By = {
    createdAt?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    roleId?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** response of any mutation on the table "permissions.RolePermission" */
export type Permissions_RolePermission_Mutation_Response = {
    __typename?: "permissions_RolePermission_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Permissions_RolePermission>;
};

/** on conflict condition type for table "permissions.RolePermission" */
export type Permissions_RolePermission_On_Conflict = {
    constraint: Permissions_RolePermission_Constraint;
    update_columns?: Array<Permissions_RolePermission_Update_Column>;
    where?: Maybe<Permissions_RolePermission_Bool_Exp>;
};

/** Ordering options when selecting data from "permissions.RolePermission". */
export type Permissions_RolePermission_Order_By = {
    createdAt?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    permission?: Maybe<Permissions_Permission_Order_By>;
    permissionName?: Maybe<Order_By>;
    role?: Maybe<Permissions_Role_Order_By>;
    roleId?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** primary key columns input for table: permissions_RolePermission */
export type Permissions_RolePermission_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "permissions.RolePermission" */
export enum Permissions_RolePermission_Select_Column {
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Id = "id",
    /** column name */
    PermissionName = "permissionName",
    /** column name */
    RoleId = "roleId",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** input type for updating data in table "permissions.RolePermission" */
export type Permissions_RolePermission_Set_Input = {
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    permissionName?: Maybe<Permissions_Permission_Enum>;
    roleId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** update columns of table "permissions.RolePermission" */
export enum Permissions_RolePermission_Update_Column {
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Id = "id",
    /** column name */
    PermissionName = "permissionName",
    /** column name */
    RoleId = "roleId",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** aggregated selection of "permissions.Role" */
export type Permissions_Role_Aggregate = {
    __typename?: "permissions_Role_aggregate";
    aggregate?: Maybe<Permissions_Role_Aggregate_Fields>;
    nodes: Array<Permissions_Role>;
};

/** aggregate fields of "permissions.Role" */
export type Permissions_Role_Aggregate_Fields = {
    __typename?: "permissions_Role_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Permissions_Role_Max_Fields>;
    min?: Maybe<Permissions_Role_Min_Fields>;
};

/** aggregate fields of "permissions.Role" */
export type Permissions_Role_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Permissions_Role_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "permissions.Role" */
export type Permissions_Role_Aggregate_Order_By = {
    count?: Maybe<Order_By>;
    max?: Maybe<Permissions_Role_Max_Order_By>;
    min?: Maybe<Permissions_Role_Min_Order_By>;
};

/** input type for inserting array relation for remote table "permissions.Role" */
export type Permissions_Role_Arr_Rel_Insert_Input = {
    data: Array<Permissions_Role_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Permissions_Role_On_Conflict>;
};

/** Boolean expression to filter rows from the table "permissions.Role". All fields are combined with a logical 'AND'. */
export type Permissions_Role_Bool_Exp = {
    _and?: Maybe<Array<Permissions_Role_Bool_Exp>>;
    _not?: Maybe<Permissions_Role_Bool_Exp>;
    _or?: Maybe<Array<Permissions_Role_Bool_Exp>>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    createdAt?: Maybe<Timestamptz_Comparison_Exp>;
    groupRoles?: Maybe<Permissions_GroupRole_Bool_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    name?: Maybe<String_Comparison_Exp>;
    rolePermissions?: Maybe<Permissions_RolePermission_Bool_Exp>;
    updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "permissions.Role" */
export enum Permissions_Role_Constraint {
    /** unique or primary key constraint */
    RoleConferenceNameKey = "Role_conference_name_key",
    /** unique or primary key constraint */
    RolePkey = "Role_pkey",
}

/** input type for inserting data into table "permissions.Role" */
export type Permissions_Role_Insert_Input = {
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    groupRoles?: Maybe<Permissions_GroupRole_Arr_Rel_Insert_Input>;
    id?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
    rolePermissions?: Maybe<Permissions_RolePermission_Arr_Rel_Insert_Input>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Permissions_Role_Max_Fields = {
    __typename?: "permissions_Role_max_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** order by max() on columns of table "permissions.Role" */
export type Permissions_Role_Max_Order_By = {
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Permissions_Role_Min_Fields = {
    __typename?: "permissions_Role_min_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** order by min() on columns of table "permissions.Role" */
export type Permissions_Role_Min_Order_By = {
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** response of any mutation on the table "permissions.Role" */
export type Permissions_Role_Mutation_Response = {
    __typename?: "permissions_Role_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Permissions_Role>;
};

/** input type for inserting object relation for remote table "permissions.Role" */
export type Permissions_Role_Obj_Rel_Insert_Input = {
    data: Permissions_Role_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Permissions_Role_On_Conflict>;
};

/** on conflict condition type for table "permissions.Role" */
export type Permissions_Role_On_Conflict = {
    constraint: Permissions_Role_Constraint;
    update_columns?: Array<Permissions_Role_Update_Column>;
    where?: Maybe<Permissions_Role_Bool_Exp>;
};

/** Ordering options when selecting data from "permissions.Role". */
export type Permissions_Role_Order_By = {
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    groupRoles_aggregate?: Maybe<Permissions_GroupRole_Aggregate_Order_By>;
    id?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    rolePermissions_aggregate?: Maybe<Permissions_RolePermission_Aggregate_Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** primary key columns input for table: permissions_Role */
export type Permissions_Role_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "permissions.Role" */
export enum Permissions_Role_Select_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Id = "id",
    /** column name */
    Name = "name",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** input type for updating data in table "permissions.Role" */
export type Permissions_Role_Set_Input = {
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** update columns of table "permissions.Role" */
export enum Permissions_Role_Update_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Id = "id",
    /** column name */
    Name = "name",
    /** column name */
    UpdatedAt = "updatedAt",
}

export type Query_Root = {
    __typename?: "query_root";
    /** fetch data from the table: "Email" */
    Email: Array<Email>;
    /** fetch aggregated fields from the table: "Email" */
    Email_aggregate: Email_Aggregate;
    /** fetch data from the table: "Email" using primary key columns */
    Email_by_pk?: Maybe<Email>;
    /** fetch data from the table: "FlatUnauthPermission" */
    FlatUnauthPermission: Array<FlatUnauthPermission>;
    /** fetch aggregated fields from the table: "FlatUnauthPermission" */
    FlatUnauthPermission_aggregate: FlatUnauthPermission_Aggregate;
    /** fetch data from the table: "FlatUserPermission" */
    FlatUserPermission: Array<FlatUserPermission>;
    /** fetch aggregated fields from the table: "FlatUserPermission" */
    FlatUserPermission_aggregate: FlatUserPermission_Aggregate;
    /** fetch data from the table: "PushNotificationSubscription" */
    PushNotificationSubscription: Array<PushNotificationSubscription>;
    /** fetch aggregated fields from the table: "PushNotificationSubscription" */
    PushNotificationSubscription_aggregate: PushNotificationSubscription_Aggregate;
    /** fetch data from the table: "PushNotificationSubscription" using primary key columns */
    PushNotificationSubscription_by_pk?: Maybe<PushNotificationSubscription>;
    /** fetch data from the table: "User" */
    User: Array<User>;
    /** fetch aggregated fields from the table: "User" */
    User_aggregate: User_Aggregate;
    /** fetch data from the table: "User" using primary key columns */
    User_by_pk?: Maybe<User>;
    /** fetch data from the table: "analytics.AppStats" */
    analytics_AppStats: Array<Analytics_AppStats>;
    /** fetch aggregated fields from the table: "analytics.AppStats" */
    analytics_AppStats_aggregate: Analytics_AppStats_Aggregate;
    /** fetch data from the table: "analytics.AppStats" using primary key columns */
    analytics_AppStats_by_pk?: Maybe<Analytics_AppStats>;
    /** fetch data from the table: "analytics.CompletedRegistrations" */
    analytics_CompletedRegistrations: Array<Analytics_CompletedRegistrations>;
    /** fetch aggregated fields from the table: "analytics.CompletedRegistrations" */
    analytics_CompletedRegistrations_aggregate: Analytics_CompletedRegistrations_Aggregate;
    /** fetch data from the table: "analytics.ContentElementStats" */
    analytics_ContentElementStats: Array<Analytics_ContentElementStats>;
    /** fetch aggregated fields from the table: "analytics.ContentElementStats" */
    analytics_ContentElementStats_aggregate: Analytics_ContentElementStats_Aggregate;
    /** fetch data from the table: "analytics.ContentElementStats" using primary key columns */
    analytics_ContentElementStats_by_pk?: Maybe<Analytics_ContentElementStats>;
    /** fetch data from the table: "analytics.ContentItemStats" */
    analytics_ContentItemStats: Array<Analytics_ContentItemStats>;
    /** fetch aggregated fields from the table: "analytics.ContentItemStats" */
    analytics_ContentItemStats_aggregate: Analytics_ContentItemStats_Aggregate;
    /** fetch data from the table: "analytics.ContentItemStats" using primary key columns */
    analytics_ContentItemStats_by_pk?: Maybe<Analytics_ContentItemStats>;
    /** fetch data from the table: "analytics.ElementTotalViews" */
    analytics_ElementTotalViews: Array<Analytics_ElementTotalViews>;
    /** fetch aggregated fields from the table: "analytics.ElementTotalViews" */
    analytics_ElementTotalViews_aggregate: Analytics_ElementTotalViews_Aggregate;
    /** fetch data from the table: "analytics.ItemTotalViews" */
    analytics_ItemTotalViews: Array<Analytics_ItemTotalViews>;
    /** fetch aggregated fields from the table: "analytics.ItemTotalViews" */
    analytics_ItemTotalViews_aggregate: Analytics_ItemTotalViews_Aggregate;
    /** fetch data from the table: "analytics.RoomPresence" */
    analytics_RoomPresence: Array<Analytics_RoomPresence>;
    /** fetch aggregated fields from the table: "analytics.RoomPresence" */
    analytics_RoomPresence_aggregate: Analytics_RoomPresence_Aggregate;
    /** fetch data from the table: "analytics.RoomStats" */
    analytics_RoomStats: Array<Analytics_RoomStats>;
    /** fetch aggregated fields from the table: "analytics.RoomStats" */
    analytics_RoomStats_aggregate: Analytics_RoomStats_Aggregate;
    /** fetch data from the table: "analytics.RoomStats" using primary key columns */
    analytics_RoomStats_by_pk?: Maybe<Analytics_RoomStats>;
    /** fetch data from the table: "analytics.mat_ElementTotalViews" */
    analytics_mat_ElementTotalViews: Array<Analytics_Mat_ElementTotalViews>;
    /** fetch aggregated fields from the table: "analytics.mat_ElementTotalViews" */
    analytics_mat_ElementTotalViews_aggregate: Analytics_Mat_ElementTotalViews_Aggregate;
    /** fetch data from the table: "analytics.mat_ItemTotalViews" */
    analytics_mat_ItemTotalViews: Array<Analytics_Mat_ItemTotalViews>;
    /** fetch aggregated fields from the table: "analytics.mat_ItemTotalViews" */
    analytics_mat_ItemTotalViews_aggregate: Analytics_Mat_ItemTotalViews_Aggregate;
    /** fetch data from the table: "analytics.mat_RoomPresence" */
    analytics_mat_RoomPresence: Array<Analytics_Mat_RoomPresence>;
    /** fetch aggregated fields from the table: "analytics.mat_RoomPresence" */
    analytics_mat_RoomPresence_aggregate: Analytics_Mat_RoomPresence_Aggregate;
    /** fetch data from the table: "chat.Chat" */
    chat_Chat: Array<Chat_Chat>;
    /** fetch aggregated fields from the table: "chat.Chat" */
    chat_Chat_aggregate: Chat_Chat_Aggregate;
    /** fetch data from the table: "chat.Chat" using primary key columns */
    chat_Chat_by_pk?: Maybe<Chat_Chat>;
    /** fetch data from the table: "chat.Flag" */
    chat_Flag: Array<Chat_Flag>;
    /** fetch data from the table: "chat.FlagType" */
    chat_FlagType: Array<Chat_FlagType>;
    /** fetch aggregated fields from the table: "chat.FlagType" */
    chat_FlagType_aggregate: Chat_FlagType_Aggregate;
    /** fetch data from the table: "chat.FlagType" using primary key columns */
    chat_FlagType_by_pk?: Maybe<Chat_FlagType>;
    /** fetch aggregated fields from the table: "chat.Flag" */
    chat_Flag_aggregate: Chat_Flag_Aggregate;
    /** fetch data from the table: "chat.Flag" using primary key columns */
    chat_Flag_by_pk?: Maybe<Chat_Flag>;
    /** fetch data from the table: "chat.Message" */
    chat_Message: Array<Chat_Message>;
    /** fetch data from the table: "chat.MessageType" */
    chat_MessageType: Array<Chat_MessageType>;
    /** fetch aggregated fields from the table: "chat.MessageType" */
    chat_MessageType_aggregate: Chat_MessageType_Aggregate;
    /** fetch data from the table: "chat.MessageType" using primary key columns */
    chat_MessageType_by_pk?: Maybe<Chat_MessageType>;
    /** fetch aggregated fields from the table: "chat.Message" */
    chat_Message_aggregate: Chat_Message_Aggregate;
    /** fetch data from the table: "chat.Message" using primary key columns */
    chat_Message_by_pk?: Maybe<Chat_Message>;
    /** fetch data from the table: "chat.Pin" */
    chat_Pin: Array<Chat_Pin>;
    /** fetch aggregated fields from the table: "chat.Pin" */
    chat_Pin_aggregate: Chat_Pin_Aggregate;
    /** fetch data from the table: "chat.Pin" using primary key columns */
    chat_Pin_by_pk?: Maybe<Chat_Pin>;
    /** fetch data from the table: "chat.Reaction" */
    chat_Reaction: Array<Chat_Reaction>;
    /** fetch data from the table: "chat.ReactionType" */
    chat_ReactionType: Array<Chat_ReactionType>;
    /** fetch aggregated fields from the table: "chat.ReactionType" */
    chat_ReactionType_aggregate: Chat_ReactionType_Aggregate;
    /** fetch data from the table: "chat.ReactionType" using primary key columns */
    chat_ReactionType_by_pk?: Maybe<Chat_ReactionType>;
    /** fetch aggregated fields from the table: "chat.Reaction" */
    chat_Reaction_aggregate: Chat_Reaction_Aggregate;
    /** fetch data from the table: "chat.Reaction" using primary key columns */
    chat_Reaction_by_pk?: Maybe<Chat_Reaction>;
    /** fetch data from the table: "chat.ReadUpToIndex" */
    chat_ReadUpToIndex: Array<Chat_ReadUpToIndex>;
    /** fetch aggregated fields from the table: "chat.ReadUpToIndex" */
    chat_ReadUpToIndex_aggregate: Chat_ReadUpToIndex_Aggregate;
    /** fetch data from the table: "chat.ReadUpToIndex" using primary key columns */
    chat_ReadUpToIndex_by_pk?: Maybe<Chat_ReadUpToIndex>;
    /** fetch data from the table: "chat.Subscription" */
    chat_Subscription: Array<Chat_Subscription>;
    /** fetch aggregated fields from the table: "chat.Subscription" */
    chat_Subscription_aggregate: Chat_Subscription_Aggregate;
    /** fetch data from the table: "chat.Subscription" using primary key columns */
    chat_Subscription_by_pk?: Maybe<Chat_Subscription>;
    /** fetch data from the table: "collection.Exhibition" */
    collection_Exhibition: Array<Collection_Exhibition>;
    /** fetch aggregated fields from the table: "collection.Exhibition" */
    collection_Exhibition_aggregate: Collection_Exhibition_Aggregate;
    /** fetch data from the table: "collection.Exhibition" using primary key columns */
    collection_Exhibition_by_pk?: Maybe<Collection_Exhibition>;
    /** fetch data from the table: "collection.ProgramPerson" */
    collection_ProgramPerson: Array<Collection_ProgramPerson>;
    /** fetch aggregated fields from the table: "collection.ProgramPerson" */
    collection_ProgramPerson_aggregate: Collection_ProgramPerson_Aggregate;
    /** fetch data from the table: "collection.ProgramPerson" using primary key columns */
    collection_ProgramPerson_by_pk?: Maybe<Collection_ProgramPerson>;
    /** fetch data from the table: "collection.Tag" */
    collection_Tag: Array<Collection_Tag>;
    /** fetch aggregated fields from the table: "collection.Tag" */
    collection_Tag_aggregate: Collection_Tag_Aggregate;
    /** fetch data from the table: "collection.Tag" using primary key columns */
    collection_Tag_by_pk?: Maybe<Collection_Tag>;
    /** fetch data from the table: "conference.Conference" */
    conference_Conference: Array<Conference_Conference>;
    /** fetch aggregated fields from the table: "conference.Conference" */
    conference_Conference_aggregate: Conference_Conference_Aggregate;
    /** fetch data from the table: "conference.Conference" using primary key columns */
    conference_Conference_by_pk?: Maybe<Conference_Conference>;
    /** fetch data from the table: "conference.Configuration" */
    conference_Configuration: Array<Conference_Configuration>;
    /** fetch data from the table: "conference.ConfigurationKey" */
    conference_ConfigurationKey: Array<Conference_ConfigurationKey>;
    /** fetch aggregated fields from the table: "conference.ConfigurationKey" */
    conference_ConfigurationKey_aggregate: Conference_ConfigurationKey_Aggregate;
    /** fetch data from the table: "conference.ConfigurationKey" using primary key columns */
    conference_ConfigurationKey_by_pk?: Maybe<Conference_ConfigurationKey>;
    /** fetch aggregated fields from the table: "conference.Configuration" */
    conference_Configuration_aggregate: Conference_Configuration_Aggregate;
    /** fetch data from the table: "conference.Configuration" using primary key columns */
    conference_Configuration_by_pk?: Maybe<Conference_Configuration>;
    /** fetch data from the table: "conference.DemoCode" */
    conference_DemoCode: Array<Conference_DemoCode>;
    /** fetch aggregated fields from the table: "conference.DemoCode" */
    conference_DemoCode_aggregate: Conference_DemoCode_Aggregate;
    /** fetch data from the table: "conference.DemoCode" using primary key columns */
    conference_DemoCode_by_pk?: Maybe<Conference_DemoCode>;
    /** fetch data from the table: "conference.OriginatingData" */
    conference_OriginatingData: Array<Conference_OriginatingData>;
    /** fetch aggregated fields from the table: "conference.OriginatingData" */
    conference_OriginatingData_aggregate: Conference_OriginatingData_Aggregate;
    /** fetch data from the table: "conference.OriginatingData" using primary key columns */
    conference_OriginatingData_by_pk?: Maybe<Conference_OriginatingData>;
    /** fetch data from the table: "conference.PrepareJob" */
    conference_PrepareJob: Array<Conference_PrepareJob>;
    /** fetch aggregated fields from the table: "conference.PrepareJob" */
    conference_PrepareJob_aggregate: Conference_PrepareJob_Aggregate;
    /** fetch data from the table: "conference.PrepareJob" using primary key columns */
    conference_PrepareJob_by_pk?: Maybe<Conference_PrepareJob>;
    /** fetch data from the table: "content.Element" */
    content_Element: Array<Content_Element>;
    /** fetch data from the table: "content.ElementByAccessToken" */
    content_ElementByAccessToken: Array<Content_ElementByAccessToken>;
    /** fetch aggregated fields from the table: "content.ElementByAccessToken" */
    content_ElementByAccessToken_aggregate: Content_ElementByAccessToken_Aggregate;
    /** fetch data from the table: "content.ElementPermissionGrant" */
    content_ElementPermissionGrant: Array<Content_ElementPermissionGrant>;
    /** fetch aggregated fields from the table: "content.ElementPermissionGrant" */
    content_ElementPermissionGrant_aggregate: Content_ElementPermissionGrant_Aggregate;
    /** fetch data from the table: "content.ElementPermissionGrant" using primary key columns */
    content_ElementPermissionGrant_by_pk?: Maybe<Content_ElementPermissionGrant>;
    /** fetch data from the table: "content.ElementType" */
    content_ElementType: Array<Content_ElementType>;
    /** fetch aggregated fields from the table: "content.ElementType" */
    content_ElementType_aggregate: Content_ElementType_Aggregate;
    /** fetch data from the table: "content.ElementType" using primary key columns */
    content_ElementType_by_pk?: Maybe<Content_ElementType>;
    /** fetch aggregated fields from the table: "content.Element" */
    content_Element_aggregate: Content_Element_Aggregate;
    /** fetch data from the table: "content.Element" using primary key columns */
    content_Element_by_pk?: Maybe<Content_Element>;
    /** fetch data from the table: "content.Item" */
    content_Item: Array<Content_Item>;
    /** fetch data from the table: "content.ItemExhibition" */
    content_ItemExhibition: Array<Content_ItemExhibition>;
    /** fetch aggregated fields from the table: "content.ItemExhibition" */
    content_ItemExhibition_aggregate: Content_ItemExhibition_Aggregate;
    /** fetch data from the table: "content.ItemExhibition" using primary key columns */
    content_ItemExhibition_by_pk?: Maybe<Content_ItemExhibition>;
    /** fetch data from the table: "content.ItemProgramPerson" */
    content_ItemProgramPerson: Array<Content_ItemProgramPerson>;
    /** fetch aggregated fields from the table: "content.ItemProgramPerson" */
    content_ItemProgramPerson_aggregate: Content_ItemProgramPerson_Aggregate;
    /** fetch data from the table: "content.ItemProgramPerson" using primary key columns */
    content_ItemProgramPerson_by_pk?: Maybe<Content_ItemProgramPerson>;
    /** fetch data from the table: "content.ItemTag" */
    content_ItemTag: Array<Content_ItemTag>;
    /** fetch aggregated fields from the table: "content.ItemTag" */
    content_ItemTag_aggregate: Content_ItemTag_Aggregate;
    /** fetch data from the table: "content.ItemTag" using primary key columns */
    content_ItemTag_by_pk?: Maybe<Content_ItemTag>;
    /** fetch data from the table: "content.ItemType" */
    content_ItemType: Array<Content_ItemType>;
    /** fetch aggregated fields from the table: "content.ItemType" */
    content_ItemType_aggregate: Content_ItemType_Aggregate;
    /** fetch data from the table: "content.ItemType" using primary key columns */
    content_ItemType_by_pk?: Maybe<Content_ItemType>;
    /** fetch aggregated fields from the table: "content.Item" */
    content_Item_aggregate: Content_Item_Aggregate;
    /** fetch data from the table: "content.Item" using primary key columns */
    content_Item_by_pk?: Maybe<Content_Item>;
    /** fetch data from the table: "content.Uploader" */
    content_Uploader: Array<Content_Uploader>;
    /** fetch aggregated fields from the table: "content.Uploader" */
    content_Uploader_aggregate: Content_Uploader_Aggregate;
    /** fetch data from the table: "content.Uploader" using primary key columns */
    content_Uploader_by_pk?: Maybe<Content_Uploader>;
    getSlug: GetSlugOutput;
    getUploadAgreement?: Maybe<GetUploadAgreementOutput>;
    /** fetch data from the table: "job_queues.ChannelStackCreateJob" */
    job_queues_ChannelStackCreateJob: Array<Job_Queues_ChannelStackCreateJob>;
    /** fetch aggregated fields from the table: "job_queues.ChannelStackCreateJob" */
    job_queues_ChannelStackCreateJob_aggregate: Job_Queues_ChannelStackCreateJob_Aggregate;
    /** fetch data from the table: "job_queues.ChannelStackCreateJob" using primary key columns */
    job_queues_ChannelStackCreateJob_by_pk?: Maybe<Job_Queues_ChannelStackCreateJob>;
    /** fetch data from the table: "job_queues.ChannelStackDeleteJob" */
    job_queues_ChannelStackDeleteJob: Array<Job_Queues_ChannelStackDeleteJob>;
    /** fetch aggregated fields from the table: "job_queues.ChannelStackDeleteJob" */
    job_queues_ChannelStackDeleteJob_aggregate: Job_Queues_ChannelStackDeleteJob_Aggregate;
    /** fetch data from the table: "job_queues.ChannelStackDeleteJob" using primary key columns */
    job_queues_ChannelStackDeleteJob_by_pk?: Maybe<Job_Queues_ChannelStackDeleteJob>;
    /** fetch data from the table: "job_queues.CombineVideosJob" */
    job_queues_CombineVideosJob: Array<Job_Queues_CombineVideosJob>;
    /** fetch aggregated fields from the table: "job_queues.CombineVideosJob" */
    job_queues_CombineVideosJob_aggregate: Job_Queues_CombineVideosJob_Aggregate;
    /** fetch data from the table: "job_queues.CombineVideosJob" using primary key columns */
    job_queues_CombineVideosJob_by_pk?: Maybe<Job_Queues_CombineVideosJob>;
    /** fetch data from the table: "job_queues.CustomEmailJob" */
    job_queues_CustomEmailJob: Array<Job_Queues_CustomEmailJob>;
    /** fetch aggregated fields from the table: "job_queues.CustomEmailJob" */
    job_queues_CustomEmailJob_aggregate: Job_Queues_CustomEmailJob_Aggregate;
    /** fetch data from the table: "job_queues.CustomEmailJob" using primary key columns */
    job_queues_CustomEmailJob_by_pk?: Maybe<Job_Queues_CustomEmailJob>;
    /** fetch data from the table: "job_queues.InvitationEmailJob" */
    job_queues_InvitationEmailJob: Array<Job_Queues_InvitationEmailJob>;
    /** fetch aggregated fields from the table: "job_queues.InvitationEmailJob" */
    job_queues_InvitationEmailJob_aggregate: Job_Queues_InvitationEmailJob_Aggregate;
    /** fetch data from the table: "job_queues.InvitationEmailJob" using primary key columns */
    job_queues_InvitationEmailJob_by_pk?: Maybe<Job_Queues_InvitationEmailJob>;
    /** fetch data from the table: "job_queues.MediaPackageHarvestJob" */
    job_queues_MediaPackageHarvestJob: Array<Job_Queues_MediaPackageHarvestJob>;
    /** fetch aggregated fields from the table: "job_queues.MediaPackageHarvestJob" */
    job_queues_MediaPackageHarvestJob_aggregate: Job_Queues_MediaPackageHarvestJob_Aggregate;
    /** fetch data from the table: "job_queues.MediaPackageHarvestJob" using primary key columns */
    job_queues_MediaPackageHarvestJob_by_pk?: Maybe<Job_Queues_MediaPackageHarvestJob>;
    /** fetch data from the table: "job_queues.PublishVideoJob" */
    job_queues_PublishVideoJob: Array<Job_Queues_PublishVideoJob>;
    /** fetch aggregated fields from the table: "job_queues.PublishVideoJob" */
    job_queues_PublishVideoJob_aggregate: Job_Queues_PublishVideoJob_Aggregate;
    /** fetch data from the table: "job_queues.PublishVideoJob" using primary key columns */
    job_queues_PublishVideoJob_by_pk?: Maybe<Job_Queues_PublishVideoJob>;
    /** fetch data from the table: "job_queues.SubmissionRequestEmailJob" */
    job_queues_SubmissionRequestEmailJob: Array<Job_Queues_SubmissionRequestEmailJob>;
    /** fetch aggregated fields from the table: "job_queues.SubmissionRequestEmailJob" */
    job_queues_SubmissionRequestEmailJob_aggregate: Job_Queues_SubmissionRequestEmailJob_Aggregate;
    /** fetch data from the table: "job_queues.SubmissionRequestEmailJob" using primary key columns */
    job_queues_SubmissionRequestEmailJob_by_pk?: Maybe<Job_Queues_SubmissionRequestEmailJob>;
    /** fetch data from the table: "job_queues.UploadYouTubeVideoJob" */
    job_queues_UploadYouTubeVideoJob: Array<Job_Queues_UploadYouTubeVideoJob>;
    /** fetch aggregated fields from the table: "job_queues.UploadYouTubeVideoJob" */
    job_queues_UploadYouTubeVideoJob_aggregate: Job_Queues_UploadYouTubeVideoJob_Aggregate;
    /** fetch data from the table: "job_queues.UploadYouTubeVideoJob" using primary key columns */
    job_queues_UploadYouTubeVideoJob_by_pk?: Maybe<Job_Queues_UploadYouTubeVideoJob>;
    /** fetch data from the table: "permissions.Group" */
    permissions_Group: Array<Permissions_Group>;
    /** fetch data from the table: "permissions.GroupRegistrant" */
    permissions_GroupRegistrant: Array<Permissions_GroupRegistrant>;
    /** fetch aggregated fields from the table: "permissions.GroupRegistrant" */
    permissions_GroupRegistrant_aggregate: Permissions_GroupRegistrant_Aggregate;
    /** fetch data from the table: "permissions.GroupRegistrant" using primary key columns */
    permissions_GroupRegistrant_by_pk?: Maybe<Permissions_GroupRegistrant>;
    /** fetch data from the table: "permissions.GroupRole" */
    permissions_GroupRole: Array<Permissions_GroupRole>;
    /** fetch aggregated fields from the table: "permissions.GroupRole" */
    permissions_GroupRole_aggregate: Permissions_GroupRole_Aggregate;
    /** fetch data from the table: "permissions.GroupRole" using primary key columns */
    permissions_GroupRole_by_pk?: Maybe<Permissions_GroupRole>;
    /** fetch aggregated fields from the table: "permissions.Group" */
    permissions_Group_aggregate: Permissions_Group_Aggregate;
    /** fetch data from the table: "permissions.Group" using primary key columns */
    permissions_Group_by_pk?: Maybe<Permissions_Group>;
    /** fetch data from the table: "permissions.Permission" */
    permissions_Permission: Array<Permissions_Permission>;
    /** fetch aggregated fields from the table: "permissions.Permission" */
    permissions_Permission_aggregate: Permissions_Permission_Aggregate;
    /** fetch data from the table: "permissions.Permission" using primary key columns */
    permissions_Permission_by_pk?: Maybe<Permissions_Permission>;
    /** fetch data from the table: "permissions.Role" */
    permissions_Role: Array<Permissions_Role>;
    /** fetch data from the table: "permissions.RolePermission" */
    permissions_RolePermission: Array<Permissions_RolePermission>;
    /** fetch aggregated fields from the table: "permissions.RolePermission" */
    permissions_RolePermission_aggregate: Permissions_RolePermission_Aggregate;
    /** fetch data from the table: "permissions.RolePermission" using primary key columns */
    permissions_RolePermission_by_pk?: Maybe<Permissions_RolePermission>;
    /** fetch aggregated fields from the table: "permissions.Role" */
    permissions_Role_aggregate: Permissions_Role_Aggregate;
    /** fetch data from the table: "permissions.Role" using primary key columns */
    permissions_Role_by_pk?: Maybe<Permissions_Role>;
    presence_Summary?: Maybe<PresenceSummaryOutput>;
    /** fetch data from the table: "registrant.GoogleAccount" */
    registrant_GoogleAccount: Array<Registrant_GoogleAccount>;
    /** fetch aggregated fields from the table: "registrant.GoogleAccount" */
    registrant_GoogleAccount_aggregate: Registrant_GoogleAccount_Aggregate;
    /** fetch data from the table: "registrant.GoogleAccount" using primary key columns */
    registrant_GoogleAccount_by_pk?: Maybe<Registrant_GoogleAccount>;
    /** fetch data from the table: "registrant.Invitation" */
    registrant_Invitation: Array<Registrant_Invitation>;
    /** fetch aggregated fields from the table: "registrant.Invitation" */
    registrant_Invitation_aggregate: Registrant_Invitation_Aggregate;
    /** fetch data from the table: "registrant.Invitation" using primary key columns */
    registrant_Invitation_by_pk?: Maybe<Registrant_Invitation>;
    /** fetch data from the table: "registrant.Profile" */
    registrant_Profile: Array<Registrant_Profile>;
    /** fetch data from the table: "registrant.ProfileBadges" */
    registrant_ProfileBadges: Array<Registrant_ProfileBadges>;
    /** fetch aggregated fields from the table: "registrant.ProfileBadges" */
    registrant_ProfileBadges_aggregate: Registrant_ProfileBadges_Aggregate;
    /** fetch aggregated fields from the table: "registrant.Profile" */
    registrant_Profile_aggregate: Registrant_Profile_Aggregate;
    /** fetch data from the table: "registrant.Profile" using primary key columns */
    registrant_Profile_by_pk?: Maybe<Registrant_Profile>;
    /** fetch data from the table: "registrant.Registrant" */
    registrant_Registrant: Array<Registrant_Registrant>;
    /** fetch aggregated fields from the table: "registrant.Registrant" */
    registrant_Registrant_aggregate: Registrant_Registrant_Aggregate;
    /** fetch data from the table: "registrant.Registrant" using primary key columns */
    registrant_Registrant_by_pk?: Maybe<Registrant_Registrant>;
    /** fetch data from the table: "room.Backend" */
    room_Backend: Array<Room_Backend>;
    /** fetch aggregated fields from the table: "room.Backend" */
    room_Backend_aggregate: Room_Backend_Aggregate;
    /** fetch data from the table: "room.Backend" using primary key columns */
    room_Backend_by_pk?: Maybe<Room_Backend>;
    /** fetch data from the table: "room.ChimeMeeting" */
    room_ChimeMeeting: Array<Room_ChimeMeeting>;
    /** fetch aggregated fields from the table: "room.ChimeMeeting" */
    room_ChimeMeeting_aggregate: Room_ChimeMeeting_Aggregate;
    /** fetch data from the table: "room.ChimeMeeting" using primary key columns */
    room_ChimeMeeting_by_pk?: Maybe<Room_ChimeMeeting>;
    /** fetch data from the table: "room.LivestreamDurations" */
    room_LivestreamDurations: Array<Room_LivestreamDurations>;
    /** fetch aggregated fields from the table: "room.LivestreamDurations" */
    room_LivestreamDurations_aggregate: Room_LivestreamDurations_Aggregate;
    /** fetch data from the table: "room.ManagementMode" */
    room_ManagementMode: Array<Room_ManagementMode>;
    /** fetch aggregated fields from the table: "room.ManagementMode" */
    room_ManagementMode_aggregate: Room_ManagementMode_Aggregate;
    /** fetch data from the table: "room.ManagementMode" using primary key columns */
    room_ManagementMode_by_pk?: Maybe<Room_ManagementMode>;
    /** fetch data from the table: "room.Mode" */
    room_Mode: Array<Room_Mode>;
    /** fetch aggregated fields from the table: "room.Mode" */
    room_Mode_aggregate: Room_Mode_Aggregate;
    /** fetch data from the table: "room.Mode" using primary key columns */
    room_Mode_by_pk?: Maybe<Room_Mode>;
    /** fetch data from the table: "room.Participant" */
    room_Participant: Array<Room_Participant>;
    /** fetch aggregated fields from the table: "room.Participant" */
    room_Participant_aggregate: Room_Participant_Aggregate;
    /** fetch data from the table: "room.Participant" using primary key columns */
    room_Participant_by_pk?: Maybe<Room_Participant>;
    /** fetch data from the table: "room.PersonRole" */
    room_PersonRole: Array<Room_PersonRole>;
    /** fetch aggregated fields from the table: "room.PersonRole" */
    room_PersonRole_aggregate: Room_PersonRole_Aggregate;
    /** fetch data from the table: "room.PersonRole" using primary key columns */
    room_PersonRole_by_pk?: Maybe<Room_PersonRole>;
    /** fetch data from the table: "room.Room" */
    room_Room: Array<Room_Room>;
    /** fetch data from the table: "room.RoomPerson" */
    room_RoomPerson: Array<Room_RoomPerson>;
    /** fetch aggregated fields from the table: "room.RoomPerson" */
    room_RoomPerson_aggregate: Room_RoomPerson_Aggregate;
    /** fetch data from the table: "room.RoomPerson" using primary key columns */
    room_RoomPerson_by_pk?: Maybe<Room_RoomPerson>;
    /** fetch aggregated fields from the table: "room.Room" */
    room_Room_aggregate: Room_Room_Aggregate;
    /** fetch data from the table: "room.Room" using primary key columns */
    room_Room_by_pk?: Maybe<Room_Room>;
    /** fetch data from the table: "room.ShuffleAlgorithm" */
    room_ShuffleAlgorithm: Array<Room_ShuffleAlgorithm>;
    /** fetch aggregated fields from the table: "room.ShuffleAlgorithm" */
    room_ShuffleAlgorithm_aggregate: Room_ShuffleAlgorithm_Aggregate;
    /** fetch data from the table: "room.ShuffleAlgorithm" using primary key columns */
    room_ShuffleAlgorithm_by_pk?: Maybe<Room_ShuffleAlgorithm>;
    /** fetch data from the table: "room.ShufflePeriod" */
    room_ShufflePeriod: Array<Room_ShufflePeriod>;
    /** fetch aggregated fields from the table: "room.ShufflePeriod" */
    room_ShufflePeriod_aggregate: Room_ShufflePeriod_Aggregate;
    /** fetch data from the table: "room.ShufflePeriod" using primary key columns */
    room_ShufflePeriod_by_pk?: Maybe<Room_ShufflePeriod>;
    /** fetch data from the table: "room.ShuffleQueueEntry" */
    room_ShuffleQueueEntry: Array<Room_ShuffleQueueEntry>;
    /** fetch aggregated fields from the table: "room.ShuffleQueueEntry" */
    room_ShuffleQueueEntry_aggregate: Room_ShuffleQueueEntry_Aggregate;
    /** fetch data from the table: "room.ShuffleQueueEntry" using primary key columns */
    room_ShuffleQueueEntry_by_pk?: Maybe<Room_ShuffleQueueEntry>;
    /** fetch data from the table: "room.ShuffleRoom" */
    room_ShuffleRoom: Array<Room_ShuffleRoom>;
    /** fetch aggregated fields from the table: "room.ShuffleRoom" */
    room_ShuffleRoom_aggregate: Room_ShuffleRoom_Aggregate;
    /** fetch data from the table: "room.ShuffleRoom" using primary key columns */
    room_ShuffleRoom_by_pk?: Maybe<Room_ShuffleRoom>;
    /** fetch data from the table: "schedule.Continuation" */
    schedule_Continuation: Array<Schedule_Continuation>;
    /** fetch aggregated fields from the table: "schedule.Continuation" */
    schedule_Continuation_aggregate: Schedule_Continuation_Aggregate;
    /** fetch data from the table: "schedule.Continuation" using primary key columns */
    schedule_Continuation_by_pk?: Maybe<Schedule_Continuation>;
    /** fetch data from the table: "schedule.Event" */
    schedule_Event: Array<Schedule_Event>;
    /** fetch data from the table: "schedule.EventProgramPerson" */
    schedule_EventProgramPerson: Array<Schedule_EventProgramPerson>;
    /** fetch data from the table: "schedule.EventProgramPersonRole" */
    schedule_EventProgramPersonRole: Array<Schedule_EventProgramPersonRole>;
    /** fetch aggregated fields from the table: "schedule.EventProgramPersonRole" */
    schedule_EventProgramPersonRole_aggregate: Schedule_EventProgramPersonRole_Aggregate;
    /** fetch data from the table: "schedule.EventProgramPersonRole" using primary key columns */
    schedule_EventProgramPersonRole_by_pk?: Maybe<Schedule_EventProgramPersonRole>;
    /** fetch aggregated fields from the table: "schedule.EventProgramPerson" */
    schedule_EventProgramPerson_aggregate: Schedule_EventProgramPerson_Aggregate;
    /** fetch data from the table: "schedule.EventProgramPerson" using primary key columns */
    schedule_EventProgramPerson_by_pk?: Maybe<Schedule_EventProgramPerson>;
    /** fetch data from the table: "schedule.EventTag" */
    schedule_EventTag: Array<Schedule_EventTag>;
    /** fetch aggregated fields from the table: "schedule.EventTag" */
    schedule_EventTag_aggregate: Schedule_EventTag_Aggregate;
    /** fetch data from the table: "schedule.EventTag" using primary key columns */
    schedule_EventTag_by_pk?: Maybe<Schedule_EventTag>;
    /** fetch aggregated fields from the table: "schedule.Event" */
    schedule_Event_aggregate: Schedule_Event_Aggregate;
    /** fetch data from the table: "schedule.Event" using primary key columns */
    schedule_Event_by_pk?: Maybe<Schedule_Event>;
    /** fetch data from the table: "schedule.OverlappingEvents" */
    schedule_OverlappingEvents: Array<Schedule_OverlappingEvents>;
    /** fetch aggregated fields from the table: "schedule.OverlappingEvents" */
    schedule_OverlappingEvents_aggregate: Schedule_OverlappingEvents_Aggregate;
    /** fetch data from the table: "schedule.StarredEvent" */
    schedule_StarredEvent: Array<Schedule_StarredEvent>;
    /** fetch aggregated fields from the table: "schedule.StarredEvent" */
    schedule_StarredEvent_aggregate: Schedule_StarredEvent_Aggregate;
    /** fetch data from the table: "schedule.StarredEvent" using primary key columns */
    schedule_StarredEvent_by_pk?: Maybe<Schedule_StarredEvent>;
    /** fetch data from the table: "system.Configuration" */
    system_Configuration: Array<System_Configuration>;
    /** fetch data from the table: "system.ConfigurationKey" */
    system_ConfigurationKey: Array<System_ConfigurationKey>;
    /** fetch aggregated fields from the table: "system.ConfigurationKey" */
    system_ConfigurationKey_aggregate: System_ConfigurationKey_Aggregate;
    /** fetch data from the table: "system.ConfigurationKey" using primary key columns */
    system_ConfigurationKey_by_pk?: Maybe<System_ConfigurationKey>;
    /** fetch aggregated fields from the table: "system.Configuration" */
    system_Configuration_aggregate: System_Configuration_Aggregate;
    /** fetch data from the table: "system.Configuration" using primary key columns */
    system_Configuration_by_pk?: Maybe<System_Configuration>;
    vapidPublicKey: VapidPublicKeyOutput;
    /** fetch data from the table: "video.ChannelStack" */
    video_ChannelStack: Array<Video_ChannelStack>;
    /** fetch aggregated fields from the table: "video.ChannelStack" */
    video_ChannelStack_aggregate: Video_ChannelStack_Aggregate;
    /** fetch data from the table: "video.ChannelStack" using primary key columns */
    video_ChannelStack_by_pk?: Maybe<Video_ChannelStack>;
    /** fetch data from the table: "video.EventParticipantStream" */
    video_EventParticipantStream: Array<Video_EventParticipantStream>;
    /** fetch aggregated fields from the table: "video.EventParticipantStream" */
    video_EventParticipantStream_aggregate: Video_EventParticipantStream_Aggregate;
    /** fetch data from the table: "video.EventParticipantStream" using primary key columns */
    video_EventParticipantStream_by_pk?: Maybe<Video_EventParticipantStream>;
    /** fetch data from the table: "video.EventVonageSession" */
    video_EventVonageSession: Array<Video_EventVonageSession>;
    /** fetch aggregated fields from the table: "video.EventVonageSession" */
    video_EventVonageSession_aggregate: Video_EventVonageSession_Aggregate;
    /** fetch data from the table: "video.EventVonageSession" using primary key columns */
    video_EventVonageSession_by_pk?: Maybe<Video_EventVonageSession>;
    /** fetch data from the table: "video.ImmediateSwitch" */
    video_ImmediateSwitch: Array<Video_ImmediateSwitch>;
    /** fetch aggregated fields from the table: "video.ImmediateSwitch" */
    video_ImmediateSwitch_aggregate: Video_ImmediateSwitch_Aggregate;
    /** fetch data from the table: "video.ImmediateSwitch" using primary key columns */
    video_ImmediateSwitch_by_pk?: Maybe<Video_ImmediateSwitch>;
    /** fetch data from the table: "video.InputType" */
    video_InputType: Array<Video_InputType>;
    /** fetch aggregated fields from the table: "video.InputType" */
    video_InputType_aggregate: Video_InputType_Aggregate;
    /** fetch data from the table: "video.InputType" using primary key columns */
    video_InputType_by_pk?: Maybe<Video_InputType>;
    /** fetch data from the table: "video.JobStatus" */
    video_JobStatus: Array<Video_JobStatus>;
    /** fetch aggregated fields from the table: "video.JobStatus" */
    video_JobStatus_aggregate: Video_JobStatus_Aggregate;
    /** fetch data from the table: "video.JobStatus" using primary key columns */
    video_JobStatus_by_pk?: Maybe<Video_JobStatus>;
    /** fetch data from the table: "video.MediaLiveChannelStatus" */
    video_MediaLiveChannelStatus: Array<Video_MediaLiveChannelStatus>;
    /** fetch aggregated fields from the table: "video.MediaLiveChannelStatus" */
    video_MediaLiveChannelStatus_aggregate: Video_MediaLiveChannelStatus_Aggregate;
    /** fetch data from the table: "video.MediaLiveChannelStatus" using primary key columns */
    video_MediaLiveChannelStatus_by_pk?: Maybe<Video_MediaLiveChannelStatus>;
    /** fetch data from the table: "video.RtmpInput" */
    video_RtmpInput: Array<Video_RtmpInput>;
    /** fetch aggregated fields from the table: "video.RtmpInput" */
    video_RtmpInput_aggregate: Video_RtmpInput_Aggregate;
    /** fetch data from the table: "video.RtmpInput" using primary key columns */
    video_RtmpInput_by_pk?: Maybe<Video_RtmpInput>;
    /** fetch data from the table: "video.TranscriptionJob" */
    video_TranscriptionJob: Array<Video_TranscriptionJob>;
    /** fetch aggregated fields from the table: "video.TranscriptionJob" */
    video_TranscriptionJob_aggregate: Video_TranscriptionJob_Aggregate;
    /** fetch data from the table: "video.TranscriptionJob" using primary key columns */
    video_TranscriptionJob_by_pk?: Maybe<Video_TranscriptionJob>;
    /** fetch data from the table: "video.VideoRenderJob" */
    video_VideoRenderJob: Array<Video_VideoRenderJob>;
    /** fetch aggregated fields from the table: "video.VideoRenderJob" */
    video_VideoRenderJob_aggregate: Video_VideoRenderJob_Aggregate;
    /** fetch data from the table: "video.VideoRenderJob" using primary key columns */
    video_VideoRenderJob_by_pk?: Maybe<Video_VideoRenderJob>;
    /** fetch data from the table: "video.YouTubeUpload" */
    video_YouTubeUpload: Array<Video_YouTubeUpload>;
    /** fetch aggregated fields from the table: "video.YouTubeUpload" */
    video_YouTubeUpload_aggregate: Video_YouTubeUpload_Aggregate;
    /** fetch data from the table: "video.YouTubeUpload" using primary key columns */
    video_YouTubeUpload_by_pk?: Maybe<Video_YouTubeUpload>;
};

export type Query_RootEmailArgs = {
    distinct_on?: Maybe<Array<Email_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Email_Order_By>>;
    where?: Maybe<Email_Bool_Exp>;
};

export type Query_RootEmail_AggregateArgs = {
    distinct_on?: Maybe<Array<Email_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Email_Order_By>>;
    where?: Maybe<Email_Bool_Exp>;
};

export type Query_RootEmail_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootFlatUnauthPermissionArgs = {
    distinct_on?: Maybe<Array<FlatUnauthPermission_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<FlatUnauthPermission_Order_By>>;
    where?: Maybe<FlatUnauthPermission_Bool_Exp>;
};

export type Query_RootFlatUnauthPermission_AggregateArgs = {
    distinct_on?: Maybe<Array<FlatUnauthPermission_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<FlatUnauthPermission_Order_By>>;
    where?: Maybe<FlatUnauthPermission_Bool_Exp>;
};

export type Query_RootFlatUserPermissionArgs = {
    distinct_on?: Maybe<Array<FlatUserPermission_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<FlatUserPermission_Order_By>>;
    where?: Maybe<FlatUserPermission_Bool_Exp>;
};

export type Query_RootFlatUserPermission_AggregateArgs = {
    distinct_on?: Maybe<Array<FlatUserPermission_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<FlatUserPermission_Order_By>>;
    where?: Maybe<FlatUserPermission_Bool_Exp>;
};

export type Query_RootPushNotificationSubscriptionArgs = {
    distinct_on?: Maybe<Array<PushNotificationSubscription_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<PushNotificationSubscription_Order_By>>;
    where?: Maybe<PushNotificationSubscription_Bool_Exp>;
};

export type Query_RootPushNotificationSubscription_AggregateArgs = {
    distinct_on?: Maybe<Array<PushNotificationSubscription_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<PushNotificationSubscription_Order_By>>;
    where?: Maybe<PushNotificationSubscription_Bool_Exp>;
};

export type Query_RootPushNotificationSubscription_By_PkArgs = {
    endpoint: Scalars["String"];
};

export type Query_RootUserArgs = {
    distinct_on?: Maybe<Array<User_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<User_Order_By>>;
    where?: Maybe<User_Bool_Exp>;
};

export type Query_RootUser_AggregateArgs = {
    distinct_on?: Maybe<Array<User_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<User_Order_By>>;
    where?: Maybe<User_Bool_Exp>;
};

export type Query_RootUser_By_PkArgs = {
    id: Scalars["String"];
};

export type Query_RootAnalytics_AppStatsArgs = {
    distinct_on?: Maybe<Array<Analytics_AppStats_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_AppStats_Order_By>>;
    where?: Maybe<Analytics_AppStats_Bool_Exp>;
};

export type Query_RootAnalytics_AppStats_AggregateArgs = {
    distinct_on?: Maybe<Array<Analytics_AppStats_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_AppStats_Order_By>>;
    where?: Maybe<Analytics_AppStats_Bool_Exp>;
};

export type Query_RootAnalytics_AppStats_By_PkArgs = {
    id: Scalars["Int"];
};

export type Query_RootAnalytics_CompletedRegistrationsArgs = {
    distinct_on?: Maybe<Array<Analytics_CompletedRegistrations_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_CompletedRegistrations_Order_By>>;
    where?: Maybe<Analytics_CompletedRegistrations_Bool_Exp>;
};

export type Query_RootAnalytics_CompletedRegistrations_AggregateArgs = {
    distinct_on?: Maybe<Array<Analytics_CompletedRegistrations_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_CompletedRegistrations_Order_By>>;
    where?: Maybe<Analytics_CompletedRegistrations_Bool_Exp>;
};

export type Query_RootAnalytics_ContentElementStatsArgs = {
    distinct_on?: Maybe<Array<Analytics_ContentElementStats_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_ContentElementStats_Order_By>>;
    where?: Maybe<Analytics_ContentElementStats_Bool_Exp>;
};

export type Query_RootAnalytics_ContentElementStats_AggregateArgs = {
    distinct_on?: Maybe<Array<Analytics_ContentElementStats_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_ContentElementStats_Order_By>>;
    where?: Maybe<Analytics_ContentElementStats_Bool_Exp>;
};

export type Query_RootAnalytics_ContentElementStats_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootAnalytics_ContentItemStatsArgs = {
    distinct_on?: Maybe<Array<Analytics_ContentItemStats_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_ContentItemStats_Order_By>>;
    where?: Maybe<Analytics_ContentItemStats_Bool_Exp>;
};

export type Query_RootAnalytics_ContentItemStats_AggregateArgs = {
    distinct_on?: Maybe<Array<Analytics_ContentItemStats_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_ContentItemStats_Order_By>>;
    where?: Maybe<Analytics_ContentItemStats_Bool_Exp>;
};

export type Query_RootAnalytics_ContentItemStats_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootAnalytics_ElementTotalViewsArgs = {
    distinct_on?: Maybe<Array<Analytics_ElementTotalViews_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_ElementTotalViews_Order_By>>;
    where?: Maybe<Analytics_ElementTotalViews_Bool_Exp>;
};

export type Query_RootAnalytics_ElementTotalViews_AggregateArgs = {
    distinct_on?: Maybe<Array<Analytics_ElementTotalViews_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_ElementTotalViews_Order_By>>;
    where?: Maybe<Analytics_ElementTotalViews_Bool_Exp>;
};

export type Query_RootAnalytics_ItemTotalViewsArgs = {
    distinct_on?: Maybe<Array<Analytics_ItemTotalViews_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_ItemTotalViews_Order_By>>;
    where?: Maybe<Analytics_ItemTotalViews_Bool_Exp>;
};

export type Query_RootAnalytics_ItemTotalViews_AggregateArgs = {
    distinct_on?: Maybe<Array<Analytics_ItemTotalViews_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_ItemTotalViews_Order_By>>;
    where?: Maybe<Analytics_ItemTotalViews_Bool_Exp>;
};

export type Query_RootAnalytics_RoomPresenceArgs = {
    distinct_on?: Maybe<Array<Analytics_RoomPresence_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_RoomPresence_Order_By>>;
    where?: Maybe<Analytics_RoomPresence_Bool_Exp>;
};

export type Query_RootAnalytics_RoomPresence_AggregateArgs = {
    distinct_on?: Maybe<Array<Analytics_RoomPresence_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_RoomPresence_Order_By>>;
    where?: Maybe<Analytics_RoomPresence_Bool_Exp>;
};

export type Query_RootAnalytics_RoomStatsArgs = {
    distinct_on?: Maybe<Array<Analytics_RoomStats_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_RoomStats_Order_By>>;
    where?: Maybe<Analytics_RoomStats_Bool_Exp>;
};

export type Query_RootAnalytics_RoomStats_AggregateArgs = {
    distinct_on?: Maybe<Array<Analytics_RoomStats_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_RoomStats_Order_By>>;
    where?: Maybe<Analytics_RoomStats_Bool_Exp>;
};

export type Query_RootAnalytics_RoomStats_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootAnalytics_Mat_ElementTotalViewsArgs = {
    distinct_on?: Maybe<Array<Analytics_Mat_ElementTotalViews_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_Mat_ElementTotalViews_Order_By>>;
    where?: Maybe<Analytics_Mat_ElementTotalViews_Bool_Exp>;
};

export type Query_RootAnalytics_Mat_ElementTotalViews_AggregateArgs = {
    distinct_on?: Maybe<Array<Analytics_Mat_ElementTotalViews_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_Mat_ElementTotalViews_Order_By>>;
    where?: Maybe<Analytics_Mat_ElementTotalViews_Bool_Exp>;
};

export type Query_RootAnalytics_Mat_ItemTotalViewsArgs = {
    distinct_on?: Maybe<Array<Analytics_Mat_ItemTotalViews_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_Mat_ItemTotalViews_Order_By>>;
    where?: Maybe<Analytics_Mat_ItemTotalViews_Bool_Exp>;
};

export type Query_RootAnalytics_Mat_ItemTotalViews_AggregateArgs = {
    distinct_on?: Maybe<Array<Analytics_Mat_ItemTotalViews_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_Mat_ItemTotalViews_Order_By>>;
    where?: Maybe<Analytics_Mat_ItemTotalViews_Bool_Exp>;
};

export type Query_RootAnalytics_Mat_RoomPresenceArgs = {
    distinct_on?: Maybe<Array<Analytics_Mat_RoomPresence_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_Mat_RoomPresence_Order_By>>;
    where?: Maybe<Analytics_Mat_RoomPresence_Bool_Exp>;
};

export type Query_RootAnalytics_Mat_RoomPresence_AggregateArgs = {
    distinct_on?: Maybe<Array<Analytics_Mat_RoomPresence_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_Mat_RoomPresence_Order_By>>;
    where?: Maybe<Analytics_Mat_RoomPresence_Bool_Exp>;
};

export type Query_RootChat_ChatArgs = {
    distinct_on?: Maybe<Array<Chat_Chat_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Chat_Order_By>>;
    where?: Maybe<Chat_Chat_Bool_Exp>;
};

export type Query_RootChat_Chat_AggregateArgs = {
    distinct_on?: Maybe<Array<Chat_Chat_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Chat_Order_By>>;
    where?: Maybe<Chat_Chat_Bool_Exp>;
};

export type Query_RootChat_Chat_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootChat_FlagArgs = {
    distinct_on?: Maybe<Array<Chat_Flag_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Flag_Order_By>>;
    where?: Maybe<Chat_Flag_Bool_Exp>;
};

export type Query_RootChat_FlagTypeArgs = {
    distinct_on?: Maybe<Array<Chat_FlagType_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_FlagType_Order_By>>;
    where?: Maybe<Chat_FlagType_Bool_Exp>;
};

export type Query_RootChat_FlagType_AggregateArgs = {
    distinct_on?: Maybe<Array<Chat_FlagType_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_FlagType_Order_By>>;
    where?: Maybe<Chat_FlagType_Bool_Exp>;
};

export type Query_RootChat_FlagType_By_PkArgs = {
    name: Scalars["String"];
};

export type Query_RootChat_Flag_AggregateArgs = {
    distinct_on?: Maybe<Array<Chat_Flag_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Flag_Order_By>>;
    where?: Maybe<Chat_Flag_Bool_Exp>;
};

export type Query_RootChat_Flag_By_PkArgs = {
    id: Scalars["Int"];
};

export type Query_RootChat_MessageArgs = {
    distinct_on?: Maybe<Array<Chat_Message_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Message_Order_By>>;
    where?: Maybe<Chat_Message_Bool_Exp>;
};

export type Query_RootChat_MessageTypeArgs = {
    distinct_on?: Maybe<Array<Chat_MessageType_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_MessageType_Order_By>>;
    where?: Maybe<Chat_MessageType_Bool_Exp>;
};

export type Query_RootChat_MessageType_AggregateArgs = {
    distinct_on?: Maybe<Array<Chat_MessageType_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_MessageType_Order_By>>;
    where?: Maybe<Chat_MessageType_Bool_Exp>;
};

export type Query_RootChat_MessageType_By_PkArgs = {
    name: Scalars["String"];
};

export type Query_RootChat_Message_AggregateArgs = {
    distinct_on?: Maybe<Array<Chat_Message_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Message_Order_By>>;
    where?: Maybe<Chat_Message_Bool_Exp>;
};

export type Query_RootChat_Message_By_PkArgs = {
    id: Scalars["Int"];
};

export type Query_RootChat_PinArgs = {
    distinct_on?: Maybe<Array<Chat_Pin_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Pin_Order_By>>;
    where?: Maybe<Chat_Pin_Bool_Exp>;
};

export type Query_RootChat_Pin_AggregateArgs = {
    distinct_on?: Maybe<Array<Chat_Pin_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Pin_Order_By>>;
    where?: Maybe<Chat_Pin_Bool_Exp>;
};

export type Query_RootChat_Pin_By_PkArgs = {
    chatId: Scalars["uuid"];
    registrantId: Scalars["uuid"];
};

export type Query_RootChat_ReactionArgs = {
    distinct_on?: Maybe<Array<Chat_Reaction_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Reaction_Order_By>>;
    where?: Maybe<Chat_Reaction_Bool_Exp>;
};

export type Query_RootChat_ReactionTypeArgs = {
    distinct_on?: Maybe<Array<Chat_ReactionType_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_ReactionType_Order_By>>;
    where?: Maybe<Chat_ReactionType_Bool_Exp>;
};

export type Query_RootChat_ReactionType_AggregateArgs = {
    distinct_on?: Maybe<Array<Chat_ReactionType_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_ReactionType_Order_By>>;
    where?: Maybe<Chat_ReactionType_Bool_Exp>;
};

export type Query_RootChat_ReactionType_By_PkArgs = {
    name: Scalars["String"];
};

export type Query_RootChat_Reaction_AggregateArgs = {
    distinct_on?: Maybe<Array<Chat_Reaction_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Reaction_Order_By>>;
    where?: Maybe<Chat_Reaction_Bool_Exp>;
};

export type Query_RootChat_Reaction_By_PkArgs = {
    sId: Scalars["uuid"];
};

export type Query_RootChat_ReadUpToIndexArgs = {
    distinct_on?: Maybe<Array<Chat_ReadUpToIndex_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_ReadUpToIndex_Order_By>>;
    where?: Maybe<Chat_ReadUpToIndex_Bool_Exp>;
};

export type Query_RootChat_ReadUpToIndex_AggregateArgs = {
    distinct_on?: Maybe<Array<Chat_ReadUpToIndex_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_ReadUpToIndex_Order_By>>;
    where?: Maybe<Chat_ReadUpToIndex_Bool_Exp>;
};

export type Query_RootChat_ReadUpToIndex_By_PkArgs = {
    chatId: Scalars["uuid"];
    registrantId: Scalars["uuid"];
};

export type Query_RootChat_SubscriptionArgs = {
    distinct_on?: Maybe<Array<Chat_Subscription_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Subscription_Order_By>>;
    where?: Maybe<Chat_Subscription_Bool_Exp>;
};

export type Query_RootChat_Subscription_AggregateArgs = {
    distinct_on?: Maybe<Array<Chat_Subscription_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Subscription_Order_By>>;
    where?: Maybe<Chat_Subscription_Bool_Exp>;
};

export type Query_RootChat_Subscription_By_PkArgs = {
    chatId: Scalars["uuid"];
    registrantId: Scalars["uuid"];
};

export type Query_RootCollection_ExhibitionArgs = {
    distinct_on?: Maybe<Array<Collection_Exhibition_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Collection_Exhibition_Order_By>>;
    where?: Maybe<Collection_Exhibition_Bool_Exp>;
};

export type Query_RootCollection_Exhibition_AggregateArgs = {
    distinct_on?: Maybe<Array<Collection_Exhibition_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Collection_Exhibition_Order_By>>;
    where?: Maybe<Collection_Exhibition_Bool_Exp>;
};

export type Query_RootCollection_Exhibition_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootCollection_ProgramPersonArgs = {
    distinct_on?: Maybe<Array<Collection_ProgramPerson_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Collection_ProgramPerson_Order_By>>;
    where?: Maybe<Collection_ProgramPerson_Bool_Exp>;
};

export type Query_RootCollection_ProgramPerson_AggregateArgs = {
    distinct_on?: Maybe<Array<Collection_ProgramPerson_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Collection_ProgramPerson_Order_By>>;
    where?: Maybe<Collection_ProgramPerson_Bool_Exp>;
};

export type Query_RootCollection_ProgramPerson_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootCollection_TagArgs = {
    distinct_on?: Maybe<Array<Collection_Tag_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Collection_Tag_Order_By>>;
    where?: Maybe<Collection_Tag_Bool_Exp>;
};

export type Query_RootCollection_Tag_AggregateArgs = {
    distinct_on?: Maybe<Array<Collection_Tag_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Collection_Tag_Order_By>>;
    where?: Maybe<Collection_Tag_Bool_Exp>;
};

export type Query_RootCollection_Tag_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootConference_ConferenceArgs = {
    distinct_on?: Maybe<Array<Conference_Conference_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Conference_Conference_Order_By>>;
    where?: Maybe<Conference_Conference_Bool_Exp>;
};

export type Query_RootConference_Conference_AggregateArgs = {
    distinct_on?: Maybe<Array<Conference_Conference_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Conference_Conference_Order_By>>;
    where?: Maybe<Conference_Conference_Bool_Exp>;
};

export type Query_RootConference_Conference_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootConference_ConfigurationArgs = {
    distinct_on?: Maybe<Array<Conference_Configuration_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Conference_Configuration_Order_By>>;
    where?: Maybe<Conference_Configuration_Bool_Exp>;
};

export type Query_RootConference_ConfigurationKeyArgs = {
    distinct_on?: Maybe<Array<Conference_ConfigurationKey_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Conference_ConfigurationKey_Order_By>>;
    where?: Maybe<Conference_ConfigurationKey_Bool_Exp>;
};

export type Query_RootConference_ConfigurationKey_AggregateArgs = {
    distinct_on?: Maybe<Array<Conference_ConfigurationKey_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Conference_ConfigurationKey_Order_By>>;
    where?: Maybe<Conference_ConfigurationKey_Bool_Exp>;
};

export type Query_RootConference_ConfigurationKey_By_PkArgs = {
    name: Scalars["String"];
};

export type Query_RootConference_Configuration_AggregateArgs = {
    distinct_on?: Maybe<Array<Conference_Configuration_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Conference_Configuration_Order_By>>;
    where?: Maybe<Conference_Configuration_Bool_Exp>;
};

export type Query_RootConference_Configuration_By_PkArgs = {
    conferenceId: Scalars["uuid"];
    key: Conference_ConfigurationKey_Enum;
};

export type Query_RootConference_DemoCodeArgs = {
    distinct_on?: Maybe<Array<Conference_DemoCode_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Conference_DemoCode_Order_By>>;
    where?: Maybe<Conference_DemoCode_Bool_Exp>;
};

export type Query_RootConference_DemoCode_AggregateArgs = {
    distinct_on?: Maybe<Array<Conference_DemoCode_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Conference_DemoCode_Order_By>>;
    where?: Maybe<Conference_DemoCode_Bool_Exp>;
};

export type Query_RootConference_DemoCode_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootConference_OriginatingDataArgs = {
    distinct_on?: Maybe<Array<Conference_OriginatingData_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Conference_OriginatingData_Order_By>>;
    where?: Maybe<Conference_OriginatingData_Bool_Exp>;
};

export type Query_RootConference_OriginatingData_AggregateArgs = {
    distinct_on?: Maybe<Array<Conference_OriginatingData_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Conference_OriginatingData_Order_By>>;
    where?: Maybe<Conference_OriginatingData_Bool_Exp>;
};

export type Query_RootConference_OriginatingData_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootConference_PrepareJobArgs = {
    distinct_on?: Maybe<Array<Conference_PrepareJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Conference_PrepareJob_Order_By>>;
    where?: Maybe<Conference_PrepareJob_Bool_Exp>;
};

export type Query_RootConference_PrepareJob_AggregateArgs = {
    distinct_on?: Maybe<Array<Conference_PrepareJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Conference_PrepareJob_Order_By>>;
    where?: Maybe<Conference_PrepareJob_Bool_Exp>;
};

export type Query_RootConference_PrepareJob_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootContent_ElementArgs = {
    distinct_on?: Maybe<Array<Content_Element_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_Element_Order_By>>;
    where?: Maybe<Content_Element_Bool_Exp>;
};

export type Query_RootContent_ElementByAccessTokenArgs = {
    distinct_on?: Maybe<Array<Content_ElementByAccessToken_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ElementByAccessToken_Order_By>>;
    where?: Maybe<Content_ElementByAccessToken_Bool_Exp>;
};

export type Query_RootContent_ElementByAccessToken_AggregateArgs = {
    distinct_on?: Maybe<Array<Content_ElementByAccessToken_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ElementByAccessToken_Order_By>>;
    where?: Maybe<Content_ElementByAccessToken_Bool_Exp>;
};

export type Query_RootContent_ElementPermissionGrantArgs = {
    distinct_on?: Maybe<Array<Content_ElementPermissionGrant_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ElementPermissionGrant_Order_By>>;
    where?: Maybe<Content_ElementPermissionGrant_Bool_Exp>;
};

export type Query_RootContent_ElementPermissionGrant_AggregateArgs = {
    distinct_on?: Maybe<Array<Content_ElementPermissionGrant_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ElementPermissionGrant_Order_By>>;
    where?: Maybe<Content_ElementPermissionGrant_Bool_Exp>;
};

export type Query_RootContent_ElementPermissionGrant_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootContent_ElementTypeArgs = {
    distinct_on?: Maybe<Array<Content_ElementType_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ElementType_Order_By>>;
    where?: Maybe<Content_ElementType_Bool_Exp>;
};

export type Query_RootContent_ElementType_AggregateArgs = {
    distinct_on?: Maybe<Array<Content_ElementType_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ElementType_Order_By>>;
    where?: Maybe<Content_ElementType_Bool_Exp>;
};

export type Query_RootContent_ElementType_By_PkArgs = {
    name: Scalars["String"];
};

export type Query_RootContent_Element_AggregateArgs = {
    distinct_on?: Maybe<Array<Content_Element_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_Element_Order_By>>;
    where?: Maybe<Content_Element_Bool_Exp>;
};

export type Query_RootContent_Element_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootContent_ItemArgs = {
    distinct_on?: Maybe<Array<Content_Item_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_Item_Order_By>>;
    where?: Maybe<Content_Item_Bool_Exp>;
};

export type Query_RootContent_ItemExhibitionArgs = {
    distinct_on?: Maybe<Array<Content_ItemExhibition_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ItemExhibition_Order_By>>;
    where?: Maybe<Content_ItemExhibition_Bool_Exp>;
};

export type Query_RootContent_ItemExhibition_AggregateArgs = {
    distinct_on?: Maybe<Array<Content_ItemExhibition_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ItemExhibition_Order_By>>;
    where?: Maybe<Content_ItemExhibition_Bool_Exp>;
};

export type Query_RootContent_ItemExhibition_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootContent_ItemProgramPersonArgs = {
    distinct_on?: Maybe<Array<Content_ItemProgramPerson_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ItemProgramPerson_Order_By>>;
    where?: Maybe<Content_ItemProgramPerson_Bool_Exp>;
};

export type Query_RootContent_ItemProgramPerson_AggregateArgs = {
    distinct_on?: Maybe<Array<Content_ItemProgramPerson_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ItemProgramPerson_Order_By>>;
    where?: Maybe<Content_ItemProgramPerson_Bool_Exp>;
};

export type Query_RootContent_ItemProgramPerson_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootContent_ItemTagArgs = {
    distinct_on?: Maybe<Array<Content_ItemTag_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ItemTag_Order_By>>;
    where?: Maybe<Content_ItemTag_Bool_Exp>;
};

export type Query_RootContent_ItemTag_AggregateArgs = {
    distinct_on?: Maybe<Array<Content_ItemTag_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ItemTag_Order_By>>;
    where?: Maybe<Content_ItemTag_Bool_Exp>;
};

export type Query_RootContent_ItemTag_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootContent_ItemTypeArgs = {
    distinct_on?: Maybe<Array<Content_ItemType_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ItemType_Order_By>>;
    where?: Maybe<Content_ItemType_Bool_Exp>;
};

export type Query_RootContent_ItemType_AggregateArgs = {
    distinct_on?: Maybe<Array<Content_ItemType_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ItemType_Order_By>>;
    where?: Maybe<Content_ItemType_Bool_Exp>;
};

export type Query_RootContent_ItemType_By_PkArgs = {
    name: Scalars["String"];
};

export type Query_RootContent_Item_AggregateArgs = {
    distinct_on?: Maybe<Array<Content_Item_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_Item_Order_By>>;
    where?: Maybe<Content_Item_Bool_Exp>;
};

export type Query_RootContent_Item_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootContent_UploaderArgs = {
    distinct_on?: Maybe<Array<Content_Uploader_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_Uploader_Order_By>>;
    where?: Maybe<Content_Uploader_Bool_Exp>;
};

export type Query_RootContent_Uploader_AggregateArgs = {
    distinct_on?: Maybe<Array<Content_Uploader_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_Uploader_Order_By>>;
    where?: Maybe<Content_Uploader_Bool_Exp>;
};

export type Query_RootContent_Uploader_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootGetSlugArgs = {
    url: Scalars["String"];
};

export type Query_RootGetUploadAgreementArgs = {
    magicToken: Scalars["String"];
};

export type Query_RootJob_Queues_ChannelStackCreateJobArgs = {
    distinct_on?: Maybe<Array<Job_Queues_ChannelStackCreateJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_ChannelStackCreateJob_Order_By>>;
    where?: Maybe<Job_Queues_ChannelStackCreateJob_Bool_Exp>;
};

export type Query_RootJob_Queues_ChannelStackCreateJob_AggregateArgs = {
    distinct_on?: Maybe<Array<Job_Queues_ChannelStackCreateJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_ChannelStackCreateJob_Order_By>>;
    where?: Maybe<Job_Queues_ChannelStackCreateJob_Bool_Exp>;
};

export type Query_RootJob_Queues_ChannelStackCreateJob_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootJob_Queues_ChannelStackDeleteJobArgs = {
    distinct_on?: Maybe<Array<Job_Queues_ChannelStackDeleteJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_ChannelStackDeleteJob_Order_By>>;
    where?: Maybe<Job_Queues_ChannelStackDeleteJob_Bool_Exp>;
};

export type Query_RootJob_Queues_ChannelStackDeleteJob_AggregateArgs = {
    distinct_on?: Maybe<Array<Job_Queues_ChannelStackDeleteJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_ChannelStackDeleteJob_Order_By>>;
    where?: Maybe<Job_Queues_ChannelStackDeleteJob_Bool_Exp>;
};

export type Query_RootJob_Queues_ChannelStackDeleteJob_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootJob_Queues_CombineVideosJobArgs = {
    distinct_on?: Maybe<Array<Job_Queues_CombineVideosJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_CombineVideosJob_Order_By>>;
    where?: Maybe<Job_Queues_CombineVideosJob_Bool_Exp>;
};

export type Query_RootJob_Queues_CombineVideosJob_AggregateArgs = {
    distinct_on?: Maybe<Array<Job_Queues_CombineVideosJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_CombineVideosJob_Order_By>>;
    where?: Maybe<Job_Queues_CombineVideosJob_Bool_Exp>;
};

export type Query_RootJob_Queues_CombineVideosJob_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootJob_Queues_CustomEmailJobArgs = {
    distinct_on?: Maybe<Array<Job_Queues_CustomEmailJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_CustomEmailJob_Order_By>>;
    where?: Maybe<Job_Queues_CustomEmailJob_Bool_Exp>;
};

export type Query_RootJob_Queues_CustomEmailJob_AggregateArgs = {
    distinct_on?: Maybe<Array<Job_Queues_CustomEmailJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_CustomEmailJob_Order_By>>;
    where?: Maybe<Job_Queues_CustomEmailJob_Bool_Exp>;
};

export type Query_RootJob_Queues_CustomEmailJob_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootJob_Queues_InvitationEmailJobArgs = {
    distinct_on?: Maybe<Array<Job_Queues_InvitationEmailJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_InvitationEmailJob_Order_By>>;
    where?: Maybe<Job_Queues_InvitationEmailJob_Bool_Exp>;
};

export type Query_RootJob_Queues_InvitationEmailJob_AggregateArgs = {
    distinct_on?: Maybe<Array<Job_Queues_InvitationEmailJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_InvitationEmailJob_Order_By>>;
    where?: Maybe<Job_Queues_InvitationEmailJob_Bool_Exp>;
};

export type Query_RootJob_Queues_InvitationEmailJob_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootJob_Queues_MediaPackageHarvestJobArgs = {
    distinct_on?: Maybe<Array<Job_Queues_MediaPackageHarvestJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_MediaPackageHarvestJob_Order_By>>;
    where?: Maybe<Job_Queues_MediaPackageHarvestJob_Bool_Exp>;
};

export type Query_RootJob_Queues_MediaPackageHarvestJob_AggregateArgs = {
    distinct_on?: Maybe<Array<Job_Queues_MediaPackageHarvestJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_MediaPackageHarvestJob_Order_By>>;
    where?: Maybe<Job_Queues_MediaPackageHarvestJob_Bool_Exp>;
};

export type Query_RootJob_Queues_MediaPackageHarvestJob_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootJob_Queues_PublishVideoJobArgs = {
    distinct_on?: Maybe<Array<Job_Queues_PublishVideoJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_PublishVideoJob_Order_By>>;
    where?: Maybe<Job_Queues_PublishVideoJob_Bool_Exp>;
};

export type Query_RootJob_Queues_PublishVideoJob_AggregateArgs = {
    distinct_on?: Maybe<Array<Job_Queues_PublishVideoJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_PublishVideoJob_Order_By>>;
    where?: Maybe<Job_Queues_PublishVideoJob_Bool_Exp>;
};

export type Query_RootJob_Queues_PublishVideoJob_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootJob_Queues_SubmissionRequestEmailJobArgs = {
    distinct_on?: Maybe<Array<Job_Queues_SubmissionRequestEmailJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_SubmissionRequestEmailJob_Order_By>>;
    where?: Maybe<Job_Queues_SubmissionRequestEmailJob_Bool_Exp>;
};

export type Query_RootJob_Queues_SubmissionRequestEmailJob_AggregateArgs = {
    distinct_on?: Maybe<Array<Job_Queues_SubmissionRequestEmailJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_SubmissionRequestEmailJob_Order_By>>;
    where?: Maybe<Job_Queues_SubmissionRequestEmailJob_Bool_Exp>;
};

export type Query_RootJob_Queues_SubmissionRequestEmailJob_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootJob_Queues_UploadYouTubeVideoJobArgs = {
    distinct_on?: Maybe<Array<Job_Queues_UploadYouTubeVideoJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_UploadYouTubeVideoJob_Order_By>>;
    where?: Maybe<Job_Queues_UploadYouTubeVideoJob_Bool_Exp>;
};

export type Query_RootJob_Queues_UploadYouTubeVideoJob_AggregateArgs = {
    distinct_on?: Maybe<Array<Job_Queues_UploadYouTubeVideoJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_UploadYouTubeVideoJob_Order_By>>;
    where?: Maybe<Job_Queues_UploadYouTubeVideoJob_Bool_Exp>;
};

export type Query_RootJob_Queues_UploadYouTubeVideoJob_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootPermissions_GroupArgs = {
    distinct_on?: Maybe<Array<Permissions_Group_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_Group_Order_By>>;
    where?: Maybe<Permissions_Group_Bool_Exp>;
};

export type Query_RootPermissions_GroupRegistrantArgs = {
    distinct_on?: Maybe<Array<Permissions_GroupRegistrant_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_GroupRegistrant_Order_By>>;
    where?: Maybe<Permissions_GroupRegistrant_Bool_Exp>;
};

export type Query_RootPermissions_GroupRegistrant_AggregateArgs = {
    distinct_on?: Maybe<Array<Permissions_GroupRegistrant_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_GroupRegistrant_Order_By>>;
    where?: Maybe<Permissions_GroupRegistrant_Bool_Exp>;
};

export type Query_RootPermissions_GroupRegistrant_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootPermissions_GroupRoleArgs = {
    distinct_on?: Maybe<Array<Permissions_GroupRole_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_GroupRole_Order_By>>;
    where?: Maybe<Permissions_GroupRole_Bool_Exp>;
};

export type Query_RootPermissions_GroupRole_AggregateArgs = {
    distinct_on?: Maybe<Array<Permissions_GroupRole_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_GroupRole_Order_By>>;
    where?: Maybe<Permissions_GroupRole_Bool_Exp>;
};

export type Query_RootPermissions_GroupRole_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootPermissions_Group_AggregateArgs = {
    distinct_on?: Maybe<Array<Permissions_Group_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_Group_Order_By>>;
    where?: Maybe<Permissions_Group_Bool_Exp>;
};

export type Query_RootPermissions_Group_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootPermissions_PermissionArgs = {
    distinct_on?: Maybe<Array<Permissions_Permission_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_Permission_Order_By>>;
    where?: Maybe<Permissions_Permission_Bool_Exp>;
};

export type Query_RootPermissions_Permission_AggregateArgs = {
    distinct_on?: Maybe<Array<Permissions_Permission_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_Permission_Order_By>>;
    where?: Maybe<Permissions_Permission_Bool_Exp>;
};

export type Query_RootPermissions_Permission_By_PkArgs = {
    name: Scalars["String"];
};

export type Query_RootPermissions_RoleArgs = {
    distinct_on?: Maybe<Array<Permissions_Role_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_Role_Order_By>>;
    where?: Maybe<Permissions_Role_Bool_Exp>;
};

export type Query_RootPermissions_RolePermissionArgs = {
    distinct_on?: Maybe<Array<Permissions_RolePermission_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_RolePermission_Order_By>>;
    where?: Maybe<Permissions_RolePermission_Bool_Exp>;
};

export type Query_RootPermissions_RolePermission_AggregateArgs = {
    distinct_on?: Maybe<Array<Permissions_RolePermission_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_RolePermission_Order_By>>;
    where?: Maybe<Permissions_RolePermission_Bool_Exp>;
};

export type Query_RootPermissions_RolePermission_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootPermissions_Role_AggregateArgs = {
    distinct_on?: Maybe<Array<Permissions_Role_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_Role_Order_By>>;
    where?: Maybe<Permissions_Role_Bool_Exp>;
};

export type Query_RootPermissions_Role_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootRegistrant_GoogleAccountArgs = {
    distinct_on?: Maybe<Array<Registrant_GoogleAccount_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Registrant_GoogleAccount_Order_By>>;
    where?: Maybe<Registrant_GoogleAccount_Bool_Exp>;
};

export type Query_RootRegistrant_GoogleAccount_AggregateArgs = {
    distinct_on?: Maybe<Array<Registrant_GoogleAccount_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Registrant_GoogleAccount_Order_By>>;
    where?: Maybe<Registrant_GoogleAccount_Bool_Exp>;
};

export type Query_RootRegistrant_GoogleAccount_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootRegistrant_InvitationArgs = {
    distinct_on?: Maybe<Array<Registrant_Invitation_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Registrant_Invitation_Order_By>>;
    where?: Maybe<Registrant_Invitation_Bool_Exp>;
};

export type Query_RootRegistrant_Invitation_AggregateArgs = {
    distinct_on?: Maybe<Array<Registrant_Invitation_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Registrant_Invitation_Order_By>>;
    where?: Maybe<Registrant_Invitation_Bool_Exp>;
};

export type Query_RootRegistrant_Invitation_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootRegistrant_ProfileArgs = {
    distinct_on?: Maybe<Array<Registrant_Profile_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Registrant_Profile_Order_By>>;
    where?: Maybe<Registrant_Profile_Bool_Exp>;
};

export type Query_RootRegistrant_ProfileBadgesArgs = {
    distinct_on?: Maybe<Array<Registrant_ProfileBadges_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Registrant_ProfileBadges_Order_By>>;
    where?: Maybe<Registrant_ProfileBadges_Bool_Exp>;
};

export type Query_RootRegistrant_ProfileBadges_AggregateArgs = {
    distinct_on?: Maybe<Array<Registrant_ProfileBadges_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Registrant_ProfileBadges_Order_By>>;
    where?: Maybe<Registrant_ProfileBadges_Bool_Exp>;
};

export type Query_RootRegistrant_Profile_AggregateArgs = {
    distinct_on?: Maybe<Array<Registrant_Profile_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Registrant_Profile_Order_By>>;
    where?: Maybe<Registrant_Profile_Bool_Exp>;
};

export type Query_RootRegistrant_Profile_By_PkArgs = {
    registrantId: Scalars["uuid"];
};

export type Query_RootRegistrant_RegistrantArgs = {
    distinct_on?: Maybe<Array<Registrant_Registrant_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Registrant_Registrant_Order_By>>;
    where?: Maybe<Registrant_Registrant_Bool_Exp>;
};

export type Query_RootRegistrant_Registrant_AggregateArgs = {
    distinct_on?: Maybe<Array<Registrant_Registrant_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Registrant_Registrant_Order_By>>;
    where?: Maybe<Registrant_Registrant_Bool_Exp>;
};

export type Query_RootRegistrant_Registrant_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootRoom_BackendArgs = {
    distinct_on?: Maybe<Array<Room_Backend_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_Backend_Order_By>>;
    where?: Maybe<Room_Backend_Bool_Exp>;
};

export type Query_RootRoom_Backend_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_Backend_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_Backend_Order_By>>;
    where?: Maybe<Room_Backend_Bool_Exp>;
};

export type Query_RootRoom_Backend_By_PkArgs = {
    name: Scalars["String"];
};

export type Query_RootRoom_ChimeMeetingArgs = {
    distinct_on?: Maybe<Array<Room_ChimeMeeting_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_ChimeMeeting_Order_By>>;
    where?: Maybe<Room_ChimeMeeting_Bool_Exp>;
};

export type Query_RootRoom_ChimeMeeting_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_ChimeMeeting_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_ChimeMeeting_Order_By>>;
    where?: Maybe<Room_ChimeMeeting_Bool_Exp>;
};

export type Query_RootRoom_ChimeMeeting_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootRoom_LivestreamDurationsArgs = {
    distinct_on?: Maybe<Array<Room_LivestreamDurations_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_LivestreamDurations_Order_By>>;
    where?: Maybe<Room_LivestreamDurations_Bool_Exp>;
};

export type Query_RootRoom_LivestreamDurations_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_LivestreamDurations_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_LivestreamDurations_Order_By>>;
    where?: Maybe<Room_LivestreamDurations_Bool_Exp>;
};

export type Query_RootRoom_ManagementModeArgs = {
    distinct_on?: Maybe<Array<Room_ManagementMode_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_ManagementMode_Order_By>>;
    where?: Maybe<Room_ManagementMode_Bool_Exp>;
};

export type Query_RootRoom_ManagementMode_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_ManagementMode_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_ManagementMode_Order_By>>;
    where?: Maybe<Room_ManagementMode_Bool_Exp>;
};

export type Query_RootRoom_ManagementMode_By_PkArgs = {
    name: Scalars["String"];
};

export type Query_RootRoom_ModeArgs = {
    distinct_on?: Maybe<Array<Room_Mode_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_Mode_Order_By>>;
    where?: Maybe<Room_Mode_Bool_Exp>;
};

export type Query_RootRoom_Mode_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_Mode_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_Mode_Order_By>>;
    where?: Maybe<Room_Mode_Bool_Exp>;
};

export type Query_RootRoom_Mode_By_PkArgs = {
    name: Scalars["String"];
};

export type Query_RootRoom_ParticipantArgs = {
    distinct_on?: Maybe<Array<Room_Participant_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_Participant_Order_By>>;
    where?: Maybe<Room_Participant_Bool_Exp>;
};

export type Query_RootRoom_Participant_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_Participant_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_Participant_Order_By>>;
    where?: Maybe<Room_Participant_Bool_Exp>;
};

export type Query_RootRoom_Participant_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootRoom_PersonRoleArgs = {
    distinct_on?: Maybe<Array<Room_PersonRole_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_PersonRole_Order_By>>;
    where?: Maybe<Room_PersonRole_Bool_Exp>;
};

export type Query_RootRoom_PersonRole_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_PersonRole_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_PersonRole_Order_By>>;
    where?: Maybe<Room_PersonRole_Bool_Exp>;
};

export type Query_RootRoom_PersonRole_By_PkArgs = {
    name: Scalars["String"];
};

export type Query_RootRoom_RoomArgs = {
    distinct_on?: Maybe<Array<Room_Room_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_Room_Order_By>>;
    where?: Maybe<Room_Room_Bool_Exp>;
};

export type Query_RootRoom_RoomPersonArgs = {
    distinct_on?: Maybe<Array<Room_RoomPerson_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_RoomPerson_Order_By>>;
    where?: Maybe<Room_RoomPerson_Bool_Exp>;
};

export type Query_RootRoom_RoomPerson_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_RoomPerson_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_RoomPerson_Order_By>>;
    where?: Maybe<Room_RoomPerson_Bool_Exp>;
};

export type Query_RootRoom_RoomPerson_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootRoom_Room_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_Room_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_Room_Order_By>>;
    where?: Maybe<Room_Room_Bool_Exp>;
};

export type Query_RootRoom_Room_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootRoom_ShuffleAlgorithmArgs = {
    distinct_on?: Maybe<Array<Room_ShuffleAlgorithm_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_ShuffleAlgorithm_Order_By>>;
    where?: Maybe<Room_ShuffleAlgorithm_Bool_Exp>;
};

export type Query_RootRoom_ShuffleAlgorithm_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_ShuffleAlgorithm_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_ShuffleAlgorithm_Order_By>>;
    where?: Maybe<Room_ShuffleAlgorithm_Bool_Exp>;
};

export type Query_RootRoom_ShuffleAlgorithm_By_PkArgs = {
    name: Scalars["String"];
};

export type Query_RootRoom_ShufflePeriodArgs = {
    distinct_on?: Maybe<Array<Room_ShufflePeriod_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_ShufflePeriod_Order_By>>;
    where?: Maybe<Room_ShufflePeriod_Bool_Exp>;
};

export type Query_RootRoom_ShufflePeriod_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_ShufflePeriod_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_ShufflePeriod_Order_By>>;
    where?: Maybe<Room_ShufflePeriod_Bool_Exp>;
};

export type Query_RootRoom_ShufflePeriod_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootRoom_ShuffleQueueEntryArgs = {
    distinct_on?: Maybe<Array<Room_ShuffleQueueEntry_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_ShuffleQueueEntry_Order_By>>;
    where?: Maybe<Room_ShuffleQueueEntry_Bool_Exp>;
};

export type Query_RootRoom_ShuffleQueueEntry_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_ShuffleQueueEntry_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_ShuffleQueueEntry_Order_By>>;
    where?: Maybe<Room_ShuffleQueueEntry_Bool_Exp>;
};

export type Query_RootRoom_ShuffleQueueEntry_By_PkArgs = {
    id: Scalars["bigint"];
};

export type Query_RootRoom_ShuffleRoomArgs = {
    distinct_on?: Maybe<Array<Room_ShuffleRoom_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_ShuffleRoom_Order_By>>;
    where?: Maybe<Room_ShuffleRoom_Bool_Exp>;
};

export type Query_RootRoom_ShuffleRoom_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_ShuffleRoom_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_ShuffleRoom_Order_By>>;
    where?: Maybe<Room_ShuffleRoom_Bool_Exp>;
};

export type Query_RootRoom_ShuffleRoom_By_PkArgs = {
    id: Scalars["bigint"];
};

export type Query_RootSchedule_ContinuationArgs = {
    distinct_on?: Maybe<Array<Schedule_Continuation_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_Continuation_Order_By>>;
    where?: Maybe<Schedule_Continuation_Bool_Exp>;
};

export type Query_RootSchedule_Continuation_AggregateArgs = {
    distinct_on?: Maybe<Array<Schedule_Continuation_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_Continuation_Order_By>>;
    where?: Maybe<Schedule_Continuation_Bool_Exp>;
};

export type Query_RootSchedule_Continuation_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootSchedule_EventArgs = {
    distinct_on?: Maybe<Array<Schedule_Event_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_Event_Order_By>>;
    where?: Maybe<Schedule_Event_Bool_Exp>;
};

export type Query_RootSchedule_EventProgramPersonArgs = {
    distinct_on?: Maybe<Array<Schedule_EventProgramPerson_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_EventProgramPerson_Order_By>>;
    where?: Maybe<Schedule_EventProgramPerson_Bool_Exp>;
};

export type Query_RootSchedule_EventProgramPersonRoleArgs = {
    distinct_on?: Maybe<Array<Schedule_EventProgramPersonRole_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_EventProgramPersonRole_Order_By>>;
    where?: Maybe<Schedule_EventProgramPersonRole_Bool_Exp>;
};

export type Query_RootSchedule_EventProgramPersonRole_AggregateArgs = {
    distinct_on?: Maybe<Array<Schedule_EventProgramPersonRole_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_EventProgramPersonRole_Order_By>>;
    where?: Maybe<Schedule_EventProgramPersonRole_Bool_Exp>;
};

export type Query_RootSchedule_EventProgramPersonRole_By_PkArgs = {
    name: Scalars["String"];
};

export type Query_RootSchedule_EventProgramPerson_AggregateArgs = {
    distinct_on?: Maybe<Array<Schedule_EventProgramPerson_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_EventProgramPerson_Order_By>>;
    where?: Maybe<Schedule_EventProgramPerson_Bool_Exp>;
};

export type Query_RootSchedule_EventProgramPerson_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootSchedule_EventTagArgs = {
    distinct_on?: Maybe<Array<Schedule_EventTag_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_EventTag_Order_By>>;
    where?: Maybe<Schedule_EventTag_Bool_Exp>;
};

export type Query_RootSchedule_EventTag_AggregateArgs = {
    distinct_on?: Maybe<Array<Schedule_EventTag_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_EventTag_Order_By>>;
    where?: Maybe<Schedule_EventTag_Bool_Exp>;
};

export type Query_RootSchedule_EventTag_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootSchedule_Event_AggregateArgs = {
    distinct_on?: Maybe<Array<Schedule_Event_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_Event_Order_By>>;
    where?: Maybe<Schedule_Event_Bool_Exp>;
};

export type Query_RootSchedule_Event_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootSchedule_OverlappingEventsArgs = {
    distinct_on?: Maybe<Array<Schedule_OverlappingEvents_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_OverlappingEvents_Order_By>>;
    where?: Maybe<Schedule_OverlappingEvents_Bool_Exp>;
};

export type Query_RootSchedule_OverlappingEvents_AggregateArgs = {
    distinct_on?: Maybe<Array<Schedule_OverlappingEvents_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_OverlappingEvents_Order_By>>;
    where?: Maybe<Schedule_OverlappingEvents_Bool_Exp>;
};

export type Query_RootSchedule_StarredEventArgs = {
    distinct_on?: Maybe<Array<Schedule_StarredEvent_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_StarredEvent_Order_By>>;
    where?: Maybe<Schedule_StarredEvent_Bool_Exp>;
};

export type Query_RootSchedule_StarredEvent_AggregateArgs = {
    distinct_on?: Maybe<Array<Schedule_StarredEvent_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_StarredEvent_Order_By>>;
    where?: Maybe<Schedule_StarredEvent_Bool_Exp>;
};

export type Query_RootSchedule_StarredEvent_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootSystem_ConfigurationArgs = {
    distinct_on?: Maybe<Array<System_Configuration_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<System_Configuration_Order_By>>;
    where?: Maybe<System_Configuration_Bool_Exp>;
};

export type Query_RootSystem_ConfigurationKeyArgs = {
    distinct_on?: Maybe<Array<System_ConfigurationKey_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<System_ConfigurationKey_Order_By>>;
    where?: Maybe<System_ConfigurationKey_Bool_Exp>;
};

export type Query_RootSystem_ConfigurationKey_AggregateArgs = {
    distinct_on?: Maybe<Array<System_ConfigurationKey_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<System_ConfigurationKey_Order_By>>;
    where?: Maybe<System_ConfigurationKey_Bool_Exp>;
};

export type Query_RootSystem_ConfigurationKey_By_PkArgs = {
    name: Scalars["String"];
};

export type Query_RootSystem_Configuration_AggregateArgs = {
    distinct_on?: Maybe<Array<System_Configuration_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<System_Configuration_Order_By>>;
    where?: Maybe<System_Configuration_Bool_Exp>;
};

export type Query_RootSystem_Configuration_By_PkArgs = {
    key: System_ConfigurationKey_Enum;
};

export type Query_RootVideo_ChannelStackArgs = {
    distinct_on?: Maybe<Array<Video_ChannelStack_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_ChannelStack_Order_By>>;
    where?: Maybe<Video_ChannelStack_Bool_Exp>;
};

export type Query_RootVideo_ChannelStack_AggregateArgs = {
    distinct_on?: Maybe<Array<Video_ChannelStack_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_ChannelStack_Order_By>>;
    where?: Maybe<Video_ChannelStack_Bool_Exp>;
};

export type Query_RootVideo_ChannelStack_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootVideo_EventParticipantStreamArgs = {
    distinct_on?: Maybe<Array<Video_EventParticipantStream_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_EventParticipantStream_Order_By>>;
    where?: Maybe<Video_EventParticipantStream_Bool_Exp>;
};

export type Query_RootVideo_EventParticipantStream_AggregateArgs = {
    distinct_on?: Maybe<Array<Video_EventParticipantStream_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_EventParticipantStream_Order_By>>;
    where?: Maybe<Video_EventParticipantStream_Bool_Exp>;
};

export type Query_RootVideo_EventParticipantStream_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootVideo_EventVonageSessionArgs = {
    distinct_on?: Maybe<Array<Video_EventVonageSession_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_EventVonageSession_Order_By>>;
    where?: Maybe<Video_EventVonageSession_Bool_Exp>;
};

export type Query_RootVideo_EventVonageSession_AggregateArgs = {
    distinct_on?: Maybe<Array<Video_EventVonageSession_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_EventVonageSession_Order_By>>;
    where?: Maybe<Video_EventVonageSession_Bool_Exp>;
};

export type Query_RootVideo_EventVonageSession_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootVideo_ImmediateSwitchArgs = {
    distinct_on?: Maybe<Array<Video_ImmediateSwitch_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_ImmediateSwitch_Order_By>>;
    where?: Maybe<Video_ImmediateSwitch_Bool_Exp>;
};

export type Query_RootVideo_ImmediateSwitch_AggregateArgs = {
    distinct_on?: Maybe<Array<Video_ImmediateSwitch_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_ImmediateSwitch_Order_By>>;
    where?: Maybe<Video_ImmediateSwitch_Bool_Exp>;
};

export type Query_RootVideo_ImmediateSwitch_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootVideo_InputTypeArgs = {
    distinct_on?: Maybe<Array<Video_InputType_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_InputType_Order_By>>;
    where?: Maybe<Video_InputType_Bool_Exp>;
};

export type Query_RootVideo_InputType_AggregateArgs = {
    distinct_on?: Maybe<Array<Video_InputType_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_InputType_Order_By>>;
    where?: Maybe<Video_InputType_Bool_Exp>;
};

export type Query_RootVideo_InputType_By_PkArgs = {
    name: Scalars["String"];
};

export type Query_RootVideo_JobStatusArgs = {
    distinct_on?: Maybe<Array<Video_JobStatus_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_JobStatus_Order_By>>;
    where?: Maybe<Video_JobStatus_Bool_Exp>;
};

export type Query_RootVideo_JobStatus_AggregateArgs = {
    distinct_on?: Maybe<Array<Video_JobStatus_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_JobStatus_Order_By>>;
    where?: Maybe<Video_JobStatus_Bool_Exp>;
};

export type Query_RootVideo_JobStatus_By_PkArgs = {
    name: Scalars["String"];
};

export type Query_RootVideo_MediaLiveChannelStatusArgs = {
    distinct_on?: Maybe<Array<Video_MediaLiveChannelStatus_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_MediaLiveChannelStatus_Order_By>>;
    where?: Maybe<Video_MediaLiveChannelStatus_Bool_Exp>;
};

export type Query_RootVideo_MediaLiveChannelStatus_AggregateArgs = {
    distinct_on?: Maybe<Array<Video_MediaLiveChannelStatus_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_MediaLiveChannelStatus_Order_By>>;
    where?: Maybe<Video_MediaLiveChannelStatus_Bool_Exp>;
};

export type Query_RootVideo_MediaLiveChannelStatus_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootVideo_RtmpInputArgs = {
    distinct_on?: Maybe<Array<Video_RtmpInput_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_RtmpInput_Order_By>>;
    where?: Maybe<Video_RtmpInput_Bool_Exp>;
};

export type Query_RootVideo_RtmpInput_AggregateArgs = {
    distinct_on?: Maybe<Array<Video_RtmpInput_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_RtmpInput_Order_By>>;
    where?: Maybe<Video_RtmpInput_Bool_Exp>;
};

export type Query_RootVideo_RtmpInput_By_PkArgs = {
    name: Scalars["String"];
};

export type Query_RootVideo_TranscriptionJobArgs = {
    distinct_on?: Maybe<Array<Video_TranscriptionJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_TranscriptionJob_Order_By>>;
    where?: Maybe<Video_TranscriptionJob_Bool_Exp>;
};

export type Query_RootVideo_TranscriptionJob_AggregateArgs = {
    distinct_on?: Maybe<Array<Video_TranscriptionJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_TranscriptionJob_Order_By>>;
    where?: Maybe<Video_TranscriptionJob_Bool_Exp>;
};

export type Query_RootVideo_TranscriptionJob_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootVideo_VideoRenderJobArgs = {
    distinct_on?: Maybe<Array<Video_VideoRenderJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_VideoRenderJob_Order_By>>;
    where?: Maybe<Video_VideoRenderJob_Bool_Exp>;
};

export type Query_RootVideo_VideoRenderJob_AggregateArgs = {
    distinct_on?: Maybe<Array<Video_VideoRenderJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_VideoRenderJob_Order_By>>;
    where?: Maybe<Video_VideoRenderJob_Bool_Exp>;
};

export type Query_RootVideo_VideoRenderJob_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Query_RootVideo_YouTubeUploadArgs = {
    distinct_on?: Maybe<Array<Video_YouTubeUpload_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_YouTubeUpload_Order_By>>;
    where?: Maybe<Video_YouTubeUpload_Bool_Exp>;
};

export type Query_RootVideo_YouTubeUpload_AggregateArgs = {
    distinct_on?: Maybe<Array<Video_YouTubeUpload_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_YouTubeUpload_Order_By>>;
    where?: Maybe<Video_YouTubeUpload_Bool_Exp>;
};

export type Query_RootVideo_YouTubeUpload_By_PkArgs = {
    id: Scalars["uuid"];
};

/** columns and relationships of "registrant.GoogleAccount" */
export type Registrant_GoogleAccount = {
    __typename?: "registrant_GoogleAccount";
    /** An object relationship */
    conference: Conference_Conference;
    conferenceId: Scalars["uuid"];
    createdAt: Scalars["timestamptz"];
    googleAccountEmail: Scalars["String"];
    id: Scalars["uuid"];
    /** An object relationship */
    registrant: Registrant_Registrant;
    registrantId: Scalars["uuid"];
    tokenData: Scalars["jsonb"];
    updatedAt: Scalars["timestamptz"];
    youTubeData?: Maybe<Scalars["jsonb"]>;
};

/** columns and relationships of "registrant.GoogleAccount" */
export type Registrant_GoogleAccountTokenDataArgs = {
    path?: Maybe<Scalars["String"]>;
};

/** columns and relationships of "registrant.GoogleAccount" */
export type Registrant_GoogleAccountYouTubeDataArgs = {
    path?: Maybe<Scalars["String"]>;
};

/** aggregated selection of "registrant.GoogleAccount" */
export type Registrant_GoogleAccount_Aggregate = {
    __typename?: "registrant_GoogleAccount_aggregate";
    aggregate?: Maybe<Registrant_GoogleAccount_Aggregate_Fields>;
    nodes: Array<Registrant_GoogleAccount>;
};

/** aggregate fields of "registrant.GoogleAccount" */
export type Registrant_GoogleAccount_Aggregate_Fields = {
    __typename?: "registrant_GoogleAccount_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Registrant_GoogleAccount_Max_Fields>;
    min?: Maybe<Registrant_GoogleAccount_Min_Fields>;
};

/** aggregate fields of "registrant.GoogleAccount" */
export type Registrant_GoogleAccount_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Registrant_GoogleAccount_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** append existing jsonb value of filtered columns with new jsonb value */
export type Registrant_GoogleAccount_Append_Input = {
    tokenData?: Maybe<Scalars["jsonb"]>;
    youTubeData?: Maybe<Scalars["jsonb"]>;
};

/** Boolean expression to filter rows from the table "registrant.GoogleAccount". All fields are combined with a logical 'AND'. */
export type Registrant_GoogleAccount_Bool_Exp = {
    _and?: Maybe<Array<Registrant_GoogleAccount_Bool_Exp>>;
    _not?: Maybe<Registrant_GoogleAccount_Bool_Exp>;
    _or?: Maybe<Array<Registrant_GoogleAccount_Bool_Exp>>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    createdAt?: Maybe<Timestamptz_Comparison_Exp>;
    googleAccountEmail?: Maybe<String_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    registrant?: Maybe<Registrant_Registrant_Bool_Exp>;
    registrantId?: Maybe<Uuid_Comparison_Exp>;
    tokenData?: Maybe<Jsonb_Comparison_Exp>;
    updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
    youTubeData?: Maybe<Jsonb_Comparison_Exp>;
};

/** unique or primary key constraints on table "registrant.GoogleAccount" */
export enum Registrant_GoogleAccount_Constraint {
    /** unique or primary key constraint */
    GoogleAccountPkey = "GoogleAccount_pkey",
    /** unique or primary key constraint */
    GoogleAccountRegistrantIdGoogleAccountEmailKey = "GoogleAccount_registrantId_googleAccountEmail_key",
}

/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export type Registrant_GoogleAccount_Delete_At_Path_Input = {
    tokenData?: Maybe<Array<Scalars["String"]>>;
    youTubeData?: Maybe<Array<Scalars["String"]>>;
};

/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
export type Registrant_GoogleAccount_Delete_Elem_Input = {
    tokenData?: Maybe<Scalars["Int"]>;
    youTubeData?: Maybe<Scalars["Int"]>;
};

/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export type Registrant_GoogleAccount_Delete_Key_Input = {
    tokenData?: Maybe<Scalars["String"]>;
    youTubeData?: Maybe<Scalars["String"]>;
};

/** input type for inserting data into table "registrant.GoogleAccount" */
export type Registrant_GoogleAccount_Insert_Input = {
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    googleAccountEmail?: Maybe<Scalars["String"]>;
    id?: Maybe<Scalars["uuid"]>;
    registrant?: Maybe<Registrant_Registrant_Obj_Rel_Insert_Input>;
    registrantId?: Maybe<Scalars["uuid"]>;
    tokenData?: Maybe<Scalars["jsonb"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    youTubeData?: Maybe<Scalars["jsonb"]>;
};

/** aggregate max on columns */
export type Registrant_GoogleAccount_Max_Fields = {
    __typename?: "registrant_GoogleAccount_max_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    googleAccountEmail?: Maybe<Scalars["String"]>;
    id?: Maybe<Scalars["uuid"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate min on columns */
export type Registrant_GoogleAccount_Min_Fields = {
    __typename?: "registrant_GoogleAccount_min_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    googleAccountEmail?: Maybe<Scalars["String"]>;
    id?: Maybe<Scalars["uuid"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** response of any mutation on the table "registrant.GoogleAccount" */
export type Registrant_GoogleAccount_Mutation_Response = {
    __typename?: "registrant_GoogleAccount_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Registrant_GoogleAccount>;
};

/** input type for inserting object relation for remote table "registrant.GoogleAccount" */
export type Registrant_GoogleAccount_Obj_Rel_Insert_Input = {
    data: Registrant_GoogleAccount_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Registrant_GoogleAccount_On_Conflict>;
};

/** on conflict condition type for table "registrant.GoogleAccount" */
export type Registrant_GoogleAccount_On_Conflict = {
    constraint: Registrant_GoogleAccount_Constraint;
    update_columns?: Array<Registrant_GoogleAccount_Update_Column>;
    where?: Maybe<Registrant_GoogleAccount_Bool_Exp>;
};

/** Ordering options when selecting data from "registrant.GoogleAccount". */
export type Registrant_GoogleAccount_Order_By = {
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    googleAccountEmail?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    registrant?: Maybe<Registrant_Registrant_Order_By>;
    registrantId?: Maybe<Order_By>;
    tokenData?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
    youTubeData?: Maybe<Order_By>;
};

/** primary key columns input for table: registrant_GoogleAccount */
export type Registrant_GoogleAccount_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** prepend existing jsonb value of filtered columns with new jsonb value */
export type Registrant_GoogleAccount_Prepend_Input = {
    tokenData?: Maybe<Scalars["jsonb"]>;
    youTubeData?: Maybe<Scalars["jsonb"]>;
};

/** select columns of table "registrant.GoogleAccount" */
export enum Registrant_GoogleAccount_Select_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    GoogleAccountEmail = "googleAccountEmail",
    /** column name */
    Id = "id",
    /** column name */
    RegistrantId = "registrantId",
    /** column name */
    TokenData = "tokenData",
    /** column name */
    UpdatedAt = "updatedAt",
    /** column name */
    YouTubeData = "youTubeData",
}

/** input type for updating data in table "registrant.GoogleAccount" */
export type Registrant_GoogleAccount_Set_Input = {
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    googleAccountEmail?: Maybe<Scalars["String"]>;
    id?: Maybe<Scalars["uuid"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
    tokenData?: Maybe<Scalars["jsonb"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    youTubeData?: Maybe<Scalars["jsonb"]>;
};

/** update columns of table "registrant.GoogleAccount" */
export enum Registrant_GoogleAccount_Update_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    GoogleAccountEmail = "googleAccountEmail",
    /** column name */
    Id = "id",
    /** column name */
    RegistrantId = "registrantId",
    /** column name */
    TokenData = "tokenData",
    /** column name */
    UpdatedAt = "updatedAt",
    /** column name */
    YouTubeData = "youTubeData",
}

/** columns and relationships of "registrant.Invitation" */
export type Registrant_Invitation = {
    __typename?: "registrant_Invitation";
    conferenceId: Scalars["uuid"];
    confirmationCode?: Maybe<Scalars["uuid"]>;
    createdAt: Scalars["timestamptz"];
    /** An array relationship */
    emails: Array<Email>;
    /** An aggregate relationship */
    emails_aggregate: Email_Aggregate;
    /** A computed field, executes function "registrant.invitationHash" */
    hash?: Maybe<Scalars["String"]>;
    id: Scalars["uuid"];
    inviteCode: Scalars["uuid"];
    invitedEmailAddress: Scalars["String"];
    linkToUserId?: Maybe<Scalars["String"]>;
    /** An object relationship */
    registrant: Registrant_Registrant;
    registrantId: Scalars["uuid"];
    updatedAt: Scalars["timestamptz"];
    /** An object relationship */
    user?: Maybe<User>;
};

/** columns and relationships of "registrant.Invitation" */
export type Registrant_InvitationEmailsArgs = {
    distinct_on?: Maybe<Array<Email_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Email_Order_By>>;
    where?: Maybe<Email_Bool_Exp>;
};

/** columns and relationships of "registrant.Invitation" */
export type Registrant_InvitationEmails_AggregateArgs = {
    distinct_on?: Maybe<Array<Email_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Email_Order_By>>;
    where?: Maybe<Email_Bool_Exp>;
};

/** aggregated selection of "registrant.Invitation" */
export type Registrant_Invitation_Aggregate = {
    __typename?: "registrant_Invitation_aggregate";
    aggregate?: Maybe<Registrant_Invitation_Aggregate_Fields>;
    nodes: Array<Registrant_Invitation>;
};

/** aggregate fields of "registrant.Invitation" */
export type Registrant_Invitation_Aggregate_Fields = {
    __typename?: "registrant_Invitation_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Registrant_Invitation_Max_Fields>;
    min?: Maybe<Registrant_Invitation_Min_Fields>;
};

/** aggregate fields of "registrant.Invitation" */
export type Registrant_Invitation_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Registrant_Invitation_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "registrant.Invitation" */
export type Registrant_Invitation_Aggregate_Order_By = {
    count?: Maybe<Order_By>;
    max?: Maybe<Registrant_Invitation_Max_Order_By>;
    min?: Maybe<Registrant_Invitation_Min_Order_By>;
};

/** input type for inserting array relation for remote table "registrant.Invitation" */
export type Registrant_Invitation_Arr_Rel_Insert_Input = {
    data: Array<Registrant_Invitation_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Registrant_Invitation_On_Conflict>;
};

/** Boolean expression to filter rows from the table "registrant.Invitation". All fields are combined with a logical 'AND'. */
export type Registrant_Invitation_Bool_Exp = {
    _and?: Maybe<Array<Registrant_Invitation_Bool_Exp>>;
    _not?: Maybe<Registrant_Invitation_Bool_Exp>;
    _or?: Maybe<Array<Registrant_Invitation_Bool_Exp>>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    confirmationCode?: Maybe<Uuid_Comparison_Exp>;
    createdAt?: Maybe<Timestamptz_Comparison_Exp>;
    emails?: Maybe<Email_Bool_Exp>;
    hash?: Maybe<String_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    inviteCode?: Maybe<Uuid_Comparison_Exp>;
    invitedEmailAddress?: Maybe<String_Comparison_Exp>;
    linkToUserId?: Maybe<String_Comparison_Exp>;
    registrant?: Maybe<Registrant_Registrant_Bool_Exp>;
    registrantId?: Maybe<Uuid_Comparison_Exp>;
    updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
    user?: Maybe<User_Bool_Exp>;
};

/** unique or primary key constraints on table "registrant.Invitation" */
export enum Registrant_Invitation_Constraint {
    /** unique or primary key constraint */
    InvitationConfirmationCodeKey = "Invitation_confirmationCode_key",
    /** unique or primary key constraint */
    InvitationInviteCodeKey = "Invitation_inviteCode_key",
    /** unique or primary key constraint */
    InvitationInvitedEmailAddressConferenceIdKey = "Invitation_invitedEmailAddress_conferenceId_key",
    /** unique or primary key constraint */
    InvitationPkey = "Invitation_pkey",
    /** unique or primary key constraint */
    InvitationRegistrantIdKey = "Invitation_registrantId_key",
}

/** input type for inserting data into table "registrant.Invitation" */
export type Registrant_Invitation_Insert_Input = {
    conferenceId?: Maybe<Scalars["uuid"]>;
    confirmationCode?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    emails?: Maybe<Email_Arr_Rel_Insert_Input>;
    id?: Maybe<Scalars["uuid"]>;
    inviteCode?: Maybe<Scalars["uuid"]>;
    invitedEmailAddress?: Maybe<Scalars["String"]>;
    linkToUserId?: Maybe<Scalars["String"]>;
    registrant?: Maybe<Registrant_Registrant_Obj_Rel_Insert_Input>;
    registrantId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    user?: Maybe<User_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Registrant_Invitation_Max_Fields = {
    __typename?: "registrant_Invitation_max_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    confirmationCode?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    inviteCode?: Maybe<Scalars["uuid"]>;
    invitedEmailAddress?: Maybe<Scalars["String"]>;
    linkToUserId?: Maybe<Scalars["String"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** order by max() on columns of table "registrant.Invitation" */
export type Registrant_Invitation_Max_Order_By = {
    conferenceId?: Maybe<Order_By>;
    confirmationCode?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    inviteCode?: Maybe<Order_By>;
    invitedEmailAddress?: Maybe<Order_By>;
    linkToUserId?: Maybe<Order_By>;
    registrantId?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Registrant_Invitation_Min_Fields = {
    __typename?: "registrant_Invitation_min_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    confirmationCode?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    inviteCode?: Maybe<Scalars["uuid"]>;
    invitedEmailAddress?: Maybe<Scalars["String"]>;
    linkToUserId?: Maybe<Scalars["String"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** order by min() on columns of table "registrant.Invitation" */
export type Registrant_Invitation_Min_Order_By = {
    conferenceId?: Maybe<Order_By>;
    confirmationCode?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    inviteCode?: Maybe<Order_By>;
    invitedEmailAddress?: Maybe<Order_By>;
    linkToUserId?: Maybe<Order_By>;
    registrantId?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** response of any mutation on the table "registrant.Invitation" */
export type Registrant_Invitation_Mutation_Response = {
    __typename?: "registrant_Invitation_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Registrant_Invitation>;
};

/** input type for inserting object relation for remote table "registrant.Invitation" */
export type Registrant_Invitation_Obj_Rel_Insert_Input = {
    data: Registrant_Invitation_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Registrant_Invitation_On_Conflict>;
};

/** on conflict condition type for table "registrant.Invitation" */
export type Registrant_Invitation_On_Conflict = {
    constraint: Registrant_Invitation_Constraint;
    update_columns?: Array<Registrant_Invitation_Update_Column>;
    where?: Maybe<Registrant_Invitation_Bool_Exp>;
};

/** Ordering options when selecting data from "registrant.Invitation". */
export type Registrant_Invitation_Order_By = {
    conferenceId?: Maybe<Order_By>;
    confirmationCode?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    emails_aggregate?: Maybe<Email_Aggregate_Order_By>;
    hash?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    inviteCode?: Maybe<Order_By>;
    invitedEmailAddress?: Maybe<Order_By>;
    linkToUserId?: Maybe<Order_By>;
    registrant?: Maybe<Registrant_Registrant_Order_By>;
    registrantId?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
    user?: Maybe<User_Order_By>;
};

/** primary key columns input for table: registrant_Invitation */
export type Registrant_Invitation_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "registrant.Invitation" */
export enum Registrant_Invitation_Select_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    ConfirmationCode = "confirmationCode",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Id = "id",
    /** column name */
    InviteCode = "inviteCode",
    /** column name */
    InvitedEmailAddress = "invitedEmailAddress",
    /** column name */
    LinkToUserId = "linkToUserId",
    /** column name */
    RegistrantId = "registrantId",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** input type for updating data in table "registrant.Invitation" */
export type Registrant_Invitation_Set_Input = {
    conferenceId?: Maybe<Scalars["uuid"]>;
    confirmationCode?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    inviteCode?: Maybe<Scalars["uuid"]>;
    invitedEmailAddress?: Maybe<Scalars["String"]>;
    linkToUserId?: Maybe<Scalars["String"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** update columns of table "registrant.Invitation" */
export enum Registrant_Invitation_Update_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    ConfirmationCode = "confirmationCode",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Id = "id",
    /** column name */
    InviteCode = "inviteCode",
    /** column name */
    InvitedEmailAddress = "invitedEmailAddress",
    /** column name */
    LinkToUserId = "linkToUserId",
    /** column name */
    RegistrantId = "registrantId",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** columns and relationships of "registrant.Profile" */
export type Registrant_Profile = {
    __typename?: "registrant_Profile";
    affiliation?: Maybe<Scalars["String"]>;
    affiliationURL?: Maybe<Scalars["String"]>;
    badges?: Maybe<Scalars["jsonb"]>;
    bio?: Maybe<Scalars["String"]>;
    country?: Maybe<Scalars["String"]>;
    created_at: Scalars["timestamptz"];
    github?: Maybe<Scalars["String"]>;
    hasBeenEdited: Scalars["Boolean"];
    photoS3BucketName?: Maybe<Scalars["String"]>;
    photoS3BucketRegion?: Maybe<Scalars["String"]>;
    photoS3ObjectName?: Maybe<Scalars["String"]>;
    photoURL_350x350?: Maybe<Scalars["String"]>;
    photoURL_50x50?: Maybe<Scalars["String"]>;
    pronouns?: Maybe<Scalars["jsonb"]>;
    /** An object relationship */
    registrant: Registrant_Registrant;
    registrantId: Scalars["uuid"];
    timezoneUTCOffset?: Maybe<Scalars["Float"]>;
    twitter?: Maybe<Scalars["String"]>;
    updated_at: Scalars["timestamptz"];
    website?: Maybe<Scalars["String"]>;
};

/** columns and relationships of "registrant.Profile" */
export type Registrant_ProfileBadgesArgs = {
    path?: Maybe<Scalars["String"]>;
};

/** columns and relationships of "registrant.Profile" */
export type Registrant_ProfilePronounsArgs = {
    path?: Maybe<Scalars["String"]>;
};

/** columns and relationships of "registrant.ProfileBadges" */
export type Registrant_ProfileBadges = {
    __typename?: "registrant_ProfileBadges";
    colour?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
    /** An object relationship */
    registrant?: Maybe<Registrant_Registrant>;
    registrantId?: Maybe<Scalars["uuid"]>;
};

/** aggregated selection of "registrant.ProfileBadges" */
export type Registrant_ProfileBadges_Aggregate = {
    __typename?: "registrant_ProfileBadges_aggregate";
    aggregate?: Maybe<Registrant_ProfileBadges_Aggregate_Fields>;
    nodes: Array<Registrant_ProfileBadges>;
};

/** aggregate fields of "registrant.ProfileBadges" */
export type Registrant_ProfileBadges_Aggregate_Fields = {
    __typename?: "registrant_ProfileBadges_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Registrant_ProfileBadges_Max_Fields>;
    min?: Maybe<Registrant_ProfileBadges_Min_Fields>;
};

/** aggregate fields of "registrant.ProfileBadges" */
export type Registrant_ProfileBadges_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Registrant_ProfileBadges_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "registrant.ProfileBadges" */
export type Registrant_ProfileBadges_Aggregate_Order_By = {
    count?: Maybe<Order_By>;
    max?: Maybe<Registrant_ProfileBadges_Max_Order_By>;
    min?: Maybe<Registrant_ProfileBadges_Min_Order_By>;
};

/** input type for inserting array relation for remote table "registrant.ProfileBadges" */
export type Registrant_ProfileBadges_Arr_Rel_Insert_Input = {
    data: Array<Registrant_ProfileBadges_Insert_Input>;
};

/** Boolean expression to filter rows from the table "registrant.ProfileBadges". All fields are combined with a logical 'AND'. */
export type Registrant_ProfileBadges_Bool_Exp = {
    _and?: Maybe<Array<Registrant_ProfileBadges_Bool_Exp>>;
    _not?: Maybe<Registrant_ProfileBadges_Bool_Exp>;
    _or?: Maybe<Array<Registrant_ProfileBadges_Bool_Exp>>;
    colour?: Maybe<String_Comparison_Exp>;
    name?: Maybe<String_Comparison_Exp>;
    registrant?: Maybe<Registrant_Registrant_Bool_Exp>;
    registrantId?: Maybe<Uuid_Comparison_Exp>;
};

/** input type for inserting data into table "registrant.ProfileBadges" */
export type Registrant_ProfileBadges_Insert_Input = {
    colour?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
    registrant?: Maybe<Registrant_Registrant_Obj_Rel_Insert_Input>;
    registrantId?: Maybe<Scalars["uuid"]>;
};

/** aggregate max on columns */
export type Registrant_ProfileBadges_Max_Fields = {
    __typename?: "registrant_ProfileBadges_max_fields";
    colour?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
};

/** order by max() on columns of table "registrant.ProfileBadges" */
export type Registrant_ProfileBadges_Max_Order_By = {
    colour?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    registrantId?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Registrant_ProfileBadges_Min_Fields = {
    __typename?: "registrant_ProfileBadges_min_fields";
    colour?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
};

/** order by min() on columns of table "registrant.ProfileBadges" */
export type Registrant_ProfileBadges_Min_Order_By = {
    colour?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    registrantId?: Maybe<Order_By>;
};

/** Ordering options when selecting data from "registrant.ProfileBadges". */
export type Registrant_ProfileBadges_Order_By = {
    colour?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    registrant?: Maybe<Registrant_Registrant_Order_By>;
    registrantId?: Maybe<Order_By>;
};

/** select columns of table "registrant.ProfileBadges" */
export enum Registrant_ProfileBadges_Select_Column {
    /** column name */
    Colour = "colour",
    /** column name */
    Name = "name",
    /** column name */
    RegistrantId = "registrantId",
}

/** aggregated selection of "registrant.Profile" */
export type Registrant_Profile_Aggregate = {
    __typename?: "registrant_Profile_aggregate";
    aggregate?: Maybe<Registrant_Profile_Aggregate_Fields>;
    nodes: Array<Registrant_Profile>;
};

/** aggregate fields of "registrant.Profile" */
export type Registrant_Profile_Aggregate_Fields = {
    __typename?: "registrant_Profile_aggregate_fields";
    avg?: Maybe<Registrant_Profile_Avg_Fields>;
    count: Scalars["Int"];
    max?: Maybe<Registrant_Profile_Max_Fields>;
    min?: Maybe<Registrant_Profile_Min_Fields>;
    stddev?: Maybe<Registrant_Profile_Stddev_Fields>;
    stddev_pop?: Maybe<Registrant_Profile_Stddev_Pop_Fields>;
    stddev_samp?: Maybe<Registrant_Profile_Stddev_Samp_Fields>;
    sum?: Maybe<Registrant_Profile_Sum_Fields>;
    var_pop?: Maybe<Registrant_Profile_Var_Pop_Fields>;
    var_samp?: Maybe<Registrant_Profile_Var_Samp_Fields>;
    variance?: Maybe<Registrant_Profile_Variance_Fields>;
};

/** aggregate fields of "registrant.Profile" */
export type Registrant_Profile_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Registrant_Profile_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** append existing jsonb value of filtered columns with new jsonb value */
export type Registrant_Profile_Append_Input = {
    badges?: Maybe<Scalars["jsonb"]>;
    pronouns?: Maybe<Scalars["jsonb"]>;
};

/** aggregate avg on columns */
export type Registrant_Profile_Avg_Fields = {
    __typename?: "registrant_Profile_avg_fields";
    timezoneUTCOffset?: Maybe<Scalars["Float"]>;
};

/** Boolean expression to filter rows from the table "registrant.Profile". All fields are combined with a logical 'AND'. */
export type Registrant_Profile_Bool_Exp = {
    _and?: Maybe<Array<Registrant_Profile_Bool_Exp>>;
    _not?: Maybe<Registrant_Profile_Bool_Exp>;
    _or?: Maybe<Array<Registrant_Profile_Bool_Exp>>;
    affiliation?: Maybe<String_Comparison_Exp>;
    affiliationURL?: Maybe<String_Comparison_Exp>;
    badges?: Maybe<Jsonb_Comparison_Exp>;
    bio?: Maybe<String_Comparison_Exp>;
    country?: Maybe<String_Comparison_Exp>;
    created_at?: Maybe<Timestamptz_Comparison_Exp>;
    github?: Maybe<String_Comparison_Exp>;
    hasBeenEdited?: Maybe<Boolean_Comparison_Exp>;
    photoS3BucketName?: Maybe<String_Comparison_Exp>;
    photoS3BucketRegion?: Maybe<String_Comparison_Exp>;
    photoS3ObjectName?: Maybe<String_Comparison_Exp>;
    photoURL_350x350?: Maybe<String_Comparison_Exp>;
    photoURL_50x50?: Maybe<String_Comparison_Exp>;
    pronouns?: Maybe<Jsonb_Comparison_Exp>;
    registrant?: Maybe<Registrant_Registrant_Bool_Exp>;
    registrantId?: Maybe<Uuid_Comparison_Exp>;
    timezoneUTCOffset?: Maybe<Float_Comparison_Exp>;
    twitter?: Maybe<String_Comparison_Exp>;
    updated_at?: Maybe<Timestamptz_Comparison_Exp>;
    website?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "registrant.Profile" */
export enum Registrant_Profile_Constraint {
    /** unique or primary key constraint */
    ProfilePkey = "Profile_pkey",
    /** unique or primary key constraint */
    ProfileRegistrantIdKey = "Profile_registrantId_key",
}

/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export type Registrant_Profile_Delete_At_Path_Input = {
    badges?: Maybe<Array<Scalars["String"]>>;
    pronouns?: Maybe<Array<Scalars["String"]>>;
};

/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
export type Registrant_Profile_Delete_Elem_Input = {
    badges?: Maybe<Scalars["Int"]>;
    pronouns?: Maybe<Scalars["Int"]>;
};

/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export type Registrant_Profile_Delete_Key_Input = {
    badges?: Maybe<Scalars["String"]>;
    pronouns?: Maybe<Scalars["String"]>;
};

/** input type for incrementing numeric columns in table "registrant.Profile" */
export type Registrant_Profile_Inc_Input = {
    timezoneUTCOffset?: Maybe<Scalars["Float"]>;
};

/** input type for inserting data into table "registrant.Profile" */
export type Registrant_Profile_Insert_Input = {
    affiliation?: Maybe<Scalars["String"]>;
    affiliationURL?: Maybe<Scalars["String"]>;
    badges?: Maybe<Scalars["jsonb"]>;
    bio?: Maybe<Scalars["String"]>;
    country?: Maybe<Scalars["String"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    github?: Maybe<Scalars["String"]>;
    hasBeenEdited?: Maybe<Scalars["Boolean"]>;
    photoS3BucketName?: Maybe<Scalars["String"]>;
    photoS3BucketRegion?: Maybe<Scalars["String"]>;
    photoS3ObjectName?: Maybe<Scalars["String"]>;
    photoURL_350x350?: Maybe<Scalars["String"]>;
    photoURL_50x50?: Maybe<Scalars["String"]>;
    pronouns?: Maybe<Scalars["jsonb"]>;
    registrant?: Maybe<Registrant_Registrant_Obj_Rel_Insert_Input>;
    registrantId?: Maybe<Scalars["uuid"]>;
    timezoneUTCOffset?: Maybe<Scalars["Float"]>;
    twitter?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
    website?: Maybe<Scalars["String"]>;
};

/** aggregate max on columns */
export type Registrant_Profile_Max_Fields = {
    __typename?: "registrant_Profile_max_fields";
    affiliation?: Maybe<Scalars["String"]>;
    affiliationURL?: Maybe<Scalars["String"]>;
    bio?: Maybe<Scalars["String"]>;
    country?: Maybe<Scalars["String"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    github?: Maybe<Scalars["String"]>;
    photoS3BucketName?: Maybe<Scalars["String"]>;
    photoS3BucketRegion?: Maybe<Scalars["String"]>;
    photoS3ObjectName?: Maybe<Scalars["String"]>;
    photoURL_350x350?: Maybe<Scalars["String"]>;
    photoURL_50x50?: Maybe<Scalars["String"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
    timezoneUTCOffset?: Maybe<Scalars["Float"]>;
    twitter?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
    website?: Maybe<Scalars["String"]>;
};

/** aggregate min on columns */
export type Registrant_Profile_Min_Fields = {
    __typename?: "registrant_Profile_min_fields";
    affiliation?: Maybe<Scalars["String"]>;
    affiliationURL?: Maybe<Scalars["String"]>;
    bio?: Maybe<Scalars["String"]>;
    country?: Maybe<Scalars["String"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    github?: Maybe<Scalars["String"]>;
    photoS3BucketName?: Maybe<Scalars["String"]>;
    photoS3BucketRegion?: Maybe<Scalars["String"]>;
    photoS3ObjectName?: Maybe<Scalars["String"]>;
    photoURL_350x350?: Maybe<Scalars["String"]>;
    photoURL_50x50?: Maybe<Scalars["String"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
    timezoneUTCOffset?: Maybe<Scalars["Float"]>;
    twitter?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
    website?: Maybe<Scalars["String"]>;
};

/** response of any mutation on the table "registrant.Profile" */
export type Registrant_Profile_Mutation_Response = {
    __typename?: "registrant_Profile_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Registrant_Profile>;
};

/** input type for inserting object relation for remote table "registrant.Profile" */
export type Registrant_Profile_Obj_Rel_Insert_Input = {
    data: Registrant_Profile_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Registrant_Profile_On_Conflict>;
};

/** on conflict condition type for table "registrant.Profile" */
export type Registrant_Profile_On_Conflict = {
    constraint: Registrant_Profile_Constraint;
    update_columns?: Array<Registrant_Profile_Update_Column>;
    where?: Maybe<Registrant_Profile_Bool_Exp>;
};

/** Ordering options when selecting data from "registrant.Profile". */
export type Registrant_Profile_Order_By = {
    affiliation?: Maybe<Order_By>;
    affiliationURL?: Maybe<Order_By>;
    badges?: Maybe<Order_By>;
    bio?: Maybe<Order_By>;
    country?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    github?: Maybe<Order_By>;
    hasBeenEdited?: Maybe<Order_By>;
    photoS3BucketName?: Maybe<Order_By>;
    photoS3BucketRegion?: Maybe<Order_By>;
    photoS3ObjectName?: Maybe<Order_By>;
    photoURL_350x350?: Maybe<Order_By>;
    photoURL_50x50?: Maybe<Order_By>;
    pronouns?: Maybe<Order_By>;
    registrant?: Maybe<Registrant_Registrant_Order_By>;
    registrantId?: Maybe<Order_By>;
    timezoneUTCOffset?: Maybe<Order_By>;
    twitter?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
    website?: Maybe<Order_By>;
};

/** primary key columns input for table: registrant_Profile */
export type Registrant_Profile_Pk_Columns_Input = {
    registrantId: Scalars["uuid"];
};

/** prepend existing jsonb value of filtered columns with new jsonb value */
export type Registrant_Profile_Prepend_Input = {
    badges?: Maybe<Scalars["jsonb"]>;
    pronouns?: Maybe<Scalars["jsonb"]>;
};

/** select columns of table "registrant.Profile" */
export enum Registrant_Profile_Select_Column {
    /** column name */
    Affiliation = "affiliation",
    /** column name */
    AffiliationUrl = "affiliationURL",
    /** column name */
    Badges = "badges",
    /** column name */
    Bio = "bio",
    /** column name */
    Country = "country",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    Github = "github",
    /** column name */
    HasBeenEdited = "hasBeenEdited",
    /** column name */
    PhotoS3BucketName = "photoS3BucketName",
    /** column name */
    PhotoS3BucketRegion = "photoS3BucketRegion",
    /** column name */
    PhotoS3ObjectName = "photoS3ObjectName",
    /** column name */
    PhotoUrl_350x350 = "photoURL_350x350",
    /** column name */
    PhotoUrl_50x50 = "photoURL_50x50",
    /** column name */
    Pronouns = "pronouns",
    /** column name */
    RegistrantId = "registrantId",
    /** column name */
    TimezoneUtcOffset = "timezoneUTCOffset",
    /** column name */
    Twitter = "twitter",
    /** column name */
    UpdatedAt = "updated_at",
    /** column name */
    Website = "website",
}

/** input type for updating data in table "registrant.Profile" */
export type Registrant_Profile_Set_Input = {
    affiliation?: Maybe<Scalars["String"]>;
    affiliationURL?: Maybe<Scalars["String"]>;
    badges?: Maybe<Scalars["jsonb"]>;
    bio?: Maybe<Scalars["String"]>;
    country?: Maybe<Scalars["String"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    github?: Maybe<Scalars["String"]>;
    hasBeenEdited?: Maybe<Scalars["Boolean"]>;
    photoS3BucketName?: Maybe<Scalars["String"]>;
    photoS3BucketRegion?: Maybe<Scalars["String"]>;
    photoS3ObjectName?: Maybe<Scalars["String"]>;
    photoURL_350x350?: Maybe<Scalars["String"]>;
    photoURL_50x50?: Maybe<Scalars["String"]>;
    pronouns?: Maybe<Scalars["jsonb"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
    timezoneUTCOffset?: Maybe<Scalars["Float"]>;
    twitter?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
    website?: Maybe<Scalars["String"]>;
};

/** aggregate stddev on columns */
export type Registrant_Profile_Stddev_Fields = {
    __typename?: "registrant_Profile_stddev_fields";
    timezoneUTCOffset?: Maybe<Scalars["Float"]>;
};

/** aggregate stddev_pop on columns */
export type Registrant_Profile_Stddev_Pop_Fields = {
    __typename?: "registrant_Profile_stddev_pop_fields";
    timezoneUTCOffset?: Maybe<Scalars["Float"]>;
};

/** aggregate stddev_samp on columns */
export type Registrant_Profile_Stddev_Samp_Fields = {
    __typename?: "registrant_Profile_stddev_samp_fields";
    timezoneUTCOffset?: Maybe<Scalars["Float"]>;
};

/** aggregate sum on columns */
export type Registrant_Profile_Sum_Fields = {
    __typename?: "registrant_Profile_sum_fields";
    timezoneUTCOffset?: Maybe<Scalars["Float"]>;
};

/** update columns of table "registrant.Profile" */
export enum Registrant_Profile_Update_Column {
    /** column name */
    Affiliation = "affiliation",
    /** column name */
    AffiliationUrl = "affiliationURL",
    /** column name */
    Badges = "badges",
    /** column name */
    Bio = "bio",
    /** column name */
    Country = "country",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    Github = "github",
    /** column name */
    HasBeenEdited = "hasBeenEdited",
    /** column name */
    PhotoS3BucketName = "photoS3BucketName",
    /** column name */
    PhotoS3BucketRegion = "photoS3BucketRegion",
    /** column name */
    PhotoS3ObjectName = "photoS3ObjectName",
    /** column name */
    PhotoUrl_350x350 = "photoURL_350x350",
    /** column name */
    PhotoUrl_50x50 = "photoURL_50x50",
    /** column name */
    Pronouns = "pronouns",
    /** column name */
    RegistrantId = "registrantId",
    /** column name */
    TimezoneUtcOffset = "timezoneUTCOffset",
    /** column name */
    Twitter = "twitter",
    /** column name */
    UpdatedAt = "updated_at",
    /** column name */
    Website = "website",
}

/** aggregate var_pop on columns */
export type Registrant_Profile_Var_Pop_Fields = {
    __typename?: "registrant_Profile_var_pop_fields";
    timezoneUTCOffset?: Maybe<Scalars["Float"]>;
};

/** aggregate var_samp on columns */
export type Registrant_Profile_Var_Samp_Fields = {
    __typename?: "registrant_Profile_var_samp_fields";
    timezoneUTCOffset?: Maybe<Scalars["Float"]>;
};

/** aggregate variance on columns */
export type Registrant_Profile_Variance_Fields = {
    __typename?: "registrant_Profile_variance_fields";
    timezoneUTCOffset?: Maybe<Scalars["Float"]>;
};

/** columns and relationships of "registrant.Registrant" */
export type Registrant_Registrant = {
    __typename?: "registrant_Registrant";
    /** An array relationship */
    badges: Array<Registrant_ProfileBadges>;
    /** An aggregate relationship */
    badges_aggregate: Registrant_ProfileBadges_Aggregate;
    /** An object relationship */
    conference: Conference_Conference;
    conferenceId: Scalars["uuid"];
    createdAt: Scalars["timestamptz"];
    displayName: Scalars["String"];
    /** An array relationship */
    groupRegistrants: Array<Permissions_GroupRegistrant>;
    /** An aggregate relationship */
    groupRegistrants_aggregate: Permissions_GroupRegistrant_Aggregate;
    id: Scalars["uuid"];
    /** An object relationship */
    invitation?: Maybe<Registrant_Invitation>;
    /** A computed field, executes function "registrant.HasBeenInvited" */
    inviteSent?: Maybe<Scalars["Boolean"]>;
    /** An object relationship */
    profile?: Maybe<Registrant_Profile>;
    /** An array relationship */
    programPeople: Array<Collection_ProgramPerson>;
    /** An aggregate relationship */
    programPeople_aggregate: Collection_ProgramPerson_Aggregate;
    /** An array relationship */
    roomParticipants: Array<Room_Participant>;
    /** An aggregate relationship */
    roomParticipants_aggregate: Room_Participant_Aggregate;
    updatedAt: Scalars["timestamptz"];
    /** An object relationship */
    user?: Maybe<User>;
    userId?: Maybe<Scalars["String"]>;
};

/** columns and relationships of "registrant.Registrant" */
export type Registrant_RegistrantBadgesArgs = {
    distinct_on?: Maybe<Array<Registrant_ProfileBadges_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Registrant_ProfileBadges_Order_By>>;
    where?: Maybe<Registrant_ProfileBadges_Bool_Exp>;
};

/** columns and relationships of "registrant.Registrant" */
export type Registrant_RegistrantBadges_AggregateArgs = {
    distinct_on?: Maybe<Array<Registrant_ProfileBadges_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Registrant_ProfileBadges_Order_By>>;
    where?: Maybe<Registrant_ProfileBadges_Bool_Exp>;
};

/** columns and relationships of "registrant.Registrant" */
export type Registrant_RegistrantGroupRegistrantsArgs = {
    distinct_on?: Maybe<Array<Permissions_GroupRegistrant_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_GroupRegistrant_Order_By>>;
    where?: Maybe<Permissions_GroupRegistrant_Bool_Exp>;
};

/** columns and relationships of "registrant.Registrant" */
export type Registrant_RegistrantGroupRegistrants_AggregateArgs = {
    distinct_on?: Maybe<Array<Permissions_GroupRegistrant_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_GroupRegistrant_Order_By>>;
    where?: Maybe<Permissions_GroupRegistrant_Bool_Exp>;
};

/** columns and relationships of "registrant.Registrant" */
export type Registrant_RegistrantProgramPeopleArgs = {
    distinct_on?: Maybe<Array<Collection_ProgramPerson_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Collection_ProgramPerson_Order_By>>;
    where?: Maybe<Collection_ProgramPerson_Bool_Exp>;
};

/** columns and relationships of "registrant.Registrant" */
export type Registrant_RegistrantProgramPeople_AggregateArgs = {
    distinct_on?: Maybe<Array<Collection_ProgramPerson_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Collection_ProgramPerson_Order_By>>;
    where?: Maybe<Collection_ProgramPerson_Bool_Exp>;
};

/** columns and relationships of "registrant.Registrant" */
export type Registrant_RegistrantRoomParticipantsArgs = {
    distinct_on?: Maybe<Array<Room_Participant_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_Participant_Order_By>>;
    where?: Maybe<Room_Participant_Bool_Exp>;
};

/** columns and relationships of "registrant.Registrant" */
export type Registrant_RegistrantRoomParticipants_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_Participant_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_Participant_Order_By>>;
    where?: Maybe<Room_Participant_Bool_Exp>;
};

/** aggregated selection of "registrant.Registrant" */
export type Registrant_Registrant_Aggregate = {
    __typename?: "registrant_Registrant_aggregate";
    aggregate?: Maybe<Registrant_Registrant_Aggregate_Fields>;
    nodes: Array<Registrant_Registrant>;
};

/** aggregate fields of "registrant.Registrant" */
export type Registrant_Registrant_Aggregate_Fields = {
    __typename?: "registrant_Registrant_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Registrant_Registrant_Max_Fields>;
    min?: Maybe<Registrant_Registrant_Min_Fields>;
};

/** aggregate fields of "registrant.Registrant" */
export type Registrant_Registrant_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Registrant_Registrant_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "registrant.Registrant" */
export type Registrant_Registrant_Aggregate_Order_By = {
    count?: Maybe<Order_By>;
    max?: Maybe<Registrant_Registrant_Max_Order_By>;
    min?: Maybe<Registrant_Registrant_Min_Order_By>;
};

/** input type for inserting array relation for remote table "registrant.Registrant" */
export type Registrant_Registrant_Arr_Rel_Insert_Input = {
    data: Array<Registrant_Registrant_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Registrant_Registrant_On_Conflict>;
};

/** Boolean expression to filter rows from the table "registrant.Registrant". All fields are combined with a logical 'AND'. */
export type Registrant_Registrant_Bool_Exp = {
    _and?: Maybe<Array<Registrant_Registrant_Bool_Exp>>;
    _not?: Maybe<Registrant_Registrant_Bool_Exp>;
    _or?: Maybe<Array<Registrant_Registrant_Bool_Exp>>;
    badges?: Maybe<Registrant_ProfileBadges_Bool_Exp>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    createdAt?: Maybe<Timestamptz_Comparison_Exp>;
    displayName?: Maybe<String_Comparison_Exp>;
    groupRegistrants?: Maybe<Permissions_GroupRegistrant_Bool_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    invitation?: Maybe<Registrant_Invitation_Bool_Exp>;
    inviteSent?: Maybe<Boolean_Comparison_Exp>;
    profile?: Maybe<Registrant_Profile_Bool_Exp>;
    programPeople?: Maybe<Collection_ProgramPerson_Bool_Exp>;
    roomParticipants?: Maybe<Room_Participant_Bool_Exp>;
    updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
    user?: Maybe<User_Bool_Exp>;
    userId?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "registrant.Registrant" */
export enum Registrant_Registrant_Constraint {
    /** unique or primary key constraint */
    RegistrantConferenceIdUserIdKey = "Registrant_conferenceId_userId_key",
    /** unique or primary key constraint */
    RegistrantPkey = "Registrant_pkey",
}

/** input type for inserting data into table "registrant.Registrant" */
export type Registrant_Registrant_Insert_Input = {
    badges?: Maybe<Registrant_ProfileBadges_Arr_Rel_Insert_Input>;
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    displayName?: Maybe<Scalars["String"]>;
    groupRegistrants?: Maybe<Permissions_GroupRegistrant_Arr_Rel_Insert_Input>;
    id?: Maybe<Scalars["uuid"]>;
    invitation?: Maybe<Registrant_Invitation_Obj_Rel_Insert_Input>;
    profile?: Maybe<Registrant_Profile_Obj_Rel_Insert_Input>;
    programPeople?: Maybe<Collection_ProgramPerson_Arr_Rel_Insert_Input>;
    roomParticipants?: Maybe<Room_Participant_Arr_Rel_Insert_Input>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    user?: Maybe<User_Obj_Rel_Insert_Input>;
    userId?: Maybe<Scalars["String"]>;
};

/** aggregate max on columns */
export type Registrant_Registrant_Max_Fields = {
    __typename?: "registrant_Registrant_max_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    displayName?: Maybe<Scalars["String"]>;
    id?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    userId?: Maybe<Scalars["String"]>;
};

/** order by max() on columns of table "registrant.Registrant" */
export type Registrant_Registrant_Max_Order_By = {
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    displayName?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
    userId?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Registrant_Registrant_Min_Fields = {
    __typename?: "registrant_Registrant_min_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    displayName?: Maybe<Scalars["String"]>;
    id?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    userId?: Maybe<Scalars["String"]>;
};

/** order by min() on columns of table "registrant.Registrant" */
export type Registrant_Registrant_Min_Order_By = {
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    displayName?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
    userId?: Maybe<Order_By>;
};

/** response of any mutation on the table "registrant.Registrant" */
export type Registrant_Registrant_Mutation_Response = {
    __typename?: "registrant_Registrant_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Registrant_Registrant>;
};

/** input type for inserting object relation for remote table "registrant.Registrant" */
export type Registrant_Registrant_Obj_Rel_Insert_Input = {
    data: Registrant_Registrant_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Registrant_Registrant_On_Conflict>;
};

/** on conflict condition type for table "registrant.Registrant" */
export type Registrant_Registrant_On_Conflict = {
    constraint: Registrant_Registrant_Constraint;
    update_columns?: Array<Registrant_Registrant_Update_Column>;
    where?: Maybe<Registrant_Registrant_Bool_Exp>;
};

/** Ordering options when selecting data from "registrant.Registrant". */
export type Registrant_Registrant_Order_By = {
    badges_aggregate?: Maybe<Registrant_ProfileBadges_Aggregate_Order_By>;
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    displayName?: Maybe<Order_By>;
    groupRegistrants_aggregate?: Maybe<Permissions_GroupRegistrant_Aggregate_Order_By>;
    id?: Maybe<Order_By>;
    invitation?: Maybe<Registrant_Invitation_Order_By>;
    inviteSent?: Maybe<Order_By>;
    profile?: Maybe<Registrant_Profile_Order_By>;
    programPeople_aggregate?: Maybe<Collection_ProgramPerson_Aggregate_Order_By>;
    roomParticipants_aggregate?: Maybe<Room_Participant_Aggregate_Order_By>;
    updatedAt?: Maybe<Order_By>;
    user?: Maybe<User_Order_By>;
    userId?: Maybe<Order_By>;
};

/** primary key columns input for table: registrant_Registrant */
export type Registrant_Registrant_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "registrant.Registrant" */
export enum Registrant_Registrant_Select_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    DisplayName = "displayName",
    /** column name */
    Id = "id",
    /** column name */
    UpdatedAt = "updatedAt",
    /** column name */
    UserId = "userId",
}

/** input type for updating data in table "registrant.Registrant" */
export type Registrant_Registrant_Set_Input = {
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    displayName?: Maybe<Scalars["String"]>;
    id?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    userId?: Maybe<Scalars["String"]>;
};

/** update columns of table "registrant.Registrant" */
export enum Registrant_Registrant_Update_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    DisplayName = "displayName",
    /** column name */
    Id = "id",
    /** column name */
    UpdatedAt = "updatedAt",
    /** column name */
    UserId = "userId",
}

/** columns and relationships of "room.Backend" */
export type Room_Backend = {
    __typename?: "room_Backend";
    description: Scalars["String"];
    name: Scalars["String"];
};

/** aggregated selection of "room.Backend" */
export type Room_Backend_Aggregate = {
    __typename?: "room_Backend_aggregate";
    aggregate?: Maybe<Room_Backend_Aggregate_Fields>;
    nodes: Array<Room_Backend>;
};

/** aggregate fields of "room.Backend" */
export type Room_Backend_Aggregate_Fields = {
    __typename?: "room_Backend_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Room_Backend_Max_Fields>;
    min?: Maybe<Room_Backend_Min_Fields>;
};

/** aggregate fields of "room.Backend" */
export type Room_Backend_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Room_Backend_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** Boolean expression to filter rows from the table "room.Backend". All fields are combined with a logical 'AND'. */
export type Room_Backend_Bool_Exp = {
    _and?: Maybe<Array<Room_Backend_Bool_Exp>>;
    _not?: Maybe<Room_Backend_Bool_Exp>;
    _or?: Maybe<Array<Room_Backend_Bool_Exp>>;
    description?: Maybe<String_Comparison_Exp>;
    name?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "room.Backend" */
export enum Room_Backend_Constraint {
    /** unique or primary key constraint */
    VideoRoomBackendPkey = "VideoRoomBackend_pkey",
}

export enum Room_Backend_Enum {
    /** AWS Chime SDK */
    Chime = "CHIME",
    /** Vonage Video API */
    Vonage = "VONAGE",
}

/** Boolean expression to compare columns of type "room_Backend_enum". All fields are combined with logical 'AND'. */
export type Room_Backend_Enum_Comparison_Exp = {
    _eq?: Maybe<Room_Backend_Enum>;
    _in?: Maybe<Array<Room_Backend_Enum>>;
    _is_null?: Maybe<Scalars["Boolean"]>;
    _neq?: Maybe<Room_Backend_Enum>;
    _nin?: Maybe<Array<Room_Backend_Enum>>;
};

/** input type for inserting data into table "room.Backend" */
export type Room_Backend_Insert_Input = {
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** aggregate max on columns */
export type Room_Backend_Max_Fields = {
    __typename?: "room_Backend_max_fields";
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** aggregate min on columns */
export type Room_Backend_Min_Fields = {
    __typename?: "room_Backend_min_fields";
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** response of any mutation on the table "room.Backend" */
export type Room_Backend_Mutation_Response = {
    __typename?: "room_Backend_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Room_Backend>;
};

/** on conflict condition type for table "room.Backend" */
export type Room_Backend_On_Conflict = {
    constraint: Room_Backend_Constraint;
    update_columns?: Array<Room_Backend_Update_Column>;
    where?: Maybe<Room_Backend_Bool_Exp>;
};

/** Ordering options when selecting data from "room.Backend". */
export type Room_Backend_Order_By = {
    description?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
};

/** primary key columns input for table: room_Backend */
export type Room_Backend_Pk_Columns_Input = {
    name: Scalars["String"];
};

/** select columns of table "room.Backend" */
export enum Room_Backend_Select_Column {
    /** column name */
    Description = "description",
    /** column name */
    Name = "name",
}

/** input type for updating data in table "room.Backend" */
export type Room_Backend_Set_Input = {
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** update columns of table "room.Backend" */
export enum Room_Backend_Update_Column {
    /** column name */
    Description = "description",
    /** column name */
    Name = "name",
}

/** columns and relationships of "room.ChimeMeeting" */
export type Room_ChimeMeeting = {
    __typename?: "room_ChimeMeeting";
    chimeMeetingData: Scalars["jsonb"];
    chimeMeetingId: Scalars["String"];
    /** An object relationship */
    conference?: Maybe<Conference_Conference>;
    conferenceId: Scalars["uuid"];
    createdAt: Scalars["timestamptz"];
    id: Scalars["uuid"];
    /** An object relationship */
    room?: Maybe<Room_Room>;
    roomId: Scalars["uuid"];
    updatedAt: Scalars["timestamptz"];
};

/** columns and relationships of "room.ChimeMeeting" */
export type Room_ChimeMeetingChimeMeetingDataArgs = {
    path?: Maybe<Scalars["String"]>;
};

/** aggregated selection of "room.ChimeMeeting" */
export type Room_ChimeMeeting_Aggregate = {
    __typename?: "room_ChimeMeeting_aggregate";
    aggregate?: Maybe<Room_ChimeMeeting_Aggregate_Fields>;
    nodes: Array<Room_ChimeMeeting>;
};

/** aggregate fields of "room.ChimeMeeting" */
export type Room_ChimeMeeting_Aggregate_Fields = {
    __typename?: "room_ChimeMeeting_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Room_ChimeMeeting_Max_Fields>;
    min?: Maybe<Room_ChimeMeeting_Min_Fields>;
};

/** aggregate fields of "room.ChimeMeeting" */
export type Room_ChimeMeeting_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Room_ChimeMeeting_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** append existing jsonb value of filtered columns with new jsonb value */
export type Room_ChimeMeeting_Append_Input = {
    chimeMeetingData?: Maybe<Scalars["jsonb"]>;
};

/** Boolean expression to filter rows from the table "room.ChimeMeeting". All fields are combined with a logical 'AND'. */
export type Room_ChimeMeeting_Bool_Exp = {
    _and?: Maybe<Array<Room_ChimeMeeting_Bool_Exp>>;
    _not?: Maybe<Room_ChimeMeeting_Bool_Exp>;
    _or?: Maybe<Array<Room_ChimeMeeting_Bool_Exp>>;
    chimeMeetingData?: Maybe<Jsonb_Comparison_Exp>;
    chimeMeetingId?: Maybe<String_Comparison_Exp>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    createdAt?: Maybe<Timestamptz_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    room?: Maybe<Room_Room_Bool_Exp>;
    roomId?: Maybe<Uuid_Comparison_Exp>;
    updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "room.ChimeMeeting" */
export enum Room_ChimeMeeting_Constraint {
    /** unique or primary key constraint */
    ChimeMeetingPkey = "ChimeMeeting_pkey",
    /** unique or primary key constraint */
    ChimeMeetingRoomIdKey = "ChimeMeeting_roomId_key",
}

/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export type Room_ChimeMeeting_Delete_At_Path_Input = {
    chimeMeetingData?: Maybe<Array<Scalars["String"]>>;
};

/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
export type Room_ChimeMeeting_Delete_Elem_Input = {
    chimeMeetingData?: Maybe<Scalars["Int"]>;
};

/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export type Room_ChimeMeeting_Delete_Key_Input = {
    chimeMeetingData?: Maybe<Scalars["String"]>;
};

/** input type for inserting data into table "room.ChimeMeeting" */
export type Room_ChimeMeeting_Insert_Input = {
    chimeMeetingData?: Maybe<Scalars["jsonb"]>;
    chimeMeetingId?: Maybe<Scalars["String"]>;
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    room?: Maybe<Room_Room_Obj_Rel_Insert_Input>;
    roomId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Room_ChimeMeeting_Max_Fields = {
    __typename?: "room_ChimeMeeting_max_fields";
    chimeMeetingId?: Maybe<Scalars["String"]>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    roomId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate min on columns */
export type Room_ChimeMeeting_Min_Fields = {
    __typename?: "room_ChimeMeeting_min_fields";
    chimeMeetingId?: Maybe<Scalars["String"]>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    roomId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** response of any mutation on the table "room.ChimeMeeting" */
export type Room_ChimeMeeting_Mutation_Response = {
    __typename?: "room_ChimeMeeting_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Room_ChimeMeeting>;
};

/** input type for inserting object relation for remote table "room.ChimeMeeting" */
export type Room_ChimeMeeting_Obj_Rel_Insert_Input = {
    data: Room_ChimeMeeting_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Room_ChimeMeeting_On_Conflict>;
};

/** on conflict condition type for table "room.ChimeMeeting" */
export type Room_ChimeMeeting_On_Conflict = {
    constraint: Room_ChimeMeeting_Constraint;
    update_columns?: Array<Room_ChimeMeeting_Update_Column>;
    where?: Maybe<Room_ChimeMeeting_Bool_Exp>;
};

/** Ordering options when selecting data from "room.ChimeMeeting". */
export type Room_ChimeMeeting_Order_By = {
    chimeMeetingData?: Maybe<Order_By>;
    chimeMeetingId?: Maybe<Order_By>;
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    room?: Maybe<Room_Room_Order_By>;
    roomId?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** primary key columns input for table: room_ChimeMeeting */
export type Room_ChimeMeeting_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** prepend existing jsonb value of filtered columns with new jsonb value */
export type Room_ChimeMeeting_Prepend_Input = {
    chimeMeetingData?: Maybe<Scalars["jsonb"]>;
};

/** select columns of table "room.ChimeMeeting" */
export enum Room_ChimeMeeting_Select_Column {
    /** column name */
    ChimeMeetingData = "chimeMeetingData",
    /** column name */
    ChimeMeetingId = "chimeMeetingId",
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Id = "id",
    /** column name */
    RoomId = "roomId",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** input type for updating data in table "room.ChimeMeeting" */
export type Room_ChimeMeeting_Set_Input = {
    chimeMeetingData?: Maybe<Scalars["jsonb"]>;
    chimeMeetingId?: Maybe<Scalars["String"]>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    roomId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** update columns of table "room.ChimeMeeting" */
export enum Room_ChimeMeeting_Update_Column {
    /** column name */
    ChimeMeetingData = "chimeMeetingData",
    /** column name */
    ChimeMeetingId = "chimeMeetingId",
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Id = "id",
    /** column name */
    RoomId = "roomId",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** columns and relationships of "room.LivestreamDurations" */
export type Room_LivestreamDurations = {
    __typename?: "room_LivestreamDurations";
    /** An object relationship */
    conference?: Maybe<Conference_Conference>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    /** An object relationship */
    room?: Maybe<Room_Room>;
    roomId?: Maybe<Scalars["uuid"]>;
    sum?: Maybe<Scalars["bigint"]>;
};

/** aggregated selection of "room.LivestreamDurations" */
export type Room_LivestreamDurations_Aggregate = {
    __typename?: "room_LivestreamDurations_aggregate";
    aggregate?: Maybe<Room_LivestreamDurations_Aggregate_Fields>;
    nodes: Array<Room_LivestreamDurations>;
};

/** aggregate fields of "room.LivestreamDurations" */
export type Room_LivestreamDurations_Aggregate_Fields = {
    __typename?: "room_LivestreamDurations_aggregate_fields";
    avg?: Maybe<Room_LivestreamDurations_Avg_Fields>;
    count: Scalars["Int"];
    max?: Maybe<Room_LivestreamDurations_Max_Fields>;
    min?: Maybe<Room_LivestreamDurations_Min_Fields>;
    stddev?: Maybe<Room_LivestreamDurations_Stddev_Fields>;
    stddev_pop?: Maybe<Room_LivestreamDurations_Stddev_Pop_Fields>;
    stddev_samp?: Maybe<Room_LivestreamDurations_Stddev_Samp_Fields>;
    sum?: Maybe<Room_LivestreamDurations_Sum_Fields>;
    var_pop?: Maybe<Room_LivestreamDurations_Var_Pop_Fields>;
    var_samp?: Maybe<Room_LivestreamDurations_Var_Samp_Fields>;
    variance?: Maybe<Room_LivestreamDurations_Variance_Fields>;
};

/** aggregate fields of "room.LivestreamDurations" */
export type Room_LivestreamDurations_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Room_LivestreamDurations_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** aggregate avg on columns */
export type Room_LivestreamDurations_Avg_Fields = {
    __typename?: "room_LivestreamDurations_avg_fields";
    sum?: Maybe<Scalars["Float"]>;
};

/** Boolean expression to filter rows from the table "room.LivestreamDurations". All fields are combined with a logical 'AND'. */
export type Room_LivestreamDurations_Bool_Exp = {
    _and?: Maybe<Array<Room_LivestreamDurations_Bool_Exp>>;
    _not?: Maybe<Room_LivestreamDurations_Bool_Exp>;
    _or?: Maybe<Array<Room_LivestreamDurations_Bool_Exp>>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    room?: Maybe<Room_Room_Bool_Exp>;
    roomId?: Maybe<Uuid_Comparison_Exp>;
    sum?: Maybe<Bigint_Comparison_Exp>;
};

/** input type for inserting data into table "room.LivestreamDurations" */
export type Room_LivestreamDurations_Insert_Input = {
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    room?: Maybe<Room_Room_Obj_Rel_Insert_Input>;
    roomId?: Maybe<Scalars["uuid"]>;
    sum?: Maybe<Scalars["bigint"]>;
};

/** aggregate max on columns */
export type Room_LivestreamDurations_Max_Fields = {
    __typename?: "room_LivestreamDurations_max_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    roomId?: Maybe<Scalars["uuid"]>;
    sum?: Maybe<Scalars["bigint"]>;
};

/** aggregate min on columns */
export type Room_LivestreamDurations_Min_Fields = {
    __typename?: "room_LivestreamDurations_min_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    roomId?: Maybe<Scalars["uuid"]>;
    sum?: Maybe<Scalars["bigint"]>;
};

/** input type for inserting object relation for remote table "room.LivestreamDurations" */
export type Room_LivestreamDurations_Obj_Rel_Insert_Input = {
    data: Room_LivestreamDurations_Insert_Input;
};

/** Ordering options when selecting data from "room.LivestreamDurations". */
export type Room_LivestreamDurations_Order_By = {
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    room?: Maybe<Room_Room_Order_By>;
    roomId?: Maybe<Order_By>;
    sum?: Maybe<Order_By>;
};

/** select columns of table "room.LivestreamDurations" */
export enum Room_LivestreamDurations_Select_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    RoomId = "roomId",
    /** column name */
    Sum = "sum",
}

/** aggregate stddev on columns */
export type Room_LivestreamDurations_Stddev_Fields = {
    __typename?: "room_LivestreamDurations_stddev_fields";
    sum?: Maybe<Scalars["Float"]>;
};

/** aggregate stddev_pop on columns */
export type Room_LivestreamDurations_Stddev_Pop_Fields = {
    __typename?: "room_LivestreamDurations_stddev_pop_fields";
    sum?: Maybe<Scalars["Float"]>;
};

/** aggregate stddev_samp on columns */
export type Room_LivestreamDurations_Stddev_Samp_Fields = {
    __typename?: "room_LivestreamDurations_stddev_samp_fields";
    sum?: Maybe<Scalars["Float"]>;
};

/** aggregate sum on columns */
export type Room_LivestreamDurations_Sum_Fields = {
    __typename?: "room_LivestreamDurations_sum_fields";
    sum?: Maybe<Scalars["bigint"]>;
};

/** aggregate var_pop on columns */
export type Room_LivestreamDurations_Var_Pop_Fields = {
    __typename?: "room_LivestreamDurations_var_pop_fields";
    sum?: Maybe<Scalars["Float"]>;
};

/** aggregate var_samp on columns */
export type Room_LivestreamDurations_Var_Samp_Fields = {
    __typename?: "room_LivestreamDurations_var_samp_fields";
    sum?: Maybe<Scalars["Float"]>;
};

/** aggregate variance on columns */
export type Room_LivestreamDurations_Variance_Fields = {
    __typename?: "room_LivestreamDurations_variance_fields";
    sum?: Maybe<Scalars["Float"]>;
};

/** columns and relationships of "room.ManagementMode" */
export type Room_ManagementMode = {
    __typename?: "room_ManagementMode";
    description: Scalars["String"];
    name: Scalars["String"];
};

/** aggregated selection of "room.ManagementMode" */
export type Room_ManagementMode_Aggregate = {
    __typename?: "room_ManagementMode_aggregate";
    aggregate?: Maybe<Room_ManagementMode_Aggregate_Fields>;
    nodes: Array<Room_ManagementMode>;
};

/** aggregate fields of "room.ManagementMode" */
export type Room_ManagementMode_Aggregate_Fields = {
    __typename?: "room_ManagementMode_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Room_ManagementMode_Max_Fields>;
    min?: Maybe<Room_ManagementMode_Min_Fields>;
};

/** aggregate fields of "room.ManagementMode" */
export type Room_ManagementMode_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Room_ManagementMode_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** Boolean expression to filter rows from the table "room.ManagementMode". All fields are combined with a logical 'AND'. */
export type Room_ManagementMode_Bool_Exp = {
    _and?: Maybe<Array<Room_ManagementMode_Bool_Exp>>;
    _not?: Maybe<Room_ManagementMode_Bool_Exp>;
    _or?: Maybe<Array<Room_ManagementMode_Bool_Exp>>;
    description?: Maybe<String_Comparison_Exp>;
    name?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "room.ManagementMode" */
export enum Room_ManagementMode_Constraint {
    /** unique or primary key constraint */
    ManagementModePkey = "ManagementMode_pkey",
}

export enum Room_ManagementMode_Enum {
    /** Room is a direct message between two attendees. No new attendees can be added. */
    Dm = "DM",
    /** Room access is automatically controlled by the system. */
    Managed = "MANAGED",
    /** Room is only visible to attendees who have been given access. New attendees can be added. */
    Private = "PRIVATE",
    /** Room is visible to all attendees at the conference. */
    Public = "PUBLIC",
}

/** Boolean expression to compare columns of type "room_ManagementMode_enum". All fields are combined with logical 'AND'. */
export type Room_ManagementMode_Enum_Comparison_Exp = {
    _eq?: Maybe<Room_ManagementMode_Enum>;
    _in?: Maybe<Array<Room_ManagementMode_Enum>>;
    _is_null?: Maybe<Scalars["Boolean"]>;
    _neq?: Maybe<Room_ManagementMode_Enum>;
    _nin?: Maybe<Array<Room_ManagementMode_Enum>>;
};

/** input type for inserting data into table "room.ManagementMode" */
export type Room_ManagementMode_Insert_Input = {
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** aggregate max on columns */
export type Room_ManagementMode_Max_Fields = {
    __typename?: "room_ManagementMode_max_fields";
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** aggregate min on columns */
export type Room_ManagementMode_Min_Fields = {
    __typename?: "room_ManagementMode_min_fields";
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** response of any mutation on the table "room.ManagementMode" */
export type Room_ManagementMode_Mutation_Response = {
    __typename?: "room_ManagementMode_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Room_ManagementMode>;
};

/** input type for inserting object relation for remote table "room.ManagementMode" */
export type Room_ManagementMode_Obj_Rel_Insert_Input = {
    data: Room_ManagementMode_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Room_ManagementMode_On_Conflict>;
};

/** on conflict condition type for table "room.ManagementMode" */
export type Room_ManagementMode_On_Conflict = {
    constraint: Room_ManagementMode_Constraint;
    update_columns?: Array<Room_ManagementMode_Update_Column>;
    where?: Maybe<Room_ManagementMode_Bool_Exp>;
};

/** Ordering options when selecting data from "room.ManagementMode". */
export type Room_ManagementMode_Order_By = {
    description?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
};

/** primary key columns input for table: room_ManagementMode */
export type Room_ManagementMode_Pk_Columns_Input = {
    name: Scalars["String"];
};

/** select columns of table "room.ManagementMode" */
export enum Room_ManagementMode_Select_Column {
    /** column name */
    Description = "description",
    /** column name */
    Name = "name",
}

/** input type for updating data in table "room.ManagementMode" */
export type Room_ManagementMode_Set_Input = {
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** update columns of table "room.ManagementMode" */
export enum Room_ManagementMode_Update_Column {
    /** column name */
    Description = "description",
    /** column name */
    Name = "name",
}

/** columns and relationships of "room.Mode" */
export type Room_Mode = {
    __typename?: "room_Mode";
    description: Scalars["String"];
    /** An array relationship */
    events: Array<Schedule_Event>;
    /** An aggregate relationship */
    events_aggregate: Schedule_Event_Aggregate;
    name: Scalars["String"];
    /** An array relationship */
    rooms: Array<Room_Room>;
    /** An aggregate relationship */
    rooms_aggregate: Room_Room_Aggregate;
};

/** columns and relationships of "room.Mode" */
export type Room_ModeEventsArgs = {
    distinct_on?: Maybe<Array<Schedule_Event_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_Event_Order_By>>;
    where?: Maybe<Schedule_Event_Bool_Exp>;
};

/** columns and relationships of "room.Mode" */
export type Room_ModeEvents_AggregateArgs = {
    distinct_on?: Maybe<Array<Schedule_Event_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_Event_Order_By>>;
    where?: Maybe<Schedule_Event_Bool_Exp>;
};

/** columns and relationships of "room.Mode" */
export type Room_ModeRoomsArgs = {
    distinct_on?: Maybe<Array<Room_Room_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_Room_Order_By>>;
    where?: Maybe<Room_Room_Bool_Exp>;
};

/** columns and relationships of "room.Mode" */
export type Room_ModeRooms_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_Room_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_Room_Order_By>>;
    where?: Maybe<Room_Room_Bool_Exp>;
};

/** aggregated selection of "room.Mode" */
export type Room_Mode_Aggregate = {
    __typename?: "room_Mode_aggregate";
    aggregate?: Maybe<Room_Mode_Aggregate_Fields>;
    nodes: Array<Room_Mode>;
};

/** aggregate fields of "room.Mode" */
export type Room_Mode_Aggregate_Fields = {
    __typename?: "room_Mode_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Room_Mode_Max_Fields>;
    min?: Maybe<Room_Mode_Min_Fields>;
};

/** aggregate fields of "room.Mode" */
export type Room_Mode_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Room_Mode_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** Boolean expression to filter rows from the table "room.Mode". All fields are combined with a logical 'AND'. */
export type Room_Mode_Bool_Exp = {
    _and?: Maybe<Array<Room_Mode_Bool_Exp>>;
    _not?: Maybe<Room_Mode_Bool_Exp>;
    _or?: Maybe<Array<Room_Mode_Bool_Exp>>;
    description?: Maybe<String_Comparison_Exp>;
    events?: Maybe<Schedule_Event_Bool_Exp>;
    name?: Maybe<String_Comparison_Exp>;
    rooms?: Maybe<Room_Room_Bool_Exp>;
};

/** unique or primary key constraints on table "room.Mode" */
export enum Room_Mode_Constraint {
    /** unique or primary key constraint */
    ModePkey = "Mode_pkey",
}

export enum Room_Mode_Enum {
    /** An exhibition hall. */
    Exhibition = "EXHIBITION",
    /** An empty room. */
    None = "NONE",
    /** Pre-recorded content should be played out to attendees. The breakout and Q&A video chats may also be available to relevant users. */
    Prerecorded = "PRERECORDED",
    /** A live presentation should be delivered in the Q&A video chat. The breakout video chat may also be available to relevant users. */
    Presentation = "PRESENTATION",
    /** A live Q&A/discussion should be delivered in the Q&A video chat. The breakout video chat may also be available to relevant users. */
    QAndA = "Q_AND_A",
    /** A shuffle queue. */
    Shuffle = "SHUFFLE",
    /** Users may participate in the general video chat. */
    VideoChat = "VIDEO_CHAT",
    /** An ordinary video from either a VIDEO_URL content element or a video uploaded to Clowdr. */
    VideoPlayer = "VIDEO_PLAYER",
    /** Event is taking place in a Zoom room. */
    Zoom = "ZOOM",
}

/** Boolean expression to compare columns of type "room_Mode_enum". All fields are combined with logical 'AND'. */
export type Room_Mode_Enum_Comparison_Exp = {
    _eq?: Maybe<Room_Mode_Enum>;
    _in?: Maybe<Array<Room_Mode_Enum>>;
    _is_null?: Maybe<Scalars["Boolean"]>;
    _neq?: Maybe<Room_Mode_Enum>;
    _nin?: Maybe<Array<Room_Mode_Enum>>;
};

/** input type for inserting data into table "room.Mode" */
export type Room_Mode_Insert_Input = {
    description?: Maybe<Scalars["String"]>;
    events?: Maybe<Schedule_Event_Arr_Rel_Insert_Input>;
    name?: Maybe<Scalars["String"]>;
    rooms?: Maybe<Room_Room_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Room_Mode_Max_Fields = {
    __typename?: "room_Mode_max_fields";
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** aggregate min on columns */
export type Room_Mode_Min_Fields = {
    __typename?: "room_Mode_min_fields";
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** response of any mutation on the table "room.Mode" */
export type Room_Mode_Mutation_Response = {
    __typename?: "room_Mode_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Room_Mode>;
};

/** input type for inserting object relation for remote table "room.Mode" */
export type Room_Mode_Obj_Rel_Insert_Input = {
    data: Room_Mode_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Room_Mode_On_Conflict>;
};

/** on conflict condition type for table "room.Mode" */
export type Room_Mode_On_Conflict = {
    constraint: Room_Mode_Constraint;
    update_columns?: Array<Room_Mode_Update_Column>;
    where?: Maybe<Room_Mode_Bool_Exp>;
};

/** Ordering options when selecting data from "room.Mode". */
export type Room_Mode_Order_By = {
    description?: Maybe<Order_By>;
    events_aggregate?: Maybe<Schedule_Event_Aggregate_Order_By>;
    name?: Maybe<Order_By>;
    rooms_aggregate?: Maybe<Room_Room_Aggregate_Order_By>;
};

/** primary key columns input for table: room_Mode */
export type Room_Mode_Pk_Columns_Input = {
    name: Scalars["String"];
};

/** select columns of table "room.Mode" */
export enum Room_Mode_Select_Column {
    /** column name */
    Description = "description",
    /** column name */
    Name = "name",
}

/** input type for updating data in table "room.Mode" */
export type Room_Mode_Set_Input = {
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** update columns of table "room.Mode" */
export enum Room_Mode_Update_Column {
    /** column name */
    Description = "description",
    /** column name */
    Name = "name",
}

/** columns and relationships of "room.Participant" */
export type Room_Participant = {
    __typename?: "room_Participant";
    chimeRegistrantId?: Maybe<Scalars["String"]>;
    /** An object relationship */
    conference: Conference_Conference;
    conferenceId: Scalars["uuid"];
    createdAt: Scalars["timestamptz"];
    id: Scalars["uuid"];
    /** An object relationship */
    registrant: Registrant_Registrant;
    registrantId: Scalars["uuid"];
    /** An object relationship */
    room: Room_Room;
    roomId: Scalars["uuid"];
    updatedAt: Scalars["timestamptz"];
    vonageConnectionId?: Maybe<Scalars["String"]>;
};

/** aggregated selection of "room.Participant" */
export type Room_Participant_Aggregate = {
    __typename?: "room_Participant_aggregate";
    aggregate?: Maybe<Room_Participant_Aggregate_Fields>;
    nodes: Array<Room_Participant>;
};

/** aggregate fields of "room.Participant" */
export type Room_Participant_Aggregate_Fields = {
    __typename?: "room_Participant_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Room_Participant_Max_Fields>;
    min?: Maybe<Room_Participant_Min_Fields>;
};

/** aggregate fields of "room.Participant" */
export type Room_Participant_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Room_Participant_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "room.Participant" */
export type Room_Participant_Aggregate_Order_By = {
    count?: Maybe<Order_By>;
    max?: Maybe<Room_Participant_Max_Order_By>;
    min?: Maybe<Room_Participant_Min_Order_By>;
};

/** input type for inserting array relation for remote table "room.Participant" */
export type Room_Participant_Arr_Rel_Insert_Input = {
    data: Array<Room_Participant_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Room_Participant_On_Conflict>;
};

/** Boolean expression to filter rows from the table "room.Participant". All fields are combined with a logical 'AND'. */
export type Room_Participant_Bool_Exp = {
    _and?: Maybe<Array<Room_Participant_Bool_Exp>>;
    _not?: Maybe<Room_Participant_Bool_Exp>;
    _or?: Maybe<Array<Room_Participant_Bool_Exp>>;
    chimeRegistrantId?: Maybe<String_Comparison_Exp>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    createdAt?: Maybe<Timestamptz_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    registrant?: Maybe<Registrant_Registrant_Bool_Exp>;
    registrantId?: Maybe<Uuid_Comparison_Exp>;
    room?: Maybe<Room_Room_Bool_Exp>;
    roomId?: Maybe<Uuid_Comparison_Exp>;
    updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
    vonageConnectionId?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "room.Participant" */
export enum Room_Participant_Constraint {
    /** unique or primary key constraint */
    ParticipantPkey = "Participant_pkey",
    /** unique or primary key constraint */
    ParticipantRoomIdRegistrantIdKey = "Participant_roomId_registrantId_key",
}

/** input type for inserting data into table "room.Participant" */
export type Room_Participant_Insert_Input = {
    chimeRegistrantId?: Maybe<Scalars["String"]>;
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    registrant?: Maybe<Registrant_Registrant_Obj_Rel_Insert_Input>;
    registrantId?: Maybe<Scalars["uuid"]>;
    room?: Maybe<Room_Room_Obj_Rel_Insert_Input>;
    roomId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    vonageConnectionId?: Maybe<Scalars["String"]>;
};

/** aggregate max on columns */
export type Room_Participant_Max_Fields = {
    __typename?: "room_Participant_max_fields";
    chimeRegistrantId?: Maybe<Scalars["String"]>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
    roomId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    vonageConnectionId?: Maybe<Scalars["String"]>;
};

/** order by max() on columns of table "room.Participant" */
export type Room_Participant_Max_Order_By = {
    chimeRegistrantId?: Maybe<Order_By>;
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    registrantId?: Maybe<Order_By>;
    roomId?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
    vonageConnectionId?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Room_Participant_Min_Fields = {
    __typename?: "room_Participant_min_fields";
    chimeRegistrantId?: Maybe<Scalars["String"]>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
    roomId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    vonageConnectionId?: Maybe<Scalars["String"]>;
};

/** order by min() on columns of table "room.Participant" */
export type Room_Participant_Min_Order_By = {
    chimeRegistrantId?: Maybe<Order_By>;
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    registrantId?: Maybe<Order_By>;
    roomId?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
    vonageConnectionId?: Maybe<Order_By>;
};

/** response of any mutation on the table "room.Participant" */
export type Room_Participant_Mutation_Response = {
    __typename?: "room_Participant_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Room_Participant>;
};

/** on conflict condition type for table "room.Participant" */
export type Room_Participant_On_Conflict = {
    constraint: Room_Participant_Constraint;
    update_columns?: Array<Room_Participant_Update_Column>;
    where?: Maybe<Room_Participant_Bool_Exp>;
};

/** Ordering options when selecting data from "room.Participant". */
export type Room_Participant_Order_By = {
    chimeRegistrantId?: Maybe<Order_By>;
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    registrant?: Maybe<Registrant_Registrant_Order_By>;
    registrantId?: Maybe<Order_By>;
    room?: Maybe<Room_Room_Order_By>;
    roomId?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
    vonageConnectionId?: Maybe<Order_By>;
};

/** primary key columns input for table: room_Participant */
export type Room_Participant_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "room.Participant" */
export enum Room_Participant_Select_Column {
    /** column name */
    ChimeRegistrantId = "chimeRegistrantId",
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Id = "id",
    /** column name */
    RegistrantId = "registrantId",
    /** column name */
    RoomId = "roomId",
    /** column name */
    UpdatedAt = "updatedAt",
    /** column name */
    VonageConnectionId = "vonageConnectionId",
}

/** input type for updating data in table "room.Participant" */
export type Room_Participant_Set_Input = {
    chimeRegistrantId?: Maybe<Scalars["String"]>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
    roomId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    vonageConnectionId?: Maybe<Scalars["String"]>;
};

/** update columns of table "room.Participant" */
export enum Room_Participant_Update_Column {
    /** column name */
    ChimeRegistrantId = "chimeRegistrantId",
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Id = "id",
    /** column name */
    RegistrantId = "registrantId",
    /** column name */
    RoomId = "roomId",
    /** column name */
    UpdatedAt = "updatedAt",
    /** column name */
    VonageConnectionId = "vonageConnectionId",
}

/** columns and relationships of "room.PersonRole" */
export type Room_PersonRole = {
    __typename?: "room_PersonRole";
    description: Scalars["String"];
    name: Scalars["String"];
};

/** aggregated selection of "room.PersonRole" */
export type Room_PersonRole_Aggregate = {
    __typename?: "room_PersonRole_aggregate";
    aggregate?: Maybe<Room_PersonRole_Aggregate_Fields>;
    nodes: Array<Room_PersonRole>;
};

/** aggregate fields of "room.PersonRole" */
export type Room_PersonRole_Aggregate_Fields = {
    __typename?: "room_PersonRole_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Room_PersonRole_Max_Fields>;
    min?: Maybe<Room_PersonRole_Min_Fields>;
};

/** aggregate fields of "room.PersonRole" */
export type Room_PersonRole_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Room_PersonRole_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** Boolean expression to filter rows from the table "room.PersonRole". All fields are combined with a logical 'AND'. */
export type Room_PersonRole_Bool_Exp = {
    _and?: Maybe<Array<Room_PersonRole_Bool_Exp>>;
    _not?: Maybe<Room_PersonRole_Bool_Exp>;
    _or?: Maybe<Array<Room_PersonRole_Bool_Exp>>;
    description?: Maybe<String_Comparison_Exp>;
    name?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "room.PersonRole" */
export enum Room_PersonRole_Constraint {
    /** unique or primary key constraint */
    PersonRolePkey = "PersonRole_pkey",
}

export enum Room_PersonRole_Enum {
    /** User has control over the room. */
    Admin = "ADMIN",
    /** User can participate in the room. */
    Participant = "PARTICIPANT",
}

/** Boolean expression to compare columns of type "room_PersonRole_enum". All fields are combined with logical 'AND'. */
export type Room_PersonRole_Enum_Comparison_Exp = {
    _eq?: Maybe<Room_PersonRole_Enum>;
    _in?: Maybe<Array<Room_PersonRole_Enum>>;
    _is_null?: Maybe<Scalars["Boolean"]>;
    _neq?: Maybe<Room_PersonRole_Enum>;
    _nin?: Maybe<Array<Room_PersonRole_Enum>>;
};

/** input type for inserting data into table "room.PersonRole" */
export type Room_PersonRole_Insert_Input = {
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** aggregate max on columns */
export type Room_PersonRole_Max_Fields = {
    __typename?: "room_PersonRole_max_fields";
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** aggregate min on columns */
export type Room_PersonRole_Min_Fields = {
    __typename?: "room_PersonRole_min_fields";
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** response of any mutation on the table "room.PersonRole" */
export type Room_PersonRole_Mutation_Response = {
    __typename?: "room_PersonRole_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Room_PersonRole>;
};

/** input type for inserting object relation for remote table "room.PersonRole" */
export type Room_PersonRole_Obj_Rel_Insert_Input = {
    data: Room_PersonRole_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Room_PersonRole_On_Conflict>;
};

/** on conflict condition type for table "room.PersonRole" */
export type Room_PersonRole_On_Conflict = {
    constraint: Room_PersonRole_Constraint;
    update_columns?: Array<Room_PersonRole_Update_Column>;
    where?: Maybe<Room_PersonRole_Bool_Exp>;
};

/** Ordering options when selecting data from "room.PersonRole". */
export type Room_PersonRole_Order_By = {
    description?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
};

/** primary key columns input for table: room_PersonRole */
export type Room_PersonRole_Pk_Columns_Input = {
    name: Scalars["String"];
};

/** select columns of table "room.PersonRole" */
export enum Room_PersonRole_Select_Column {
    /** column name */
    Description = "description",
    /** column name */
    Name = "name",
}

/** input type for updating data in table "room.PersonRole" */
export type Room_PersonRole_Set_Input = {
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** update columns of table "room.PersonRole" */
export enum Room_PersonRole_Update_Column {
    /** column name */
    Description = "description",
    /** column name */
    Name = "name",
}

/** columns and relationships of "room.Room" */
export type Room_Room = {
    __typename?: "room_Room";
    backendName?: Maybe<Room_Backend_Enum>;
    capacity?: Maybe<Scalars["Int"]>;
    /** An object relationship */
    channelStack?: Maybe<Video_ChannelStack>;
    /** An array relationship */
    channelStackCreateJobs: Array<Job_Queues_ChannelStackCreateJob>;
    /** An aggregate relationship */
    channelStackCreateJobs_aggregate: Job_Queues_ChannelStackCreateJob_Aggregate;
    /** An object relationship */
    chat?: Maybe<Chat_Chat>;
    chatId?: Maybe<Scalars["uuid"]>;
    /** An object relationship */
    chimeMeeting?: Maybe<Room_ChimeMeeting>;
    colour: Scalars["String"];
    /** An object relationship */
    conference: Conference_Conference;
    conferenceId: Scalars["uuid"];
    created_at: Scalars["timestamptz"];
    /** An object relationship */
    currentMode: Room_Mode;
    currentModeName: Room_Mode_Enum;
    /** An array relationship */
    events: Array<Schedule_Event>;
    /** An aggregate relationship */
    events_aggregate: Schedule_Event_Aggregate;
    id: Scalars["uuid"];
    /** A computed field, executes function "room.IsProgramRoom" */
    isProgramRoom?: Maybe<Scalars["Boolean"]>;
    /** An object relationship */
    livestreamDuration?: Maybe<Room_LivestreamDurations>;
    /** An object relationship */
    managementMode: Room_ManagementMode;
    managementModeName: Room_ManagementMode_Enum;
    name: Scalars["String"];
    /** An object relationship */
    originatingData?: Maybe<Conference_OriginatingData>;
    originatingDataId?: Maybe<Scalars["uuid"]>;
    /** An object relationship */
    originatingEvent?: Maybe<Schedule_Event>;
    originatingEventId?: Maybe<Scalars["uuid"]>;
    /** An object relationship */
    originatingItem?: Maybe<Content_Item>;
    originatingItemId?: Maybe<Scalars["uuid"]>;
    /** An array relationship */
    participants: Array<Room_Participant>;
    /** An aggregate relationship */
    participants_aggregate: Room_Participant_Aggregate;
    /** An array relationship */
    presenceCounts: Array<Analytics_RoomPresence>;
    /** An aggregate relationship */
    presenceCounts_aggregate: Analytics_RoomPresence_Aggregate;
    priority: Scalars["Int"];
    publicVonageSessionId?: Maybe<Scalars["String"]>;
    /** An array relationship */
    roomPeople: Array<Room_RoomPerson>;
    /** An aggregate relationship */
    roomPeople_aggregate: Room_RoomPerson_Aggregate;
    /** An array relationship */
    shuffleRooms: Array<Room_ShuffleRoom>;
    /** An aggregate relationship */
    shuffleRooms_aggregate: Room_ShuffleRoom_Aggregate;
    /** An array relationship */
    stats: Array<Analytics_RoomStats>;
    /** An aggregate relationship */
    stats_aggregate: Analytics_RoomStats_Aggregate;
    updated_at: Scalars["timestamptz"];
};

/** columns and relationships of "room.Room" */
export type Room_RoomChannelStackCreateJobsArgs = {
    distinct_on?: Maybe<Array<Job_Queues_ChannelStackCreateJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_ChannelStackCreateJob_Order_By>>;
    where?: Maybe<Job_Queues_ChannelStackCreateJob_Bool_Exp>;
};

/** columns and relationships of "room.Room" */
export type Room_RoomChannelStackCreateJobs_AggregateArgs = {
    distinct_on?: Maybe<Array<Job_Queues_ChannelStackCreateJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_ChannelStackCreateJob_Order_By>>;
    where?: Maybe<Job_Queues_ChannelStackCreateJob_Bool_Exp>;
};

/** columns and relationships of "room.Room" */
export type Room_RoomEventsArgs = {
    distinct_on?: Maybe<Array<Schedule_Event_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_Event_Order_By>>;
    where?: Maybe<Schedule_Event_Bool_Exp>;
};

/** columns and relationships of "room.Room" */
export type Room_RoomEvents_AggregateArgs = {
    distinct_on?: Maybe<Array<Schedule_Event_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_Event_Order_By>>;
    where?: Maybe<Schedule_Event_Bool_Exp>;
};

/** columns and relationships of "room.Room" */
export type Room_RoomParticipantsArgs = {
    distinct_on?: Maybe<Array<Room_Participant_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_Participant_Order_By>>;
    where?: Maybe<Room_Participant_Bool_Exp>;
};

/** columns and relationships of "room.Room" */
export type Room_RoomParticipants_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_Participant_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_Participant_Order_By>>;
    where?: Maybe<Room_Participant_Bool_Exp>;
};

/** columns and relationships of "room.Room" */
export type Room_RoomPresenceCountsArgs = {
    distinct_on?: Maybe<Array<Analytics_RoomPresence_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_RoomPresence_Order_By>>;
    where?: Maybe<Analytics_RoomPresence_Bool_Exp>;
};

/** columns and relationships of "room.Room" */
export type Room_RoomPresenceCounts_AggregateArgs = {
    distinct_on?: Maybe<Array<Analytics_RoomPresence_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_RoomPresence_Order_By>>;
    where?: Maybe<Analytics_RoomPresence_Bool_Exp>;
};

/** columns and relationships of "room.Room" */
export type Room_RoomRoomPeopleArgs = {
    distinct_on?: Maybe<Array<Room_RoomPerson_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_RoomPerson_Order_By>>;
    where?: Maybe<Room_RoomPerson_Bool_Exp>;
};

/** columns and relationships of "room.Room" */
export type Room_RoomRoomPeople_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_RoomPerson_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_RoomPerson_Order_By>>;
    where?: Maybe<Room_RoomPerson_Bool_Exp>;
};

/** columns and relationships of "room.Room" */
export type Room_RoomShuffleRoomsArgs = {
    distinct_on?: Maybe<Array<Room_ShuffleRoom_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_ShuffleRoom_Order_By>>;
    where?: Maybe<Room_ShuffleRoom_Bool_Exp>;
};

/** columns and relationships of "room.Room" */
export type Room_RoomShuffleRooms_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_ShuffleRoom_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_ShuffleRoom_Order_By>>;
    where?: Maybe<Room_ShuffleRoom_Bool_Exp>;
};

/** columns and relationships of "room.Room" */
export type Room_RoomStatsArgs = {
    distinct_on?: Maybe<Array<Analytics_RoomStats_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_RoomStats_Order_By>>;
    where?: Maybe<Analytics_RoomStats_Bool_Exp>;
};

/** columns and relationships of "room.Room" */
export type Room_RoomStats_AggregateArgs = {
    distinct_on?: Maybe<Array<Analytics_RoomStats_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_RoomStats_Order_By>>;
    where?: Maybe<Analytics_RoomStats_Bool_Exp>;
};

/** columns and relationships of "room.RoomPerson" */
export type Room_RoomPerson = {
    __typename?: "room_RoomPerson";
    createdAt: Scalars["timestamptz"];
    id: Scalars["uuid"];
    /** An object relationship */
    personRole: Room_PersonRole;
    personRoleName: Room_PersonRole_Enum;
    /** An object relationship */
    registrant: Registrant_Registrant;
    registrantId: Scalars["uuid"];
    /** An object relationship */
    room: Room_Room;
    roomId: Scalars["uuid"];
    updatedAt: Scalars["timestamptz"];
};

/** aggregated selection of "room.RoomPerson" */
export type Room_RoomPerson_Aggregate = {
    __typename?: "room_RoomPerson_aggregate";
    aggregate?: Maybe<Room_RoomPerson_Aggregate_Fields>;
    nodes: Array<Room_RoomPerson>;
};

/** aggregate fields of "room.RoomPerson" */
export type Room_RoomPerson_Aggregate_Fields = {
    __typename?: "room_RoomPerson_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Room_RoomPerson_Max_Fields>;
    min?: Maybe<Room_RoomPerson_Min_Fields>;
};

/** aggregate fields of "room.RoomPerson" */
export type Room_RoomPerson_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Room_RoomPerson_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "room.RoomPerson" */
export type Room_RoomPerson_Aggregate_Order_By = {
    count?: Maybe<Order_By>;
    max?: Maybe<Room_RoomPerson_Max_Order_By>;
    min?: Maybe<Room_RoomPerson_Min_Order_By>;
};

/** input type for inserting array relation for remote table "room.RoomPerson" */
export type Room_RoomPerson_Arr_Rel_Insert_Input = {
    data: Array<Room_RoomPerson_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Room_RoomPerson_On_Conflict>;
};

/** Boolean expression to filter rows from the table "room.RoomPerson". All fields are combined with a logical 'AND'. */
export type Room_RoomPerson_Bool_Exp = {
    _and?: Maybe<Array<Room_RoomPerson_Bool_Exp>>;
    _not?: Maybe<Room_RoomPerson_Bool_Exp>;
    _or?: Maybe<Array<Room_RoomPerson_Bool_Exp>>;
    createdAt?: Maybe<Timestamptz_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    personRole?: Maybe<Room_PersonRole_Bool_Exp>;
    personRoleName?: Maybe<Room_PersonRole_Enum_Comparison_Exp>;
    registrant?: Maybe<Registrant_Registrant_Bool_Exp>;
    registrantId?: Maybe<Uuid_Comparison_Exp>;
    room?: Maybe<Room_Room_Bool_Exp>;
    roomId?: Maybe<Uuid_Comparison_Exp>;
    updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "room.RoomPerson" */
export enum Room_RoomPerson_Constraint {
    /** unique or primary key constraint */
    RoomPersonPkey = "RoomPerson_pkey",
    /** unique or primary key constraint */
    RoomPersonRegistrantIdRoomIdKey = "RoomPerson_registrantId_roomId_key",
}

/** input type for inserting data into table "room.RoomPerson" */
export type Room_RoomPerson_Insert_Input = {
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    personRole?: Maybe<Room_PersonRole_Obj_Rel_Insert_Input>;
    personRoleName?: Maybe<Room_PersonRole_Enum>;
    registrant?: Maybe<Registrant_Registrant_Obj_Rel_Insert_Input>;
    registrantId?: Maybe<Scalars["uuid"]>;
    room?: Maybe<Room_Room_Obj_Rel_Insert_Input>;
    roomId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Room_RoomPerson_Max_Fields = {
    __typename?: "room_RoomPerson_max_fields";
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
    roomId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** order by max() on columns of table "room.RoomPerson" */
export type Room_RoomPerson_Max_Order_By = {
    createdAt?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    registrantId?: Maybe<Order_By>;
    roomId?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Room_RoomPerson_Min_Fields = {
    __typename?: "room_RoomPerson_min_fields";
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
    roomId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** order by min() on columns of table "room.RoomPerson" */
export type Room_RoomPerson_Min_Order_By = {
    createdAt?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    registrantId?: Maybe<Order_By>;
    roomId?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** response of any mutation on the table "room.RoomPerson" */
export type Room_RoomPerson_Mutation_Response = {
    __typename?: "room_RoomPerson_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Room_RoomPerson>;
};

/** on conflict condition type for table "room.RoomPerson" */
export type Room_RoomPerson_On_Conflict = {
    constraint: Room_RoomPerson_Constraint;
    update_columns?: Array<Room_RoomPerson_Update_Column>;
    where?: Maybe<Room_RoomPerson_Bool_Exp>;
};

/** Ordering options when selecting data from "room.RoomPerson". */
export type Room_RoomPerson_Order_By = {
    createdAt?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    personRole?: Maybe<Room_PersonRole_Order_By>;
    personRoleName?: Maybe<Order_By>;
    registrant?: Maybe<Registrant_Registrant_Order_By>;
    registrantId?: Maybe<Order_By>;
    room?: Maybe<Room_Room_Order_By>;
    roomId?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** primary key columns input for table: room_RoomPerson */
export type Room_RoomPerson_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "room.RoomPerson" */
export enum Room_RoomPerson_Select_Column {
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Id = "id",
    /** column name */
    PersonRoleName = "personRoleName",
    /** column name */
    RegistrantId = "registrantId",
    /** column name */
    RoomId = "roomId",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** input type for updating data in table "room.RoomPerson" */
export type Room_RoomPerson_Set_Input = {
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    personRoleName?: Maybe<Room_PersonRole_Enum>;
    registrantId?: Maybe<Scalars["uuid"]>;
    roomId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** update columns of table "room.RoomPerson" */
export enum Room_RoomPerson_Update_Column {
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Id = "id",
    /** column name */
    PersonRoleName = "personRoleName",
    /** column name */
    RegistrantId = "registrantId",
    /** column name */
    RoomId = "roomId",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** aggregated selection of "room.Room" */
export type Room_Room_Aggregate = {
    __typename?: "room_Room_aggregate";
    aggregate?: Maybe<Room_Room_Aggregate_Fields>;
    nodes: Array<Room_Room>;
};

/** aggregate fields of "room.Room" */
export type Room_Room_Aggregate_Fields = {
    __typename?: "room_Room_aggregate_fields";
    avg?: Maybe<Room_Room_Avg_Fields>;
    count: Scalars["Int"];
    max?: Maybe<Room_Room_Max_Fields>;
    min?: Maybe<Room_Room_Min_Fields>;
    stddev?: Maybe<Room_Room_Stddev_Fields>;
    stddev_pop?: Maybe<Room_Room_Stddev_Pop_Fields>;
    stddev_samp?: Maybe<Room_Room_Stddev_Samp_Fields>;
    sum?: Maybe<Room_Room_Sum_Fields>;
    var_pop?: Maybe<Room_Room_Var_Pop_Fields>;
    var_samp?: Maybe<Room_Room_Var_Samp_Fields>;
    variance?: Maybe<Room_Room_Variance_Fields>;
};

/** aggregate fields of "room.Room" */
export type Room_Room_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Room_Room_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "room.Room" */
export type Room_Room_Aggregate_Order_By = {
    avg?: Maybe<Room_Room_Avg_Order_By>;
    count?: Maybe<Order_By>;
    max?: Maybe<Room_Room_Max_Order_By>;
    min?: Maybe<Room_Room_Min_Order_By>;
    stddev?: Maybe<Room_Room_Stddev_Order_By>;
    stddev_pop?: Maybe<Room_Room_Stddev_Pop_Order_By>;
    stddev_samp?: Maybe<Room_Room_Stddev_Samp_Order_By>;
    sum?: Maybe<Room_Room_Sum_Order_By>;
    var_pop?: Maybe<Room_Room_Var_Pop_Order_By>;
    var_samp?: Maybe<Room_Room_Var_Samp_Order_By>;
    variance?: Maybe<Room_Room_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "room.Room" */
export type Room_Room_Arr_Rel_Insert_Input = {
    data: Array<Room_Room_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Room_Room_On_Conflict>;
};

/** aggregate avg on columns */
export type Room_Room_Avg_Fields = {
    __typename?: "room_Room_avg_fields";
    capacity?: Maybe<Scalars["Float"]>;
    priority?: Maybe<Scalars["Float"]>;
};

/** order by avg() on columns of table "room.Room" */
export type Room_Room_Avg_Order_By = {
    capacity?: Maybe<Order_By>;
    priority?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "room.Room". All fields are combined with a logical 'AND'. */
export type Room_Room_Bool_Exp = {
    _and?: Maybe<Array<Room_Room_Bool_Exp>>;
    _not?: Maybe<Room_Room_Bool_Exp>;
    _or?: Maybe<Array<Room_Room_Bool_Exp>>;
    backendName?: Maybe<Room_Backend_Enum_Comparison_Exp>;
    capacity?: Maybe<Int_Comparison_Exp>;
    channelStack?: Maybe<Video_ChannelStack_Bool_Exp>;
    channelStackCreateJobs?: Maybe<Job_Queues_ChannelStackCreateJob_Bool_Exp>;
    chat?: Maybe<Chat_Chat_Bool_Exp>;
    chatId?: Maybe<Uuid_Comparison_Exp>;
    chimeMeeting?: Maybe<Room_ChimeMeeting_Bool_Exp>;
    colour?: Maybe<String_Comparison_Exp>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    created_at?: Maybe<Timestamptz_Comparison_Exp>;
    currentMode?: Maybe<Room_Mode_Bool_Exp>;
    currentModeName?: Maybe<Room_Mode_Enum_Comparison_Exp>;
    events?: Maybe<Schedule_Event_Bool_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    isProgramRoom?: Maybe<Boolean_Comparison_Exp>;
    livestreamDuration?: Maybe<Room_LivestreamDurations_Bool_Exp>;
    managementMode?: Maybe<Room_ManagementMode_Bool_Exp>;
    managementModeName?: Maybe<Room_ManagementMode_Enum_Comparison_Exp>;
    name?: Maybe<String_Comparison_Exp>;
    originatingData?: Maybe<Conference_OriginatingData_Bool_Exp>;
    originatingDataId?: Maybe<Uuid_Comparison_Exp>;
    originatingEvent?: Maybe<Schedule_Event_Bool_Exp>;
    originatingEventId?: Maybe<Uuid_Comparison_Exp>;
    originatingItem?: Maybe<Content_Item_Bool_Exp>;
    originatingItemId?: Maybe<Uuid_Comparison_Exp>;
    participants?: Maybe<Room_Participant_Bool_Exp>;
    presenceCounts?: Maybe<Analytics_RoomPresence_Bool_Exp>;
    priority?: Maybe<Int_Comparison_Exp>;
    publicVonageSessionId?: Maybe<String_Comparison_Exp>;
    roomPeople?: Maybe<Room_RoomPerson_Bool_Exp>;
    shuffleRooms?: Maybe<Room_ShuffleRoom_Bool_Exp>;
    stats?: Maybe<Analytics_RoomStats_Bool_Exp>;
    updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "room.Room" */
export enum Room_Room_Constraint {
    /** unique or primary key constraint */
    RoomOriginatingEventIdKey = "Room_originatingEventId_key",
    /** unique or primary key constraint */
    RoomPkey = "Room_pkey",
}

/** input type for incrementing numeric columns in table "room.Room" */
export type Room_Room_Inc_Input = {
    capacity?: Maybe<Scalars["Int"]>;
    priority?: Maybe<Scalars["Int"]>;
};

/** input type for inserting data into table "room.Room" */
export type Room_Room_Insert_Input = {
    backendName?: Maybe<Room_Backend_Enum>;
    capacity?: Maybe<Scalars["Int"]>;
    channelStack?: Maybe<Video_ChannelStack_Obj_Rel_Insert_Input>;
    channelStackCreateJobs?: Maybe<Job_Queues_ChannelStackCreateJob_Arr_Rel_Insert_Input>;
    chat?: Maybe<Chat_Chat_Obj_Rel_Insert_Input>;
    chatId?: Maybe<Scalars["uuid"]>;
    chimeMeeting?: Maybe<Room_ChimeMeeting_Obj_Rel_Insert_Input>;
    colour?: Maybe<Scalars["String"]>;
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    currentMode?: Maybe<Room_Mode_Obj_Rel_Insert_Input>;
    currentModeName?: Maybe<Room_Mode_Enum>;
    events?: Maybe<Schedule_Event_Arr_Rel_Insert_Input>;
    id?: Maybe<Scalars["uuid"]>;
    livestreamDuration?: Maybe<Room_LivestreamDurations_Obj_Rel_Insert_Input>;
    managementMode?: Maybe<Room_ManagementMode_Obj_Rel_Insert_Input>;
    managementModeName?: Maybe<Room_ManagementMode_Enum>;
    name?: Maybe<Scalars["String"]>;
    originatingData?: Maybe<Conference_OriginatingData_Obj_Rel_Insert_Input>;
    originatingDataId?: Maybe<Scalars["uuid"]>;
    originatingEvent?: Maybe<Schedule_Event_Obj_Rel_Insert_Input>;
    originatingEventId?: Maybe<Scalars["uuid"]>;
    originatingItem?: Maybe<Content_Item_Obj_Rel_Insert_Input>;
    originatingItemId?: Maybe<Scalars["uuid"]>;
    participants?: Maybe<Room_Participant_Arr_Rel_Insert_Input>;
    presenceCounts?: Maybe<Analytics_RoomPresence_Arr_Rel_Insert_Input>;
    priority?: Maybe<Scalars["Int"]>;
    publicVonageSessionId?: Maybe<Scalars["String"]>;
    roomPeople?: Maybe<Room_RoomPerson_Arr_Rel_Insert_Input>;
    shuffleRooms?: Maybe<Room_ShuffleRoom_Arr_Rel_Insert_Input>;
    stats?: Maybe<Analytics_RoomStats_Arr_Rel_Insert_Input>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Room_Room_Max_Fields = {
    __typename?: "room_Room_max_fields";
    capacity?: Maybe<Scalars["Int"]>;
    chatId?: Maybe<Scalars["uuid"]>;
    colour?: Maybe<Scalars["String"]>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
    originatingDataId?: Maybe<Scalars["uuid"]>;
    originatingEventId?: Maybe<Scalars["uuid"]>;
    originatingItemId?: Maybe<Scalars["uuid"]>;
    priority?: Maybe<Scalars["Int"]>;
    publicVonageSessionId?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** order by max() on columns of table "room.Room" */
export type Room_Room_Max_Order_By = {
    capacity?: Maybe<Order_By>;
    chatId?: Maybe<Order_By>;
    colour?: Maybe<Order_By>;
    conferenceId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    originatingDataId?: Maybe<Order_By>;
    originatingEventId?: Maybe<Order_By>;
    originatingItemId?: Maybe<Order_By>;
    priority?: Maybe<Order_By>;
    publicVonageSessionId?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Room_Room_Min_Fields = {
    __typename?: "room_Room_min_fields";
    capacity?: Maybe<Scalars["Int"]>;
    chatId?: Maybe<Scalars["uuid"]>;
    colour?: Maybe<Scalars["String"]>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
    originatingDataId?: Maybe<Scalars["uuid"]>;
    originatingEventId?: Maybe<Scalars["uuid"]>;
    originatingItemId?: Maybe<Scalars["uuid"]>;
    priority?: Maybe<Scalars["Int"]>;
    publicVonageSessionId?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** order by min() on columns of table "room.Room" */
export type Room_Room_Min_Order_By = {
    capacity?: Maybe<Order_By>;
    chatId?: Maybe<Order_By>;
    colour?: Maybe<Order_By>;
    conferenceId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    originatingDataId?: Maybe<Order_By>;
    originatingEventId?: Maybe<Order_By>;
    originatingItemId?: Maybe<Order_By>;
    priority?: Maybe<Order_By>;
    publicVonageSessionId?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** response of any mutation on the table "room.Room" */
export type Room_Room_Mutation_Response = {
    __typename?: "room_Room_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Room_Room>;
};

/** input type for inserting object relation for remote table "room.Room" */
export type Room_Room_Obj_Rel_Insert_Input = {
    data: Room_Room_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Room_Room_On_Conflict>;
};

/** on conflict condition type for table "room.Room" */
export type Room_Room_On_Conflict = {
    constraint: Room_Room_Constraint;
    update_columns?: Array<Room_Room_Update_Column>;
    where?: Maybe<Room_Room_Bool_Exp>;
};

/** Ordering options when selecting data from "room.Room". */
export type Room_Room_Order_By = {
    backendName?: Maybe<Order_By>;
    capacity?: Maybe<Order_By>;
    channelStack?: Maybe<Video_ChannelStack_Order_By>;
    channelStackCreateJobs_aggregate?: Maybe<Job_Queues_ChannelStackCreateJob_Aggregate_Order_By>;
    chat?: Maybe<Chat_Chat_Order_By>;
    chatId?: Maybe<Order_By>;
    chimeMeeting?: Maybe<Room_ChimeMeeting_Order_By>;
    colour?: Maybe<Order_By>;
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    currentMode?: Maybe<Room_Mode_Order_By>;
    currentModeName?: Maybe<Order_By>;
    events_aggregate?: Maybe<Schedule_Event_Aggregate_Order_By>;
    id?: Maybe<Order_By>;
    isProgramRoom?: Maybe<Order_By>;
    livestreamDuration?: Maybe<Room_LivestreamDurations_Order_By>;
    managementMode?: Maybe<Room_ManagementMode_Order_By>;
    managementModeName?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    originatingData?: Maybe<Conference_OriginatingData_Order_By>;
    originatingDataId?: Maybe<Order_By>;
    originatingEvent?: Maybe<Schedule_Event_Order_By>;
    originatingEventId?: Maybe<Order_By>;
    originatingItem?: Maybe<Content_Item_Order_By>;
    originatingItemId?: Maybe<Order_By>;
    participants_aggregate?: Maybe<Room_Participant_Aggregate_Order_By>;
    presenceCounts_aggregate?: Maybe<Analytics_RoomPresence_Aggregate_Order_By>;
    priority?: Maybe<Order_By>;
    publicVonageSessionId?: Maybe<Order_By>;
    roomPeople_aggregate?: Maybe<Room_RoomPerson_Aggregate_Order_By>;
    shuffleRooms_aggregate?: Maybe<Room_ShuffleRoom_Aggregate_Order_By>;
    stats_aggregate?: Maybe<Analytics_RoomStats_Aggregate_Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** primary key columns input for table: room_Room */
export type Room_Room_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "room.Room" */
export enum Room_Room_Select_Column {
    /** column name */
    BackendName = "backendName",
    /** column name */
    Capacity = "capacity",
    /** column name */
    ChatId = "chatId",
    /** column name */
    Colour = "colour",
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    CurrentModeName = "currentModeName",
    /** column name */
    Id = "id",
    /** column name */
    ManagementModeName = "managementModeName",
    /** column name */
    Name = "name",
    /** column name */
    OriginatingDataId = "originatingDataId",
    /** column name */
    OriginatingEventId = "originatingEventId",
    /** column name */
    OriginatingItemId = "originatingItemId",
    /** column name */
    Priority = "priority",
    /** column name */
    PublicVonageSessionId = "publicVonageSessionId",
    /** column name */
    UpdatedAt = "updated_at",
}

/** input type for updating data in table "room.Room" */
export type Room_Room_Set_Input = {
    backendName?: Maybe<Room_Backend_Enum>;
    capacity?: Maybe<Scalars["Int"]>;
    chatId?: Maybe<Scalars["uuid"]>;
    colour?: Maybe<Scalars["String"]>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    currentModeName?: Maybe<Room_Mode_Enum>;
    id?: Maybe<Scalars["uuid"]>;
    managementModeName?: Maybe<Room_ManagementMode_Enum>;
    name?: Maybe<Scalars["String"]>;
    originatingDataId?: Maybe<Scalars["uuid"]>;
    originatingEventId?: Maybe<Scalars["uuid"]>;
    originatingItemId?: Maybe<Scalars["uuid"]>;
    priority?: Maybe<Scalars["Int"]>;
    publicVonageSessionId?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate stddev on columns */
export type Room_Room_Stddev_Fields = {
    __typename?: "room_Room_stddev_fields";
    capacity?: Maybe<Scalars["Float"]>;
    priority?: Maybe<Scalars["Float"]>;
};

/** order by stddev() on columns of table "room.Room" */
export type Room_Room_Stddev_Order_By = {
    capacity?: Maybe<Order_By>;
    priority?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Room_Room_Stddev_Pop_Fields = {
    __typename?: "room_Room_stddev_pop_fields";
    capacity?: Maybe<Scalars["Float"]>;
    priority?: Maybe<Scalars["Float"]>;
};

/** order by stddev_pop() on columns of table "room.Room" */
export type Room_Room_Stddev_Pop_Order_By = {
    capacity?: Maybe<Order_By>;
    priority?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Room_Room_Stddev_Samp_Fields = {
    __typename?: "room_Room_stddev_samp_fields";
    capacity?: Maybe<Scalars["Float"]>;
    priority?: Maybe<Scalars["Float"]>;
};

/** order by stddev_samp() on columns of table "room.Room" */
export type Room_Room_Stddev_Samp_Order_By = {
    capacity?: Maybe<Order_By>;
    priority?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Room_Room_Sum_Fields = {
    __typename?: "room_Room_sum_fields";
    capacity?: Maybe<Scalars["Int"]>;
    priority?: Maybe<Scalars["Int"]>;
};

/** order by sum() on columns of table "room.Room" */
export type Room_Room_Sum_Order_By = {
    capacity?: Maybe<Order_By>;
    priority?: Maybe<Order_By>;
};

/** update columns of table "room.Room" */
export enum Room_Room_Update_Column {
    /** column name */
    BackendName = "backendName",
    /** column name */
    Capacity = "capacity",
    /** column name */
    ChatId = "chatId",
    /** column name */
    Colour = "colour",
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    CurrentModeName = "currentModeName",
    /** column name */
    Id = "id",
    /** column name */
    ManagementModeName = "managementModeName",
    /** column name */
    Name = "name",
    /** column name */
    OriginatingDataId = "originatingDataId",
    /** column name */
    OriginatingEventId = "originatingEventId",
    /** column name */
    OriginatingItemId = "originatingItemId",
    /** column name */
    Priority = "priority",
    /** column name */
    PublicVonageSessionId = "publicVonageSessionId",
    /** column name */
    UpdatedAt = "updated_at",
}

/** aggregate var_pop on columns */
export type Room_Room_Var_Pop_Fields = {
    __typename?: "room_Room_var_pop_fields";
    capacity?: Maybe<Scalars["Float"]>;
    priority?: Maybe<Scalars["Float"]>;
};

/** order by var_pop() on columns of table "room.Room" */
export type Room_Room_Var_Pop_Order_By = {
    capacity?: Maybe<Order_By>;
    priority?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Room_Room_Var_Samp_Fields = {
    __typename?: "room_Room_var_samp_fields";
    capacity?: Maybe<Scalars["Float"]>;
    priority?: Maybe<Scalars["Float"]>;
};

/** order by var_samp() on columns of table "room.Room" */
export type Room_Room_Var_Samp_Order_By = {
    capacity?: Maybe<Order_By>;
    priority?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Room_Room_Variance_Fields = {
    __typename?: "room_Room_variance_fields";
    capacity?: Maybe<Scalars["Float"]>;
    priority?: Maybe<Scalars["Float"]>;
};

/** order by variance() on columns of table "room.Room" */
export type Room_Room_Variance_Order_By = {
    capacity?: Maybe<Order_By>;
    priority?: Maybe<Order_By>;
};

/** columns and relationships of "room.ShuffleAlgorithm" */
export type Room_ShuffleAlgorithm = {
    __typename?: "room_ShuffleAlgorithm";
    description: Scalars["String"];
    name: Scalars["String"];
};

/** aggregated selection of "room.ShuffleAlgorithm" */
export type Room_ShuffleAlgorithm_Aggregate = {
    __typename?: "room_ShuffleAlgorithm_aggregate";
    aggregate?: Maybe<Room_ShuffleAlgorithm_Aggregate_Fields>;
    nodes: Array<Room_ShuffleAlgorithm>;
};

/** aggregate fields of "room.ShuffleAlgorithm" */
export type Room_ShuffleAlgorithm_Aggregate_Fields = {
    __typename?: "room_ShuffleAlgorithm_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Room_ShuffleAlgorithm_Max_Fields>;
    min?: Maybe<Room_ShuffleAlgorithm_Min_Fields>;
};

/** aggregate fields of "room.ShuffleAlgorithm" */
export type Room_ShuffleAlgorithm_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Room_ShuffleAlgorithm_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** Boolean expression to filter rows from the table "room.ShuffleAlgorithm". All fields are combined with a logical 'AND'. */
export type Room_ShuffleAlgorithm_Bool_Exp = {
    _and?: Maybe<Array<Room_ShuffleAlgorithm_Bool_Exp>>;
    _not?: Maybe<Room_ShuffleAlgorithm_Bool_Exp>;
    _or?: Maybe<Array<Room_ShuffleAlgorithm_Bool_Exp>>;
    description?: Maybe<String_Comparison_Exp>;
    name?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "room.ShuffleAlgorithm" */
export enum Room_ShuffleAlgorithm_Constraint {
    /** unique or primary key constraint */
    ShuffleAlgorithmPkey = "ShuffleAlgorithm_pkey",
}

export enum Room_ShuffleAlgorithm_Enum {
    /** First-come, first-served with auto-created rooms. */
    Fcfs = "fcfs",
    /** First-come, first-served with a fixed set of (manually created) rooms. Limits max participants. */
    FcfsFixedRooms = "fcfs_fixed_rooms",
    /** No automation. Rooms and allocations controlled manually. */
    None = "none",
}

/** Boolean expression to compare columns of type "room_ShuffleAlgorithm_enum". All fields are combined with logical 'AND'. */
export type Room_ShuffleAlgorithm_Enum_Comparison_Exp = {
    _eq?: Maybe<Room_ShuffleAlgorithm_Enum>;
    _in?: Maybe<Array<Room_ShuffleAlgorithm_Enum>>;
    _is_null?: Maybe<Scalars["Boolean"]>;
    _neq?: Maybe<Room_ShuffleAlgorithm_Enum>;
    _nin?: Maybe<Array<Room_ShuffleAlgorithm_Enum>>;
};

/** input type for inserting data into table "room.ShuffleAlgorithm" */
export type Room_ShuffleAlgorithm_Insert_Input = {
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** aggregate max on columns */
export type Room_ShuffleAlgorithm_Max_Fields = {
    __typename?: "room_ShuffleAlgorithm_max_fields";
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** aggregate min on columns */
export type Room_ShuffleAlgorithm_Min_Fields = {
    __typename?: "room_ShuffleAlgorithm_min_fields";
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** response of any mutation on the table "room.ShuffleAlgorithm" */
export type Room_ShuffleAlgorithm_Mutation_Response = {
    __typename?: "room_ShuffleAlgorithm_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Room_ShuffleAlgorithm>;
};

/** on conflict condition type for table "room.ShuffleAlgorithm" */
export type Room_ShuffleAlgorithm_On_Conflict = {
    constraint: Room_ShuffleAlgorithm_Constraint;
    update_columns?: Array<Room_ShuffleAlgorithm_Update_Column>;
    where?: Maybe<Room_ShuffleAlgorithm_Bool_Exp>;
};

/** Ordering options when selecting data from "room.ShuffleAlgorithm". */
export type Room_ShuffleAlgorithm_Order_By = {
    description?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
};

/** primary key columns input for table: room_ShuffleAlgorithm */
export type Room_ShuffleAlgorithm_Pk_Columns_Input = {
    name: Scalars["String"];
};

/** select columns of table "room.ShuffleAlgorithm" */
export enum Room_ShuffleAlgorithm_Select_Column {
    /** column name */
    Description = "description",
    /** column name */
    Name = "name",
}

/** input type for updating data in table "room.ShuffleAlgorithm" */
export type Room_ShuffleAlgorithm_Set_Input = {
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** update columns of table "room.ShuffleAlgorithm" */
export enum Room_ShuffleAlgorithm_Update_Column {
    /** column name */
    Description = "description",
    /** column name */
    Name = "name",
}

/** columns and relationships of "room.ShufflePeriod" */
export type Room_ShufflePeriod = {
    __typename?: "room_ShufflePeriod";
    algorithm: Room_ShuffleAlgorithm_Enum;
    /** An object relationship */
    conference: Conference_Conference;
    conferenceId: Scalars["uuid"];
    created_at: Scalars["timestamptz"];
    endAt: Scalars["timestamptz"];
    /** An array relationship */
    events: Array<Schedule_Event>;
    /** An aggregate relationship */
    events_aggregate: Schedule_Event_Aggregate;
    id: Scalars["uuid"];
    maxRegistrantsPerRoom: Scalars["Int"];
    name: Scalars["String"];
    /** An object relationship */
    organiser: Registrant_Registrant;
    organiserId: Scalars["uuid"];
    /** An array relationship */
    queueEntries: Array<Room_ShuffleQueueEntry>;
    /** An aggregate relationship */
    queueEntries_aggregate: Room_ShuffleQueueEntry_Aggregate;
    roomDurationMinutes: Scalars["Int"];
    /** An array relationship */
    shuffleRooms: Array<Room_ShuffleRoom>;
    /** An aggregate relationship */
    shuffleRooms_aggregate: Room_ShuffleRoom_Aggregate;
    startAt: Scalars["timestamptz"];
    targetRegistrantsPerRoom: Scalars["Int"];
    updated_at: Scalars["timestamptz"];
    waitRoomMaxDurationSeconds: Scalars["Int"];
};

/** columns and relationships of "room.ShufflePeriod" */
export type Room_ShufflePeriodEventsArgs = {
    distinct_on?: Maybe<Array<Schedule_Event_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_Event_Order_By>>;
    where?: Maybe<Schedule_Event_Bool_Exp>;
};

/** columns and relationships of "room.ShufflePeriod" */
export type Room_ShufflePeriodEvents_AggregateArgs = {
    distinct_on?: Maybe<Array<Schedule_Event_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_Event_Order_By>>;
    where?: Maybe<Schedule_Event_Bool_Exp>;
};

/** columns and relationships of "room.ShufflePeriod" */
export type Room_ShufflePeriodQueueEntriesArgs = {
    distinct_on?: Maybe<Array<Room_ShuffleQueueEntry_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_ShuffleQueueEntry_Order_By>>;
    where?: Maybe<Room_ShuffleQueueEntry_Bool_Exp>;
};

/** columns and relationships of "room.ShufflePeriod" */
export type Room_ShufflePeriodQueueEntries_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_ShuffleQueueEntry_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_ShuffleQueueEntry_Order_By>>;
    where?: Maybe<Room_ShuffleQueueEntry_Bool_Exp>;
};

/** columns and relationships of "room.ShufflePeriod" */
export type Room_ShufflePeriodShuffleRoomsArgs = {
    distinct_on?: Maybe<Array<Room_ShuffleRoom_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_ShuffleRoom_Order_By>>;
    where?: Maybe<Room_ShuffleRoom_Bool_Exp>;
};

/** columns and relationships of "room.ShufflePeriod" */
export type Room_ShufflePeriodShuffleRooms_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_ShuffleRoom_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_ShuffleRoom_Order_By>>;
    where?: Maybe<Room_ShuffleRoom_Bool_Exp>;
};

/** aggregated selection of "room.ShufflePeriod" */
export type Room_ShufflePeriod_Aggregate = {
    __typename?: "room_ShufflePeriod_aggregate";
    aggregate?: Maybe<Room_ShufflePeriod_Aggregate_Fields>;
    nodes: Array<Room_ShufflePeriod>;
};

/** aggregate fields of "room.ShufflePeriod" */
export type Room_ShufflePeriod_Aggregate_Fields = {
    __typename?: "room_ShufflePeriod_aggregate_fields";
    avg?: Maybe<Room_ShufflePeriod_Avg_Fields>;
    count: Scalars["Int"];
    max?: Maybe<Room_ShufflePeriod_Max_Fields>;
    min?: Maybe<Room_ShufflePeriod_Min_Fields>;
    stddev?: Maybe<Room_ShufflePeriod_Stddev_Fields>;
    stddev_pop?: Maybe<Room_ShufflePeriod_Stddev_Pop_Fields>;
    stddev_samp?: Maybe<Room_ShufflePeriod_Stddev_Samp_Fields>;
    sum?: Maybe<Room_ShufflePeriod_Sum_Fields>;
    var_pop?: Maybe<Room_ShufflePeriod_Var_Pop_Fields>;
    var_samp?: Maybe<Room_ShufflePeriod_Var_Samp_Fields>;
    variance?: Maybe<Room_ShufflePeriod_Variance_Fields>;
};

/** aggregate fields of "room.ShufflePeriod" */
export type Room_ShufflePeriod_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Room_ShufflePeriod_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "room.ShufflePeriod" */
export type Room_ShufflePeriod_Aggregate_Order_By = {
    avg?: Maybe<Room_ShufflePeriod_Avg_Order_By>;
    count?: Maybe<Order_By>;
    max?: Maybe<Room_ShufflePeriod_Max_Order_By>;
    min?: Maybe<Room_ShufflePeriod_Min_Order_By>;
    stddev?: Maybe<Room_ShufflePeriod_Stddev_Order_By>;
    stddev_pop?: Maybe<Room_ShufflePeriod_Stddev_Pop_Order_By>;
    stddev_samp?: Maybe<Room_ShufflePeriod_Stddev_Samp_Order_By>;
    sum?: Maybe<Room_ShufflePeriod_Sum_Order_By>;
    var_pop?: Maybe<Room_ShufflePeriod_Var_Pop_Order_By>;
    var_samp?: Maybe<Room_ShufflePeriod_Var_Samp_Order_By>;
    variance?: Maybe<Room_ShufflePeriod_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "room.ShufflePeriod" */
export type Room_ShufflePeriod_Arr_Rel_Insert_Input = {
    data: Array<Room_ShufflePeriod_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Room_ShufflePeriod_On_Conflict>;
};

/** aggregate avg on columns */
export type Room_ShufflePeriod_Avg_Fields = {
    __typename?: "room_ShufflePeriod_avg_fields";
    maxRegistrantsPerRoom?: Maybe<Scalars["Float"]>;
    roomDurationMinutes?: Maybe<Scalars["Float"]>;
    targetRegistrantsPerRoom?: Maybe<Scalars["Float"]>;
    waitRoomMaxDurationSeconds?: Maybe<Scalars["Float"]>;
};

/** order by avg() on columns of table "room.ShufflePeriod" */
export type Room_ShufflePeriod_Avg_Order_By = {
    maxRegistrantsPerRoom?: Maybe<Order_By>;
    roomDurationMinutes?: Maybe<Order_By>;
    targetRegistrantsPerRoom?: Maybe<Order_By>;
    waitRoomMaxDurationSeconds?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "room.ShufflePeriod". All fields are combined with a logical 'AND'. */
export type Room_ShufflePeriod_Bool_Exp = {
    _and?: Maybe<Array<Room_ShufflePeriod_Bool_Exp>>;
    _not?: Maybe<Room_ShufflePeriod_Bool_Exp>;
    _or?: Maybe<Array<Room_ShufflePeriod_Bool_Exp>>;
    algorithm?: Maybe<Room_ShuffleAlgorithm_Enum_Comparison_Exp>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    created_at?: Maybe<Timestamptz_Comparison_Exp>;
    endAt?: Maybe<Timestamptz_Comparison_Exp>;
    events?: Maybe<Schedule_Event_Bool_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    maxRegistrantsPerRoom?: Maybe<Int_Comparison_Exp>;
    name?: Maybe<String_Comparison_Exp>;
    organiser?: Maybe<Registrant_Registrant_Bool_Exp>;
    organiserId?: Maybe<Uuid_Comparison_Exp>;
    queueEntries?: Maybe<Room_ShuffleQueueEntry_Bool_Exp>;
    roomDurationMinutes?: Maybe<Int_Comparison_Exp>;
    shuffleRooms?: Maybe<Room_ShuffleRoom_Bool_Exp>;
    startAt?: Maybe<Timestamptz_Comparison_Exp>;
    targetRegistrantsPerRoom?: Maybe<Int_Comparison_Exp>;
    updated_at?: Maybe<Timestamptz_Comparison_Exp>;
    waitRoomMaxDurationSeconds?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "room.ShufflePeriod" */
export enum Room_ShufflePeriod_Constraint {
    /** unique or primary key constraint */
    ShufflePeriodPkey = "ShufflePeriod_pkey",
}

/** input type for incrementing numeric columns in table "room.ShufflePeriod" */
export type Room_ShufflePeriod_Inc_Input = {
    maxRegistrantsPerRoom?: Maybe<Scalars["Int"]>;
    roomDurationMinutes?: Maybe<Scalars["Int"]>;
    targetRegistrantsPerRoom?: Maybe<Scalars["Int"]>;
    waitRoomMaxDurationSeconds?: Maybe<Scalars["Int"]>;
};

/** input type for inserting data into table "room.ShufflePeriod" */
export type Room_ShufflePeriod_Insert_Input = {
    algorithm?: Maybe<Room_ShuffleAlgorithm_Enum>;
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    endAt?: Maybe<Scalars["timestamptz"]>;
    events?: Maybe<Schedule_Event_Arr_Rel_Insert_Input>;
    id?: Maybe<Scalars["uuid"]>;
    maxRegistrantsPerRoom?: Maybe<Scalars["Int"]>;
    name?: Maybe<Scalars["String"]>;
    organiser?: Maybe<Registrant_Registrant_Obj_Rel_Insert_Input>;
    organiserId?: Maybe<Scalars["uuid"]>;
    queueEntries?: Maybe<Room_ShuffleQueueEntry_Arr_Rel_Insert_Input>;
    roomDurationMinutes?: Maybe<Scalars["Int"]>;
    shuffleRooms?: Maybe<Room_ShuffleRoom_Arr_Rel_Insert_Input>;
    startAt?: Maybe<Scalars["timestamptz"]>;
    targetRegistrantsPerRoom?: Maybe<Scalars["Int"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
    waitRoomMaxDurationSeconds?: Maybe<Scalars["Int"]>;
};

/** aggregate max on columns */
export type Room_ShufflePeriod_Max_Fields = {
    __typename?: "room_ShufflePeriod_max_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    endAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    maxRegistrantsPerRoom?: Maybe<Scalars["Int"]>;
    name?: Maybe<Scalars["String"]>;
    organiserId?: Maybe<Scalars["uuid"]>;
    roomDurationMinutes?: Maybe<Scalars["Int"]>;
    startAt?: Maybe<Scalars["timestamptz"]>;
    targetRegistrantsPerRoom?: Maybe<Scalars["Int"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
    waitRoomMaxDurationSeconds?: Maybe<Scalars["Int"]>;
};

/** order by max() on columns of table "room.ShufflePeriod" */
export type Room_ShufflePeriod_Max_Order_By = {
    conferenceId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    endAt?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    maxRegistrantsPerRoom?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    organiserId?: Maybe<Order_By>;
    roomDurationMinutes?: Maybe<Order_By>;
    startAt?: Maybe<Order_By>;
    targetRegistrantsPerRoom?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
    waitRoomMaxDurationSeconds?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Room_ShufflePeriod_Min_Fields = {
    __typename?: "room_ShufflePeriod_min_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    endAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    maxRegistrantsPerRoom?: Maybe<Scalars["Int"]>;
    name?: Maybe<Scalars["String"]>;
    organiserId?: Maybe<Scalars["uuid"]>;
    roomDurationMinutes?: Maybe<Scalars["Int"]>;
    startAt?: Maybe<Scalars["timestamptz"]>;
    targetRegistrantsPerRoom?: Maybe<Scalars["Int"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
    waitRoomMaxDurationSeconds?: Maybe<Scalars["Int"]>;
};

/** order by min() on columns of table "room.ShufflePeriod" */
export type Room_ShufflePeriod_Min_Order_By = {
    conferenceId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    endAt?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    maxRegistrantsPerRoom?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    organiserId?: Maybe<Order_By>;
    roomDurationMinutes?: Maybe<Order_By>;
    startAt?: Maybe<Order_By>;
    targetRegistrantsPerRoom?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
    waitRoomMaxDurationSeconds?: Maybe<Order_By>;
};

/** response of any mutation on the table "room.ShufflePeriod" */
export type Room_ShufflePeriod_Mutation_Response = {
    __typename?: "room_ShufflePeriod_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Room_ShufflePeriod>;
};

/** input type for inserting object relation for remote table "room.ShufflePeriod" */
export type Room_ShufflePeriod_Obj_Rel_Insert_Input = {
    data: Room_ShufflePeriod_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Room_ShufflePeriod_On_Conflict>;
};

/** on conflict condition type for table "room.ShufflePeriod" */
export type Room_ShufflePeriod_On_Conflict = {
    constraint: Room_ShufflePeriod_Constraint;
    update_columns?: Array<Room_ShufflePeriod_Update_Column>;
    where?: Maybe<Room_ShufflePeriod_Bool_Exp>;
};

/** Ordering options when selecting data from "room.ShufflePeriod". */
export type Room_ShufflePeriod_Order_By = {
    algorithm?: Maybe<Order_By>;
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    endAt?: Maybe<Order_By>;
    events_aggregate?: Maybe<Schedule_Event_Aggregate_Order_By>;
    id?: Maybe<Order_By>;
    maxRegistrantsPerRoom?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    organiser?: Maybe<Registrant_Registrant_Order_By>;
    organiserId?: Maybe<Order_By>;
    queueEntries_aggregate?: Maybe<Room_ShuffleQueueEntry_Aggregate_Order_By>;
    roomDurationMinutes?: Maybe<Order_By>;
    shuffleRooms_aggregate?: Maybe<Room_ShuffleRoom_Aggregate_Order_By>;
    startAt?: Maybe<Order_By>;
    targetRegistrantsPerRoom?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
    waitRoomMaxDurationSeconds?: Maybe<Order_By>;
};

/** primary key columns input for table: room_ShufflePeriod */
export type Room_ShufflePeriod_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "room.ShufflePeriod" */
export enum Room_ShufflePeriod_Select_Column {
    /** column name */
    Algorithm = "algorithm",
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    EndAt = "endAt",
    /** column name */
    Id = "id",
    /** column name */
    MaxRegistrantsPerRoom = "maxRegistrantsPerRoom",
    /** column name */
    Name = "name",
    /** column name */
    OrganiserId = "organiserId",
    /** column name */
    RoomDurationMinutes = "roomDurationMinutes",
    /** column name */
    StartAt = "startAt",
    /** column name */
    TargetRegistrantsPerRoom = "targetRegistrantsPerRoom",
    /** column name */
    UpdatedAt = "updated_at",
    /** column name */
    WaitRoomMaxDurationSeconds = "waitRoomMaxDurationSeconds",
}

/** input type for updating data in table "room.ShufflePeriod" */
export type Room_ShufflePeriod_Set_Input = {
    algorithm?: Maybe<Room_ShuffleAlgorithm_Enum>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    endAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    maxRegistrantsPerRoom?: Maybe<Scalars["Int"]>;
    name?: Maybe<Scalars["String"]>;
    organiserId?: Maybe<Scalars["uuid"]>;
    roomDurationMinutes?: Maybe<Scalars["Int"]>;
    startAt?: Maybe<Scalars["timestamptz"]>;
    targetRegistrantsPerRoom?: Maybe<Scalars["Int"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
    waitRoomMaxDurationSeconds?: Maybe<Scalars["Int"]>;
};

/** aggregate stddev on columns */
export type Room_ShufflePeriod_Stddev_Fields = {
    __typename?: "room_ShufflePeriod_stddev_fields";
    maxRegistrantsPerRoom?: Maybe<Scalars["Float"]>;
    roomDurationMinutes?: Maybe<Scalars["Float"]>;
    targetRegistrantsPerRoom?: Maybe<Scalars["Float"]>;
    waitRoomMaxDurationSeconds?: Maybe<Scalars["Float"]>;
};

/** order by stddev() on columns of table "room.ShufflePeriod" */
export type Room_ShufflePeriod_Stddev_Order_By = {
    maxRegistrantsPerRoom?: Maybe<Order_By>;
    roomDurationMinutes?: Maybe<Order_By>;
    targetRegistrantsPerRoom?: Maybe<Order_By>;
    waitRoomMaxDurationSeconds?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Room_ShufflePeriod_Stddev_Pop_Fields = {
    __typename?: "room_ShufflePeriod_stddev_pop_fields";
    maxRegistrantsPerRoom?: Maybe<Scalars["Float"]>;
    roomDurationMinutes?: Maybe<Scalars["Float"]>;
    targetRegistrantsPerRoom?: Maybe<Scalars["Float"]>;
    waitRoomMaxDurationSeconds?: Maybe<Scalars["Float"]>;
};

/** order by stddev_pop() on columns of table "room.ShufflePeriod" */
export type Room_ShufflePeriod_Stddev_Pop_Order_By = {
    maxRegistrantsPerRoom?: Maybe<Order_By>;
    roomDurationMinutes?: Maybe<Order_By>;
    targetRegistrantsPerRoom?: Maybe<Order_By>;
    waitRoomMaxDurationSeconds?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Room_ShufflePeriod_Stddev_Samp_Fields = {
    __typename?: "room_ShufflePeriod_stddev_samp_fields";
    maxRegistrantsPerRoom?: Maybe<Scalars["Float"]>;
    roomDurationMinutes?: Maybe<Scalars["Float"]>;
    targetRegistrantsPerRoom?: Maybe<Scalars["Float"]>;
    waitRoomMaxDurationSeconds?: Maybe<Scalars["Float"]>;
};

/** order by stddev_samp() on columns of table "room.ShufflePeriod" */
export type Room_ShufflePeriod_Stddev_Samp_Order_By = {
    maxRegistrantsPerRoom?: Maybe<Order_By>;
    roomDurationMinutes?: Maybe<Order_By>;
    targetRegistrantsPerRoom?: Maybe<Order_By>;
    waitRoomMaxDurationSeconds?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Room_ShufflePeriod_Sum_Fields = {
    __typename?: "room_ShufflePeriod_sum_fields";
    maxRegistrantsPerRoom?: Maybe<Scalars["Int"]>;
    roomDurationMinutes?: Maybe<Scalars["Int"]>;
    targetRegistrantsPerRoom?: Maybe<Scalars["Int"]>;
    waitRoomMaxDurationSeconds?: Maybe<Scalars["Int"]>;
};

/** order by sum() on columns of table "room.ShufflePeriod" */
export type Room_ShufflePeriod_Sum_Order_By = {
    maxRegistrantsPerRoom?: Maybe<Order_By>;
    roomDurationMinutes?: Maybe<Order_By>;
    targetRegistrantsPerRoom?: Maybe<Order_By>;
    waitRoomMaxDurationSeconds?: Maybe<Order_By>;
};

/** update columns of table "room.ShufflePeriod" */
export enum Room_ShufflePeriod_Update_Column {
    /** column name */
    Algorithm = "algorithm",
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    EndAt = "endAt",
    /** column name */
    Id = "id",
    /** column name */
    MaxRegistrantsPerRoom = "maxRegistrantsPerRoom",
    /** column name */
    Name = "name",
    /** column name */
    OrganiserId = "organiserId",
    /** column name */
    RoomDurationMinutes = "roomDurationMinutes",
    /** column name */
    StartAt = "startAt",
    /** column name */
    TargetRegistrantsPerRoom = "targetRegistrantsPerRoom",
    /** column name */
    UpdatedAt = "updated_at",
    /** column name */
    WaitRoomMaxDurationSeconds = "waitRoomMaxDurationSeconds",
}

/** aggregate var_pop on columns */
export type Room_ShufflePeriod_Var_Pop_Fields = {
    __typename?: "room_ShufflePeriod_var_pop_fields";
    maxRegistrantsPerRoom?: Maybe<Scalars["Float"]>;
    roomDurationMinutes?: Maybe<Scalars["Float"]>;
    targetRegistrantsPerRoom?: Maybe<Scalars["Float"]>;
    waitRoomMaxDurationSeconds?: Maybe<Scalars["Float"]>;
};

/** order by var_pop() on columns of table "room.ShufflePeriod" */
export type Room_ShufflePeriod_Var_Pop_Order_By = {
    maxRegistrantsPerRoom?: Maybe<Order_By>;
    roomDurationMinutes?: Maybe<Order_By>;
    targetRegistrantsPerRoom?: Maybe<Order_By>;
    waitRoomMaxDurationSeconds?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Room_ShufflePeriod_Var_Samp_Fields = {
    __typename?: "room_ShufflePeriod_var_samp_fields";
    maxRegistrantsPerRoom?: Maybe<Scalars["Float"]>;
    roomDurationMinutes?: Maybe<Scalars["Float"]>;
    targetRegistrantsPerRoom?: Maybe<Scalars["Float"]>;
    waitRoomMaxDurationSeconds?: Maybe<Scalars["Float"]>;
};

/** order by var_samp() on columns of table "room.ShufflePeriod" */
export type Room_ShufflePeriod_Var_Samp_Order_By = {
    maxRegistrantsPerRoom?: Maybe<Order_By>;
    roomDurationMinutes?: Maybe<Order_By>;
    targetRegistrantsPerRoom?: Maybe<Order_By>;
    waitRoomMaxDurationSeconds?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Room_ShufflePeriod_Variance_Fields = {
    __typename?: "room_ShufflePeriod_variance_fields";
    maxRegistrantsPerRoom?: Maybe<Scalars["Float"]>;
    roomDurationMinutes?: Maybe<Scalars["Float"]>;
    targetRegistrantsPerRoom?: Maybe<Scalars["Float"]>;
    waitRoomMaxDurationSeconds?: Maybe<Scalars["Float"]>;
};

/** order by variance() on columns of table "room.ShufflePeriod" */
export type Room_ShufflePeriod_Variance_Order_By = {
    maxRegistrantsPerRoom?: Maybe<Order_By>;
    roomDurationMinutes?: Maybe<Order_By>;
    targetRegistrantsPerRoom?: Maybe<Order_By>;
    waitRoomMaxDurationSeconds?: Maybe<Order_By>;
};

/** columns and relationships of "room.ShuffleQueueEntry" */
export type Room_ShuffleQueueEntry = {
    __typename?: "room_ShuffleQueueEntry";
    allocatedShuffleRoomId?: Maybe<Scalars["Int"]>;
    created_at: Scalars["timestamptz"];
    id: Scalars["bigint"];
    isExpired: Scalars["Boolean"];
    /** An object relationship */
    registrant: Registrant_Registrant;
    registrantId: Scalars["uuid"];
    /** An object relationship */
    shufflePeriod: Room_ShufflePeriod;
    shufflePeriodId: Scalars["uuid"];
    /** An object relationship */
    shuffleRoom?: Maybe<Room_ShuffleRoom>;
    updated_at: Scalars["timestamptz"];
};

/** aggregated selection of "room.ShuffleQueueEntry" */
export type Room_ShuffleQueueEntry_Aggregate = {
    __typename?: "room_ShuffleQueueEntry_aggregate";
    aggregate?: Maybe<Room_ShuffleQueueEntry_Aggregate_Fields>;
    nodes: Array<Room_ShuffleQueueEntry>;
};

/** aggregate fields of "room.ShuffleQueueEntry" */
export type Room_ShuffleQueueEntry_Aggregate_Fields = {
    __typename?: "room_ShuffleQueueEntry_aggregate_fields";
    avg?: Maybe<Room_ShuffleQueueEntry_Avg_Fields>;
    count: Scalars["Int"];
    max?: Maybe<Room_ShuffleQueueEntry_Max_Fields>;
    min?: Maybe<Room_ShuffleQueueEntry_Min_Fields>;
    stddev?: Maybe<Room_ShuffleQueueEntry_Stddev_Fields>;
    stddev_pop?: Maybe<Room_ShuffleQueueEntry_Stddev_Pop_Fields>;
    stddev_samp?: Maybe<Room_ShuffleQueueEntry_Stddev_Samp_Fields>;
    sum?: Maybe<Room_ShuffleQueueEntry_Sum_Fields>;
    var_pop?: Maybe<Room_ShuffleQueueEntry_Var_Pop_Fields>;
    var_samp?: Maybe<Room_ShuffleQueueEntry_Var_Samp_Fields>;
    variance?: Maybe<Room_ShuffleQueueEntry_Variance_Fields>;
};

/** aggregate fields of "room.ShuffleQueueEntry" */
export type Room_ShuffleQueueEntry_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Room_ShuffleQueueEntry_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "room.ShuffleQueueEntry" */
export type Room_ShuffleQueueEntry_Aggregate_Order_By = {
    avg?: Maybe<Room_ShuffleQueueEntry_Avg_Order_By>;
    count?: Maybe<Order_By>;
    max?: Maybe<Room_ShuffleQueueEntry_Max_Order_By>;
    min?: Maybe<Room_ShuffleQueueEntry_Min_Order_By>;
    stddev?: Maybe<Room_ShuffleQueueEntry_Stddev_Order_By>;
    stddev_pop?: Maybe<Room_ShuffleQueueEntry_Stddev_Pop_Order_By>;
    stddev_samp?: Maybe<Room_ShuffleQueueEntry_Stddev_Samp_Order_By>;
    sum?: Maybe<Room_ShuffleQueueEntry_Sum_Order_By>;
    var_pop?: Maybe<Room_ShuffleQueueEntry_Var_Pop_Order_By>;
    var_samp?: Maybe<Room_ShuffleQueueEntry_Var_Samp_Order_By>;
    variance?: Maybe<Room_ShuffleQueueEntry_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "room.ShuffleQueueEntry" */
export type Room_ShuffleQueueEntry_Arr_Rel_Insert_Input = {
    data: Array<Room_ShuffleQueueEntry_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Room_ShuffleQueueEntry_On_Conflict>;
};

/** aggregate avg on columns */
export type Room_ShuffleQueueEntry_Avg_Fields = {
    __typename?: "room_ShuffleQueueEntry_avg_fields";
    allocatedShuffleRoomId?: Maybe<Scalars["Float"]>;
    id?: Maybe<Scalars["Float"]>;
};

/** order by avg() on columns of table "room.ShuffleQueueEntry" */
export type Room_ShuffleQueueEntry_Avg_Order_By = {
    allocatedShuffleRoomId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "room.ShuffleQueueEntry". All fields are combined with a logical 'AND'. */
export type Room_ShuffleQueueEntry_Bool_Exp = {
    _and?: Maybe<Array<Room_ShuffleQueueEntry_Bool_Exp>>;
    _not?: Maybe<Room_ShuffleQueueEntry_Bool_Exp>;
    _or?: Maybe<Array<Room_ShuffleQueueEntry_Bool_Exp>>;
    allocatedShuffleRoomId?: Maybe<Int_Comparison_Exp>;
    created_at?: Maybe<Timestamptz_Comparison_Exp>;
    id?: Maybe<Bigint_Comparison_Exp>;
    isExpired?: Maybe<Boolean_Comparison_Exp>;
    registrant?: Maybe<Registrant_Registrant_Bool_Exp>;
    registrantId?: Maybe<Uuid_Comparison_Exp>;
    shufflePeriod?: Maybe<Room_ShufflePeriod_Bool_Exp>;
    shufflePeriodId?: Maybe<Uuid_Comparison_Exp>;
    shuffleRoom?: Maybe<Room_ShuffleRoom_Bool_Exp>;
    updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "room.ShuffleQueueEntry" */
export enum Room_ShuffleQueueEntry_Constraint {
    /** unique or primary key constraint */
    ShuffleQueueEntryPkey = "ShuffleQueueEntry_pkey",
    /** unique or primary key constraint */
    RoomShuffleQueueEntryIsWaiting = "room_ShuffleQueueEntry_isWaiting",
}

/** input type for incrementing numeric columns in table "room.ShuffleQueueEntry" */
export type Room_ShuffleQueueEntry_Inc_Input = {
    allocatedShuffleRoomId?: Maybe<Scalars["Int"]>;
    id?: Maybe<Scalars["bigint"]>;
};

/** input type for inserting data into table "room.ShuffleQueueEntry" */
export type Room_ShuffleQueueEntry_Insert_Input = {
    allocatedShuffleRoomId?: Maybe<Scalars["Int"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["bigint"]>;
    isExpired?: Maybe<Scalars["Boolean"]>;
    registrant?: Maybe<Registrant_Registrant_Obj_Rel_Insert_Input>;
    registrantId?: Maybe<Scalars["uuid"]>;
    shufflePeriod?: Maybe<Room_ShufflePeriod_Obj_Rel_Insert_Input>;
    shufflePeriodId?: Maybe<Scalars["uuid"]>;
    shuffleRoom?: Maybe<Room_ShuffleRoom_Obj_Rel_Insert_Input>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Room_ShuffleQueueEntry_Max_Fields = {
    __typename?: "room_ShuffleQueueEntry_max_fields";
    allocatedShuffleRoomId?: Maybe<Scalars["Int"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["bigint"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
    shufflePeriodId?: Maybe<Scalars["uuid"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** order by max() on columns of table "room.ShuffleQueueEntry" */
export type Room_ShuffleQueueEntry_Max_Order_By = {
    allocatedShuffleRoomId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    registrantId?: Maybe<Order_By>;
    shufflePeriodId?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Room_ShuffleQueueEntry_Min_Fields = {
    __typename?: "room_ShuffleQueueEntry_min_fields";
    allocatedShuffleRoomId?: Maybe<Scalars["Int"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["bigint"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
    shufflePeriodId?: Maybe<Scalars["uuid"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** order by min() on columns of table "room.ShuffleQueueEntry" */
export type Room_ShuffleQueueEntry_Min_Order_By = {
    allocatedShuffleRoomId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    registrantId?: Maybe<Order_By>;
    shufflePeriodId?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** response of any mutation on the table "room.ShuffleQueueEntry" */
export type Room_ShuffleQueueEntry_Mutation_Response = {
    __typename?: "room_ShuffleQueueEntry_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Room_ShuffleQueueEntry>;
};

/** on conflict condition type for table "room.ShuffleQueueEntry" */
export type Room_ShuffleQueueEntry_On_Conflict = {
    constraint: Room_ShuffleQueueEntry_Constraint;
    update_columns?: Array<Room_ShuffleQueueEntry_Update_Column>;
    where?: Maybe<Room_ShuffleQueueEntry_Bool_Exp>;
};

/** Ordering options when selecting data from "room.ShuffleQueueEntry". */
export type Room_ShuffleQueueEntry_Order_By = {
    allocatedShuffleRoomId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    isExpired?: Maybe<Order_By>;
    registrant?: Maybe<Registrant_Registrant_Order_By>;
    registrantId?: Maybe<Order_By>;
    shufflePeriod?: Maybe<Room_ShufflePeriod_Order_By>;
    shufflePeriodId?: Maybe<Order_By>;
    shuffleRoom?: Maybe<Room_ShuffleRoom_Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** primary key columns input for table: room_ShuffleQueueEntry */
export type Room_ShuffleQueueEntry_Pk_Columns_Input = {
    id: Scalars["bigint"];
};

/** select columns of table "room.ShuffleQueueEntry" */
export enum Room_ShuffleQueueEntry_Select_Column {
    /** column name */
    AllocatedShuffleRoomId = "allocatedShuffleRoomId",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    Id = "id",
    /** column name */
    IsExpired = "isExpired",
    /** column name */
    RegistrantId = "registrantId",
    /** column name */
    ShufflePeriodId = "shufflePeriodId",
    /** column name */
    UpdatedAt = "updated_at",
}

/** input type for updating data in table "room.ShuffleQueueEntry" */
export type Room_ShuffleQueueEntry_Set_Input = {
    allocatedShuffleRoomId?: Maybe<Scalars["Int"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["bigint"]>;
    isExpired?: Maybe<Scalars["Boolean"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
    shufflePeriodId?: Maybe<Scalars["uuid"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate stddev on columns */
export type Room_ShuffleQueueEntry_Stddev_Fields = {
    __typename?: "room_ShuffleQueueEntry_stddev_fields";
    allocatedShuffleRoomId?: Maybe<Scalars["Float"]>;
    id?: Maybe<Scalars["Float"]>;
};

/** order by stddev() on columns of table "room.ShuffleQueueEntry" */
export type Room_ShuffleQueueEntry_Stddev_Order_By = {
    allocatedShuffleRoomId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Room_ShuffleQueueEntry_Stddev_Pop_Fields = {
    __typename?: "room_ShuffleQueueEntry_stddev_pop_fields";
    allocatedShuffleRoomId?: Maybe<Scalars["Float"]>;
    id?: Maybe<Scalars["Float"]>;
};

/** order by stddev_pop() on columns of table "room.ShuffleQueueEntry" */
export type Room_ShuffleQueueEntry_Stddev_Pop_Order_By = {
    allocatedShuffleRoomId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Room_ShuffleQueueEntry_Stddev_Samp_Fields = {
    __typename?: "room_ShuffleQueueEntry_stddev_samp_fields";
    allocatedShuffleRoomId?: Maybe<Scalars["Float"]>;
    id?: Maybe<Scalars["Float"]>;
};

/** order by stddev_samp() on columns of table "room.ShuffleQueueEntry" */
export type Room_ShuffleQueueEntry_Stddev_Samp_Order_By = {
    allocatedShuffleRoomId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Room_ShuffleQueueEntry_Sum_Fields = {
    __typename?: "room_ShuffleQueueEntry_sum_fields";
    allocatedShuffleRoomId?: Maybe<Scalars["Int"]>;
    id?: Maybe<Scalars["bigint"]>;
};

/** order by sum() on columns of table "room.ShuffleQueueEntry" */
export type Room_ShuffleQueueEntry_Sum_Order_By = {
    allocatedShuffleRoomId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
};

/** update columns of table "room.ShuffleQueueEntry" */
export enum Room_ShuffleQueueEntry_Update_Column {
    /** column name */
    AllocatedShuffleRoomId = "allocatedShuffleRoomId",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    Id = "id",
    /** column name */
    IsExpired = "isExpired",
    /** column name */
    RegistrantId = "registrantId",
    /** column name */
    ShufflePeriodId = "shufflePeriodId",
    /** column name */
    UpdatedAt = "updated_at",
}

/** aggregate var_pop on columns */
export type Room_ShuffleQueueEntry_Var_Pop_Fields = {
    __typename?: "room_ShuffleQueueEntry_var_pop_fields";
    allocatedShuffleRoomId?: Maybe<Scalars["Float"]>;
    id?: Maybe<Scalars["Float"]>;
};

/** order by var_pop() on columns of table "room.ShuffleQueueEntry" */
export type Room_ShuffleQueueEntry_Var_Pop_Order_By = {
    allocatedShuffleRoomId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Room_ShuffleQueueEntry_Var_Samp_Fields = {
    __typename?: "room_ShuffleQueueEntry_var_samp_fields";
    allocatedShuffleRoomId?: Maybe<Scalars["Float"]>;
    id?: Maybe<Scalars["Float"]>;
};

/** order by var_samp() on columns of table "room.ShuffleQueueEntry" */
export type Room_ShuffleQueueEntry_Var_Samp_Order_By = {
    allocatedShuffleRoomId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Room_ShuffleQueueEntry_Variance_Fields = {
    __typename?: "room_ShuffleQueueEntry_variance_fields";
    allocatedShuffleRoomId?: Maybe<Scalars["Float"]>;
    id?: Maybe<Scalars["Float"]>;
};

/** order by variance() on columns of table "room.ShuffleQueueEntry" */
export type Room_ShuffleQueueEntry_Variance_Order_By = {
    allocatedShuffleRoomId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
};

/** columns and relationships of "room.ShuffleRoom" */
export type Room_ShuffleRoom = {
    __typename?: "room_ShuffleRoom";
    /** An array relationship */
    continuations: Array<Schedule_Continuation>;
    /** An aggregate relationship */
    continuations_aggregate: Schedule_Continuation_Aggregate;
    created_at: Scalars["timestamptz"];
    durationMinutes: Scalars["Int"];
    id: Scalars["bigint"];
    isEnded: Scalars["Boolean"];
    /** An array relationship */
    queueEntries: Array<Room_ShuffleQueueEntry>;
    /** An aggregate relationship */
    queueEntries_aggregate: Room_ShuffleQueueEntry_Aggregate;
    reshuffleUponEnd: Scalars["Boolean"];
    /** An object relationship */
    room: Room_Room;
    roomId: Scalars["uuid"];
    /** An object relationship */
    shufflePeriod: Room_ShufflePeriod;
    shufflePeriodId: Scalars["uuid"];
    startedAt: Scalars["timestamptz"];
    updated_at: Scalars["timestamptz"];
};

/** columns and relationships of "room.ShuffleRoom" */
export type Room_ShuffleRoomContinuationsArgs = {
    distinct_on?: Maybe<Array<Schedule_Continuation_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_Continuation_Order_By>>;
    where?: Maybe<Schedule_Continuation_Bool_Exp>;
};

/** columns and relationships of "room.ShuffleRoom" */
export type Room_ShuffleRoomContinuations_AggregateArgs = {
    distinct_on?: Maybe<Array<Schedule_Continuation_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_Continuation_Order_By>>;
    where?: Maybe<Schedule_Continuation_Bool_Exp>;
};

/** columns and relationships of "room.ShuffleRoom" */
export type Room_ShuffleRoomQueueEntriesArgs = {
    distinct_on?: Maybe<Array<Room_ShuffleQueueEntry_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_ShuffleQueueEntry_Order_By>>;
    where?: Maybe<Room_ShuffleQueueEntry_Bool_Exp>;
};

/** columns and relationships of "room.ShuffleRoom" */
export type Room_ShuffleRoomQueueEntries_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_ShuffleQueueEntry_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_ShuffleQueueEntry_Order_By>>;
    where?: Maybe<Room_ShuffleQueueEntry_Bool_Exp>;
};

/** aggregated selection of "room.ShuffleRoom" */
export type Room_ShuffleRoom_Aggregate = {
    __typename?: "room_ShuffleRoom_aggregate";
    aggregate?: Maybe<Room_ShuffleRoom_Aggregate_Fields>;
    nodes: Array<Room_ShuffleRoom>;
};

/** aggregate fields of "room.ShuffleRoom" */
export type Room_ShuffleRoom_Aggregate_Fields = {
    __typename?: "room_ShuffleRoom_aggregate_fields";
    avg?: Maybe<Room_ShuffleRoom_Avg_Fields>;
    count: Scalars["Int"];
    max?: Maybe<Room_ShuffleRoom_Max_Fields>;
    min?: Maybe<Room_ShuffleRoom_Min_Fields>;
    stddev?: Maybe<Room_ShuffleRoom_Stddev_Fields>;
    stddev_pop?: Maybe<Room_ShuffleRoom_Stddev_Pop_Fields>;
    stddev_samp?: Maybe<Room_ShuffleRoom_Stddev_Samp_Fields>;
    sum?: Maybe<Room_ShuffleRoom_Sum_Fields>;
    var_pop?: Maybe<Room_ShuffleRoom_Var_Pop_Fields>;
    var_samp?: Maybe<Room_ShuffleRoom_Var_Samp_Fields>;
    variance?: Maybe<Room_ShuffleRoom_Variance_Fields>;
};

/** aggregate fields of "room.ShuffleRoom" */
export type Room_ShuffleRoom_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Room_ShuffleRoom_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "room.ShuffleRoom" */
export type Room_ShuffleRoom_Aggregate_Order_By = {
    avg?: Maybe<Room_ShuffleRoom_Avg_Order_By>;
    count?: Maybe<Order_By>;
    max?: Maybe<Room_ShuffleRoom_Max_Order_By>;
    min?: Maybe<Room_ShuffleRoom_Min_Order_By>;
    stddev?: Maybe<Room_ShuffleRoom_Stddev_Order_By>;
    stddev_pop?: Maybe<Room_ShuffleRoom_Stddev_Pop_Order_By>;
    stddev_samp?: Maybe<Room_ShuffleRoom_Stddev_Samp_Order_By>;
    sum?: Maybe<Room_ShuffleRoom_Sum_Order_By>;
    var_pop?: Maybe<Room_ShuffleRoom_Var_Pop_Order_By>;
    var_samp?: Maybe<Room_ShuffleRoom_Var_Samp_Order_By>;
    variance?: Maybe<Room_ShuffleRoom_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "room.ShuffleRoom" */
export type Room_ShuffleRoom_Arr_Rel_Insert_Input = {
    data: Array<Room_ShuffleRoom_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Room_ShuffleRoom_On_Conflict>;
};

/** aggregate avg on columns */
export type Room_ShuffleRoom_Avg_Fields = {
    __typename?: "room_ShuffleRoom_avg_fields";
    durationMinutes?: Maybe<Scalars["Float"]>;
    id?: Maybe<Scalars["Float"]>;
};

/** order by avg() on columns of table "room.ShuffleRoom" */
export type Room_ShuffleRoom_Avg_Order_By = {
    durationMinutes?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "room.ShuffleRoom". All fields are combined with a logical 'AND'. */
export type Room_ShuffleRoom_Bool_Exp = {
    _and?: Maybe<Array<Room_ShuffleRoom_Bool_Exp>>;
    _not?: Maybe<Room_ShuffleRoom_Bool_Exp>;
    _or?: Maybe<Array<Room_ShuffleRoom_Bool_Exp>>;
    continuations?: Maybe<Schedule_Continuation_Bool_Exp>;
    created_at?: Maybe<Timestamptz_Comparison_Exp>;
    durationMinutes?: Maybe<Int_Comparison_Exp>;
    id?: Maybe<Bigint_Comparison_Exp>;
    isEnded?: Maybe<Boolean_Comparison_Exp>;
    queueEntries?: Maybe<Room_ShuffleQueueEntry_Bool_Exp>;
    reshuffleUponEnd?: Maybe<Boolean_Comparison_Exp>;
    room?: Maybe<Room_Room_Bool_Exp>;
    roomId?: Maybe<Uuid_Comparison_Exp>;
    shufflePeriod?: Maybe<Room_ShufflePeriod_Bool_Exp>;
    shufflePeriodId?: Maybe<Uuid_Comparison_Exp>;
    startedAt?: Maybe<Timestamptz_Comparison_Exp>;
    updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "room.ShuffleRoom" */
export enum Room_ShuffleRoom_Constraint {
    /** unique or primary key constraint */
    ShuffleRoomPkey = "ShuffleRoom_pkey",
}

/** input type for incrementing numeric columns in table "room.ShuffleRoom" */
export type Room_ShuffleRoom_Inc_Input = {
    durationMinutes?: Maybe<Scalars["Int"]>;
    id?: Maybe<Scalars["bigint"]>;
};

/** input type for inserting data into table "room.ShuffleRoom" */
export type Room_ShuffleRoom_Insert_Input = {
    continuations?: Maybe<Schedule_Continuation_Arr_Rel_Insert_Input>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    durationMinutes?: Maybe<Scalars["Int"]>;
    id?: Maybe<Scalars["bigint"]>;
    isEnded?: Maybe<Scalars["Boolean"]>;
    queueEntries?: Maybe<Room_ShuffleQueueEntry_Arr_Rel_Insert_Input>;
    reshuffleUponEnd?: Maybe<Scalars["Boolean"]>;
    room?: Maybe<Room_Room_Obj_Rel_Insert_Input>;
    roomId?: Maybe<Scalars["uuid"]>;
    shufflePeriod?: Maybe<Room_ShufflePeriod_Obj_Rel_Insert_Input>;
    shufflePeriodId?: Maybe<Scalars["uuid"]>;
    startedAt?: Maybe<Scalars["timestamptz"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Room_ShuffleRoom_Max_Fields = {
    __typename?: "room_ShuffleRoom_max_fields";
    created_at?: Maybe<Scalars["timestamptz"]>;
    durationMinutes?: Maybe<Scalars["Int"]>;
    id?: Maybe<Scalars["bigint"]>;
    roomId?: Maybe<Scalars["uuid"]>;
    shufflePeriodId?: Maybe<Scalars["uuid"]>;
    startedAt?: Maybe<Scalars["timestamptz"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** order by max() on columns of table "room.ShuffleRoom" */
export type Room_ShuffleRoom_Max_Order_By = {
    created_at?: Maybe<Order_By>;
    durationMinutes?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    roomId?: Maybe<Order_By>;
    shufflePeriodId?: Maybe<Order_By>;
    startedAt?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Room_ShuffleRoom_Min_Fields = {
    __typename?: "room_ShuffleRoom_min_fields";
    created_at?: Maybe<Scalars["timestamptz"]>;
    durationMinutes?: Maybe<Scalars["Int"]>;
    id?: Maybe<Scalars["bigint"]>;
    roomId?: Maybe<Scalars["uuid"]>;
    shufflePeriodId?: Maybe<Scalars["uuid"]>;
    startedAt?: Maybe<Scalars["timestamptz"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** order by min() on columns of table "room.ShuffleRoom" */
export type Room_ShuffleRoom_Min_Order_By = {
    created_at?: Maybe<Order_By>;
    durationMinutes?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    roomId?: Maybe<Order_By>;
    shufflePeriodId?: Maybe<Order_By>;
    startedAt?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** response of any mutation on the table "room.ShuffleRoom" */
export type Room_ShuffleRoom_Mutation_Response = {
    __typename?: "room_ShuffleRoom_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Room_ShuffleRoom>;
};

/** input type for inserting object relation for remote table "room.ShuffleRoom" */
export type Room_ShuffleRoom_Obj_Rel_Insert_Input = {
    data: Room_ShuffleRoom_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Room_ShuffleRoom_On_Conflict>;
};

/** on conflict condition type for table "room.ShuffleRoom" */
export type Room_ShuffleRoom_On_Conflict = {
    constraint: Room_ShuffleRoom_Constraint;
    update_columns?: Array<Room_ShuffleRoom_Update_Column>;
    where?: Maybe<Room_ShuffleRoom_Bool_Exp>;
};

/** Ordering options when selecting data from "room.ShuffleRoom". */
export type Room_ShuffleRoom_Order_By = {
    continuations_aggregate?: Maybe<Schedule_Continuation_Aggregate_Order_By>;
    created_at?: Maybe<Order_By>;
    durationMinutes?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    isEnded?: Maybe<Order_By>;
    queueEntries_aggregate?: Maybe<Room_ShuffleQueueEntry_Aggregate_Order_By>;
    reshuffleUponEnd?: Maybe<Order_By>;
    room?: Maybe<Room_Room_Order_By>;
    roomId?: Maybe<Order_By>;
    shufflePeriod?: Maybe<Room_ShufflePeriod_Order_By>;
    shufflePeriodId?: Maybe<Order_By>;
    startedAt?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** primary key columns input for table: room_ShuffleRoom */
export type Room_ShuffleRoom_Pk_Columns_Input = {
    id: Scalars["bigint"];
};

/** select columns of table "room.ShuffleRoom" */
export enum Room_ShuffleRoom_Select_Column {
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    DurationMinutes = "durationMinutes",
    /** column name */
    Id = "id",
    /** column name */
    IsEnded = "isEnded",
    /** column name */
    ReshuffleUponEnd = "reshuffleUponEnd",
    /** column name */
    RoomId = "roomId",
    /** column name */
    ShufflePeriodId = "shufflePeriodId",
    /** column name */
    StartedAt = "startedAt",
    /** column name */
    UpdatedAt = "updated_at",
}

/** input type for updating data in table "room.ShuffleRoom" */
export type Room_ShuffleRoom_Set_Input = {
    created_at?: Maybe<Scalars["timestamptz"]>;
    durationMinutes?: Maybe<Scalars["Int"]>;
    id?: Maybe<Scalars["bigint"]>;
    isEnded?: Maybe<Scalars["Boolean"]>;
    reshuffleUponEnd?: Maybe<Scalars["Boolean"]>;
    roomId?: Maybe<Scalars["uuid"]>;
    shufflePeriodId?: Maybe<Scalars["uuid"]>;
    startedAt?: Maybe<Scalars["timestamptz"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate stddev on columns */
export type Room_ShuffleRoom_Stddev_Fields = {
    __typename?: "room_ShuffleRoom_stddev_fields";
    durationMinutes?: Maybe<Scalars["Float"]>;
    id?: Maybe<Scalars["Float"]>;
};

/** order by stddev() on columns of table "room.ShuffleRoom" */
export type Room_ShuffleRoom_Stddev_Order_By = {
    durationMinutes?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Room_ShuffleRoom_Stddev_Pop_Fields = {
    __typename?: "room_ShuffleRoom_stddev_pop_fields";
    durationMinutes?: Maybe<Scalars["Float"]>;
    id?: Maybe<Scalars["Float"]>;
};

/** order by stddev_pop() on columns of table "room.ShuffleRoom" */
export type Room_ShuffleRoom_Stddev_Pop_Order_By = {
    durationMinutes?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Room_ShuffleRoom_Stddev_Samp_Fields = {
    __typename?: "room_ShuffleRoom_stddev_samp_fields";
    durationMinutes?: Maybe<Scalars["Float"]>;
    id?: Maybe<Scalars["Float"]>;
};

/** order by stddev_samp() on columns of table "room.ShuffleRoom" */
export type Room_ShuffleRoom_Stddev_Samp_Order_By = {
    durationMinutes?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Room_ShuffleRoom_Sum_Fields = {
    __typename?: "room_ShuffleRoom_sum_fields";
    durationMinutes?: Maybe<Scalars["Int"]>;
    id?: Maybe<Scalars["bigint"]>;
};

/** order by sum() on columns of table "room.ShuffleRoom" */
export type Room_ShuffleRoom_Sum_Order_By = {
    durationMinutes?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
};

/** update columns of table "room.ShuffleRoom" */
export enum Room_ShuffleRoom_Update_Column {
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    DurationMinutes = "durationMinutes",
    /** column name */
    Id = "id",
    /** column name */
    IsEnded = "isEnded",
    /** column name */
    ReshuffleUponEnd = "reshuffleUponEnd",
    /** column name */
    RoomId = "roomId",
    /** column name */
    ShufflePeriodId = "shufflePeriodId",
    /** column name */
    StartedAt = "startedAt",
    /** column name */
    UpdatedAt = "updated_at",
}

/** aggregate var_pop on columns */
export type Room_ShuffleRoom_Var_Pop_Fields = {
    __typename?: "room_ShuffleRoom_var_pop_fields";
    durationMinutes?: Maybe<Scalars["Float"]>;
    id?: Maybe<Scalars["Float"]>;
};

/** order by var_pop() on columns of table "room.ShuffleRoom" */
export type Room_ShuffleRoom_Var_Pop_Order_By = {
    durationMinutes?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Room_ShuffleRoom_Var_Samp_Fields = {
    __typename?: "room_ShuffleRoom_var_samp_fields";
    durationMinutes?: Maybe<Scalars["Float"]>;
    id?: Maybe<Scalars["Float"]>;
};

/** order by var_samp() on columns of table "room.ShuffleRoom" */
export type Room_ShuffleRoom_Var_Samp_Order_By = {
    durationMinutes?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Room_ShuffleRoom_Variance_Fields = {
    __typename?: "room_ShuffleRoom_variance_fields";
    durationMinutes?: Maybe<Scalars["Float"]>;
    id?: Maybe<Scalars["Float"]>;
};

/** order by variance() on columns of table "room.ShuffleRoom" */
export type Room_ShuffleRoom_Variance_Order_By = {
    durationMinutes?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
};

/**
 * A continuation from the end of an event or shuffle room to the next thing. Enables organisers to create a guided flow for attendees. It is possible to specify multiple continuations from the same point, giving attendees a choice of where to go.
 *
 *
 * columns and relationships of "schedule.Continuation"
 */
export type Schedule_Continuation = {
    __typename?: "schedule_Continuation";
    colour: Scalars["String"];
    defaultFor: Scalars["String"];
    description: Scalars["String"];
    /** An object relationship */
    event?: Maybe<Schedule_Event>;
    fromEvent?: Maybe<Scalars["uuid"]>;
    fromShuffleQueue?: Maybe<Scalars["uuid"]>;
    id: Scalars["uuid"];
    isActiveChoice: Scalars["Boolean"];
    priority: Scalars["Int"];
    /** An object relationship */
    shufflePeriod?: Maybe<Room_ShufflePeriod>;
    to: Scalars["jsonb"];
};

/**
 * A continuation from the end of an event or shuffle room to the next thing. Enables organisers to create a guided flow for attendees. It is possible to specify multiple continuations from the same point, giving attendees a choice of where to go.
 *
 *
 * columns and relationships of "schedule.Continuation"
 */
export type Schedule_ContinuationToArgs = {
    path?: Maybe<Scalars["String"]>;
};

/** aggregated selection of "schedule.Continuation" */
export type Schedule_Continuation_Aggregate = {
    __typename?: "schedule_Continuation_aggregate";
    aggregate?: Maybe<Schedule_Continuation_Aggregate_Fields>;
    nodes: Array<Schedule_Continuation>;
};

/** aggregate fields of "schedule.Continuation" */
export type Schedule_Continuation_Aggregate_Fields = {
    __typename?: "schedule_Continuation_aggregate_fields";
    avg?: Maybe<Schedule_Continuation_Avg_Fields>;
    count: Scalars["Int"];
    max?: Maybe<Schedule_Continuation_Max_Fields>;
    min?: Maybe<Schedule_Continuation_Min_Fields>;
    stddev?: Maybe<Schedule_Continuation_Stddev_Fields>;
    stddev_pop?: Maybe<Schedule_Continuation_Stddev_Pop_Fields>;
    stddev_samp?: Maybe<Schedule_Continuation_Stddev_Samp_Fields>;
    sum?: Maybe<Schedule_Continuation_Sum_Fields>;
    var_pop?: Maybe<Schedule_Continuation_Var_Pop_Fields>;
    var_samp?: Maybe<Schedule_Continuation_Var_Samp_Fields>;
    variance?: Maybe<Schedule_Continuation_Variance_Fields>;
};

/** aggregate fields of "schedule.Continuation" */
export type Schedule_Continuation_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Schedule_Continuation_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "schedule.Continuation" */
export type Schedule_Continuation_Aggregate_Order_By = {
    avg?: Maybe<Schedule_Continuation_Avg_Order_By>;
    count?: Maybe<Order_By>;
    max?: Maybe<Schedule_Continuation_Max_Order_By>;
    min?: Maybe<Schedule_Continuation_Min_Order_By>;
    stddev?: Maybe<Schedule_Continuation_Stddev_Order_By>;
    stddev_pop?: Maybe<Schedule_Continuation_Stddev_Pop_Order_By>;
    stddev_samp?: Maybe<Schedule_Continuation_Stddev_Samp_Order_By>;
    sum?: Maybe<Schedule_Continuation_Sum_Order_By>;
    var_pop?: Maybe<Schedule_Continuation_Var_Pop_Order_By>;
    var_samp?: Maybe<Schedule_Continuation_Var_Samp_Order_By>;
    variance?: Maybe<Schedule_Continuation_Variance_Order_By>;
};

/** append existing jsonb value of filtered columns with new jsonb value */
export type Schedule_Continuation_Append_Input = {
    to?: Maybe<Scalars["jsonb"]>;
};

/** input type for inserting array relation for remote table "schedule.Continuation" */
export type Schedule_Continuation_Arr_Rel_Insert_Input = {
    data: Array<Schedule_Continuation_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Schedule_Continuation_On_Conflict>;
};

/** aggregate avg on columns */
export type Schedule_Continuation_Avg_Fields = {
    __typename?: "schedule_Continuation_avg_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by avg() on columns of table "schedule.Continuation" */
export type Schedule_Continuation_Avg_Order_By = {
    priority?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "schedule.Continuation". All fields are combined with a logical 'AND'. */
export type Schedule_Continuation_Bool_Exp = {
    _and?: Maybe<Array<Schedule_Continuation_Bool_Exp>>;
    _not?: Maybe<Schedule_Continuation_Bool_Exp>;
    _or?: Maybe<Array<Schedule_Continuation_Bool_Exp>>;
    colour?: Maybe<String_Comparison_Exp>;
    defaultFor?: Maybe<String_Comparison_Exp>;
    description?: Maybe<String_Comparison_Exp>;
    event?: Maybe<Schedule_Event_Bool_Exp>;
    fromEvent?: Maybe<Uuid_Comparison_Exp>;
    fromShuffleQueue?: Maybe<Uuid_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    isActiveChoice?: Maybe<Boolean_Comparison_Exp>;
    priority?: Maybe<Int_Comparison_Exp>;
    shufflePeriod?: Maybe<Room_ShufflePeriod_Bool_Exp>;
    to?: Maybe<Jsonb_Comparison_Exp>;
};

/** unique or primary key constraints on table "schedule.Continuation" */
export enum Schedule_Continuation_Constraint {
    /** unique or primary key constraint */
    ContinuationPkey = "Continuation_pkey",
}

/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export type Schedule_Continuation_Delete_At_Path_Input = {
    to?: Maybe<Array<Scalars["String"]>>;
};

/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
export type Schedule_Continuation_Delete_Elem_Input = {
    to?: Maybe<Scalars["Int"]>;
};

/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export type Schedule_Continuation_Delete_Key_Input = {
    to?: Maybe<Scalars["String"]>;
};

/** input type for incrementing numeric columns in table "schedule.Continuation" */
export type Schedule_Continuation_Inc_Input = {
    priority?: Maybe<Scalars["Int"]>;
};

/** input type for inserting data into table "schedule.Continuation" */
export type Schedule_Continuation_Insert_Input = {
    colour?: Maybe<Scalars["String"]>;
    defaultFor?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    event?: Maybe<Schedule_Event_Obj_Rel_Insert_Input>;
    fromEvent?: Maybe<Scalars["uuid"]>;
    fromShuffleQueue?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    isActiveChoice?: Maybe<Scalars["Boolean"]>;
    priority?: Maybe<Scalars["Int"]>;
    shufflePeriod?: Maybe<Room_ShufflePeriod_Obj_Rel_Insert_Input>;
    to?: Maybe<Scalars["jsonb"]>;
};

/** aggregate max on columns */
export type Schedule_Continuation_Max_Fields = {
    __typename?: "schedule_Continuation_max_fields";
    colour?: Maybe<Scalars["String"]>;
    defaultFor?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    fromEvent?: Maybe<Scalars["uuid"]>;
    fromShuffleQueue?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    priority?: Maybe<Scalars["Int"]>;
};

/** order by max() on columns of table "schedule.Continuation" */
export type Schedule_Continuation_Max_Order_By = {
    colour?: Maybe<Order_By>;
    defaultFor?: Maybe<Order_By>;
    description?: Maybe<Order_By>;
    fromEvent?: Maybe<Order_By>;
    fromShuffleQueue?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    priority?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Schedule_Continuation_Min_Fields = {
    __typename?: "schedule_Continuation_min_fields";
    colour?: Maybe<Scalars["String"]>;
    defaultFor?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    fromEvent?: Maybe<Scalars["uuid"]>;
    fromShuffleQueue?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    priority?: Maybe<Scalars["Int"]>;
};

/** order by min() on columns of table "schedule.Continuation" */
export type Schedule_Continuation_Min_Order_By = {
    colour?: Maybe<Order_By>;
    defaultFor?: Maybe<Order_By>;
    description?: Maybe<Order_By>;
    fromEvent?: Maybe<Order_By>;
    fromShuffleQueue?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    priority?: Maybe<Order_By>;
};

/** response of any mutation on the table "schedule.Continuation" */
export type Schedule_Continuation_Mutation_Response = {
    __typename?: "schedule_Continuation_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Schedule_Continuation>;
};

/** on conflict condition type for table "schedule.Continuation" */
export type Schedule_Continuation_On_Conflict = {
    constraint: Schedule_Continuation_Constraint;
    update_columns?: Array<Schedule_Continuation_Update_Column>;
    where?: Maybe<Schedule_Continuation_Bool_Exp>;
};

/** Ordering options when selecting data from "schedule.Continuation". */
export type Schedule_Continuation_Order_By = {
    colour?: Maybe<Order_By>;
    defaultFor?: Maybe<Order_By>;
    description?: Maybe<Order_By>;
    event?: Maybe<Schedule_Event_Order_By>;
    fromEvent?: Maybe<Order_By>;
    fromShuffleQueue?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    isActiveChoice?: Maybe<Order_By>;
    priority?: Maybe<Order_By>;
    shufflePeriod?: Maybe<Room_ShufflePeriod_Order_By>;
    to?: Maybe<Order_By>;
};

/** primary key columns input for table: schedule_Continuation */
export type Schedule_Continuation_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** prepend existing jsonb value of filtered columns with new jsonb value */
export type Schedule_Continuation_Prepend_Input = {
    to?: Maybe<Scalars["jsonb"]>;
};

/** select columns of table "schedule.Continuation" */
export enum Schedule_Continuation_Select_Column {
    /** column name */
    Colour = "colour",
    /** column name */
    DefaultFor = "defaultFor",
    /** column name */
    Description = "description",
    /** column name */
    FromEvent = "fromEvent",
    /** column name */
    FromShuffleQueue = "fromShuffleQueue",
    /** column name */
    Id = "id",
    /** column name */
    IsActiveChoice = "isActiveChoice",
    /** column name */
    Priority = "priority",
    /** column name */
    To = "to",
}

/** input type for updating data in table "schedule.Continuation" */
export type Schedule_Continuation_Set_Input = {
    colour?: Maybe<Scalars["String"]>;
    defaultFor?: Maybe<Scalars["String"]>;
    description?: Maybe<Scalars["String"]>;
    fromEvent?: Maybe<Scalars["uuid"]>;
    fromShuffleQueue?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    isActiveChoice?: Maybe<Scalars["Boolean"]>;
    priority?: Maybe<Scalars["Int"]>;
    to?: Maybe<Scalars["jsonb"]>;
};

/** aggregate stddev on columns */
export type Schedule_Continuation_Stddev_Fields = {
    __typename?: "schedule_Continuation_stddev_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by stddev() on columns of table "schedule.Continuation" */
export type Schedule_Continuation_Stddev_Order_By = {
    priority?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Schedule_Continuation_Stddev_Pop_Fields = {
    __typename?: "schedule_Continuation_stddev_pop_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by stddev_pop() on columns of table "schedule.Continuation" */
export type Schedule_Continuation_Stddev_Pop_Order_By = {
    priority?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Schedule_Continuation_Stddev_Samp_Fields = {
    __typename?: "schedule_Continuation_stddev_samp_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by stddev_samp() on columns of table "schedule.Continuation" */
export type Schedule_Continuation_Stddev_Samp_Order_By = {
    priority?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Schedule_Continuation_Sum_Fields = {
    __typename?: "schedule_Continuation_sum_fields";
    priority?: Maybe<Scalars["Int"]>;
};

/** order by sum() on columns of table "schedule.Continuation" */
export type Schedule_Continuation_Sum_Order_By = {
    priority?: Maybe<Order_By>;
};

/** update columns of table "schedule.Continuation" */
export enum Schedule_Continuation_Update_Column {
    /** column name */
    Colour = "colour",
    /** column name */
    DefaultFor = "defaultFor",
    /** column name */
    Description = "description",
    /** column name */
    FromEvent = "fromEvent",
    /** column name */
    FromShuffleQueue = "fromShuffleQueue",
    /** column name */
    Id = "id",
    /** column name */
    IsActiveChoice = "isActiveChoice",
    /** column name */
    Priority = "priority",
    /** column name */
    To = "to",
}

/** aggregate var_pop on columns */
export type Schedule_Continuation_Var_Pop_Fields = {
    __typename?: "schedule_Continuation_var_pop_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by var_pop() on columns of table "schedule.Continuation" */
export type Schedule_Continuation_Var_Pop_Order_By = {
    priority?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Schedule_Continuation_Var_Samp_Fields = {
    __typename?: "schedule_Continuation_var_samp_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by var_samp() on columns of table "schedule.Continuation" */
export type Schedule_Continuation_Var_Samp_Order_By = {
    priority?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Schedule_Continuation_Variance_Fields = {
    __typename?: "schedule_Continuation_variance_fields";
    priority?: Maybe<Scalars["Float"]>;
};

/** order by variance() on columns of table "schedule.Continuation" */
export type Schedule_Continuation_Variance_Order_By = {
    priority?: Maybe<Order_By>;
};

/** columns and relationships of "schedule.Event" */
export type Schedule_Event = {
    __typename?: "schedule_Event";
    /** An object relationship */
    conference: Conference_Conference;
    conferenceId: Scalars["uuid"];
    /** An array relationship */
    continuations: Array<Schedule_Continuation>;
    /** An aggregate relationship */
    continuations_aggregate: Schedule_Continuation_Aggregate;
    createdAt: Scalars["timestamptz"];
    durationSeconds: Scalars["Int"];
    endTime?: Maybe<Scalars["timestamptz"]>;
    /** An array relationship */
    eventPeople: Array<Schedule_EventProgramPerson>;
    /** An aggregate relationship */
    eventPeople_aggregate: Schedule_EventProgramPerson_Aggregate;
    /** An array relationship */
    eventTags: Array<Schedule_EventTag>;
    /** An aggregate relationship */
    eventTags_aggregate: Schedule_EventTag_Aggregate;
    /** An object relationship */
    eventVonageSession?: Maybe<Video_EventVonageSession>;
    /** An object relationship */
    exhibition?: Maybe<Collection_Exhibition>;
    exhibitionId?: Maybe<Scalars["uuid"]>;
    id: Scalars["uuid"];
    intendedRoomModeName: Room_Mode_Enum;
    /** An object relationship */
    item?: Maybe<Content_Item>;
    itemId?: Maybe<Scalars["uuid"]>;
    name: Scalars["String"];
    /** An object relationship */
    originatingData?: Maybe<Conference_OriginatingData>;
    originatingDataId?: Maybe<Scalars["uuid"]>;
    /** An array relationship */
    participantStreams: Array<Video_EventParticipantStream>;
    /** An aggregate relationship */
    participantStreams_aggregate: Video_EventParticipantStream_Aggregate;
    /** An object relationship */
    room: Room_Room;
    roomId: Scalars["uuid"];
    /** An object relationship */
    roomMode: Room_Mode;
    /** An object relationship */
    shufflePeriod?: Maybe<Room_ShufflePeriod>;
    shufflePeriodId?: Maybe<Scalars["uuid"]>;
    startTime: Scalars["timestamptz"];
    timingsUpdatedAt: Scalars["timestamptz"];
    updatedAt: Scalars["timestamptz"];
};

/** columns and relationships of "schedule.Event" */
export type Schedule_EventContinuationsArgs = {
    distinct_on?: Maybe<Array<Schedule_Continuation_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_Continuation_Order_By>>;
    where?: Maybe<Schedule_Continuation_Bool_Exp>;
};

/** columns and relationships of "schedule.Event" */
export type Schedule_EventContinuations_AggregateArgs = {
    distinct_on?: Maybe<Array<Schedule_Continuation_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_Continuation_Order_By>>;
    where?: Maybe<Schedule_Continuation_Bool_Exp>;
};

/** columns and relationships of "schedule.Event" */
export type Schedule_EventEventPeopleArgs = {
    distinct_on?: Maybe<Array<Schedule_EventProgramPerson_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_EventProgramPerson_Order_By>>;
    where?: Maybe<Schedule_EventProgramPerson_Bool_Exp>;
};

/** columns and relationships of "schedule.Event" */
export type Schedule_EventEventPeople_AggregateArgs = {
    distinct_on?: Maybe<Array<Schedule_EventProgramPerson_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_EventProgramPerson_Order_By>>;
    where?: Maybe<Schedule_EventProgramPerson_Bool_Exp>;
};

/** columns and relationships of "schedule.Event" */
export type Schedule_EventEventTagsArgs = {
    distinct_on?: Maybe<Array<Schedule_EventTag_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_EventTag_Order_By>>;
    where?: Maybe<Schedule_EventTag_Bool_Exp>;
};

/** columns and relationships of "schedule.Event" */
export type Schedule_EventEventTags_AggregateArgs = {
    distinct_on?: Maybe<Array<Schedule_EventTag_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_EventTag_Order_By>>;
    where?: Maybe<Schedule_EventTag_Bool_Exp>;
};

/** columns and relationships of "schedule.Event" */
export type Schedule_EventParticipantStreamsArgs = {
    distinct_on?: Maybe<Array<Video_EventParticipantStream_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_EventParticipantStream_Order_By>>;
    where?: Maybe<Video_EventParticipantStream_Bool_Exp>;
};

/** columns and relationships of "schedule.Event" */
export type Schedule_EventParticipantStreams_AggregateArgs = {
    distinct_on?: Maybe<Array<Video_EventParticipantStream_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_EventParticipantStream_Order_By>>;
    where?: Maybe<Video_EventParticipantStream_Bool_Exp>;
};

/** columns and relationships of "schedule.EventProgramPerson" */
export type Schedule_EventProgramPerson = {
    __typename?: "schedule_EventProgramPerson";
    createdAt: Scalars["timestamptz"];
    /** An object relationship */
    event: Schedule_Event;
    eventId: Scalars["uuid"];
    /** An object relationship */
    eventPersonRole: Schedule_EventProgramPersonRole;
    id: Scalars["uuid"];
    /** An object relationship */
    person: Collection_ProgramPerson;
    personId: Scalars["uuid"];
    roleName: Schedule_EventProgramPersonRole_Enum;
    updatedAt: Scalars["timestamptz"];
};

/** columns and relationships of "schedule.EventProgramPersonRole" */
export type Schedule_EventProgramPersonRole = {
    __typename?: "schedule_EventProgramPersonRole";
    description: Scalars["String"];
    /** An array relationship */
    eventPeople: Array<Schedule_EventProgramPerson>;
    /** An aggregate relationship */
    eventPeople_aggregate: Schedule_EventProgramPerson_Aggregate;
    name: Scalars["String"];
};

/** columns and relationships of "schedule.EventProgramPersonRole" */
export type Schedule_EventProgramPersonRoleEventPeopleArgs = {
    distinct_on?: Maybe<Array<Schedule_EventProgramPerson_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_EventProgramPerson_Order_By>>;
    where?: Maybe<Schedule_EventProgramPerson_Bool_Exp>;
};

/** columns and relationships of "schedule.EventProgramPersonRole" */
export type Schedule_EventProgramPersonRoleEventPeople_AggregateArgs = {
    distinct_on?: Maybe<Array<Schedule_EventProgramPerson_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_EventProgramPerson_Order_By>>;
    where?: Maybe<Schedule_EventProgramPerson_Bool_Exp>;
};

/** aggregated selection of "schedule.EventProgramPersonRole" */
export type Schedule_EventProgramPersonRole_Aggregate = {
    __typename?: "schedule_EventProgramPersonRole_aggregate";
    aggregate?: Maybe<Schedule_EventProgramPersonRole_Aggregate_Fields>;
    nodes: Array<Schedule_EventProgramPersonRole>;
};

/** aggregate fields of "schedule.EventProgramPersonRole" */
export type Schedule_EventProgramPersonRole_Aggregate_Fields = {
    __typename?: "schedule_EventProgramPersonRole_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Schedule_EventProgramPersonRole_Max_Fields>;
    min?: Maybe<Schedule_EventProgramPersonRole_Min_Fields>;
};

/** aggregate fields of "schedule.EventProgramPersonRole" */
export type Schedule_EventProgramPersonRole_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Schedule_EventProgramPersonRole_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** Boolean expression to filter rows from the table "schedule.EventProgramPersonRole". All fields are combined with a logical 'AND'. */
export type Schedule_EventProgramPersonRole_Bool_Exp = {
    _and?: Maybe<Array<Schedule_EventProgramPersonRole_Bool_Exp>>;
    _not?: Maybe<Schedule_EventProgramPersonRole_Bool_Exp>;
    _or?: Maybe<Array<Schedule_EventProgramPersonRole_Bool_Exp>>;
    description?: Maybe<String_Comparison_Exp>;
    eventPeople?: Maybe<Schedule_EventProgramPerson_Bool_Exp>;
    name?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "schedule.EventProgramPersonRole" */
export enum Schedule_EventProgramPersonRole_Constraint {
    /** unique or primary key constraint */
    EventProgramPersonRolePkey = "EventProgramPersonRole_pkey",
}

export enum Schedule_EventProgramPersonRole_Enum {
    /** Chair/moderator of the event */
    Chair = "CHAIR",
    /** Viewer who has been given access to the event (e.g. to ask a question). */
    Participant = "PARTICIPANT",
    /** A presenter. */
    Presenter = "PRESENTER",
}

/** Boolean expression to compare columns of type "schedule_EventProgramPersonRole_enum". All fields are combined with logical 'AND'. */
export type Schedule_EventProgramPersonRole_Enum_Comparison_Exp = {
    _eq?: Maybe<Schedule_EventProgramPersonRole_Enum>;
    _in?: Maybe<Array<Schedule_EventProgramPersonRole_Enum>>;
    _is_null?: Maybe<Scalars["Boolean"]>;
    _neq?: Maybe<Schedule_EventProgramPersonRole_Enum>;
    _nin?: Maybe<Array<Schedule_EventProgramPersonRole_Enum>>;
};

/** input type for inserting data into table "schedule.EventProgramPersonRole" */
export type Schedule_EventProgramPersonRole_Insert_Input = {
    description?: Maybe<Scalars["String"]>;
    eventPeople?: Maybe<Schedule_EventProgramPerson_Arr_Rel_Insert_Input>;
    name?: Maybe<Scalars["String"]>;
};

/** aggregate max on columns */
export type Schedule_EventProgramPersonRole_Max_Fields = {
    __typename?: "schedule_EventProgramPersonRole_max_fields";
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** aggregate min on columns */
export type Schedule_EventProgramPersonRole_Min_Fields = {
    __typename?: "schedule_EventProgramPersonRole_min_fields";
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** response of any mutation on the table "schedule.EventProgramPersonRole" */
export type Schedule_EventProgramPersonRole_Mutation_Response = {
    __typename?: "schedule_EventProgramPersonRole_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Schedule_EventProgramPersonRole>;
};

/** input type for inserting object relation for remote table "schedule.EventProgramPersonRole" */
export type Schedule_EventProgramPersonRole_Obj_Rel_Insert_Input = {
    data: Schedule_EventProgramPersonRole_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Schedule_EventProgramPersonRole_On_Conflict>;
};

/** on conflict condition type for table "schedule.EventProgramPersonRole" */
export type Schedule_EventProgramPersonRole_On_Conflict = {
    constraint: Schedule_EventProgramPersonRole_Constraint;
    update_columns?: Array<Schedule_EventProgramPersonRole_Update_Column>;
    where?: Maybe<Schedule_EventProgramPersonRole_Bool_Exp>;
};

/** Ordering options when selecting data from "schedule.EventProgramPersonRole". */
export type Schedule_EventProgramPersonRole_Order_By = {
    description?: Maybe<Order_By>;
    eventPeople_aggregate?: Maybe<Schedule_EventProgramPerson_Aggregate_Order_By>;
    name?: Maybe<Order_By>;
};

/** primary key columns input for table: schedule_EventProgramPersonRole */
export type Schedule_EventProgramPersonRole_Pk_Columns_Input = {
    name: Scalars["String"];
};

/** select columns of table "schedule.EventProgramPersonRole" */
export enum Schedule_EventProgramPersonRole_Select_Column {
    /** column name */
    Description = "description",
    /** column name */
    Name = "name",
}

/** input type for updating data in table "schedule.EventProgramPersonRole" */
export type Schedule_EventProgramPersonRole_Set_Input = {
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** update columns of table "schedule.EventProgramPersonRole" */
export enum Schedule_EventProgramPersonRole_Update_Column {
    /** column name */
    Description = "description",
    /** column name */
    Name = "name",
}

/** aggregated selection of "schedule.EventProgramPerson" */
export type Schedule_EventProgramPerson_Aggregate = {
    __typename?: "schedule_EventProgramPerson_aggregate";
    aggregate?: Maybe<Schedule_EventProgramPerson_Aggregate_Fields>;
    nodes: Array<Schedule_EventProgramPerson>;
};

/** aggregate fields of "schedule.EventProgramPerson" */
export type Schedule_EventProgramPerson_Aggregate_Fields = {
    __typename?: "schedule_EventProgramPerson_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Schedule_EventProgramPerson_Max_Fields>;
    min?: Maybe<Schedule_EventProgramPerson_Min_Fields>;
};

/** aggregate fields of "schedule.EventProgramPerson" */
export type Schedule_EventProgramPerson_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Schedule_EventProgramPerson_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "schedule.EventProgramPerson" */
export type Schedule_EventProgramPerson_Aggregate_Order_By = {
    count?: Maybe<Order_By>;
    max?: Maybe<Schedule_EventProgramPerson_Max_Order_By>;
    min?: Maybe<Schedule_EventProgramPerson_Min_Order_By>;
};

/** input type for inserting array relation for remote table "schedule.EventProgramPerson" */
export type Schedule_EventProgramPerson_Arr_Rel_Insert_Input = {
    data: Array<Schedule_EventProgramPerson_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Schedule_EventProgramPerson_On_Conflict>;
};

/** Boolean expression to filter rows from the table "schedule.EventProgramPerson". All fields are combined with a logical 'AND'. */
export type Schedule_EventProgramPerson_Bool_Exp = {
    _and?: Maybe<Array<Schedule_EventProgramPerson_Bool_Exp>>;
    _not?: Maybe<Schedule_EventProgramPerson_Bool_Exp>;
    _or?: Maybe<Array<Schedule_EventProgramPerson_Bool_Exp>>;
    createdAt?: Maybe<Timestamptz_Comparison_Exp>;
    event?: Maybe<Schedule_Event_Bool_Exp>;
    eventId?: Maybe<Uuid_Comparison_Exp>;
    eventPersonRole?: Maybe<Schedule_EventProgramPersonRole_Bool_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    person?: Maybe<Collection_ProgramPerson_Bool_Exp>;
    personId?: Maybe<Uuid_Comparison_Exp>;
    roleName?: Maybe<Schedule_EventProgramPersonRole_Enum_Comparison_Exp>;
    updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "schedule.EventProgramPerson" */
export enum Schedule_EventProgramPerson_Constraint {
    /** unique or primary key constraint */
    EventProgramPersonEventIdPersonIdRoleNameKey = "EventProgramPerson_eventId_personId_roleName_key",
    /** unique or primary key constraint */
    EventProgramPersonPkey = "EventProgramPerson_pkey",
}

/** input type for inserting data into table "schedule.EventProgramPerson" */
export type Schedule_EventProgramPerson_Insert_Input = {
    createdAt?: Maybe<Scalars["timestamptz"]>;
    event?: Maybe<Schedule_Event_Obj_Rel_Insert_Input>;
    eventId?: Maybe<Scalars["uuid"]>;
    eventPersonRole?: Maybe<Schedule_EventProgramPersonRole_Obj_Rel_Insert_Input>;
    id?: Maybe<Scalars["uuid"]>;
    person?: Maybe<Collection_ProgramPerson_Obj_Rel_Insert_Input>;
    personId?: Maybe<Scalars["uuid"]>;
    roleName?: Maybe<Schedule_EventProgramPersonRole_Enum>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Schedule_EventProgramPerson_Max_Fields = {
    __typename?: "schedule_EventProgramPerson_max_fields";
    createdAt?: Maybe<Scalars["timestamptz"]>;
    eventId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    personId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** order by max() on columns of table "schedule.EventProgramPerson" */
export type Schedule_EventProgramPerson_Max_Order_By = {
    createdAt?: Maybe<Order_By>;
    eventId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    personId?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Schedule_EventProgramPerson_Min_Fields = {
    __typename?: "schedule_EventProgramPerson_min_fields";
    createdAt?: Maybe<Scalars["timestamptz"]>;
    eventId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    personId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** order by min() on columns of table "schedule.EventProgramPerson" */
export type Schedule_EventProgramPerson_Min_Order_By = {
    createdAt?: Maybe<Order_By>;
    eventId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    personId?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** response of any mutation on the table "schedule.EventProgramPerson" */
export type Schedule_EventProgramPerson_Mutation_Response = {
    __typename?: "schedule_EventProgramPerson_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Schedule_EventProgramPerson>;
};

/** on conflict condition type for table "schedule.EventProgramPerson" */
export type Schedule_EventProgramPerson_On_Conflict = {
    constraint: Schedule_EventProgramPerson_Constraint;
    update_columns?: Array<Schedule_EventProgramPerson_Update_Column>;
    where?: Maybe<Schedule_EventProgramPerson_Bool_Exp>;
};

/** Ordering options when selecting data from "schedule.EventProgramPerson". */
export type Schedule_EventProgramPerson_Order_By = {
    createdAt?: Maybe<Order_By>;
    event?: Maybe<Schedule_Event_Order_By>;
    eventId?: Maybe<Order_By>;
    eventPersonRole?: Maybe<Schedule_EventProgramPersonRole_Order_By>;
    id?: Maybe<Order_By>;
    person?: Maybe<Collection_ProgramPerson_Order_By>;
    personId?: Maybe<Order_By>;
    roleName?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** primary key columns input for table: schedule_EventProgramPerson */
export type Schedule_EventProgramPerson_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "schedule.EventProgramPerson" */
export enum Schedule_EventProgramPerson_Select_Column {
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    EventId = "eventId",
    /** column name */
    Id = "id",
    /** column name */
    PersonId = "personId",
    /** column name */
    RoleName = "roleName",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** input type for updating data in table "schedule.EventProgramPerson" */
export type Schedule_EventProgramPerson_Set_Input = {
    createdAt?: Maybe<Scalars["timestamptz"]>;
    eventId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    personId?: Maybe<Scalars["uuid"]>;
    roleName?: Maybe<Schedule_EventProgramPersonRole_Enum>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** update columns of table "schedule.EventProgramPerson" */
export enum Schedule_EventProgramPerson_Update_Column {
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    EventId = "eventId",
    /** column name */
    Id = "id",
    /** column name */
    PersonId = "personId",
    /** column name */
    RoleName = "roleName",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** columns and relationships of "schedule.EventTag" */
export type Schedule_EventTag = {
    __typename?: "schedule_EventTag";
    /** An object relationship */
    event: Schedule_Event;
    eventId: Scalars["uuid"];
    id: Scalars["uuid"];
    /** An object relationship */
    tag: Collection_Tag;
    tagId: Scalars["uuid"];
};

/** aggregated selection of "schedule.EventTag" */
export type Schedule_EventTag_Aggregate = {
    __typename?: "schedule_EventTag_aggregate";
    aggregate?: Maybe<Schedule_EventTag_Aggregate_Fields>;
    nodes: Array<Schedule_EventTag>;
};

/** aggregate fields of "schedule.EventTag" */
export type Schedule_EventTag_Aggregate_Fields = {
    __typename?: "schedule_EventTag_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Schedule_EventTag_Max_Fields>;
    min?: Maybe<Schedule_EventTag_Min_Fields>;
};

/** aggregate fields of "schedule.EventTag" */
export type Schedule_EventTag_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Schedule_EventTag_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "schedule.EventTag" */
export type Schedule_EventTag_Aggregate_Order_By = {
    count?: Maybe<Order_By>;
    max?: Maybe<Schedule_EventTag_Max_Order_By>;
    min?: Maybe<Schedule_EventTag_Min_Order_By>;
};

/** input type for inserting array relation for remote table "schedule.EventTag" */
export type Schedule_EventTag_Arr_Rel_Insert_Input = {
    data: Array<Schedule_EventTag_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Schedule_EventTag_On_Conflict>;
};

/** Boolean expression to filter rows from the table "schedule.EventTag". All fields are combined with a logical 'AND'. */
export type Schedule_EventTag_Bool_Exp = {
    _and?: Maybe<Array<Schedule_EventTag_Bool_Exp>>;
    _not?: Maybe<Schedule_EventTag_Bool_Exp>;
    _or?: Maybe<Array<Schedule_EventTag_Bool_Exp>>;
    event?: Maybe<Schedule_Event_Bool_Exp>;
    eventId?: Maybe<Uuid_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    tag?: Maybe<Collection_Tag_Bool_Exp>;
    tagId?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "schedule.EventTag" */
export enum Schedule_EventTag_Constraint {
    /** unique or primary key constraint */
    EventTagPkey = "EventTag_pkey",
    /** unique or primary key constraint */
    EventTagTagIdEventIdKey = "EventTag_tagId_eventId_key",
}

/** input type for inserting data into table "schedule.EventTag" */
export type Schedule_EventTag_Insert_Input = {
    event?: Maybe<Schedule_Event_Obj_Rel_Insert_Input>;
    eventId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    tag?: Maybe<Collection_Tag_Obj_Rel_Insert_Input>;
    tagId?: Maybe<Scalars["uuid"]>;
};

/** aggregate max on columns */
export type Schedule_EventTag_Max_Fields = {
    __typename?: "schedule_EventTag_max_fields";
    eventId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    tagId?: Maybe<Scalars["uuid"]>;
};

/** order by max() on columns of table "schedule.EventTag" */
export type Schedule_EventTag_Max_Order_By = {
    eventId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    tagId?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Schedule_EventTag_Min_Fields = {
    __typename?: "schedule_EventTag_min_fields";
    eventId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    tagId?: Maybe<Scalars["uuid"]>;
};

/** order by min() on columns of table "schedule.EventTag" */
export type Schedule_EventTag_Min_Order_By = {
    eventId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    tagId?: Maybe<Order_By>;
};

/** response of any mutation on the table "schedule.EventTag" */
export type Schedule_EventTag_Mutation_Response = {
    __typename?: "schedule_EventTag_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Schedule_EventTag>;
};

/** on conflict condition type for table "schedule.EventTag" */
export type Schedule_EventTag_On_Conflict = {
    constraint: Schedule_EventTag_Constraint;
    update_columns?: Array<Schedule_EventTag_Update_Column>;
    where?: Maybe<Schedule_EventTag_Bool_Exp>;
};

/** Ordering options when selecting data from "schedule.EventTag". */
export type Schedule_EventTag_Order_By = {
    event?: Maybe<Schedule_Event_Order_By>;
    eventId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    tag?: Maybe<Collection_Tag_Order_By>;
    tagId?: Maybe<Order_By>;
};

/** primary key columns input for table: schedule_EventTag */
export type Schedule_EventTag_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "schedule.EventTag" */
export enum Schedule_EventTag_Select_Column {
    /** column name */
    EventId = "eventId",
    /** column name */
    Id = "id",
    /** column name */
    TagId = "tagId",
}

/** input type for updating data in table "schedule.EventTag" */
export type Schedule_EventTag_Set_Input = {
    eventId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    tagId?: Maybe<Scalars["uuid"]>;
};

/** update columns of table "schedule.EventTag" */
export enum Schedule_EventTag_Update_Column {
    /** column name */
    EventId = "eventId",
    /** column name */
    Id = "id",
    /** column name */
    TagId = "tagId",
}

/** aggregated selection of "schedule.Event" */
export type Schedule_Event_Aggregate = {
    __typename?: "schedule_Event_aggregate";
    aggregate?: Maybe<Schedule_Event_Aggregate_Fields>;
    nodes: Array<Schedule_Event>;
};

/** aggregate fields of "schedule.Event" */
export type Schedule_Event_Aggregate_Fields = {
    __typename?: "schedule_Event_aggregate_fields";
    avg?: Maybe<Schedule_Event_Avg_Fields>;
    count: Scalars["Int"];
    max?: Maybe<Schedule_Event_Max_Fields>;
    min?: Maybe<Schedule_Event_Min_Fields>;
    stddev?: Maybe<Schedule_Event_Stddev_Fields>;
    stddev_pop?: Maybe<Schedule_Event_Stddev_Pop_Fields>;
    stddev_samp?: Maybe<Schedule_Event_Stddev_Samp_Fields>;
    sum?: Maybe<Schedule_Event_Sum_Fields>;
    var_pop?: Maybe<Schedule_Event_Var_Pop_Fields>;
    var_samp?: Maybe<Schedule_Event_Var_Samp_Fields>;
    variance?: Maybe<Schedule_Event_Variance_Fields>;
};

/** aggregate fields of "schedule.Event" */
export type Schedule_Event_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Schedule_Event_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "schedule.Event" */
export type Schedule_Event_Aggregate_Order_By = {
    avg?: Maybe<Schedule_Event_Avg_Order_By>;
    count?: Maybe<Order_By>;
    max?: Maybe<Schedule_Event_Max_Order_By>;
    min?: Maybe<Schedule_Event_Min_Order_By>;
    stddev?: Maybe<Schedule_Event_Stddev_Order_By>;
    stddev_pop?: Maybe<Schedule_Event_Stddev_Pop_Order_By>;
    stddev_samp?: Maybe<Schedule_Event_Stddev_Samp_Order_By>;
    sum?: Maybe<Schedule_Event_Sum_Order_By>;
    var_pop?: Maybe<Schedule_Event_Var_Pop_Order_By>;
    var_samp?: Maybe<Schedule_Event_Var_Samp_Order_By>;
    variance?: Maybe<Schedule_Event_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "schedule.Event" */
export type Schedule_Event_Arr_Rel_Insert_Input = {
    data: Array<Schedule_Event_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Schedule_Event_On_Conflict>;
};

/** aggregate avg on columns */
export type Schedule_Event_Avg_Fields = {
    __typename?: "schedule_Event_avg_fields";
    durationSeconds?: Maybe<Scalars["Float"]>;
};

/** order by avg() on columns of table "schedule.Event" */
export type Schedule_Event_Avg_Order_By = {
    durationSeconds?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "schedule.Event". All fields are combined with a logical 'AND'. */
export type Schedule_Event_Bool_Exp = {
    _and?: Maybe<Array<Schedule_Event_Bool_Exp>>;
    _not?: Maybe<Schedule_Event_Bool_Exp>;
    _or?: Maybe<Array<Schedule_Event_Bool_Exp>>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    continuations?: Maybe<Schedule_Continuation_Bool_Exp>;
    createdAt?: Maybe<Timestamptz_Comparison_Exp>;
    durationSeconds?: Maybe<Int_Comparison_Exp>;
    endTime?: Maybe<Timestamptz_Comparison_Exp>;
    eventPeople?: Maybe<Schedule_EventProgramPerson_Bool_Exp>;
    eventTags?: Maybe<Schedule_EventTag_Bool_Exp>;
    eventVonageSession?: Maybe<Video_EventVonageSession_Bool_Exp>;
    exhibition?: Maybe<Collection_Exhibition_Bool_Exp>;
    exhibitionId?: Maybe<Uuid_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    intendedRoomModeName?: Maybe<Room_Mode_Enum_Comparison_Exp>;
    item?: Maybe<Content_Item_Bool_Exp>;
    itemId?: Maybe<Uuid_Comparison_Exp>;
    name?: Maybe<String_Comparison_Exp>;
    originatingData?: Maybe<Conference_OriginatingData_Bool_Exp>;
    originatingDataId?: Maybe<Uuid_Comparison_Exp>;
    participantStreams?: Maybe<Video_EventParticipantStream_Bool_Exp>;
    room?: Maybe<Room_Room_Bool_Exp>;
    roomId?: Maybe<Uuid_Comparison_Exp>;
    roomMode?: Maybe<Room_Mode_Bool_Exp>;
    shufflePeriod?: Maybe<Room_ShufflePeriod_Bool_Exp>;
    shufflePeriodId?: Maybe<Uuid_Comparison_Exp>;
    startTime?: Maybe<Timestamptz_Comparison_Exp>;
    timingsUpdatedAt?: Maybe<Timestamptz_Comparison_Exp>;
    updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "schedule.Event" */
export enum Schedule_Event_Constraint {
    /** unique or primary key constraint */
    EventPkey = "Event_pkey",
}

/** input type for incrementing numeric columns in table "schedule.Event" */
export type Schedule_Event_Inc_Input = {
    durationSeconds?: Maybe<Scalars["Int"]>;
};

/** input type for inserting data into table "schedule.Event" */
export type Schedule_Event_Insert_Input = {
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    continuations?: Maybe<Schedule_Continuation_Arr_Rel_Insert_Input>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    durationSeconds?: Maybe<Scalars["Int"]>;
    endTime?: Maybe<Scalars["timestamptz"]>;
    eventPeople?: Maybe<Schedule_EventProgramPerson_Arr_Rel_Insert_Input>;
    eventTags?: Maybe<Schedule_EventTag_Arr_Rel_Insert_Input>;
    eventVonageSession?: Maybe<Video_EventVonageSession_Obj_Rel_Insert_Input>;
    exhibition?: Maybe<Collection_Exhibition_Obj_Rel_Insert_Input>;
    exhibitionId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    intendedRoomModeName?: Maybe<Room_Mode_Enum>;
    item?: Maybe<Content_Item_Obj_Rel_Insert_Input>;
    itemId?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
    originatingData?: Maybe<Conference_OriginatingData_Obj_Rel_Insert_Input>;
    originatingDataId?: Maybe<Scalars["uuid"]>;
    participantStreams?: Maybe<Video_EventParticipantStream_Arr_Rel_Insert_Input>;
    room?: Maybe<Room_Room_Obj_Rel_Insert_Input>;
    roomId?: Maybe<Scalars["uuid"]>;
    roomMode?: Maybe<Room_Mode_Obj_Rel_Insert_Input>;
    shufflePeriod?: Maybe<Room_ShufflePeriod_Obj_Rel_Insert_Input>;
    shufflePeriodId?: Maybe<Scalars["uuid"]>;
    startTime?: Maybe<Scalars["timestamptz"]>;
    timingsUpdatedAt?: Maybe<Scalars["timestamptz"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Schedule_Event_Max_Fields = {
    __typename?: "schedule_Event_max_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    durationSeconds?: Maybe<Scalars["Int"]>;
    endTime?: Maybe<Scalars["timestamptz"]>;
    exhibitionId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    itemId?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
    originatingDataId?: Maybe<Scalars["uuid"]>;
    roomId?: Maybe<Scalars["uuid"]>;
    shufflePeriodId?: Maybe<Scalars["uuid"]>;
    startTime?: Maybe<Scalars["timestamptz"]>;
    timingsUpdatedAt?: Maybe<Scalars["timestamptz"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** order by max() on columns of table "schedule.Event" */
export type Schedule_Event_Max_Order_By = {
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    durationSeconds?: Maybe<Order_By>;
    endTime?: Maybe<Order_By>;
    exhibitionId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    itemId?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    originatingDataId?: Maybe<Order_By>;
    roomId?: Maybe<Order_By>;
    shufflePeriodId?: Maybe<Order_By>;
    startTime?: Maybe<Order_By>;
    timingsUpdatedAt?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Schedule_Event_Min_Fields = {
    __typename?: "schedule_Event_min_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    durationSeconds?: Maybe<Scalars["Int"]>;
    endTime?: Maybe<Scalars["timestamptz"]>;
    exhibitionId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    itemId?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
    originatingDataId?: Maybe<Scalars["uuid"]>;
    roomId?: Maybe<Scalars["uuid"]>;
    shufflePeriodId?: Maybe<Scalars["uuid"]>;
    startTime?: Maybe<Scalars["timestamptz"]>;
    timingsUpdatedAt?: Maybe<Scalars["timestamptz"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** order by min() on columns of table "schedule.Event" */
export type Schedule_Event_Min_Order_By = {
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    durationSeconds?: Maybe<Order_By>;
    endTime?: Maybe<Order_By>;
    exhibitionId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    itemId?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    originatingDataId?: Maybe<Order_By>;
    roomId?: Maybe<Order_By>;
    shufflePeriodId?: Maybe<Order_By>;
    startTime?: Maybe<Order_By>;
    timingsUpdatedAt?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** response of any mutation on the table "schedule.Event" */
export type Schedule_Event_Mutation_Response = {
    __typename?: "schedule_Event_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Schedule_Event>;
};

/** input type for inserting object relation for remote table "schedule.Event" */
export type Schedule_Event_Obj_Rel_Insert_Input = {
    data: Schedule_Event_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Schedule_Event_On_Conflict>;
};

/** on conflict condition type for table "schedule.Event" */
export type Schedule_Event_On_Conflict = {
    constraint: Schedule_Event_Constraint;
    update_columns?: Array<Schedule_Event_Update_Column>;
    where?: Maybe<Schedule_Event_Bool_Exp>;
};

/** Ordering options when selecting data from "schedule.Event". */
export type Schedule_Event_Order_By = {
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    continuations_aggregate?: Maybe<Schedule_Continuation_Aggregate_Order_By>;
    createdAt?: Maybe<Order_By>;
    durationSeconds?: Maybe<Order_By>;
    endTime?: Maybe<Order_By>;
    eventPeople_aggregate?: Maybe<Schedule_EventProgramPerson_Aggregate_Order_By>;
    eventTags_aggregate?: Maybe<Schedule_EventTag_Aggregate_Order_By>;
    eventVonageSession?: Maybe<Video_EventVonageSession_Order_By>;
    exhibition?: Maybe<Collection_Exhibition_Order_By>;
    exhibitionId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    intendedRoomModeName?: Maybe<Order_By>;
    item?: Maybe<Content_Item_Order_By>;
    itemId?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
    originatingData?: Maybe<Conference_OriginatingData_Order_By>;
    originatingDataId?: Maybe<Order_By>;
    participantStreams_aggregate?: Maybe<Video_EventParticipantStream_Aggregate_Order_By>;
    room?: Maybe<Room_Room_Order_By>;
    roomId?: Maybe<Order_By>;
    roomMode?: Maybe<Room_Mode_Order_By>;
    shufflePeriod?: Maybe<Room_ShufflePeriod_Order_By>;
    shufflePeriodId?: Maybe<Order_By>;
    startTime?: Maybe<Order_By>;
    timingsUpdatedAt?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** primary key columns input for table: schedule_Event */
export type Schedule_Event_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "schedule.Event" */
export enum Schedule_Event_Select_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    DurationSeconds = "durationSeconds",
    /** column name */
    EndTime = "endTime",
    /** column name */
    ExhibitionId = "exhibitionId",
    /** column name */
    Id = "id",
    /** column name */
    IntendedRoomModeName = "intendedRoomModeName",
    /** column name */
    ItemId = "itemId",
    /** column name */
    Name = "name",
    /** column name */
    OriginatingDataId = "originatingDataId",
    /** column name */
    RoomId = "roomId",
    /** column name */
    ShufflePeriodId = "shufflePeriodId",
    /** column name */
    StartTime = "startTime",
    /** column name */
    TimingsUpdatedAt = "timingsUpdatedAt",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** input type for updating data in table "schedule.Event" */
export type Schedule_Event_Set_Input = {
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    durationSeconds?: Maybe<Scalars["Int"]>;
    endTime?: Maybe<Scalars["timestamptz"]>;
    exhibitionId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    intendedRoomModeName?: Maybe<Room_Mode_Enum>;
    itemId?: Maybe<Scalars["uuid"]>;
    name?: Maybe<Scalars["String"]>;
    originatingDataId?: Maybe<Scalars["uuid"]>;
    roomId?: Maybe<Scalars["uuid"]>;
    shufflePeriodId?: Maybe<Scalars["uuid"]>;
    startTime?: Maybe<Scalars["timestamptz"]>;
    timingsUpdatedAt?: Maybe<Scalars["timestamptz"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate stddev on columns */
export type Schedule_Event_Stddev_Fields = {
    __typename?: "schedule_Event_stddev_fields";
    durationSeconds?: Maybe<Scalars["Float"]>;
};

/** order by stddev() on columns of table "schedule.Event" */
export type Schedule_Event_Stddev_Order_By = {
    durationSeconds?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Schedule_Event_Stddev_Pop_Fields = {
    __typename?: "schedule_Event_stddev_pop_fields";
    durationSeconds?: Maybe<Scalars["Float"]>;
};

/** order by stddev_pop() on columns of table "schedule.Event" */
export type Schedule_Event_Stddev_Pop_Order_By = {
    durationSeconds?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Schedule_Event_Stddev_Samp_Fields = {
    __typename?: "schedule_Event_stddev_samp_fields";
    durationSeconds?: Maybe<Scalars["Float"]>;
};

/** order by stddev_samp() on columns of table "schedule.Event" */
export type Schedule_Event_Stddev_Samp_Order_By = {
    durationSeconds?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Schedule_Event_Sum_Fields = {
    __typename?: "schedule_Event_sum_fields";
    durationSeconds?: Maybe<Scalars["Int"]>;
};

/** order by sum() on columns of table "schedule.Event" */
export type Schedule_Event_Sum_Order_By = {
    durationSeconds?: Maybe<Order_By>;
};

/** update columns of table "schedule.Event" */
export enum Schedule_Event_Update_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    DurationSeconds = "durationSeconds",
    /** column name */
    EndTime = "endTime",
    /** column name */
    ExhibitionId = "exhibitionId",
    /** column name */
    Id = "id",
    /** column name */
    IntendedRoomModeName = "intendedRoomModeName",
    /** column name */
    ItemId = "itemId",
    /** column name */
    Name = "name",
    /** column name */
    OriginatingDataId = "originatingDataId",
    /** column name */
    RoomId = "roomId",
    /** column name */
    ShufflePeriodId = "shufflePeriodId",
    /** column name */
    StartTime = "startTime",
    /** column name */
    TimingsUpdatedAt = "timingsUpdatedAt",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** aggregate var_pop on columns */
export type Schedule_Event_Var_Pop_Fields = {
    __typename?: "schedule_Event_var_pop_fields";
    durationSeconds?: Maybe<Scalars["Float"]>;
};

/** order by var_pop() on columns of table "schedule.Event" */
export type Schedule_Event_Var_Pop_Order_By = {
    durationSeconds?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Schedule_Event_Var_Samp_Fields = {
    __typename?: "schedule_Event_var_samp_fields";
    durationSeconds?: Maybe<Scalars["Float"]>;
};

/** order by var_samp() on columns of table "schedule.Event" */
export type Schedule_Event_Var_Samp_Order_By = {
    durationSeconds?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Schedule_Event_Variance_Fields = {
    __typename?: "schedule_Event_variance_fields";
    durationSeconds?: Maybe<Scalars["Float"]>;
};

/** order by variance() on columns of table "schedule.Event" */
export type Schedule_Event_Variance_Order_By = {
    durationSeconds?: Maybe<Order_By>;
};

/** columns and relationships of "schedule.OverlappingEvents" */
export type Schedule_OverlappingEvents = {
    __typename?: "schedule_OverlappingEvents";
    /** An object relationship */
    conference?: Maybe<Conference_Conference>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    /** An object relationship */
    eventX?: Maybe<Schedule_Event>;
    /** An object relationship */
    eventY?: Maybe<Schedule_Event>;
    xId?: Maybe<Scalars["uuid"]>;
    yId?: Maybe<Scalars["uuid"]>;
};

/** aggregated selection of "schedule.OverlappingEvents" */
export type Schedule_OverlappingEvents_Aggregate = {
    __typename?: "schedule_OverlappingEvents_aggregate";
    aggregate?: Maybe<Schedule_OverlappingEvents_Aggregate_Fields>;
    nodes: Array<Schedule_OverlappingEvents>;
};

/** aggregate fields of "schedule.OverlappingEvents" */
export type Schedule_OverlappingEvents_Aggregate_Fields = {
    __typename?: "schedule_OverlappingEvents_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Schedule_OverlappingEvents_Max_Fields>;
    min?: Maybe<Schedule_OverlappingEvents_Min_Fields>;
};

/** aggregate fields of "schedule.OverlappingEvents" */
export type Schedule_OverlappingEvents_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Schedule_OverlappingEvents_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** Boolean expression to filter rows from the table "schedule.OverlappingEvents". All fields are combined with a logical 'AND'. */
export type Schedule_OverlappingEvents_Bool_Exp = {
    _and?: Maybe<Array<Schedule_OverlappingEvents_Bool_Exp>>;
    _not?: Maybe<Schedule_OverlappingEvents_Bool_Exp>;
    _or?: Maybe<Array<Schedule_OverlappingEvents_Bool_Exp>>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    eventX?: Maybe<Schedule_Event_Bool_Exp>;
    eventY?: Maybe<Schedule_Event_Bool_Exp>;
    xId?: Maybe<Uuid_Comparison_Exp>;
    yId?: Maybe<Uuid_Comparison_Exp>;
};

/** aggregate max on columns */
export type Schedule_OverlappingEvents_Max_Fields = {
    __typename?: "schedule_OverlappingEvents_max_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    xId?: Maybe<Scalars["uuid"]>;
    yId?: Maybe<Scalars["uuid"]>;
};

/** aggregate min on columns */
export type Schedule_OverlappingEvents_Min_Fields = {
    __typename?: "schedule_OverlappingEvents_min_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    xId?: Maybe<Scalars["uuid"]>;
    yId?: Maybe<Scalars["uuid"]>;
};

/** Ordering options when selecting data from "schedule.OverlappingEvents". */
export type Schedule_OverlappingEvents_Order_By = {
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    eventX?: Maybe<Schedule_Event_Order_By>;
    eventY?: Maybe<Schedule_Event_Order_By>;
    xId?: Maybe<Order_By>;
    yId?: Maybe<Order_By>;
};

/** select columns of table "schedule.OverlappingEvents" */
export enum Schedule_OverlappingEvents_Select_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    XId = "xId",
    /** column name */
    YId = "yId",
}

/** columns and relationships of "schedule.StarredEvent" */
export type Schedule_StarredEvent = {
    __typename?: "schedule_StarredEvent";
    created_at: Scalars["timestamptz"];
    /** An object relationship */
    event: Schedule_Event;
    eventId: Scalars["uuid"];
    id: Scalars["uuid"];
    /** An object relationship */
    registrant?: Maybe<Registrant_Registrant>;
    registrantId: Scalars["uuid"];
    updated_at: Scalars["timestamptz"];
};

/** aggregated selection of "schedule.StarredEvent" */
export type Schedule_StarredEvent_Aggregate = {
    __typename?: "schedule_StarredEvent_aggregate";
    aggregate?: Maybe<Schedule_StarredEvent_Aggregate_Fields>;
    nodes: Array<Schedule_StarredEvent>;
};

/** aggregate fields of "schedule.StarredEvent" */
export type Schedule_StarredEvent_Aggregate_Fields = {
    __typename?: "schedule_StarredEvent_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Schedule_StarredEvent_Max_Fields>;
    min?: Maybe<Schedule_StarredEvent_Min_Fields>;
};

/** aggregate fields of "schedule.StarredEvent" */
export type Schedule_StarredEvent_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Schedule_StarredEvent_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** Boolean expression to filter rows from the table "schedule.StarredEvent". All fields are combined with a logical 'AND'. */
export type Schedule_StarredEvent_Bool_Exp = {
    _and?: Maybe<Array<Schedule_StarredEvent_Bool_Exp>>;
    _not?: Maybe<Schedule_StarredEvent_Bool_Exp>;
    _or?: Maybe<Array<Schedule_StarredEvent_Bool_Exp>>;
    created_at?: Maybe<Timestamptz_Comparison_Exp>;
    event?: Maybe<Schedule_Event_Bool_Exp>;
    eventId?: Maybe<Uuid_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    registrant?: Maybe<Registrant_Registrant_Bool_Exp>;
    registrantId?: Maybe<Uuid_Comparison_Exp>;
    updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "schedule.StarredEvent" */
export enum Schedule_StarredEvent_Constraint {
    /** unique or primary key constraint */
    StarredEventEventIdRegistrantIdKey = "StarredEvent_eventId_registrantId_key",
    /** unique or primary key constraint */
    StarredEventPkey = "StarredEvent_pkey",
}

/** input type for inserting data into table "schedule.StarredEvent" */
export type Schedule_StarredEvent_Insert_Input = {
    created_at?: Maybe<Scalars["timestamptz"]>;
    event?: Maybe<Schedule_Event_Obj_Rel_Insert_Input>;
    eventId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    registrant?: Maybe<Registrant_Registrant_Obj_Rel_Insert_Input>;
    registrantId?: Maybe<Scalars["uuid"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Schedule_StarredEvent_Max_Fields = {
    __typename?: "schedule_StarredEvent_max_fields";
    created_at?: Maybe<Scalars["timestamptz"]>;
    eventId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate min on columns */
export type Schedule_StarredEvent_Min_Fields = {
    __typename?: "schedule_StarredEvent_min_fields";
    created_at?: Maybe<Scalars["timestamptz"]>;
    eventId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** response of any mutation on the table "schedule.StarredEvent" */
export type Schedule_StarredEvent_Mutation_Response = {
    __typename?: "schedule_StarredEvent_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Schedule_StarredEvent>;
};

/** on conflict condition type for table "schedule.StarredEvent" */
export type Schedule_StarredEvent_On_Conflict = {
    constraint: Schedule_StarredEvent_Constraint;
    update_columns?: Array<Schedule_StarredEvent_Update_Column>;
    where?: Maybe<Schedule_StarredEvent_Bool_Exp>;
};

/** Ordering options when selecting data from "schedule.StarredEvent". */
export type Schedule_StarredEvent_Order_By = {
    created_at?: Maybe<Order_By>;
    event?: Maybe<Schedule_Event_Order_By>;
    eventId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    registrant?: Maybe<Registrant_Registrant_Order_By>;
    registrantId?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** primary key columns input for table: schedule_StarredEvent */
export type Schedule_StarredEvent_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "schedule.StarredEvent" */
export enum Schedule_StarredEvent_Select_Column {
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    EventId = "eventId",
    /** column name */
    Id = "id",
    /** column name */
    RegistrantId = "registrantId",
    /** column name */
    UpdatedAt = "updated_at",
}

/** input type for updating data in table "schedule.StarredEvent" */
export type Schedule_StarredEvent_Set_Input = {
    created_at?: Maybe<Scalars["timestamptz"]>;
    eventId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** update columns of table "schedule.StarredEvent" */
export enum Schedule_StarredEvent_Update_Column {
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    EventId = "eventId",
    /** column name */
    Id = "id",
    /** column name */
    RegistrantId = "registrantId",
    /** column name */
    UpdatedAt = "updated_at",
}

export type Subscription_Root = {
    __typename?: "subscription_root";
    /** fetch data from the table: "Email" */
    Email: Array<Email>;
    /** fetch aggregated fields from the table: "Email" */
    Email_aggregate: Email_Aggregate;
    /** fetch data from the table: "Email" using primary key columns */
    Email_by_pk?: Maybe<Email>;
    /** fetch data from the table: "FlatUnauthPermission" */
    FlatUnauthPermission: Array<FlatUnauthPermission>;
    /** fetch aggregated fields from the table: "FlatUnauthPermission" */
    FlatUnauthPermission_aggregate: FlatUnauthPermission_Aggregate;
    /** fetch data from the table: "FlatUserPermission" */
    FlatUserPermission: Array<FlatUserPermission>;
    /** fetch aggregated fields from the table: "FlatUserPermission" */
    FlatUserPermission_aggregate: FlatUserPermission_Aggregate;
    /** fetch data from the table: "PushNotificationSubscription" */
    PushNotificationSubscription: Array<PushNotificationSubscription>;
    /** fetch aggregated fields from the table: "PushNotificationSubscription" */
    PushNotificationSubscription_aggregate: PushNotificationSubscription_Aggregate;
    /** fetch data from the table: "PushNotificationSubscription" using primary key columns */
    PushNotificationSubscription_by_pk?: Maybe<PushNotificationSubscription>;
    /** fetch data from the table: "User" */
    User: Array<User>;
    /** fetch aggregated fields from the table: "User" */
    User_aggregate: User_Aggregate;
    /** fetch data from the table: "User" using primary key columns */
    User_by_pk?: Maybe<User>;
    /** fetch data from the table: "analytics.AppStats" */
    analytics_AppStats: Array<Analytics_AppStats>;
    /** fetch aggregated fields from the table: "analytics.AppStats" */
    analytics_AppStats_aggregate: Analytics_AppStats_Aggregate;
    /** fetch data from the table: "analytics.AppStats" using primary key columns */
    analytics_AppStats_by_pk?: Maybe<Analytics_AppStats>;
    /** fetch data from the table: "analytics.CompletedRegistrations" */
    analytics_CompletedRegistrations: Array<Analytics_CompletedRegistrations>;
    /** fetch aggregated fields from the table: "analytics.CompletedRegistrations" */
    analytics_CompletedRegistrations_aggregate: Analytics_CompletedRegistrations_Aggregate;
    /** fetch data from the table: "analytics.ContentElementStats" */
    analytics_ContentElementStats: Array<Analytics_ContentElementStats>;
    /** fetch aggregated fields from the table: "analytics.ContentElementStats" */
    analytics_ContentElementStats_aggregate: Analytics_ContentElementStats_Aggregate;
    /** fetch data from the table: "analytics.ContentElementStats" using primary key columns */
    analytics_ContentElementStats_by_pk?: Maybe<Analytics_ContentElementStats>;
    /** fetch data from the table: "analytics.ContentItemStats" */
    analytics_ContentItemStats: Array<Analytics_ContentItemStats>;
    /** fetch aggregated fields from the table: "analytics.ContentItemStats" */
    analytics_ContentItemStats_aggregate: Analytics_ContentItemStats_Aggregate;
    /** fetch data from the table: "analytics.ContentItemStats" using primary key columns */
    analytics_ContentItemStats_by_pk?: Maybe<Analytics_ContentItemStats>;
    /** fetch data from the table: "analytics.ElementTotalViews" */
    analytics_ElementTotalViews: Array<Analytics_ElementTotalViews>;
    /** fetch aggregated fields from the table: "analytics.ElementTotalViews" */
    analytics_ElementTotalViews_aggregate: Analytics_ElementTotalViews_Aggregate;
    /** fetch data from the table: "analytics.ItemTotalViews" */
    analytics_ItemTotalViews: Array<Analytics_ItemTotalViews>;
    /** fetch aggregated fields from the table: "analytics.ItemTotalViews" */
    analytics_ItemTotalViews_aggregate: Analytics_ItemTotalViews_Aggregate;
    /** fetch data from the table: "analytics.RoomPresence" */
    analytics_RoomPresence: Array<Analytics_RoomPresence>;
    /** fetch aggregated fields from the table: "analytics.RoomPresence" */
    analytics_RoomPresence_aggregate: Analytics_RoomPresence_Aggregate;
    /** fetch data from the table: "analytics.RoomStats" */
    analytics_RoomStats: Array<Analytics_RoomStats>;
    /** fetch aggregated fields from the table: "analytics.RoomStats" */
    analytics_RoomStats_aggregate: Analytics_RoomStats_Aggregate;
    /** fetch data from the table: "analytics.RoomStats" using primary key columns */
    analytics_RoomStats_by_pk?: Maybe<Analytics_RoomStats>;
    /** fetch data from the table: "analytics.mat_ElementTotalViews" */
    analytics_mat_ElementTotalViews: Array<Analytics_Mat_ElementTotalViews>;
    /** fetch aggregated fields from the table: "analytics.mat_ElementTotalViews" */
    analytics_mat_ElementTotalViews_aggregate: Analytics_Mat_ElementTotalViews_Aggregate;
    /** fetch data from the table: "analytics.mat_ItemTotalViews" */
    analytics_mat_ItemTotalViews: Array<Analytics_Mat_ItemTotalViews>;
    /** fetch aggregated fields from the table: "analytics.mat_ItemTotalViews" */
    analytics_mat_ItemTotalViews_aggregate: Analytics_Mat_ItemTotalViews_Aggregate;
    /** fetch data from the table: "analytics.mat_RoomPresence" */
    analytics_mat_RoomPresence: Array<Analytics_Mat_RoomPresence>;
    /** fetch aggregated fields from the table: "analytics.mat_RoomPresence" */
    analytics_mat_RoomPresence_aggregate: Analytics_Mat_RoomPresence_Aggregate;
    /** fetch data from the table: "chat.Chat" */
    chat_Chat: Array<Chat_Chat>;
    /** fetch aggregated fields from the table: "chat.Chat" */
    chat_Chat_aggregate: Chat_Chat_Aggregate;
    /** fetch data from the table: "chat.Chat" using primary key columns */
    chat_Chat_by_pk?: Maybe<Chat_Chat>;
    /** fetch data from the table: "chat.Flag" */
    chat_Flag: Array<Chat_Flag>;
    /** fetch data from the table: "chat.FlagType" */
    chat_FlagType: Array<Chat_FlagType>;
    /** fetch aggregated fields from the table: "chat.FlagType" */
    chat_FlagType_aggregate: Chat_FlagType_Aggregate;
    /** fetch data from the table: "chat.FlagType" using primary key columns */
    chat_FlagType_by_pk?: Maybe<Chat_FlagType>;
    /** fetch aggregated fields from the table: "chat.Flag" */
    chat_Flag_aggregate: Chat_Flag_Aggregate;
    /** fetch data from the table: "chat.Flag" using primary key columns */
    chat_Flag_by_pk?: Maybe<Chat_Flag>;
    /** fetch data from the table: "chat.Message" */
    chat_Message: Array<Chat_Message>;
    /** fetch data from the table: "chat.MessageType" */
    chat_MessageType: Array<Chat_MessageType>;
    /** fetch aggregated fields from the table: "chat.MessageType" */
    chat_MessageType_aggregate: Chat_MessageType_Aggregate;
    /** fetch data from the table: "chat.MessageType" using primary key columns */
    chat_MessageType_by_pk?: Maybe<Chat_MessageType>;
    /** fetch aggregated fields from the table: "chat.Message" */
    chat_Message_aggregate: Chat_Message_Aggregate;
    /** fetch data from the table: "chat.Message" using primary key columns */
    chat_Message_by_pk?: Maybe<Chat_Message>;
    /** fetch data from the table: "chat.Pin" */
    chat_Pin: Array<Chat_Pin>;
    /** fetch aggregated fields from the table: "chat.Pin" */
    chat_Pin_aggregate: Chat_Pin_Aggregate;
    /** fetch data from the table: "chat.Pin" using primary key columns */
    chat_Pin_by_pk?: Maybe<Chat_Pin>;
    /** fetch data from the table: "chat.Reaction" */
    chat_Reaction: Array<Chat_Reaction>;
    /** fetch data from the table: "chat.ReactionType" */
    chat_ReactionType: Array<Chat_ReactionType>;
    /** fetch aggregated fields from the table: "chat.ReactionType" */
    chat_ReactionType_aggregate: Chat_ReactionType_Aggregate;
    /** fetch data from the table: "chat.ReactionType" using primary key columns */
    chat_ReactionType_by_pk?: Maybe<Chat_ReactionType>;
    /** fetch aggregated fields from the table: "chat.Reaction" */
    chat_Reaction_aggregate: Chat_Reaction_Aggregate;
    /** fetch data from the table: "chat.Reaction" using primary key columns */
    chat_Reaction_by_pk?: Maybe<Chat_Reaction>;
    /** fetch data from the table: "chat.ReadUpToIndex" */
    chat_ReadUpToIndex: Array<Chat_ReadUpToIndex>;
    /** fetch aggregated fields from the table: "chat.ReadUpToIndex" */
    chat_ReadUpToIndex_aggregate: Chat_ReadUpToIndex_Aggregate;
    /** fetch data from the table: "chat.ReadUpToIndex" using primary key columns */
    chat_ReadUpToIndex_by_pk?: Maybe<Chat_ReadUpToIndex>;
    /** fetch data from the table: "chat.Subscription" */
    chat_Subscription: Array<Chat_Subscription>;
    /** fetch aggregated fields from the table: "chat.Subscription" */
    chat_Subscription_aggregate: Chat_Subscription_Aggregate;
    /** fetch data from the table: "chat.Subscription" using primary key columns */
    chat_Subscription_by_pk?: Maybe<Chat_Subscription>;
    /** fetch data from the table: "collection.Exhibition" */
    collection_Exhibition: Array<Collection_Exhibition>;
    /** fetch aggregated fields from the table: "collection.Exhibition" */
    collection_Exhibition_aggregate: Collection_Exhibition_Aggregate;
    /** fetch data from the table: "collection.Exhibition" using primary key columns */
    collection_Exhibition_by_pk?: Maybe<Collection_Exhibition>;
    /** fetch data from the table: "collection.ProgramPerson" */
    collection_ProgramPerson: Array<Collection_ProgramPerson>;
    /** fetch aggregated fields from the table: "collection.ProgramPerson" */
    collection_ProgramPerson_aggregate: Collection_ProgramPerson_Aggregate;
    /** fetch data from the table: "collection.ProgramPerson" using primary key columns */
    collection_ProgramPerson_by_pk?: Maybe<Collection_ProgramPerson>;
    /** fetch data from the table: "collection.Tag" */
    collection_Tag: Array<Collection_Tag>;
    /** fetch aggregated fields from the table: "collection.Tag" */
    collection_Tag_aggregate: Collection_Tag_Aggregate;
    /** fetch data from the table: "collection.Tag" using primary key columns */
    collection_Tag_by_pk?: Maybe<Collection_Tag>;
    /** fetch data from the table: "conference.Conference" */
    conference_Conference: Array<Conference_Conference>;
    /** fetch aggregated fields from the table: "conference.Conference" */
    conference_Conference_aggregate: Conference_Conference_Aggregate;
    /** fetch data from the table: "conference.Conference" using primary key columns */
    conference_Conference_by_pk?: Maybe<Conference_Conference>;
    /** fetch data from the table: "conference.Configuration" */
    conference_Configuration: Array<Conference_Configuration>;
    /** fetch data from the table: "conference.ConfigurationKey" */
    conference_ConfigurationKey: Array<Conference_ConfigurationKey>;
    /** fetch aggregated fields from the table: "conference.ConfigurationKey" */
    conference_ConfigurationKey_aggregate: Conference_ConfigurationKey_Aggregate;
    /** fetch data from the table: "conference.ConfigurationKey" using primary key columns */
    conference_ConfigurationKey_by_pk?: Maybe<Conference_ConfigurationKey>;
    /** fetch aggregated fields from the table: "conference.Configuration" */
    conference_Configuration_aggregate: Conference_Configuration_Aggregate;
    /** fetch data from the table: "conference.Configuration" using primary key columns */
    conference_Configuration_by_pk?: Maybe<Conference_Configuration>;
    /** fetch data from the table: "conference.DemoCode" */
    conference_DemoCode: Array<Conference_DemoCode>;
    /** fetch aggregated fields from the table: "conference.DemoCode" */
    conference_DemoCode_aggregate: Conference_DemoCode_Aggregate;
    /** fetch data from the table: "conference.DemoCode" using primary key columns */
    conference_DemoCode_by_pk?: Maybe<Conference_DemoCode>;
    /** fetch data from the table: "conference.OriginatingData" */
    conference_OriginatingData: Array<Conference_OriginatingData>;
    /** fetch aggregated fields from the table: "conference.OriginatingData" */
    conference_OriginatingData_aggregate: Conference_OriginatingData_Aggregate;
    /** fetch data from the table: "conference.OriginatingData" using primary key columns */
    conference_OriginatingData_by_pk?: Maybe<Conference_OriginatingData>;
    /** fetch data from the table: "conference.PrepareJob" */
    conference_PrepareJob: Array<Conference_PrepareJob>;
    /** fetch aggregated fields from the table: "conference.PrepareJob" */
    conference_PrepareJob_aggregate: Conference_PrepareJob_Aggregate;
    /** fetch data from the table: "conference.PrepareJob" using primary key columns */
    conference_PrepareJob_by_pk?: Maybe<Conference_PrepareJob>;
    /** fetch data from the table: "content.Element" */
    content_Element: Array<Content_Element>;
    /** fetch data from the table: "content.ElementByAccessToken" */
    content_ElementByAccessToken: Array<Content_ElementByAccessToken>;
    /** fetch aggregated fields from the table: "content.ElementByAccessToken" */
    content_ElementByAccessToken_aggregate: Content_ElementByAccessToken_Aggregate;
    /** fetch data from the table: "content.ElementPermissionGrant" */
    content_ElementPermissionGrant: Array<Content_ElementPermissionGrant>;
    /** fetch aggregated fields from the table: "content.ElementPermissionGrant" */
    content_ElementPermissionGrant_aggregate: Content_ElementPermissionGrant_Aggregate;
    /** fetch data from the table: "content.ElementPermissionGrant" using primary key columns */
    content_ElementPermissionGrant_by_pk?: Maybe<Content_ElementPermissionGrant>;
    /** fetch data from the table: "content.ElementType" */
    content_ElementType: Array<Content_ElementType>;
    /** fetch aggregated fields from the table: "content.ElementType" */
    content_ElementType_aggregate: Content_ElementType_Aggregate;
    /** fetch data from the table: "content.ElementType" using primary key columns */
    content_ElementType_by_pk?: Maybe<Content_ElementType>;
    /** fetch aggregated fields from the table: "content.Element" */
    content_Element_aggregate: Content_Element_Aggregate;
    /** fetch data from the table: "content.Element" using primary key columns */
    content_Element_by_pk?: Maybe<Content_Element>;
    /** fetch data from the table: "content.Item" */
    content_Item: Array<Content_Item>;
    /** fetch data from the table: "content.ItemExhibition" */
    content_ItemExhibition: Array<Content_ItemExhibition>;
    /** fetch aggregated fields from the table: "content.ItemExhibition" */
    content_ItemExhibition_aggregate: Content_ItemExhibition_Aggregate;
    /** fetch data from the table: "content.ItemExhibition" using primary key columns */
    content_ItemExhibition_by_pk?: Maybe<Content_ItemExhibition>;
    /** fetch data from the table: "content.ItemProgramPerson" */
    content_ItemProgramPerson: Array<Content_ItemProgramPerson>;
    /** fetch aggregated fields from the table: "content.ItemProgramPerson" */
    content_ItemProgramPerson_aggregate: Content_ItemProgramPerson_Aggregate;
    /** fetch data from the table: "content.ItemProgramPerson" using primary key columns */
    content_ItemProgramPerson_by_pk?: Maybe<Content_ItemProgramPerson>;
    /** fetch data from the table: "content.ItemTag" */
    content_ItemTag: Array<Content_ItemTag>;
    /** fetch aggregated fields from the table: "content.ItemTag" */
    content_ItemTag_aggregate: Content_ItemTag_Aggregate;
    /** fetch data from the table: "content.ItemTag" using primary key columns */
    content_ItemTag_by_pk?: Maybe<Content_ItemTag>;
    /** fetch data from the table: "content.ItemType" */
    content_ItemType: Array<Content_ItemType>;
    /** fetch aggregated fields from the table: "content.ItemType" */
    content_ItemType_aggregate: Content_ItemType_Aggregate;
    /** fetch data from the table: "content.ItemType" using primary key columns */
    content_ItemType_by_pk?: Maybe<Content_ItemType>;
    /** fetch aggregated fields from the table: "content.Item" */
    content_Item_aggregate: Content_Item_Aggregate;
    /** fetch data from the table: "content.Item" using primary key columns */
    content_Item_by_pk?: Maybe<Content_Item>;
    /** fetch data from the table: "content.Uploader" */
    content_Uploader: Array<Content_Uploader>;
    /** fetch aggregated fields from the table: "content.Uploader" */
    content_Uploader_aggregate: Content_Uploader_Aggregate;
    /** fetch data from the table: "content.Uploader" using primary key columns */
    content_Uploader_by_pk?: Maybe<Content_Uploader>;
    /** fetch data from the table: "job_queues.ChannelStackCreateJob" */
    job_queues_ChannelStackCreateJob: Array<Job_Queues_ChannelStackCreateJob>;
    /** fetch aggregated fields from the table: "job_queues.ChannelStackCreateJob" */
    job_queues_ChannelStackCreateJob_aggregate: Job_Queues_ChannelStackCreateJob_Aggregate;
    /** fetch data from the table: "job_queues.ChannelStackCreateJob" using primary key columns */
    job_queues_ChannelStackCreateJob_by_pk?: Maybe<Job_Queues_ChannelStackCreateJob>;
    /** fetch data from the table: "job_queues.ChannelStackDeleteJob" */
    job_queues_ChannelStackDeleteJob: Array<Job_Queues_ChannelStackDeleteJob>;
    /** fetch aggregated fields from the table: "job_queues.ChannelStackDeleteJob" */
    job_queues_ChannelStackDeleteJob_aggregate: Job_Queues_ChannelStackDeleteJob_Aggregate;
    /** fetch data from the table: "job_queues.ChannelStackDeleteJob" using primary key columns */
    job_queues_ChannelStackDeleteJob_by_pk?: Maybe<Job_Queues_ChannelStackDeleteJob>;
    /** fetch data from the table: "job_queues.CombineVideosJob" */
    job_queues_CombineVideosJob: Array<Job_Queues_CombineVideosJob>;
    /** fetch aggregated fields from the table: "job_queues.CombineVideosJob" */
    job_queues_CombineVideosJob_aggregate: Job_Queues_CombineVideosJob_Aggregate;
    /** fetch data from the table: "job_queues.CombineVideosJob" using primary key columns */
    job_queues_CombineVideosJob_by_pk?: Maybe<Job_Queues_CombineVideosJob>;
    /** fetch data from the table: "job_queues.CustomEmailJob" */
    job_queues_CustomEmailJob: Array<Job_Queues_CustomEmailJob>;
    /** fetch aggregated fields from the table: "job_queues.CustomEmailJob" */
    job_queues_CustomEmailJob_aggregate: Job_Queues_CustomEmailJob_Aggregate;
    /** fetch data from the table: "job_queues.CustomEmailJob" using primary key columns */
    job_queues_CustomEmailJob_by_pk?: Maybe<Job_Queues_CustomEmailJob>;
    /** fetch data from the table: "job_queues.InvitationEmailJob" */
    job_queues_InvitationEmailJob: Array<Job_Queues_InvitationEmailJob>;
    /** fetch aggregated fields from the table: "job_queues.InvitationEmailJob" */
    job_queues_InvitationEmailJob_aggregate: Job_Queues_InvitationEmailJob_Aggregate;
    /** fetch data from the table: "job_queues.InvitationEmailJob" using primary key columns */
    job_queues_InvitationEmailJob_by_pk?: Maybe<Job_Queues_InvitationEmailJob>;
    /** fetch data from the table: "job_queues.MediaPackageHarvestJob" */
    job_queues_MediaPackageHarvestJob: Array<Job_Queues_MediaPackageHarvestJob>;
    /** fetch aggregated fields from the table: "job_queues.MediaPackageHarvestJob" */
    job_queues_MediaPackageHarvestJob_aggregate: Job_Queues_MediaPackageHarvestJob_Aggregate;
    /** fetch data from the table: "job_queues.MediaPackageHarvestJob" using primary key columns */
    job_queues_MediaPackageHarvestJob_by_pk?: Maybe<Job_Queues_MediaPackageHarvestJob>;
    /** fetch data from the table: "job_queues.PublishVideoJob" */
    job_queues_PublishVideoJob: Array<Job_Queues_PublishVideoJob>;
    /** fetch aggregated fields from the table: "job_queues.PublishVideoJob" */
    job_queues_PublishVideoJob_aggregate: Job_Queues_PublishVideoJob_Aggregate;
    /** fetch data from the table: "job_queues.PublishVideoJob" using primary key columns */
    job_queues_PublishVideoJob_by_pk?: Maybe<Job_Queues_PublishVideoJob>;
    /** fetch data from the table: "job_queues.SubmissionRequestEmailJob" */
    job_queues_SubmissionRequestEmailJob: Array<Job_Queues_SubmissionRequestEmailJob>;
    /** fetch aggregated fields from the table: "job_queues.SubmissionRequestEmailJob" */
    job_queues_SubmissionRequestEmailJob_aggregate: Job_Queues_SubmissionRequestEmailJob_Aggregate;
    /** fetch data from the table: "job_queues.SubmissionRequestEmailJob" using primary key columns */
    job_queues_SubmissionRequestEmailJob_by_pk?: Maybe<Job_Queues_SubmissionRequestEmailJob>;
    /** fetch data from the table: "job_queues.UploadYouTubeVideoJob" */
    job_queues_UploadYouTubeVideoJob: Array<Job_Queues_UploadYouTubeVideoJob>;
    /** fetch aggregated fields from the table: "job_queues.UploadYouTubeVideoJob" */
    job_queues_UploadYouTubeVideoJob_aggregate: Job_Queues_UploadYouTubeVideoJob_Aggregate;
    /** fetch data from the table: "job_queues.UploadYouTubeVideoJob" using primary key columns */
    job_queues_UploadYouTubeVideoJob_by_pk?: Maybe<Job_Queues_UploadYouTubeVideoJob>;
    /** fetch data from the table: "permissions.Group" */
    permissions_Group: Array<Permissions_Group>;
    /** fetch data from the table: "permissions.GroupRegistrant" */
    permissions_GroupRegistrant: Array<Permissions_GroupRegistrant>;
    /** fetch aggregated fields from the table: "permissions.GroupRegistrant" */
    permissions_GroupRegistrant_aggregate: Permissions_GroupRegistrant_Aggregate;
    /** fetch data from the table: "permissions.GroupRegistrant" using primary key columns */
    permissions_GroupRegistrant_by_pk?: Maybe<Permissions_GroupRegistrant>;
    /** fetch data from the table: "permissions.GroupRole" */
    permissions_GroupRole: Array<Permissions_GroupRole>;
    /** fetch aggregated fields from the table: "permissions.GroupRole" */
    permissions_GroupRole_aggregate: Permissions_GroupRole_Aggregate;
    /** fetch data from the table: "permissions.GroupRole" using primary key columns */
    permissions_GroupRole_by_pk?: Maybe<Permissions_GroupRole>;
    /** fetch aggregated fields from the table: "permissions.Group" */
    permissions_Group_aggregate: Permissions_Group_Aggregate;
    /** fetch data from the table: "permissions.Group" using primary key columns */
    permissions_Group_by_pk?: Maybe<Permissions_Group>;
    /** fetch data from the table: "permissions.Permission" */
    permissions_Permission: Array<Permissions_Permission>;
    /** fetch aggregated fields from the table: "permissions.Permission" */
    permissions_Permission_aggregate: Permissions_Permission_Aggregate;
    /** fetch data from the table: "permissions.Permission" using primary key columns */
    permissions_Permission_by_pk?: Maybe<Permissions_Permission>;
    /** fetch data from the table: "permissions.Role" */
    permissions_Role: Array<Permissions_Role>;
    /** fetch data from the table: "permissions.RolePermission" */
    permissions_RolePermission: Array<Permissions_RolePermission>;
    /** fetch aggregated fields from the table: "permissions.RolePermission" */
    permissions_RolePermission_aggregate: Permissions_RolePermission_Aggregate;
    /** fetch data from the table: "permissions.RolePermission" using primary key columns */
    permissions_RolePermission_by_pk?: Maybe<Permissions_RolePermission>;
    /** fetch aggregated fields from the table: "permissions.Role" */
    permissions_Role_aggregate: Permissions_Role_Aggregate;
    /** fetch data from the table: "permissions.Role" using primary key columns */
    permissions_Role_by_pk?: Maybe<Permissions_Role>;
    /** fetch data from the table: "registrant.GoogleAccount" */
    registrant_GoogleAccount: Array<Registrant_GoogleAccount>;
    /** fetch aggregated fields from the table: "registrant.GoogleAccount" */
    registrant_GoogleAccount_aggregate: Registrant_GoogleAccount_Aggregate;
    /** fetch data from the table: "registrant.GoogleAccount" using primary key columns */
    registrant_GoogleAccount_by_pk?: Maybe<Registrant_GoogleAccount>;
    /** fetch data from the table: "registrant.Invitation" */
    registrant_Invitation: Array<Registrant_Invitation>;
    /** fetch aggregated fields from the table: "registrant.Invitation" */
    registrant_Invitation_aggregate: Registrant_Invitation_Aggregate;
    /** fetch data from the table: "registrant.Invitation" using primary key columns */
    registrant_Invitation_by_pk?: Maybe<Registrant_Invitation>;
    /** fetch data from the table: "registrant.Profile" */
    registrant_Profile: Array<Registrant_Profile>;
    /** fetch data from the table: "registrant.ProfileBadges" */
    registrant_ProfileBadges: Array<Registrant_ProfileBadges>;
    /** fetch aggregated fields from the table: "registrant.ProfileBadges" */
    registrant_ProfileBadges_aggregate: Registrant_ProfileBadges_Aggregate;
    /** fetch aggregated fields from the table: "registrant.Profile" */
    registrant_Profile_aggregate: Registrant_Profile_Aggregate;
    /** fetch data from the table: "registrant.Profile" using primary key columns */
    registrant_Profile_by_pk?: Maybe<Registrant_Profile>;
    /** fetch data from the table: "registrant.Registrant" */
    registrant_Registrant: Array<Registrant_Registrant>;
    /** fetch aggregated fields from the table: "registrant.Registrant" */
    registrant_Registrant_aggregate: Registrant_Registrant_Aggregate;
    /** fetch data from the table: "registrant.Registrant" using primary key columns */
    registrant_Registrant_by_pk?: Maybe<Registrant_Registrant>;
    /** fetch data from the table: "room.Backend" */
    room_Backend: Array<Room_Backend>;
    /** fetch aggregated fields from the table: "room.Backend" */
    room_Backend_aggregate: Room_Backend_Aggregate;
    /** fetch data from the table: "room.Backend" using primary key columns */
    room_Backend_by_pk?: Maybe<Room_Backend>;
    /** fetch data from the table: "room.ChimeMeeting" */
    room_ChimeMeeting: Array<Room_ChimeMeeting>;
    /** fetch aggregated fields from the table: "room.ChimeMeeting" */
    room_ChimeMeeting_aggregate: Room_ChimeMeeting_Aggregate;
    /** fetch data from the table: "room.ChimeMeeting" using primary key columns */
    room_ChimeMeeting_by_pk?: Maybe<Room_ChimeMeeting>;
    /** fetch data from the table: "room.LivestreamDurations" */
    room_LivestreamDurations: Array<Room_LivestreamDurations>;
    /** fetch aggregated fields from the table: "room.LivestreamDurations" */
    room_LivestreamDurations_aggregate: Room_LivestreamDurations_Aggregate;
    /** fetch data from the table: "room.ManagementMode" */
    room_ManagementMode: Array<Room_ManagementMode>;
    /** fetch aggregated fields from the table: "room.ManagementMode" */
    room_ManagementMode_aggregate: Room_ManagementMode_Aggregate;
    /** fetch data from the table: "room.ManagementMode" using primary key columns */
    room_ManagementMode_by_pk?: Maybe<Room_ManagementMode>;
    /** fetch data from the table: "room.Mode" */
    room_Mode: Array<Room_Mode>;
    /** fetch aggregated fields from the table: "room.Mode" */
    room_Mode_aggregate: Room_Mode_Aggregate;
    /** fetch data from the table: "room.Mode" using primary key columns */
    room_Mode_by_pk?: Maybe<Room_Mode>;
    /** fetch data from the table: "room.Participant" */
    room_Participant: Array<Room_Participant>;
    /** fetch aggregated fields from the table: "room.Participant" */
    room_Participant_aggregate: Room_Participant_Aggregate;
    /** fetch data from the table: "room.Participant" using primary key columns */
    room_Participant_by_pk?: Maybe<Room_Participant>;
    /** fetch data from the table: "room.PersonRole" */
    room_PersonRole: Array<Room_PersonRole>;
    /** fetch aggregated fields from the table: "room.PersonRole" */
    room_PersonRole_aggregate: Room_PersonRole_Aggregate;
    /** fetch data from the table: "room.PersonRole" using primary key columns */
    room_PersonRole_by_pk?: Maybe<Room_PersonRole>;
    /** fetch data from the table: "room.Room" */
    room_Room: Array<Room_Room>;
    /** fetch data from the table: "room.RoomPerson" */
    room_RoomPerson: Array<Room_RoomPerson>;
    /** fetch aggregated fields from the table: "room.RoomPerson" */
    room_RoomPerson_aggregate: Room_RoomPerson_Aggregate;
    /** fetch data from the table: "room.RoomPerson" using primary key columns */
    room_RoomPerson_by_pk?: Maybe<Room_RoomPerson>;
    /** fetch aggregated fields from the table: "room.Room" */
    room_Room_aggregate: Room_Room_Aggregate;
    /** fetch data from the table: "room.Room" using primary key columns */
    room_Room_by_pk?: Maybe<Room_Room>;
    /** fetch data from the table: "room.ShuffleAlgorithm" */
    room_ShuffleAlgorithm: Array<Room_ShuffleAlgorithm>;
    /** fetch aggregated fields from the table: "room.ShuffleAlgorithm" */
    room_ShuffleAlgorithm_aggregate: Room_ShuffleAlgorithm_Aggregate;
    /** fetch data from the table: "room.ShuffleAlgorithm" using primary key columns */
    room_ShuffleAlgorithm_by_pk?: Maybe<Room_ShuffleAlgorithm>;
    /** fetch data from the table: "room.ShufflePeriod" */
    room_ShufflePeriod: Array<Room_ShufflePeriod>;
    /** fetch aggregated fields from the table: "room.ShufflePeriod" */
    room_ShufflePeriod_aggregate: Room_ShufflePeriod_Aggregate;
    /** fetch data from the table: "room.ShufflePeriod" using primary key columns */
    room_ShufflePeriod_by_pk?: Maybe<Room_ShufflePeriod>;
    /** fetch data from the table: "room.ShuffleQueueEntry" */
    room_ShuffleQueueEntry: Array<Room_ShuffleQueueEntry>;
    /** fetch aggregated fields from the table: "room.ShuffleQueueEntry" */
    room_ShuffleQueueEntry_aggregate: Room_ShuffleQueueEntry_Aggregate;
    /** fetch data from the table: "room.ShuffleQueueEntry" using primary key columns */
    room_ShuffleQueueEntry_by_pk?: Maybe<Room_ShuffleQueueEntry>;
    /** fetch data from the table: "room.ShuffleRoom" */
    room_ShuffleRoom: Array<Room_ShuffleRoom>;
    /** fetch aggregated fields from the table: "room.ShuffleRoom" */
    room_ShuffleRoom_aggregate: Room_ShuffleRoom_Aggregate;
    /** fetch data from the table: "room.ShuffleRoom" using primary key columns */
    room_ShuffleRoom_by_pk?: Maybe<Room_ShuffleRoom>;
    /** fetch data from the table: "schedule.Continuation" */
    schedule_Continuation: Array<Schedule_Continuation>;
    /** fetch aggregated fields from the table: "schedule.Continuation" */
    schedule_Continuation_aggregate: Schedule_Continuation_Aggregate;
    /** fetch data from the table: "schedule.Continuation" using primary key columns */
    schedule_Continuation_by_pk?: Maybe<Schedule_Continuation>;
    /** fetch data from the table: "schedule.Event" */
    schedule_Event: Array<Schedule_Event>;
    /** fetch data from the table: "schedule.EventProgramPerson" */
    schedule_EventProgramPerson: Array<Schedule_EventProgramPerson>;
    /** fetch data from the table: "schedule.EventProgramPersonRole" */
    schedule_EventProgramPersonRole: Array<Schedule_EventProgramPersonRole>;
    /** fetch aggregated fields from the table: "schedule.EventProgramPersonRole" */
    schedule_EventProgramPersonRole_aggregate: Schedule_EventProgramPersonRole_Aggregate;
    /** fetch data from the table: "schedule.EventProgramPersonRole" using primary key columns */
    schedule_EventProgramPersonRole_by_pk?: Maybe<Schedule_EventProgramPersonRole>;
    /** fetch aggregated fields from the table: "schedule.EventProgramPerson" */
    schedule_EventProgramPerson_aggregate: Schedule_EventProgramPerson_Aggregate;
    /** fetch data from the table: "schedule.EventProgramPerson" using primary key columns */
    schedule_EventProgramPerson_by_pk?: Maybe<Schedule_EventProgramPerson>;
    /** fetch data from the table: "schedule.EventTag" */
    schedule_EventTag: Array<Schedule_EventTag>;
    /** fetch aggregated fields from the table: "schedule.EventTag" */
    schedule_EventTag_aggregate: Schedule_EventTag_Aggregate;
    /** fetch data from the table: "schedule.EventTag" using primary key columns */
    schedule_EventTag_by_pk?: Maybe<Schedule_EventTag>;
    /** fetch aggregated fields from the table: "schedule.Event" */
    schedule_Event_aggregate: Schedule_Event_Aggregate;
    /** fetch data from the table: "schedule.Event" using primary key columns */
    schedule_Event_by_pk?: Maybe<Schedule_Event>;
    /** fetch data from the table: "schedule.OverlappingEvents" */
    schedule_OverlappingEvents: Array<Schedule_OverlappingEvents>;
    /** fetch aggregated fields from the table: "schedule.OverlappingEvents" */
    schedule_OverlappingEvents_aggregate: Schedule_OverlappingEvents_Aggregate;
    /** fetch data from the table: "schedule.StarredEvent" */
    schedule_StarredEvent: Array<Schedule_StarredEvent>;
    /** fetch aggregated fields from the table: "schedule.StarredEvent" */
    schedule_StarredEvent_aggregate: Schedule_StarredEvent_Aggregate;
    /** fetch data from the table: "schedule.StarredEvent" using primary key columns */
    schedule_StarredEvent_by_pk?: Maybe<Schedule_StarredEvent>;
    /** fetch data from the table: "system.Configuration" */
    system_Configuration: Array<System_Configuration>;
    /** fetch data from the table: "system.ConfigurationKey" */
    system_ConfigurationKey: Array<System_ConfigurationKey>;
    /** fetch aggregated fields from the table: "system.ConfigurationKey" */
    system_ConfigurationKey_aggregate: System_ConfigurationKey_Aggregate;
    /** fetch data from the table: "system.ConfigurationKey" using primary key columns */
    system_ConfigurationKey_by_pk?: Maybe<System_ConfigurationKey>;
    /** fetch aggregated fields from the table: "system.Configuration" */
    system_Configuration_aggregate: System_Configuration_Aggregate;
    /** fetch data from the table: "system.Configuration" using primary key columns */
    system_Configuration_by_pk?: Maybe<System_Configuration>;
    /** fetch data from the table: "video.ChannelStack" */
    video_ChannelStack: Array<Video_ChannelStack>;
    /** fetch aggregated fields from the table: "video.ChannelStack" */
    video_ChannelStack_aggregate: Video_ChannelStack_Aggregate;
    /** fetch data from the table: "video.ChannelStack" using primary key columns */
    video_ChannelStack_by_pk?: Maybe<Video_ChannelStack>;
    /** fetch data from the table: "video.EventParticipantStream" */
    video_EventParticipantStream: Array<Video_EventParticipantStream>;
    /** fetch aggregated fields from the table: "video.EventParticipantStream" */
    video_EventParticipantStream_aggregate: Video_EventParticipantStream_Aggregate;
    /** fetch data from the table: "video.EventParticipantStream" using primary key columns */
    video_EventParticipantStream_by_pk?: Maybe<Video_EventParticipantStream>;
    /** fetch data from the table: "video.EventVonageSession" */
    video_EventVonageSession: Array<Video_EventVonageSession>;
    /** fetch aggregated fields from the table: "video.EventVonageSession" */
    video_EventVonageSession_aggregate: Video_EventVonageSession_Aggregate;
    /** fetch data from the table: "video.EventVonageSession" using primary key columns */
    video_EventVonageSession_by_pk?: Maybe<Video_EventVonageSession>;
    /** fetch data from the table: "video.ImmediateSwitch" */
    video_ImmediateSwitch: Array<Video_ImmediateSwitch>;
    /** fetch aggregated fields from the table: "video.ImmediateSwitch" */
    video_ImmediateSwitch_aggregate: Video_ImmediateSwitch_Aggregate;
    /** fetch data from the table: "video.ImmediateSwitch" using primary key columns */
    video_ImmediateSwitch_by_pk?: Maybe<Video_ImmediateSwitch>;
    /** fetch data from the table: "video.InputType" */
    video_InputType: Array<Video_InputType>;
    /** fetch aggregated fields from the table: "video.InputType" */
    video_InputType_aggregate: Video_InputType_Aggregate;
    /** fetch data from the table: "video.InputType" using primary key columns */
    video_InputType_by_pk?: Maybe<Video_InputType>;
    /** fetch data from the table: "video.JobStatus" */
    video_JobStatus: Array<Video_JobStatus>;
    /** fetch aggregated fields from the table: "video.JobStatus" */
    video_JobStatus_aggregate: Video_JobStatus_Aggregate;
    /** fetch data from the table: "video.JobStatus" using primary key columns */
    video_JobStatus_by_pk?: Maybe<Video_JobStatus>;
    /** fetch data from the table: "video.MediaLiveChannelStatus" */
    video_MediaLiveChannelStatus: Array<Video_MediaLiveChannelStatus>;
    /** fetch aggregated fields from the table: "video.MediaLiveChannelStatus" */
    video_MediaLiveChannelStatus_aggregate: Video_MediaLiveChannelStatus_Aggregate;
    /** fetch data from the table: "video.MediaLiveChannelStatus" using primary key columns */
    video_MediaLiveChannelStatus_by_pk?: Maybe<Video_MediaLiveChannelStatus>;
    /** fetch data from the table: "video.RtmpInput" */
    video_RtmpInput: Array<Video_RtmpInput>;
    /** fetch aggregated fields from the table: "video.RtmpInput" */
    video_RtmpInput_aggregate: Video_RtmpInput_Aggregate;
    /** fetch data from the table: "video.RtmpInput" using primary key columns */
    video_RtmpInput_by_pk?: Maybe<Video_RtmpInput>;
    /** fetch data from the table: "video.TranscriptionJob" */
    video_TranscriptionJob: Array<Video_TranscriptionJob>;
    /** fetch aggregated fields from the table: "video.TranscriptionJob" */
    video_TranscriptionJob_aggregate: Video_TranscriptionJob_Aggregate;
    /** fetch data from the table: "video.TranscriptionJob" using primary key columns */
    video_TranscriptionJob_by_pk?: Maybe<Video_TranscriptionJob>;
    /** fetch data from the table: "video.VideoRenderJob" */
    video_VideoRenderJob: Array<Video_VideoRenderJob>;
    /** fetch aggregated fields from the table: "video.VideoRenderJob" */
    video_VideoRenderJob_aggregate: Video_VideoRenderJob_Aggregate;
    /** fetch data from the table: "video.VideoRenderJob" using primary key columns */
    video_VideoRenderJob_by_pk?: Maybe<Video_VideoRenderJob>;
    /** fetch data from the table: "video.YouTubeUpload" */
    video_YouTubeUpload: Array<Video_YouTubeUpload>;
    /** fetch aggregated fields from the table: "video.YouTubeUpload" */
    video_YouTubeUpload_aggregate: Video_YouTubeUpload_Aggregate;
    /** fetch data from the table: "video.YouTubeUpload" using primary key columns */
    video_YouTubeUpload_by_pk?: Maybe<Video_YouTubeUpload>;
};

export type Subscription_RootEmailArgs = {
    distinct_on?: Maybe<Array<Email_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Email_Order_By>>;
    where?: Maybe<Email_Bool_Exp>;
};

export type Subscription_RootEmail_AggregateArgs = {
    distinct_on?: Maybe<Array<Email_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Email_Order_By>>;
    where?: Maybe<Email_Bool_Exp>;
};

export type Subscription_RootEmail_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootFlatUnauthPermissionArgs = {
    distinct_on?: Maybe<Array<FlatUnauthPermission_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<FlatUnauthPermission_Order_By>>;
    where?: Maybe<FlatUnauthPermission_Bool_Exp>;
};

export type Subscription_RootFlatUnauthPermission_AggregateArgs = {
    distinct_on?: Maybe<Array<FlatUnauthPermission_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<FlatUnauthPermission_Order_By>>;
    where?: Maybe<FlatUnauthPermission_Bool_Exp>;
};

export type Subscription_RootFlatUserPermissionArgs = {
    distinct_on?: Maybe<Array<FlatUserPermission_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<FlatUserPermission_Order_By>>;
    where?: Maybe<FlatUserPermission_Bool_Exp>;
};

export type Subscription_RootFlatUserPermission_AggregateArgs = {
    distinct_on?: Maybe<Array<FlatUserPermission_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<FlatUserPermission_Order_By>>;
    where?: Maybe<FlatUserPermission_Bool_Exp>;
};

export type Subscription_RootPushNotificationSubscriptionArgs = {
    distinct_on?: Maybe<Array<PushNotificationSubscription_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<PushNotificationSubscription_Order_By>>;
    where?: Maybe<PushNotificationSubscription_Bool_Exp>;
};

export type Subscription_RootPushNotificationSubscription_AggregateArgs = {
    distinct_on?: Maybe<Array<PushNotificationSubscription_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<PushNotificationSubscription_Order_By>>;
    where?: Maybe<PushNotificationSubscription_Bool_Exp>;
};

export type Subscription_RootPushNotificationSubscription_By_PkArgs = {
    endpoint: Scalars["String"];
};

export type Subscription_RootUserArgs = {
    distinct_on?: Maybe<Array<User_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<User_Order_By>>;
    where?: Maybe<User_Bool_Exp>;
};

export type Subscription_RootUser_AggregateArgs = {
    distinct_on?: Maybe<Array<User_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<User_Order_By>>;
    where?: Maybe<User_Bool_Exp>;
};

export type Subscription_RootUser_By_PkArgs = {
    id: Scalars["String"];
};

export type Subscription_RootAnalytics_AppStatsArgs = {
    distinct_on?: Maybe<Array<Analytics_AppStats_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_AppStats_Order_By>>;
    where?: Maybe<Analytics_AppStats_Bool_Exp>;
};

export type Subscription_RootAnalytics_AppStats_AggregateArgs = {
    distinct_on?: Maybe<Array<Analytics_AppStats_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_AppStats_Order_By>>;
    where?: Maybe<Analytics_AppStats_Bool_Exp>;
};

export type Subscription_RootAnalytics_AppStats_By_PkArgs = {
    id: Scalars["Int"];
};

export type Subscription_RootAnalytics_CompletedRegistrationsArgs = {
    distinct_on?: Maybe<Array<Analytics_CompletedRegistrations_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_CompletedRegistrations_Order_By>>;
    where?: Maybe<Analytics_CompletedRegistrations_Bool_Exp>;
};

export type Subscription_RootAnalytics_CompletedRegistrations_AggregateArgs = {
    distinct_on?: Maybe<Array<Analytics_CompletedRegistrations_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_CompletedRegistrations_Order_By>>;
    where?: Maybe<Analytics_CompletedRegistrations_Bool_Exp>;
};

export type Subscription_RootAnalytics_ContentElementStatsArgs = {
    distinct_on?: Maybe<Array<Analytics_ContentElementStats_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_ContentElementStats_Order_By>>;
    where?: Maybe<Analytics_ContentElementStats_Bool_Exp>;
};

export type Subscription_RootAnalytics_ContentElementStats_AggregateArgs = {
    distinct_on?: Maybe<Array<Analytics_ContentElementStats_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_ContentElementStats_Order_By>>;
    where?: Maybe<Analytics_ContentElementStats_Bool_Exp>;
};

export type Subscription_RootAnalytics_ContentElementStats_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootAnalytics_ContentItemStatsArgs = {
    distinct_on?: Maybe<Array<Analytics_ContentItemStats_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_ContentItemStats_Order_By>>;
    where?: Maybe<Analytics_ContentItemStats_Bool_Exp>;
};

export type Subscription_RootAnalytics_ContentItemStats_AggregateArgs = {
    distinct_on?: Maybe<Array<Analytics_ContentItemStats_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_ContentItemStats_Order_By>>;
    where?: Maybe<Analytics_ContentItemStats_Bool_Exp>;
};

export type Subscription_RootAnalytics_ContentItemStats_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootAnalytics_ElementTotalViewsArgs = {
    distinct_on?: Maybe<Array<Analytics_ElementTotalViews_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_ElementTotalViews_Order_By>>;
    where?: Maybe<Analytics_ElementTotalViews_Bool_Exp>;
};

export type Subscription_RootAnalytics_ElementTotalViews_AggregateArgs = {
    distinct_on?: Maybe<Array<Analytics_ElementTotalViews_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_ElementTotalViews_Order_By>>;
    where?: Maybe<Analytics_ElementTotalViews_Bool_Exp>;
};

export type Subscription_RootAnalytics_ItemTotalViewsArgs = {
    distinct_on?: Maybe<Array<Analytics_ItemTotalViews_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_ItemTotalViews_Order_By>>;
    where?: Maybe<Analytics_ItemTotalViews_Bool_Exp>;
};

export type Subscription_RootAnalytics_ItemTotalViews_AggregateArgs = {
    distinct_on?: Maybe<Array<Analytics_ItemTotalViews_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_ItemTotalViews_Order_By>>;
    where?: Maybe<Analytics_ItemTotalViews_Bool_Exp>;
};

export type Subscription_RootAnalytics_RoomPresenceArgs = {
    distinct_on?: Maybe<Array<Analytics_RoomPresence_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_RoomPresence_Order_By>>;
    where?: Maybe<Analytics_RoomPresence_Bool_Exp>;
};

export type Subscription_RootAnalytics_RoomPresence_AggregateArgs = {
    distinct_on?: Maybe<Array<Analytics_RoomPresence_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_RoomPresence_Order_By>>;
    where?: Maybe<Analytics_RoomPresence_Bool_Exp>;
};

export type Subscription_RootAnalytics_RoomStatsArgs = {
    distinct_on?: Maybe<Array<Analytics_RoomStats_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_RoomStats_Order_By>>;
    where?: Maybe<Analytics_RoomStats_Bool_Exp>;
};

export type Subscription_RootAnalytics_RoomStats_AggregateArgs = {
    distinct_on?: Maybe<Array<Analytics_RoomStats_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_RoomStats_Order_By>>;
    where?: Maybe<Analytics_RoomStats_Bool_Exp>;
};

export type Subscription_RootAnalytics_RoomStats_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootAnalytics_Mat_ElementTotalViewsArgs = {
    distinct_on?: Maybe<Array<Analytics_Mat_ElementTotalViews_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_Mat_ElementTotalViews_Order_By>>;
    where?: Maybe<Analytics_Mat_ElementTotalViews_Bool_Exp>;
};

export type Subscription_RootAnalytics_Mat_ElementTotalViews_AggregateArgs = {
    distinct_on?: Maybe<Array<Analytics_Mat_ElementTotalViews_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_Mat_ElementTotalViews_Order_By>>;
    where?: Maybe<Analytics_Mat_ElementTotalViews_Bool_Exp>;
};

export type Subscription_RootAnalytics_Mat_ItemTotalViewsArgs = {
    distinct_on?: Maybe<Array<Analytics_Mat_ItemTotalViews_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_Mat_ItemTotalViews_Order_By>>;
    where?: Maybe<Analytics_Mat_ItemTotalViews_Bool_Exp>;
};

export type Subscription_RootAnalytics_Mat_ItemTotalViews_AggregateArgs = {
    distinct_on?: Maybe<Array<Analytics_Mat_ItemTotalViews_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_Mat_ItemTotalViews_Order_By>>;
    where?: Maybe<Analytics_Mat_ItemTotalViews_Bool_Exp>;
};

export type Subscription_RootAnalytics_Mat_RoomPresenceArgs = {
    distinct_on?: Maybe<Array<Analytics_Mat_RoomPresence_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_Mat_RoomPresence_Order_By>>;
    where?: Maybe<Analytics_Mat_RoomPresence_Bool_Exp>;
};

export type Subscription_RootAnalytics_Mat_RoomPresence_AggregateArgs = {
    distinct_on?: Maybe<Array<Analytics_Mat_RoomPresence_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Analytics_Mat_RoomPresence_Order_By>>;
    where?: Maybe<Analytics_Mat_RoomPresence_Bool_Exp>;
};

export type Subscription_RootChat_ChatArgs = {
    distinct_on?: Maybe<Array<Chat_Chat_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Chat_Order_By>>;
    where?: Maybe<Chat_Chat_Bool_Exp>;
};

export type Subscription_RootChat_Chat_AggregateArgs = {
    distinct_on?: Maybe<Array<Chat_Chat_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Chat_Order_By>>;
    where?: Maybe<Chat_Chat_Bool_Exp>;
};

export type Subscription_RootChat_Chat_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootChat_FlagArgs = {
    distinct_on?: Maybe<Array<Chat_Flag_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Flag_Order_By>>;
    where?: Maybe<Chat_Flag_Bool_Exp>;
};

export type Subscription_RootChat_FlagTypeArgs = {
    distinct_on?: Maybe<Array<Chat_FlagType_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_FlagType_Order_By>>;
    where?: Maybe<Chat_FlagType_Bool_Exp>;
};

export type Subscription_RootChat_FlagType_AggregateArgs = {
    distinct_on?: Maybe<Array<Chat_FlagType_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_FlagType_Order_By>>;
    where?: Maybe<Chat_FlagType_Bool_Exp>;
};

export type Subscription_RootChat_FlagType_By_PkArgs = {
    name: Scalars["String"];
};

export type Subscription_RootChat_Flag_AggregateArgs = {
    distinct_on?: Maybe<Array<Chat_Flag_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Flag_Order_By>>;
    where?: Maybe<Chat_Flag_Bool_Exp>;
};

export type Subscription_RootChat_Flag_By_PkArgs = {
    id: Scalars["Int"];
};

export type Subscription_RootChat_MessageArgs = {
    distinct_on?: Maybe<Array<Chat_Message_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Message_Order_By>>;
    where?: Maybe<Chat_Message_Bool_Exp>;
};

export type Subscription_RootChat_MessageTypeArgs = {
    distinct_on?: Maybe<Array<Chat_MessageType_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_MessageType_Order_By>>;
    where?: Maybe<Chat_MessageType_Bool_Exp>;
};

export type Subscription_RootChat_MessageType_AggregateArgs = {
    distinct_on?: Maybe<Array<Chat_MessageType_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_MessageType_Order_By>>;
    where?: Maybe<Chat_MessageType_Bool_Exp>;
};

export type Subscription_RootChat_MessageType_By_PkArgs = {
    name: Scalars["String"];
};

export type Subscription_RootChat_Message_AggregateArgs = {
    distinct_on?: Maybe<Array<Chat_Message_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Message_Order_By>>;
    where?: Maybe<Chat_Message_Bool_Exp>;
};

export type Subscription_RootChat_Message_By_PkArgs = {
    id: Scalars["Int"];
};

export type Subscription_RootChat_PinArgs = {
    distinct_on?: Maybe<Array<Chat_Pin_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Pin_Order_By>>;
    where?: Maybe<Chat_Pin_Bool_Exp>;
};

export type Subscription_RootChat_Pin_AggregateArgs = {
    distinct_on?: Maybe<Array<Chat_Pin_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Pin_Order_By>>;
    where?: Maybe<Chat_Pin_Bool_Exp>;
};

export type Subscription_RootChat_Pin_By_PkArgs = {
    chatId: Scalars["uuid"];
    registrantId: Scalars["uuid"];
};

export type Subscription_RootChat_ReactionArgs = {
    distinct_on?: Maybe<Array<Chat_Reaction_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Reaction_Order_By>>;
    where?: Maybe<Chat_Reaction_Bool_Exp>;
};

export type Subscription_RootChat_ReactionTypeArgs = {
    distinct_on?: Maybe<Array<Chat_ReactionType_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_ReactionType_Order_By>>;
    where?: Maybe<Chat_ReactionType_Bool_Exp>;
};

export type Subscription_RootChat_ReactionType_AggregateArgs = {
    distinct_on?: Maybe<Array<Chat_ReactionType_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_ReactionType_Order_By>>;
    where?: Maybe<Chat_ReactionType_Bool_Exp>;
};

export type Subscription_RootChat_ReactionType_By_PkArgs = {
    name: Scalars["String"];
};

export type Subscription_RootChat_Reaction_AggregateArgs = {
    distinct_on?: Maybe<Array<Chat_Reaction_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Reaction_Order_By>>;
    where?: Maybe<Chat_Reaction_Bool_Exp>;
};

export type Subscription_RootChat_Reaction_By_PkArgs = {
    sId: Scalars["uuid"];
};

export type Subscription_RootChat_ReadUpToIndexArgs = {
    distinct_on?: Maybe<Array<Chat_ReadUpToIndex_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_ReadUpToIndex_Order_By>>;
    where?: Maybe<Chat_ReadUpToIndex_Bool_Exp>;
};

export type Subscription_RootChat_ReadUpToIndex_AggregateArgs = {
    distinct_on?: Maybe<Array<Chat_ReadUpToIndex_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_ReadUpToIndex_Order_By>>;
    where?: Maybe<Chat_ReadUpToIndex_Bool_Exp>;
};

export type Subscription_RootChat_ReadUpToIndex_By_PkArgs = {
    chatId: Scalars["uuid"];
    registrantId: Scalars["uuid"];
};

export type Subscription_RootChat_SubscriptionArgs = {
    distinct_on?: Maybe<Array<Chat_Subscription_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Subscription_Order_By>>;
    where?: Maybe<Chat_Subscription_Bool_Exp>;
};

export type Subscription_RootChat_Subscription_AggregateArgs = {
    distinct_on?: Maybe<Array<Chat_Subscription_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Chat_Subscription_Order_By>>;
    where?: Maybe<Chat_Subscription_Bool_Exp>;
};

export type Subscription_RootChat_Subscription_By_PkArgs = {
    chatId: Scalars["uuid"];
    registrantId: Scalars["uuid"];
};

export type Subscription_RootCollection_ExhibitionArgs = {
    distinct_on?: Maybe<Array<Collection_Exhibition_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Collection_Exhibition_Order_By>>;
    where?: Maybe<Collection_Exhibition_Bool_Exp>;
};

export type Subscription_RootCollection_Exhibition_AggregateArgs = {
    distinct_on?: Maybe<Array<Collection_Exhibition_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Collection_Exhibition_Order_By>>;
    where?: Maybe<Collection_Exhibition_Bool_Exp>;
};

export type Subscription_RootCollection_Exhibition_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootCollection_ProgramPersonArgs = {
    distinct_on?: Maybe<Array<Collection_ProgramPerson_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Collection_ProgramPerson_Order_By>>;
    where?: Maybe<Collection_ProgramPerson_Bool_Exp>;
};

export type Subscription_RootCollection_ProgramPerson_AggregateArgs = {
    distinct_on?: Maybe<Array<Collection_ProgramPerson_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Collection_ProgramPerson_Order_By>>;
    where?: Maybe<Collection_ProgramPerson_Bool_Exp>;
};

export type Subscription_RootCollection_ProgramPerson_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootCollection_TagArgs = {
    distinct_on?: Maybe<Array<Collection_Tag_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Collection_Tag_Order_By>>;
    where?: Maybe<Collection_Tag_Bool_Exp>;
};

export type Subscription_RootCollection_Tag_AggregateArgs = {
    distinct_on?: Maybe<Array<Collection_Tag_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Collection_Tag_Order_By>>;
    where?: Maybe<Collection_Tag_Bool_Exp>;
};

export type Subscription_RootCollection_Tag_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootConference_ConferenceArgs = {
    distinct_on?: Maybe<Array<Conference_Conference_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Conference_Conference_Order_By>>;
    where?: Maybe<Conference_Conference_Bool_Exp>;
};

export type Subscription_RootConference_Conference_AggregateArgs = {
    distinct_on?: Maybe<Array<Conference_Conference_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Conference_Conference_Order_By>>;
    where?: Maybe<Conference_Conference_Bool_Exp>;
};

export type Subscription_RootConference_Conference_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootConference_ConfigurationArgs = {
    distinct_on?: Maybe<Array<Conference_Configuration_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Conference_Configuration_Order_By>>;
    where?: Maybe<Conference_Configuration_Bool_Exp>;
};

export type Subscription_RootConference_ConfigurationKeyArgs = {
    distinct_on?: Maybe<Array<Conference_ConfigurationKey_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Conference_ConfigurationKey_Order_By>>;
    where?: Maybe<Conference_ConfigurationKey_Bool_Exp>;
};

export type Subscription_RootConference_ConfigurationKey_AggregateArgs = {
    distinct_on?: Maybe<Array<Conference_ConfigurationKey_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Conference_ConfigurationKey_Order_By>>;
    where?: Maybe<Conference_ConfigurationKey_Bool_Exp>;
};

export type Subscription_RootConference_ConfigurationKey_By_PkArgs = {
    name: Scalars["String"];
};

export type Subscription_RootConference_Configuration_AggregateArgs = {
    distinct_on?: Maybe<Array<Conference_Configuration_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Conference_Configuration_Order_By>>;
    where?: Maybe<Conference_Configuration_Bool_Exp>;
};

export type Subscription_RootConference_Configuration_By_PkArgs = {
    conferenceId: Scalars["uuid"];
    key: Conference_ConfigurationKey_Enum;
};

export type Subscription_RootConference_DemoCodeArgs = {
    distinct_on?: Maybe<Array<Conference_DemoCode_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Conference_DemoCode_Order_By>>;
    where?: Maybe<Conference_DemoCode_Bool_Exp>;
};

export type Subscription_RootConference_DemoCode_AggregateArgs = {
    distinct_on?: Maybe<Array<Conference_DemoCode_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Conference_DemoCode_Order_By>>;
    where?: Maybe<Conference_DemoCode_Bool_Exp>;
};

export type Subscription_RootConference_DemoCode_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootConference_OriginatingDataArgs = {
    distinct_on?: Maybe<Array<Conference_OriginatingData_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Conference_OriginatingData_Order_By>>;
    where?: Maybe<Conference_OriginatingData_Bool_Exp>;
};

export type Subscription_RootConference_OriginatingData_AggregateArgs = {
    distinct_on?: Maybe<Array<Conference_OriginatingData_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Conference_OriginatingData_Order_By>>;
    where?: Maybe<Conference_OriginatingData_Bool_Exp>;
};

export type Subscription_RootConference_OriginatingData_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootConference_PrepareJobArgs = {
    distinct_on?: Maybe<Array<Conference_PrepareJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Conference_PrepareJob_Order_By>>;
    where?: Maybe<Conference_PrepareJob_Bool_Exp>;
};

export type Subscription_RootConference_PrepareJob_AggregateArgs = {
    distinct_on?: Maybe<Array<Conference_PrepareJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Conference_PrepareJob_Order_By>>;
    where?: Maybe<Conference_PrepareJob_Bool_Exp>;
};

export type Subscription_RootConference_PrepareJob_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootContent_ElementArgs = {
    distinct_on?: Maybe<Array<Content_Element_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_Element_Order_By>>;
    where?: Maybe<Content_Element_Bool_Exp>;
};

export type Subscription_RootContent_ElementByAccessTokenArgs = {
    distinct_on?: Maybe<Array<Content_ElementByAccessToken_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ElementByAccessToken_Order_By>>;
    where?: Maybe<Content_ElementByAccessToken_Bool_Exp>;
};

export type Subscription_RootContent_ElementByAccessToken_AggregateArgs = {
    distinct_on?: Maybe<Array<Content_ElementByAccessToken_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ElementByAccessToken_Order_By>>;
    where?: Maybe<Content_ElementByAccessToken_Bool_Exp>;
};

export type Subscription_RootContent_ElementPermissionGrantArgs = {
    distinct_on?: Maybe<Array<Content_ElementPermissionGrant_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ElementPermissionGrant_Order_By>>;
    where?: Maybe<Content_ElementPermissionGrant_Bool_Exp>;
};

export type Subscription_RootContent_ElementPermissionGrant_AggregateArgs = {
    distinct_on?: Maybe<Array<Content_ElementPermissionGrant_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ElementPermissionGrant_Order_By>>;
    where?: Maybe<Content_ElementPermissionGrant_Bool_Exp>;
};

export type Subscription_RootContent_ElementPermissionGrant_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootContent_ElementTypeArgs = {
    distinct_on?: Maybe<Array<Content_ElementType_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ElementType_Order_By>>;
    where?: Maybe<Content_ElementType_Bool_Exp>;
};

export type Subscription_RootContent_ElementType_AggregateArgs = {
    distinct_on?: Maybe<Array<Content_ElementType_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ElementType_Order_By>>;
    where?: Maybe<Content_ElementType_Bool_Exp>;
};

export type Subscription_RootContent_ElementType_By_PkArgs = {
    name: Scalars["String"];
};

export type Subscription_RootContent_Element_AggregateArgs = {
    distinct_on?: Maybe<Array<Content_Element_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_Element_Order_By>>;
    where?: Maybe<Content_Element_Bool_Exp>;
};

export type Subscription_RootContent_Element_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootContent_ItemArgs = {
    distinct_on?: Maybe<Array<Content_Item_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_Item_Order_By>>;
    where?: Maybe<Content_Item_Bool_Exp>;
};

export type Subscription_RootContent_ItemExhibitionArgs = {
    distinct_on?: Maybe<Array<Content_ItemExhibition_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ItemExhibition_Order_By>>;
    where?: Maybe<Content_ItemExhibition_Bool_Exp>;
};

export type Subscription_RootContent_ItemExhibition_AggregateArgs = {
    distinct_on?: Maybe<Array<Content_ItemExhibition_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ItemExhibition_Order_By>>;
    where?: Maybe<Content_ItemExhibition_Bool_Exp>;
};

export type Subscription_RootContent_ItemExhibition_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootContent_ItemProgramPersonArgs = {
    distinct_on?: Maybe<Array<Content_ItemProgramPerson_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ItemProgramPerson_Order_By>>;
    where?: Maybe<Content_ItemProgramPerson_Bool_Exp>;
};

export type Subscription_RootContent_ItemProgramPerson_AggregateArgs = {
    distinct_on?: Maybe<Array<Content_ItemProgramPerson_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ItemProgramPerson_Order_By>>;
    where?: Maybe<Content_ItemProgramPerson_Bool_Exp>;
};

export type Subscription_RootContent_ItemProgramPerson_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootContent_ItemTagArgs = {
    distinct_on?: Maybe<Array<Content_ItemTag_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ItemTag_Order_By>>;
    where?: Maybe<Content_ItemTag_Bool_Exp>;
};

export type Subscription_RootContent_ItemTag_AggregateArgs = {
    distinct_on?: Maybe<Array<Content_ItemTag_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ItemTag_Order_By>>;
    where?: Maybe<Content_ItemTag_Bool_Exp>;
};

export type Subscription_RootContent_ItemTag_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootContent_ItemTypeArgs = {
    distinct_on?: Maybe<Array<Content_ItemType_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ItemType_Order_By>>;
    where?: Maybe<Content_ItemType_Bool_Exp>;
};

export type Subscription_RootContent_ItemType_AggregateArgs = {
    distinct_on?: Maybe<Array<Content_ItemType_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_ItemType_Order_By>>;
    where?: Maybe<Content_ItemType_Bool_Exp>;
};

export type Subscription_RootContent_ItemType_By_PkArgs = {
    name: Scalars["String"];
};

export type Subscription_RootContent_Item_AggregateArgs = {
    distinct_on?: Maybe<Array<Content_Item_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_Item_Order_By>>;
    where?: Maybe<Content_Item_Bool_Exp>;
};

export type Subscription_RootContent_Item_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootContent_UploaderArgs = {
    distinct_on?: Maybe<Array<Content_Uploader_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_Uploader_Order_By>>;
    where?: Maybe<Content_Uploader_Bool_Exp>;
};

export type Subscription_RootContent_Uploader_AggregateArgs = {
    distinct_on?: Maybe<Array<Content_Uploader_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Content_Uploader_Order_By>>;
    where?: Maybe<Content_Uploader_Bool_Exp>;
};

export type Subscription_RootContent_Uploader_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootJob_Queues_ChannelStackCreateJobArgs = {
    distinct_on?: Maybe<Array<Job_Queues_ChannelStackCreateJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_ChannelStackCreateJob_Order_By>>;
    where?: Maybe<Job_Queues_ChannelStackCreateJob_Bool_Exp>;
};

export type Subscription_RootJob_Queues_ChannelStackCreateJob_AggregateArgs = {
    distinct_on?: Maybe<Array<Job_Queues_ChannelStackCreateJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_ChannelStackCreateJob_Order_By>>;
    where?: Maybe<Job_Queues_ChannelStackCreateJob_Bool_Exp>;
};

export type Subscription_RootJob_Queues_ChannelStackCreateJob_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootJob_Queues_ChannelStackDeleteJobArgs = {
    distinct_on?: Maybe<Array<Job_Queues_ChannelStackDeleteJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_ChannelStackDeleteJob_Order_By>>;
    where?: Maybe<Job_Queues_ChannelStackDeleteJob_Bool_Exp>;
};

export type Subscription_RootJob_Queues_ChannelStackDeleteJob_AggregateArgs = {
    distinct_on?: Maybe<Array<Job_Queues_ChannelStackDeleteJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_ChannelStackDeleteJob_Order_By>>;
    where?: Maybe<Job_Queues_ChannelStackDeleteJob_Bool_Exp>;
};

export type Subscription_RootJob_Queues_ChannelStackDeleteJob_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootJob_Queues_CombineVideosJobArgs = {
    distinct_on?: Maybe<Array<Job_Queues_CombineVideosJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_CombineVideosJob_Order_By>>;
    where?: Maybe<Job_Queues_CombineVideosJob_Bool_Exp>;
};

export type Subscription_RootJob_Queues_CombineVideosJob_AggregateArgs = {
    distinct_on?: Maybe<Array<Job_Queues_CombineVideosJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_CombineVideosJob_Order_By>>;
    where?: Maybe<Job_Queues_CombineVideosJob_Bool_Exp>;
};

export type Subscription_RootJob_Queues_CombineVideosJob_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootJob_Queues_CustomEmailJobArgs = {
    distinct_on?: Maybe<Array<Job_Queues_CustomEmailJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_CustomEmailJob_Order_By>>;
    where?: Maybe<Job_Queues_CustomEmailJob_Bool_Exp>;
};

export type Subscription_RootJob_Queues_CustomEmailJob_AggregateArgs = {
    distinct_on?: Maybe<Array<Job_Queues_CustomEmailJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_CustomEmailJob_Order_By>>;
    where?: Maybe<Job_Queues_CustomEmailJob_Bool_Exp>;
};

export type Subscription_RootJob_Queues_CustomEmailJob_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootJob_Queues_InvitationEmailJobArgs = {
    distinct_on?: Maybe<Array<Job_Queues_InvitationEmailJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_InvitationEmailJob_Order_By>>;
    where?: Maybe<Job_Queues_InvitationEmailJob_Bool_Exp>;
};

export type Subscription_RootJob_Queues_InvitationEmailJob_AggregateArgs = {
    distinct_on?: Maybe<Array<Job_Queues_InvitationEmailJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_InvitationEmailJob_Order_By>>;
    where?: Maybe<Job_Queues_InvitationEmailJob_Bool_Exp>;
};

export type Subscription_RootJob_Queues_InvitationEmailJob_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootJob_Queues_MediaPackageHarvestJobArgs = {
    distinct_on?: Maybe<Array<Job_Queues_MediaPackageHarvestJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_MediaPackageHarvestJob_Order_By>>;
    where?: Maybe<Job_Queues_MediaPackageHarvestJob_Bool_Exp>;
};

export type Subscription_RootJob_Queues_MediaPackageHarvestJob_AggregateArgs = {
    distinct_on?: Maybe<Array<Job_Queues_MediaPackageHarvestJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_MediaPackageHarvestJob_Order_By>>;
    where?: Maybe<Job_Queues_MediaPackageHarvestJob_Bool_Exp>;
};

export type Subscription_RootJob_Queues_MediaPackageHarvestJob_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootJob_Queues_PublishVideoJobArgs = {
    distinct_on?: Maybe<Array<Job_Queues_PublishVideoJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_PublishVideoJob_Order_By>>;
    where?: Maybe<Job_Queues_PublishVideoJob_Bool_Exp>;
};

export type Subscription_RootJob_Queues_PublishVideoJob_AggregateArgs = {
    distinct_on?: Maybe<Array<Job_Queues_PublishVideoJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_PublishVideoJob_Order_By>>;
    where?: Maybe<Job_Queues_PublishVideoJob_Bool_Exp>;
};

export type Subscription_RootJob_Queues_PublishVideoJob_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootJob_Queues_SubmissionRequestEmailJobArgs = {
    distinct_on?: Maybe<Array<Job_Queues_SubmissionRequestEmailJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_SubmissionRequestEmailJob_Order_By>>;
    where?: Maybe<Job_Queues_SubmissionRequestEmailJob_Bool_Exp>;
};

export type Subscription_RootJob_Queues_SubmissionRequestEmailJob_AggregateArgs = {
    distinct_on?: Maybe<Array<Job_Queues_SubmissionRequestEmailJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_SubmissionRequestEmailJob_Order_By>>;
    where?: Maybe<Job_Queues_SubmissionRequestEmailJob_Bool_Exp>;
};

export type Subscription_RootJob_Queues_SubmissionRequestEmailJob_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootJob_Queues_UploadYouTubeVideoJobArgs = {
    distinct_on?: Maybe<Array<Job_Queues_UploadYouTubeVideoJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_UploadYouTubeVideoJob_Order_By>>;
    where?: Maybe<Job_Queues_UploadYouTubeVideoJob_Bool_Exp>;
};

export type Subscription_RootJob_Queues_UploadYouTubeVideoJob_AggregateArgs = {
    distinct_on?: Maybe<Array<Job_Queues_UploadYouTubeVideoJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Job_Queues_UploadYouTubeVideoJob_Order_By>>;
    where?: Maybe<Job_Queues_UploadYouTubeVideoJob_Bool_Exp>;
};

export type Subscription_RootJob_Queues_UploadYouTubeVideoJob_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootPermissions_GroupArgs = {
    distinct_on?: Maybe<Array<Permissions_Group_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_Group_Order_By>>;
    where?: Maybe<Permissions_Group_Bool_Exp>;
};

export type Subscription_RootPermissions_GroupRegistrantArgs = {
    distinct_on?: Maybe<Array<Permissions_GroupRegistrant_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_GroupRegistrant_Order_By>>;
    where?: Maybe<Permissions_GroupRegistrant_Bool_Exp>;
};

export type Subscription_RootPermissions_GroupRegistrant_AggregateArgs = {
    distinct_on?: Maybe<Array<Permissions_GroupRegistrant_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_GroupRegistrant_Order_By>>;
    where?: Maybe<Permissions_GroupRegistrant_Bool_Exp>;
};

export type Subscription_RootPermissions_GroupRegistrant_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootPermissions_GroupRoleArgs = {
    distinct_on?: Maybe<Array<Permissions_GroupRole_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_GroupRole_Order_By>>;
    where?: Maybe<Permissions_GroupRole_Bool_Exp>;
};

export type Subscription_RootPermissions_GroupRole_AggregateArgs = {
    distinct_on?: Maybe<Array<Permissions_GroupRole_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_GroupRole_Order_By>>;
    where?: Maybe<Permissions_GroupRole_Bool_Exp>;
};

export type Subscription_RootPermissions_GroupRole_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootPermissions_Group_AggregateArgs = {
    distinct_on?: Maybe<Array<Permissions_Group_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_Group_Order_By>>;
    where?: Maybe<Permissions_Group_Bool_Exp>;
};

export type Subscription_RootPermissions_Group_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootPermissions_PermissionArgs = {
    distinct_on?: Maybe<Array<Permissions_Permission_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_Permission_Order_By>>;
    where?: Maybe<Permissions_Permission_Bool_Exp>;
};

export type Subscription_RootPermissions_Permission_AggregateArgs = {
    distinct_on?: Maybe<Array<Permissions_Permission_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_Permission_Order_By>>;
    where?: Maybe<Permissions_Permission_Bool_Exp>;
};

export type Subscription_RootPermissions_Permission_By_PkArgs = {
    name: Scalars["String"];
};

export type Subscription_RootPermissions_RoleArgs = {
    distinct_on?: Maybe<Array<Permissions_Role_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_Role_Order_By>>;
    where?: Maybe<Permissions_Role_Bool_Exp>;
};

export type Subscription_RootPermissions_RolePermissionArgs = {
    distinct_on?: Maybe<Array<Permissions_RolePermission_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_RolePermission_Order_By>>;
    where?: Maybe<Permissions_RolePermission_Bool_Exp>;
};

export type Subscription_RootPermissions_RolePermission_AggregateArgs = {
    distinct_on?: Maybe<Array<Permissions_RolePermission_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_RolePermission_Order_By>>;
    where?: Maybe<Permissions_RolePermission_Bool_Exp>;
};

export type Subscription_RootPermissions_RolePermission_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootPermissions_Role_AggregateArgs = {
    distinct_on?: Maybe<Array<Permissions_Role_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Permissions_Role_Order_By>>;
    where?: Maybe<Permissions_Role_Bool_Exp>;
};

export type Subscription_RootPermissions_Role_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootRegistrant_GoogleAccountArgs = {
    distinct_on?: Maybe<Array<Registrant_GoogleAccount_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Registrant_GoogleAccount_Order_By>>;
    where?: Maybe<Registrant_GoogleAccount_Bool_Exp>;
};

export type Subscription_RootRegistrant_GoogleAccount_AggregateArgs = {
    distinct_on?: Maybe<Array<Registrant_GoogleAccount_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Registrant_GoogleAccount_Order_By>>;
    where?: Maybe<Registrant_GoogleAccount_Bool_Exp>;
};

export type Subscription_RootRegistrant_GoogleAccount_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootRegistrant_InvitationArgs = {
    distinct_on?: Maybe<Array<Registrant_Invitation_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Registrant_Invitation_Order_By>>;
    where?: Maybe<Registrant_Invitation_Bool_Exp>;
};

export type Subscription_RootRegistrant_Invitation_AggregateArgs = {
    distinct_on?: Maybe<Array<Registrant_Invitation_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Registrant_Invitation_Order_By>>;
    where?: Maybe<Registrant_Invitation_Bool_Exp>;
};

export type Subscription_RootRegistrant_Invitation_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootRegistrant_ProfileArgs = {
    distinct_on?: Maybe<Array<Registrant_Profile_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Registrant_Profile_Order_By>>;
    where?: Maybe<Registrant_Profile_Bool_Exp>;
};

export type Subscription_RootRegistrant_ProfileBadgesArgs = {
    distinct_on?: Maybe<Array<Registrant_ProfileBadges_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Registrant_ProfileBadges_Order_By>>;
    where?: Maybe<Registrant_ProfileBadges_Bool_Exp>;
};

export type Subscription_RootRegistrant_ProfileBadges_AggregateArgs = {
    distinct_on?: Maybe<Array<Registrant_ProfileBadges_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Registrant_ProfileBadges_Order_By>>;
    where?: Maybe<Registrant_ProfileBadges_Bool_Exp>;
};

export type Subscription_RootRegistrant_Profile_AggregateArgs = {
    distinct_on?: Maybe<Array<Registrant_Profile_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Registrant_Profile_Order_By>>;
    where?: Maybe<Registrant_Profile_Bool_Exp>;
};

export type Subscription_RootRegistrant_Profile_By_PkArgs = {
    registrantId: Scalars["uuid"];
};

export type Subscription_RootRegistrant_RegistrantArgs = {
    distinct_on?: Maybe<Array<Registrant_Registrant_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Registrant_Registrant_Order_By>>;
    where?: Maybe<Registrant_Registrant_Bool_Exp>;
};

export type Subscription_RootRegistrant_Registrant_AggregateArgs = {
    distinct_on?: Maybe<Array<Registrant_Registrant_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Registrant_Registrant_Order_By>>;
    where?: Maybe<Registrant_Registrant_Bool_Exp>;
};

export type Subscription_RootRegistrant_Registrant_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootRoom_BackendArgs = {
    distinct_on?: Maybe<Array<Room_Backend_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_Backend_Order_By>>;
    where?: Maybe<Room_Backend_Bool_Exp>;
};

export type Subscription_RootRoom_Backend_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_Backend_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_Backend_Order_By>>;
    where?: Maybe<Room_Backend_Bool_Exp>;
};

export type Subscription_RootRoom_Backend_By_PkArgs = {
    name: Scalars["String"];
};

export type Subscription_RootRoom_ChimeMeetingArgs = {
    distinct_on?: Maybe<Array<Room_ChimeMeeting_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_ChimeMeeting_Order_By>>;
    where?: Maybe<Room_ChimeMeeting_Bool_Exp>;
};

export type Subscription_RootRoom_ChimeMeeting_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_ChimeMeeting_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_ChimeMeeting_Order_By>>;
    where?: Maybe<Room_ChimeMeeting_Bool_Exp>;
};

export type Subscription_RootRoom_ChimeMeeting_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootRoom_LivestreamDurationsArgs = {
    distinct_on?: Maybe<Array<Room_LivestreamDurations_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_LivestreamDurations_Order_By>>;
    where?: Maybe<Room_LivestreamDurations_Bool_Exp>;
};

export type Subscription_RootRoom_LivestreamDurations_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_LivestreamDurations_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_LivestreamDurations_Order_By>>;
    where?: Maybe<Room_LivestreamDurations_Bool_Exp>;
};

export type Subscription_RootRoom_ManagementModeArgs = {
    distinct_on?: Maybe<Array<Room_ManagementMode_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_ManagementMode_Order_By>>;
    where?: Maybe<Room_ManagementMode_Bool_Exp>;
};

export type Subscription_RootRoom_ManagementMode_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_ManagementMode_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_ManagementMode_Order_By>>;
    where?: Maybe<Room_ManagementMode_Bool_Exp>;
};

export type Subscription_RootRoom_ManagementMode_By_PkArgs = {
    name: Scalars["String"];
};

export type Subscription_RootRoom_ModeArgs = {
    distinct_on?: Maybe<Array<Room_Mode_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_Mode_Order_By>>;
    where?: Maybe<Room_Mode_Bool_Exp>;
};

export type Subscription_RootRoom_Mode_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_Mode_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_Mode_Order_By>>;
    where?: Maybe<Room_Mode_Bool_Exp>;
};

export type Subscription_RootRoom_Mode_By_PkArgs = {
    name: Scalars["String"];
};

export type Subscription_RootRoom_ParticipantArgs = {
    distinct_on?: Maybe<Array<Room_Participant_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_Participant_Order_By>>;
    where?: Maybe<Room_Participant_Bool_Exp>;
};

export type Subscription_RootRoom_Participant_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_Participant_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_Participant_Order_By>>;
    where?: Maybe<Room_Participant_Bool_Exp>;
};

export type Subscription_RootRoom_Participant_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootRoom_PersonRoleArgs = {
    distinct_on?: Maybe<Array<Room_PersonRole_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_PersonRole_Order_By>>;
    where?: Maybe<Room_PersonRole_Bool_Exp>;
};

export type Subscription_RootRoom_PersonRole_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_PersonRole_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_PersonRole_Order_By>>;
    where?: Maybe<Room_PersonRole_Bool_Exp>;
};

export type Subscription_RootRoom_PersonRole_By_PkArgs = {
    name: Scalars["String"];
};

export type Subscription_RootRoom_RoomArgs = {
    distinct_on?: Maybe<Array<Room_Room_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_Room_Order_By>>;
    where?: Maybe<Room_Room_Bool_Exp>;
};

export type Subscription_RootRoom_RoomPersonArgs = {
    distinct_on?: Maybe<Array<Room_RoomPerson_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_RoomPerson_Order_By>>;
    where?: Maybe<Room_RoomPerson_Bool_Exp>;
};

export type Subscription_RootRoom_RoomPerson_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_RoomPerson_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_RoomPerson_Order_By>>;
    where?: Maybe<Room_RoomPerson_Bool_Exp>;
};

export type Subscription_RootRoom_RoomPerson_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootRoom_Room_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_Room_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_Room_Order_By>>;
    where?: Maybe<Room_Room_Bool_Exp>;
};

export type Subscription_RootRoom_Room_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootRoom_ShuffleAlgorithmArgs = {
    distinct_on?: Maybe<Array<Room_ShuffleAlgorithm_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_ShuffleAlgorithm_Order_By>>;
    where?: Maybe<Room_ShuffleAlgorithm_Bool_Exp>;
};

export type Subscription_RootRoom_ShuffleAlgorithm_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_ShuffleAlgorithm_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_ShuffleAlgorithm_Order_By>>;
    where?: Maybe<Room_ShuffleAlgorithm_Bool_Exp>;
};

export type Subscription_RootRoom_ShuffleAlgorithm_By_PkArgs = {
    name: Scalars["String"];
};

export type Subscription_RootRoom_ShufflePeriodArgs = {
    distinct_on?: Maybe<Array<Room_ShufflePeriod_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_ShufflePeriod_Order_By>>;
    where?: Maybe<Room_ShufflePeriod_Bool_Exp>;
};

export type Subscription_RootRoom_ShufflePeriod_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_ShufflePeriod_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_ShufflePeriod_Order_By>>;
    where?: Maybe<Room_ShufflePeriod_Bool_Exp>;
};

export type Subscription_RootRoom_ShufflePeriod_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootRoom_ShuffleQueueEntryArgs = {
    distinct_on?: Maybe<Array<Room_ShuffleQueueEntry_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_ShuffleQueueEntry_Order_By>>;
    where?: Maybe<Room_ShuffleQueueEntry_Bool_Exp>;
};

export type Subscription_RootRoom_ShuffleQueueEntry_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_ShuffleQueueEntry_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_ShuffleQueueEntry_Order_By>>;
    where?: Maybe<Room_ShuffleQueueEntry_Bool_Exp>;
};

export type Subscription_RootRoom_ShuffleQueueEntry_By_PkArgs = {
    id: Scalars["bigint"];
};

export type Subscription_RootRoom_ShuffleRoomArgs = {
    distinct_on?: Maybe<Array<Room_ShuffleRoom_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_ShuffleRoom_Order_By>>;
    where?: Maybe<Room_ShuffleRoom_Bool_Exp>;
};

export type Subscription_RootRoom_ShuffleRoom_AggregateArgs = {
    distinct_on?: Maybe<Array<Room_ShuffleRoom_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Room_ShuffleRoom_Order_By>>;
    where?: Maybe<Room_ShuffleRoom_Bool_Exp>;
};

export type Subscription_RootRoom_ShuffleRoom_By_PkArgs = {
    id: Scalars["bigint"];
};

export type Subscription_RootSchedule_ContinuationArgs = {
    distinct_on?: Maybe<Array<Schedule_Continuation_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_Continuation_Order_By>>;
    where?: Maybe<Schedule_Continuation_Bool_Exp>;
};

export type Subscription_RootSchedule_Continuation_AggregateArgs = {
    distinct_on?: Maybe<Array<Schedule_Continuation_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_Continuation_Order_By>>;
    where?: Maybe<Schedule_Continuation_Bool_Exp>;
};

export type Subscription_RootSchedule_Continuation_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootSchedule_EventArgs = {
    distinct_on?: Maybe<Array<Schedule_Event_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_Event_Order_By>>;
    where?: Maybe<Schedule_Event_Bool_Exp>;
};

export type Subscription_RootSchedule_EventProgramPersonArgs = {
    distinct_on?: Maybe<Array<Schedule_EventProgramPerson_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_EventProgramPerson_Order_By>>;
    where?: Maybe<Schedule_EventProgramPerson_Bool_Exp>;
};

export type Subscription_RootSchedule_EventProgramPersonRoleArgs = {
    distinct_on?: Maybe<Array<Schedule_EventProgramPersonRole_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_EventProgramPersonRole_Order_By>>;
    where?: Maybe<Schedule_EventProgramPersonRole_Bool_Exp>;
};

export type Subscription_RootSchedule_EventProgramPersonRole_AggregateArgs = {
    distinct_on?: Maybe<Array<Schedule_EventProgramPersonRole_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_EventProgramPersonRole_Order_By>>;
    where?: Maybe<Schedule_EventProgramPersonRole_Bool_Exp>;
};

export type Subscription_RootSchedule_EventProgramPersonRole_By_PkArgs = {
    name: Scalars["String"];
};

export type Subscription_RootSchedule_EventProgramPerson_AggregateArgs = {
    distinct_on?: Maybe<Array<Schedule_EventProgramPerson_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_EventProgramPerson_Order_By>>;
    where?: Maybe<Schedule_EventProgramPerson_Bool_Exp>;
};

export type Subscription_RootSchedule_EventProgramPerson_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootSchedule_EventTagArgs = {
    distinct_on?: Maybe<Array<Schedule_EventTag_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_EventTag_Order_By>>;
    where?: Maybe<Schedule_EventTag_Bool_Exp>;
};

export type Subscription_RootSchedule_EventTag_AggregateArgs = {
    distinct_on?: Maybe<Array<Schedule_EventTag_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_EventTag_Order_By>>;
    where?: Maybe<Schedule_EventTag_Bool_Exp>;
};

export type Subscription_RootSchedule_EventTag_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootSchedule_Event_AggregateArgs = {
    distinct_on?: Maybe<Array<Schedule_Event_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_Event_Order_By>>;
    where?: Maybe<Schedule_Event_Bool_Exp>;
};

export type Subscription_RootSchedule_Event_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootSchedule_OverlappingEventsArgs = {
    distinct_on?: Maybe<Array<Schedule_OverlappingEvents_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_OverlappingEvents_Order_By>>;
    where?: Maybe<Schedule_OverlappingEvents_Bool_Exp>;
};

export type Subscription_RootSchedule_OverlappingEvents_AggregateArgs = {
    distinct_on?: Maybe<Array<Schedule_OverlappingEvents_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_OverlappingEvents_Order_By>>;
    where?: Maybe<Schedule_OverlappingEvents_Bool_Exp>;
};

export type Subscription_RootSchedule_StarredEventArgs = {
    distinct_on?: Maybe<Array<Schedule_StarredEvent_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_StarredEvent_Order_By>>;
    where?: Maybe<Schedule_StarredEvent_Bool_Exp>;
};

export type Subscription_RootSchedule_StarredEvent_AggregateArgs = {
    distinct_on?: Maybe<Array<Schedule_StarredEvent_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Schedule_StarredEvent_Order_By>>;
    where?: Maybe<Schedule_StarredEvent_Bool_Exp>;
};

export type Subscription_RootSchedule_StarredEvent_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootSystem_ConfigurationArgs = {
    distinct_on?: Maybe<Array<System_Configuration_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<System_Configuration_Order_By>>;
    where?: Maybe<System_Configuration_Bool_Exp>;
};

export type Subscription_RootSystem_ConfigurationKeyArgs = {
    distinct_on?: Maybe<Array<System_ConfigurationKey_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<System_ConfigurationKey_Order_By>>;
    where?: Maybe<System_ConfigurationKey_Bool_Exp>;
};

export type Subscription_RootSystem_ConfigurationKey_AggregateArgs = {
    distinct_on?: Maybe<Array<System_ConfigurationKey_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<System_ConfigurationKey_Order_By>>;
    where?: Maybe<System_ConfigurationKey_Bool_Exp>;
};

export type Subscription_RootSystem_ConfigurationKey_By_PkArgs = {
    name: Scalars["String"];
};

export type Subscription_RootSystem_Configuration_AggregateArgs = {
    distinct_on?: Maybe<Array<System_Configuration_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<System_Configuration_Order_By>>;
    where?: Maybe<System_Configuration_Bool_Exp>;
};

export type Subscription_RootSystem_Configuration_By_PkArgs = {
    key: System_ConfigurationKey_Enum;
};

export type Subscription_RootVideo_ChannelStackArgs = {
    distinct_on?: Maybe<Array<Video_ChannelStack_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_ChannelStack_Order_By>>;
    where?: Maybe<Video_ChannelStack_Bool_Exp>;
};

export type Subscription_RootVideo_ChannelStack_AggregateArgs = {
    distinct_on?: Maybe<Array<Video_ChannelStack_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_ChannelStack_Order_By>>;
    where?: Maybe<Video_ChannelStack_Bool_Exp>;
};

export type Subscription_RootVideo_ChannelStack_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootVideo_EventParticipantStreamArgs = {
    distinct_on?: Maybe<Array<Video_EventParticipantStream_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_EventParticipantStream_Order_By>>;
    where?: Maybe<Video_EventParticipantStream_Bool_Exp>;
};

export type Subscription_RootVideo_EventParticipantStream_AggregateArgs = {
    distinct_on?: Maybe<Array<Video_EventParticipantStream_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_EventParticipantStream_Order_By>>;
    where?: Maybe<Video_EventParticipantStream_Bool_Exp>;
};

export type Subscription_RootVideo_EventParticipantStream_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootVideo_EventVonageSessionArgs = {
    distinct_on?: Maybe<Array<Video_EventVonageSession_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_EventVonageSession_Order_By>>;
    where?: Maybe<Video_EventVonageSession_Bool_Exp>;
};

export type Subscription_RootVideo_EventVonageSession_AggregateArgs = {
    distinct_on?: Maybe<Array<Video_EventVonageSession_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_EventVonageSession_Order_By>>;
    where?: Maybe<Video_EventVonageSession_Bool_Exp>;
};

export type Subscription_RootVideo_EventVonageSession_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootVideo_ImmediateSwitchArgs = {
    distinct_on?: Maybe<Array<Video_ImmediateSwitch_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_ImmediateSwitch_Order_By>>;
    where?: Maybe<Video_ImmediateSwitch_Bool_Exp>;
};

export type Subscription_RootVideo_ImmediateSwitch_AggregateArgs = {
    distinct_on?: Maybe<Array<Video_ImmediateSwitch_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_ImmediateSwitch_Order_By>>;
    where?: Maybe<Video_ImmediateSwitch_Bool_Exp>;
};

export type Subscription_RootVideo_ImmediateSwitch_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootVideo_InputTypeArgs = {
    distinct_on?: Maybe<Array<Video_InputType_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_InputType_Order_By>>;
    where?: Maybe<Video_InputType_Bool_Exp>;
};

export type Subscription_RootVideo_InputType_AggregateArgs = {
    distinct_on?: Maybe<Array<Video_InputType_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_InputType_Order_By>>;
    where?: Maybe<Video_InputType_Bool_Exp>;
};

export type Subscription_RootVideo_InputType_By_PkArgs = {
    name: Scalars["String"];
};

export type Subscription_RootVideo_JobStatusArgs = {
    distinct_on?: Maybe<Array<Video_JobStatus_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_JobStatus_Order_By>>;
    where?: Maybe<Video_JobStatus_Bool_Exp>;
};

export type Subscription_RootVideo_JobStatus_AggregateArgs = {
    distinct_on?: Maybe<Array<Video_JobStatus_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_JobStatus_Order_By>>;
    where?: Maybe<Video_JobStatus_Bool_Exp>;
};

export type Subscription_RootVideo_JobStatus_By_PkArgs = {
    name: Scalars["String"];
};

export type Subscription_RootVideo_MediaLiveChannelStatusArgs = {
    distinct_on?: Maybe<Array<Video_MediaLiveChannelStatus_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_MediaLiveChannelStatus_Order_By>>;
    where?: Maybe<Video_MediaLiveChannelStatus_Bool_Exp>;
};

export type Subscription_RootVideo_MediaLiveChannelStatus_AggregateArgs = {
    distinct_on?: Maybe<Array<Video_MediaLiveChannelStatus_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_MediaLiveChannelStatus_Order_By>>;
    where?: Maybe<Video_MediaLiveChannelStatus_Bool_Exp>;
};

export type Subscription_RootVideo_MediaLiveChannelStatus_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootVideo_RtmpInputArgs = {
    distinct_on?: Maybe<Array<Video_RtmpInput_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_RtmpInput_Order_By>>;
    where?: Maybe<Video_RtmpInput_Bool_Exp>;
};

export type Subscription_RootVideo_RtmpInput_AggregateArgs = {
    distinct_on?: Maybe<Array<Video_RtmpInput_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_RtmpInput_Order_By>>;
    where?: Maybe<Video_RtmpInput_Bool_Exp>;
};

export type Subscription_RootVideo_RtmpInput_By_PkArgs = {
    name: Scalars["String"];
};

export type Subscription_RootVideo_TranscriptionJobArgs = {
    distinct_on?: Maybe<Array<Video_TranscriptionJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_TranscriptionJob_Order_By>>;
    where?: Maybe<Video_TranscriptionJob_Bool_Exp>;
};

export type Subscription_RootVideo_TranscriptionJob_AggregateArgs = {
    distinct_on?: Maybe<Array<Video_TranscriptionJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_TranscriptionJob_Order_By>>;
    where?: Maybe<Video_TranscriptionJob_Bool_Exp>;
};

export type Subscription_RootVideo_TranscriptionJob_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootVideo_VideoRenderJobArgs = {
    distinct_on?: Maybe<Array<Video_VideoRenderJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_VideoRenderJob_Order_By>>;
    where?: Maybe<Video_VideoRenderJob_Bool_Exp>;
};

export type Subscription_RootVideo_VideoRenderJob_AggregateArgs = {
    distinct_on?: Maybe<Array<Video_VideoRenderJob_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_VideoRenderJob_Order_By>>;
    where?: Maybe<Video_VideoRenderJob_Bool_Exp>;
};

export type Subscription_RootVideo_VideoRenderJob_By_PkArgs = {
    id: Scalars["uuid"];
};

export type Subscription_RootVideo_YouTubeUploadArgs = {
    distinct_on?: Maybe<Array<Video_YouTubeUpload_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_YouTubeUpload_Order_By>>;
    where?: Maybe<Video_YouTubeUpload_Bool_Exp>;
};

export type Subscription_RootVideo_YouTubeUpload_AggregateArgs = {
    distinct_on?: Maybe<Array<Video_YouTubeUpload_Select_Column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<Video_YouTubeUpload_Order_By>>;
    where?: Maybe<Video_YouTubeUpload_Bool_Exp>;
};

export type Subscription_RootVideo_YouTubeUpload_By_PkArgs = {
    id: Scalars["uuid"];
};

/** columns and relationships of "system.Configuration" */
export type System_Configuration = {
    __typename?: "system_Configuration";
    created_at: Scalars["timestamptz"];
    key: System_ConfigurationKey_Enum;
    updated_at: Scalars["timestamptz"];
    value: Scalars["jsonb"];
};

/** columns and relationships of "system.Configuration" */
export type System_ConfigurationValueArgs = {
    path?: Maybe<Scalars["String"]>;
};

/** columns and relationships of "system.ConfigurationKey" */
export type System_ConfigurationKey = {
    __typename?: "system_ConfigurationKey";
    description?: Maybe<Scalars["String"]>;
    name: Scalars["String"];
};

/** aggregated selection of "system.ConfigurationKey" */
export type System_ConfigurationKey_Aggregate = {
    __typename?: "system_ConfigurationKey_aggregate";
    aggregate?: Maybe<System_ConfigurationKey_Aggregate_Fields>;
    nodes: Array<System_ConfigurationKey>;
};

/** aggregate fields of "system.ConfigurationKey" */
export type System_ConfigurationKey_Aggregate_Fields = {
    __typename?: "system_ConfigurationKey_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<System_ConfigurationKey_Max_Fields>;
    min?: Maybe<System_ConfigurationKey_Min_Fields>;
};

/** aggregate fields of "system.ConfigurationKey" */
export type System_ConfigurationKey_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<System_ConfigurationKey_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** Boolean expression to filter rows from the table "system.ConfigurationKey". All fields are combined with a logical 'AND'. */
export type System_ConfigurationKey_Bool_Exp = {
    _and?: Maybe<Array<System_ConfigurationKey_Bool_Exp>>;
    _not?: Maybe<System_ConfigurationKey_Bool_Exp>;
    _or?: Maybe<Array<System_ConfigurationKey_Bool_Exp>>;
    description?: Maybe<String_Comparison_Exp>;
    name?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "system.ConfigurationKey" */
export enum System_ConfigurationKey_Constraint {
    /** unique or primary key constraint */
    ConfigurationKeyPkey = "ConfigurationKey_pkey",
}

export enum System_ConfigurationKey_Enum {
    /** Allow-list (JSON array) of wildcard-match domains that the system should allow email to be sent to. See also NPM wildcard-match package. */
    AllowEmailsToDomains = "ALLOW_EMAILS_TO_DOMAINS",
    /** The time of the latest revision of the host cookie policy. The value should be a Number representing the milliseconds elapsed since the UNIX epoch. */
    CookiePolicyLatestRevisionTimestamp = "COOKIE_POLICY_LATEST_REVISION_TIMESTAMP",
    /** The URL to the host cookie policy. Note: If self hosting Clowdr, this must be your organisation's cookie policy - you cannot legally reuse, rely on or copy Clowdr's cookie policy. */
    CookiePolicyUrl = "COOKIE_POLICY_URL",
    /** A string representing the full frontend host URL for the app. */
    DefaultFrontendHost = "DEFAULT_FRONTEND_HOST",
    /** Default backend platform for video rooms */
    DefaultVideoRoomBackend = "DEFAULT_VIDEO_ROOM_BACKEND",
    /** The name of the organisation legally responsible for hosting this instance of the Clowdr software. */
    HostOrganisationName = "HOST_ORGANISATION_NAME",
    /** The time of the latest revision of the host Privacy Policy. The value should be a Number representing the milliseconds elapsed since the UNIX epoch. */
    PrivacyPolicyLatestRevisionTimestamp = "PRIVACY_POLICY_LATEST_REVISION_TIMESTAMP",
    /** URL to the host Privacy Policy. Note: If self hosting Clowdr, this must be your organisation's privacy policy - you cannot legally reuse, rely on or copy Clowdr's privacy policy. */
    PrivacyPolicyUrl = "PRIVACY_POLICY_URL",
    /** SendGrid API Key required for sending emails such as invites and submission requests */
    SendgridApiKey = "SENDGRID_API_KEY",
    /** Default SendGrid Reply-To email address. */
    SendgridReplyto = "SENDGRID_REPLYTO",
    /** Default SendGrid Sender email address. */
    SendgridSender = "SENDGRID_SENDER",
    /** The name emails are from when sent via SendGrid. */
    SendgridSenderName = "SENDGRID_SENDER_NAME",
    /** Contact address for people to request emails never be sent to them again. */
    StopEmailsContactEmailAddress = "STOP_EMAILS_CONTACT_EMAIL_ADDRESS",
    /** The time of the latest revision of the host T&Cs. The value should be a Number representing the milliseconds elapsed since the UNIX epoch. */
    TermsLatestRevisionTimestamp = "TERMS_LATEST_REVISION_TIMESTAMP",
    /** URL to the host T&Cs. Note: If self hosting Clowdr, this must be your organisation's terms - you cannot legally reuse, rely on or copy Clowdr's terms. */
    TermsUrl = "TERMS_URL",
    /** VAPID keys are used for push notifications and are generated automatically by the realtime service on first use. */
    VapidPrivateKey = "VAPID_PRIVATE_KEY",
    /** VAPID keys are used for push notifications and are generated automatically by the realtime service on first use. */
    VapidPublicKey = "VAPID_PUBLIC_KEY",
}

/** Boolean expression to compare columns of type "system_ConfigurationKey_enum". All fields are combined with logical 'AND'. */
export type System_ConfigurationKey_Enum_Comparison_Exp = {
    _eq?: Maybe<System_ConfigurationKey_Enum>;
    _in?: Maybe<Array<System_ConfigurationKey_Enum>>;
    _is_null?: Maybe<Scalars["Boolean"]>;
    _neq?: Maybe<System_ConfigurationKey_Enum>;
    _nin?: Maybe<Array<System_ConfigurationKey_Enum>>;
};

/** input type for inserting data into table "system.ConfigurationKey" */
export type System_ConfigurationKey_Insert_Input = {
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** aggregate max on columns */
export type System_ConfigurationKey_Max_Fields = {
    __typename?: "system_ConfigurationKey_max_fields";
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** aggregate min on columns */
export type System_ConfigurationKey_Min_Fields = {
    __typename?: "system_ConfigurationKey_min_fields";
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** response of any mutation on the table "system.ConfigurationKey" */
export type System_ConfigurationKey_Mutation_Response = {
    __typename?: "system_ConfigurationKey_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<System_ConfigurationKey>;
};

/** on conflict condition type for table "system.ConfigurationKey" */
export type System_ConfigurationKey_On_Conflict = {
    constraint: System_ConfigurationKey_Constraint;
    update_columns?: Array<System_ConfigurationKey_Update_Column>;
    where?: Maybe<System_ConfigurationKey_Bool_Exp>;
};

/** Ordering options when selecting data from "system.ConfigurationKey". */
export type System_ConfigurationKey_Order_By = {
    description?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
};

/** primary key columns input for table: system_ConfigurationKey */
export type System_ConfigurationKey_Pk_Columns_Input = {
    name: Scalars["String"];
};

/** select columns of table "system.ConfigurationKey" */
export enum System_ConfigurationKey_Select_Column {
    /** column name */
    Description = "description",
    /** column name */
    Name = "name",
}

/** input type for updating data in table "system.ConfigurationKey" */
export type System_ConfigurationKey_Set_Input = {
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** update columns of table "system.ConfigurationKey" */
export enum System_ConfigurationKey_Update_Column {
    /** column name */
    Description = "description",
    /** column name */
    Name = "name",
}

/** aggregated selection of "system.Configuration" */
export type System_Configuration_Aggregate = {
    __typename?: "system_Configuration_aggregate";
    aggregate?: Maybe<System_Configuration_Aggregate_Fields>;
    nodes: Array<System_Configuration>;
};

/** aggregate fields of "system.Configuration" */
export type System_Configuration_Aggregate_Fields = {
    __typename?: "system_Configuration_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<System_Configuration_Max_Fields>;
    min?: Maybe<System_Configuration_Min_Fields>;
};

/** aggregate fields of "system.Configuration" */
export type System_Configuration_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<System_Configuration_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** append existing jsonb value of filtered columns with new jsonb value */
export type System_Configuration_Append_Input = {
    value?: Maybe<Scalars["jsonb"]>;
};

/** Boolean expression to filter rows from the table "system.Configuration". All fields are combined with a logical 'AND'. */
export type System_Configuration_Bool_Exp = {
    _and?: Maybe<Array<System_Configuration_Bool_Exp>>;
    _not?: Maybe<System_Configuration_Bool_Exp>;
    _or?: Maybe<Array<System_Configuration_Bool_Exp>>;
    created_at?: Maybe<Timestamptz_Comparison_Exp>;
    key?: Maybe<System_ConfigurationKey_Enum_Comparison_Exp>;
    updated_at?: Maybe<Timestamptz_Comparison_Exp>;
    value?: Maybe<Jsonb_Comparison_Exp>;
};

/** unique or primary key constraints on table "system.Configuration" */
export enum System_Configuration_Constraint {
    /** unique or primary key constraint */
    ConfigurationPkey = "Configuration_pkey",
}

/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export type System_Configuration_Delete_At_Path_Input = {
    value?: Maybe<Array<Scalars["String"]>>;
};

/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
export type System_Configuration_Delete_Elem_Input = {
    value?: Maybe<Scalars["Int"]>;
};

/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export type System_Configuration_Delete_Key_Input = {
    value?: Maybe<Scalars["String"]>;
};

/** input type for inserting data into table "system.Configuration" */
export type System_Configuration_Insert_Input = {
    created_at?: Maybe<Scalars["timestamptz"]>;
    key?: Maybe<System_ConfigurationKey_Enum>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
    value?: Maybe<Scalars["jsonb"]>;
};

/** aggregate max on columns */
export type System_Configuration_Max_Fields = {
    __typename?: "system_Configuration_max_fields";
    created_at?: Maybe<Scalars["timestamptz"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate min on columns */
export type System_Configuration_Min_Fields = {
    __typename?: "system_Configuration_min_fields";
    created_at?: Maybe<Scalars["timestamptz"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** response of any mutation on the table "system.Configuration" */
export type System_Configuration_Mutation_Response = {
    __typename?: "system_Configuration_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<System_Configuration>;
};

/** on conflict condition type for table "system.Configuration" */
export type System_Configuration_On_Conflict = {
    constraint: System_Configuration_Constraint;
    update_columns?: Array<System_Configuration_Update_Column>;
    where?: Maybe<System_Configuration_Bool_Exp>;
};

/** Ordering options when selecting data from "system.Configuration". */
export type System_Configuration_Order_By = {
    created_at?: Maybe<Order_By>;
    key?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
    value?: Maybe<Order_By>;
};

/** primary key columns input for table: system_Configuration */
export type System_Configuration_Pk_Columns_Input = {
    key: System_ConfigurationKey_Enum;
};

/** prepend existing jsonb value of filtered columns with new jsonb value */
export type System_Configuration_Prepend_Input = {
    value?: Maybe<Scalars["jsonb"]>;
};

/** select columns of table "system.Configuration" */
export enum System_Configuration_Select_Column {
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    Key = "key",
    /** column name */
    UpdatedAt = "updated_at",
    /** column name */
    Value = "value",
}

/** input type for updating data in table "system.Configuration" */
export type System_Configuration_Set_Input = {
    created_at?: Maybe<Scalars["timestamptz"]>;
    key?: Maybe<System_ConfigurationKey_Enum>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
    value?: Maybe<Scalars["jsonb"]>;
};

/** update columns of table "system.Configuration" */
export enum System_Configuration_Update_Column {
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    Key = "key",
    /** column name */
    UpdatedAt = "updated_at",
    /** column name */
    Value = "value",
}

/** Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'. */
export type Timestamptz_Comparison_Exp = {
    _eq?: Maybe<Scalars["timestamptz"]>;
    _gt?: Maybe<Scalars["timestamptz"]>;
    _gte?: Maybe<Scalars["timestamptz"]>;
    _in?: Maybe<Array<Scalars["timestamptz"]>>;
    _is_null?: Maybe<Scalars["Boolean"]>;
    _lt?: Maybe<Scalars["timestamptz"]>;
    _lte?: Maybe<Scalars["timestamptz"]>;
    _neq?: Maybe<Scalars["timestamptz"]>;
    _nin?: Maybe<Array<Scalars["timestamptz"]>>;
};

/** Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'. */
export type Uuid_Comparison_Exp = {
    _eq?: Maybe<Scalars["uuid"]>;
    _gt?: Maybe<Scalars["uuid"]>;
    _gte?: Maybe<Scalars["uuid"]>;
    _in?: Maybe<Array<Scalars["uuid"]>>;
    _is_null?: Maybe<Scalars["Boolean"]>;
    _lt?: Maybe<Scalars["uuid"]>;
    _lte?: Maybe<Scalars["uuid"]>;
    _neq?: Maybe<Scalars["uuid"]>;
    _nin?: Maybe<Array<Scalars["uuid"]>>;
};

/** columns and relationships of "video.ChannelStack" */
export type Video_ChannelStack = {
    __typename?: "video_ChannelStack";
    /** An object relationship */
    channelStackCreateJob?: Maybe<Job_Queues_ChannelStackCreateJob>;
    channelStackCreateJobId?: Maybe<Scalars["uuid"]>;
    cloudFormationStackArn?: Maybe<Scalars["String"]>;
    cloudFrontDistributionId: Scalars["String"];
    cloudFrontDomain: Scalars["String"];
    /** An object relationship */
    conference: Conference_Conference;
    conferenceId: Scalars["uuid"];
    createdAt: Scalars["timestamptz"];
    endpointUri: Scalars["String"];
    id: Scalars["uuid"];
    loopingMp4InputAttachmentName: Scalars["String"];
    mediaLiveChannelId: Scalars["String"];
    /** An object relationship */
    mediaLiveChannelStatus?: Maybe<Video_MediaLiveChannelStatus>;
    mediaPackageChannelId: Scalars["String"];
    mp4InputAttachmentName: Scalars["String"];
    mp4InputId: Scalars["String"];
    /** An object relationship */
    room?: Maybe<Room_Room>;
    roomId?: Maybe<Scalars["uuid"]>;
    rtmpAInputAttachmentName: Scalars["String"];
    rtmpAInputId: Scalars["String"];
    rtmpAInputUri: Scalars["String"];
    rtmpBInputAttachmentName?: Maybe<Scalars["String"]>;
    rtmpBInputId?: Maybe<Scalars["String"]>;
    rtmpBInputUri?: Maybe<Scalars["String"]>;
    updatedAt: Scalars["timestamptz"];
};

/** aggregated selection of "video.ChannelStack" */
export type Video_ChannelStack_Aggregate = {
    __typename?: "video_ChannelStack_aggregate";
    aggregate?: Maybe<Video_ChannelStack_Aggregate_Fields>;
    nodes: Array<Video_ChannelStack>;
};

/** aggregate fields of "video.ChannelStack" */
export type Video_ChannelStack_Aggregate_Fields = {
    __typename?: "video_ChannelStack_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Video_ChannelStack_Max_Fields>;
    min?: Maybe<Video_ChannelStack_Min_Fields>;
};

/** aggregate fields of "video.ChannelStack" */
export type Video_ChannelStack_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Video_ChannelStack_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** Boolean expression to filter rows from the table "video.ChannelStack". All fields are combined with a logical 'AND'. */
export type Video_ChannelStack_Bool_Exp = {
    _and?: Maybe<Array<Video_ChannelStack_Bool_Exp>>;
    _not?: Maybe<Video_ChannelStack_Bool_Exp>;
    _or?: Maybe<Array<Video_ChannelStack_Bool_Exp>>;
    channelStackCreateJob?: Maybe<Job_Queues_ChannelStackCreateJob_Bool_Exp>;
    channelStackCreateJobId?: Maybe<Uuid_Comparison_Exp>;
    cloudFormationStackArn?: Maybe<String_Comparison_Exp>;
    cloudFrontDistributionId?: Maybe<String_Comparison_Exp>;
    cloudFrontDomain?: Maybe<String_Comparison_Exp>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    createdAt?: Maybe<Timestamptz_Comparison_Exp>;
    endpointUri?: Maybe<String_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    loopingMp4InputAttachmentName?: Maybe<String_Comparison_Exp>;
    mediaLiveChannelId?: Maybe<String_Comparison_Exp>;
    mediaLiveChannelStatus?: Maybe<Video_MediaLiveChannelStatus_Bool_Exp>;
    mediaPackageChannelId?: Maybe<String_Comparison_Exp>;
    mp4InputAttachmentName?: Maybe<String_Comparison_Exp>;
    mp4InputId?: Maybe<String_Comparison_Exp>;
    room?: Maybe<Room_Room_Bool_Exp>;
    roomId?: Maybe<Uuid_Comparison_Exp>;
    rtmpAInputAttachmentName?: Maybe<String_Comparison_Exp>;
    rtmpAInputId?: Maybe<String_Comparison_Exp>;
    rtmpAInputUri?: Maybe<String_Comparison_Exp>;
    rtmpBInputAttachmentName?: Maybe<String_Comparison_Exp>;
    rtmpBInputId?: Maybe<String_Comparison_Exp>;
    rtmpBInputUri?: Maybe<String_Comparison_Exp>;
    updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "video.ChannelStack" */
export enum Video_ChannelStack_Constraint {
    /** unique or primary key constraint */
    MediaLiveChannelPkey = "MediaLiveChannel_pkey",
    /** unique or primary key constraint */
    MediaLiveChannelRoomIdKey = "MediaLiveChannel_roomId_key",
}

/** input type for inserting data into table "video.ChannelStack" */
export type Video_ChannelStack_Insert_Input = {
    channelStackCreateJob?: Maybe<Job_Queues_ChannelStackCreateJob_Obj_Rel_Insert_Input>;
    channelStackCreateJobId?: Maybe<Scalars["uuid"]>;
    cloudFormationStackArn?: Maybe<Scalars["String"]>;
    cloudFrontDistributionId?: Maybe<Scalars["String"]>;
    cloudFrontDomain?: Maybe<Scalars["String"]>;
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    endpointUri?: Maybe<Scalars["String"]>;
    id?: Maybe<Scalars["uuid"]>;
    loopingMp4InputAttachmentName?: Maybe<Scalars["String"]>;
    mediaLiveChannelId?: Maybe<Scalars["String"]>;
    mediaLiveChannelStatus?: Maybe<Video_MediaLiveChannelStatus_Obj_Rel_Insert_Input>;
    mediaPackageChannelId?: Maybe<Scalars["String"]>;
    mp4InputAttachmentName?: Maybe<Scalars["String"]>;
    mp4InputId?: Maybe<Scalars["String"]>;
    room?: Maybe<Room_Room_Obj_Rel_Insert_Input>;
    roomId?: Maybe<Scalars["uuid"]>;
    rtmpAInputAttachmentName?: Maybe<Scalars["String"]>;
    rtmpAInputId?: Maybe<Scalars["String"]>;
    rtmpAInputUri?: Maybe<Scalars["String"]>;
    rtmpBInputAttachmentName?: Maybe<Scalars["String"]>;
    rtmpBInputId?: Maybe<Scalars["String"]>;
    rtmpBInputUri?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Video_ChannelStack_Max_Fields = {
    __typename?: "video_ChannelStack_max_fields";
    channelStackCreateJobId?: Maybe<Scalars["uuid"]>;
    cloudFormationStackArn?: Maybe<Scalars["String"]>;
    cloudFrontDistributionId?: Maybe<Scalars["String"]>;
    cloudFrontDomain?: Maybe<Scalars["String"]>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    endpointUri?: Maybe<Scalars["String"]>;
    id?: Maybe<Scalars["uuid"]>;
    loopingMp4InputAttachmentName?: Maybe<Scalars["String"]>;
    mediaLiveChannelId?: Maybe<Scalars["String"]>;
    mediaPackageChannelId?: Maybe<Scalars["String"]>;
    mp4InputAttachmentName?: Maybe<Scalars["String"]>;
    mp4InputId?: Maybe<Scalars["String"]>;
    roomId?: Maybe<Scalars["uuid"]>;
    rtmpAInputAttachmentName?: Maybe<Scalars["String"]>;
    rtmpAInputId?: Maybe<Scalars["String"]>;
    rtmpAInputUri?: Maybe<Scalars["String"]>;
    rtmpBInputAttachmentName?: Maybe<Scalars["String"]>;
    rtmpBInputId?: Maybe<Scalars["String"]>;
    rtmpBInputUri?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate min on columns */
export type Video_ChannelStack_Min_Fields = {
    __typename?: "video_ChannelStack_min_fields";
    channelStackCreateJobId?: Maybe<Scalars["uuid"]>;
    cloudFormationStackArn?: Maybe<Scalars["String"]>;
    cloudFrontDistributionId?: Maybe<Scalars["String"]>;
    cloudFrontDomain?: Maybe<Scalars["String"]>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    endpointUri?: Maybe<Scalars["String"]>;
    id?: Maybe<Scalars["uuid"]>;
    loopingMp4InputAttachmentName?: Maybe<Scalars["String"]>;
    mediaLiveChannelId?: Maybe<Scalars["String"]>;
    mediaPackageChannelId?: Maybe<Scalars["String"]>;
    mp4InputAttachmentName?: Maybe<Scalars["String"]>;
    mp4InputId?: Maybe<Scalars["String"]>;
    roomId?: Maybe<Scalars["uuid"]>;
    rtmpAInputAttachmentName?: Maybe<Scalars["String"]>;
    rtmpAInputId?: Maybe<Scalars["String"]>;
    rtmpAInputUri?: Maybe<Scalars["String"]>;
    rtmpBInputAttachmentName?: Maybe<Scalars["String"]>;
    rtmpBInputId?: Maybe<Scalars["String"]>;
    rtmpBInputUri?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** response of any mutation on the table "video.ChannelStack" */
export type Video_ChannelStack_Mutation_Response = {
    __typename?: "video_ChannelStack_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Video_ChannelStack>;
};

/** input type for inserting object relation for remote table "video.ChannelStack" */
export type Video_ChannelStack_Obj_Rel_Insert_Input = {
    data: Video_ChannelStack_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Video_ChannelStack_On_Conflict>;
};

/** on conflict condition type for table "video.ChannelStack" */
export type Video_ChannelStack_On_Conflict = {
    constraint: Video_ChannelStack_Constraint;
    update_columns?: Array<Video_ChannelStack_Update_Column>;
    where?: Maybe<Video_ChannelStack_Bool_Exp>;
};

/** Ordering options when selecting data from "video.ChannelStack". */
export type Video_ChannelStack_Order_By = {
    channelStackCreateJob?: Maybe<Job_Queues_ChannelStackCreateJob_Order_By>;
    channelStackCreateJobId?: Maybe<Order_By>;
    cloudFormationStackArn?: Maybe<Order_By>;
    cloudFrontDistributionId?: Maybe<Order_By>;
    cloudFrontDomain?: Maybe<Order_By>;
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    endpointUri?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    loopingMp4InputAttachmentName?: Maybe<Order_By>;
    mediaLiveChannelId?: Maybe<Order_By>;
    mediaLiveChannelStatus?: Maybe<Video_MediaLiveChannelStatus_Order_By>;
    mediaPackageChannelId?: Maybe<Order_By>;
    mp4InputAttachmentName?: Maybe<Order_By>;
    mp4InputId?: Maybe<Order_By>;
    room?: Maybe<Room_Room_Order_By>;
    roomId?: Maybe<Order_By>;
    rtmpAInputAttachmentName?: Maybe<Order_By>;
    rtmpAInputId?: Maybe<Order_By>;
    rtmpAInputUri?: Maybe<Order_By>;
    rtmpBInputAttachmentName?: Maybe<Order_By>;
    rtmpBInputId?: Maybe<Order_By>;
    rtmpBInputUri?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** primary key columns input for table: video_ChannelStack */
export type Video_ChannelStack_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "video.ChannelStack" */
export enum Video_ChannelStack_Select_Column {
    /** column name */
    ChannelStackCreateJobId = "channelStackCreateJobId",
    /** column name */
    CloudFormationStackArn = "cloudFormationStackArn",
    /** column name */
    CloudFrontDistributionId = "cloudFrontDistributionId",
    /** column name */
    CloudFrontDomain = "cloudFrontDomain",
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    EndpointUri = "endpointUri",
    /** column name */
    Id = "id",
    /** column name */
    LoopingMp4InputAttachmentName = "loopingMp4InputAttachmentName",
    /** column name */
    MediaLiveChannelId = "mediaLiveChannelId",
    /** column name */
    MediaPackageChannelId = "mediaPackageChannelId",
    /** column name */
    Mp4InputAttachmentName = "mp4InputAttachmentName",
    /** column name */
    Mp4InputId = "mp4InputId",
    /** column name */
    RoomId = "roomId",
    /** column name */
    RtmpAInputAttachmentName = "rtmpAInputAttachmentName",
    /** column name */
    RtmpAInputId = "rtmpAInputId",
    /** column name */
    RtmpAInputUri = "rtmpAInputUri",
    /** column name */
    RtmpBInputAttachmentName = "rtmpBInputAttachmentName",
    /** column name */
    RtmpBInputId = "rtmpBInputId",
    /** column name */
    RtmpBInputUri = "rtmpBInputUri",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** input type for updating data in table "video.ChannelStack" */
export type Video_ChannelStack_Set_Input = {
    channelStackCreateJobId?: Maybe<Scalars["uuid"]>;
    cloudFormationStackArn?: Maybe<Scalars["String"]>;
    cloudFrontDistributionId?: Maybe<Scalars["String"]>;
    cloudFrontDomain?: Maybe<Scalars["String"]>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    endpointUri?: Maybe<Scalars["String"]>;
    id?: Maybe<Scalars["uuid"]>;
    loopingMp4InputAttachmentName?: Maybe<Scalars["String"]>;
    mediaLiveChannelId?: Maybe<Scalars["String"]>;
    mediaPackageChannelId?: Maybe<Scalars["String"]>;
    mp4InputAttachmentName?: Maybe<Scalars["String"]>;
    mp4InputId?: Maybe<Scalars["String"]>;
    roomId?: Maybe<Scalars["uuid"]>;
    rtmpAInputAttachmentName?: Maybe<Scalars["String"]>;
    rtmpAInputId?: Maybe<Scalars["String"]>;
    rtmpAInputUri?: Maybe<Scalars["String"]>;
    rtmpBInputAttachmentName?: Maybe<Scalars["String"]>;
    rtmpBInputId?: Maybe<Scalars["String"]>;
    rtmpBInputUri?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** update columns of table "video.ChannelStack" */
export enum Video_ChannelStack_Update_Column {
    /** column name */
    ChannelStackCreateJobId = "channelStackCreateJobId",
    /** column name */
    CloudFormationStackArn = "cloudFormationStackArn",
    /** column name */
    CloudFrontDistributionId = "cloudFrontDistributionId",
    /** column name */
    CloudFrontDomain = "cloudFrontDomain",
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    EndpointUri = "endpointUri",
    /** column name */
    Id = "id",
    /** column name */
    LoopingMp4InputAttachmentName = "loopingMp4InputAttachmentName",
    /** column name */
    MediaLiveChannelId = "mediaLiveChannelId",
    /** column name */
    MediaPackageChannelId = "mediaPackageChannelId",
    /** column name */
    Mp4InputAttachmentName = "mp4InputAttachmentName",
    /** column name */
    Mp4InputId = "mp4InputId",
    /** column name */
    RoomId = "roomId",
    /** column name */
    RtmpAInputAttachmentName = "rtmpAInputAttachmentName",
    /** column name */
    RtmpAInputId = "rtmpAInputId",
    /** column name */
    RtmpAInputUri = "rtmpAInputUri",
    /** column name */
    RtmpBInputAttachmentName = "rtmpBInputAttachmentName",
    /** column name */
    RtmpBInputId = "rtmpBInputId",
    /** column name */
    RtmpBInputUri = "rtmpBInputUri",
    /** column name */
    UpdatedAt = "updatedAt",
}

/**
 * Current streams in event Vonage sessions.
 *
 *
 * columns and relationships of "video.EventParticipantStream"
 */
export type Video_EventParticipantStream = {
    __typename?: "video_EventParticipantStream";
    /** An object relationship */
    conference: Conference_Conference;
    conferenceId: Scalars["uuid"];
    createdAt: Scalars["timestamptz"];
    /** An object relationship */
    event: Schedule_Event;
    eventId: Scalars["uuid"];
    id: Scalars["uuid"];
    /** An object relationship */
    registrant: Registrant_Registrant;
    registrantId: Scalars["uuid"];
    updatedAt: Scalars["timestamptz"];
    vonageConnectionId: Scalars["String"];
    vonageStreamId: Scalars["String"];
    vonageStreamType: Scalars["String"];
};

/** aggregated selection of "video.EventParticipantStream" */
export type Video_EventParticipantStream_Aggregate = {
    __typename?: "video_EventParticipantStream_aggregate";
    aggregate?: Maybe<Video_EventParticipantStream_Aggregate_Fields>;
    nodes: Array<Video_EventParticipantStream>;
};

/** aggregate fields of "video.EventParticipantStream" */
export type Video_EventParticipantStream_Aggregate_Fields = {
    __typename?: "video_EventParticipantStream_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Video_EventParticipantStream_Max_Fields>;
    min?: Maybe<Video_EventParticipantStream_Min_Fields>;
};

/** aggregate fields of "video.EventParticipantStream" */
export type Video_EventParticipantStream_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Video_EventParticipantStream_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "video.EventParticipantStream" */
export type Video_EventParticipantStream_Aggregate_Order_By = {
    count?: Maybe<Order_By>;
    max?: Maybe<Video_EventParticipantStream_Max_Order_By>;
    min?: Maybe<Video_EventParticipantStream_Min_Order_By>;
};

/** input type for inserting array relation for remote table "video.EventParticipantStream" */
export type Video_EventParticipantStream_Arr_Rel_Insert_Input = {
    data: Array<Video_EventParticipantStream_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Video_EventParticipantStream_On_Conflict>;
};

/** Boolean expression to filter rows from the table "video.EventParticipantStream". All fields are combined with a logical 'AND'. */
export type Video_EventParticipantStream_Bool_Exp = {
    _and?: Maybe<Array<Video_EventParticipantStream_Bool_Exp>>;
    _not?: Maybe<Video_EventParticipantStream_Bool_Exp>;
    _or?: Maybe<Array<Video_EventParticipantStream_Bool_Exp>>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    createdAt?: Maybe<Timestamptz_Comparison_Exp>;
    event?: Maybe<Schedule_Event_Bool_Exp>;
    eventId?: Maybe<Uuid_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    registrant?: Maybe<Registrant_Registrant_Bool_Exp>;
    registrantId?: Maybe<Uuid_Comparison_Exp>;
    updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
    vonageConnectionId?: Maybe<String_Comparison_Exp>;
    vonageStreamId?: Maybe<String_Comparison_Exp>;
    vonageStreamType?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "video.EventParticipantStream" */
export enum Video_EventParticipantStream_Constraint {
    /** unique or primary key constraint */
    EventParticipantStreamEventIdRegistrantIdVonageStreamIdKey = "EventParticipantStream_eventId_registrantId_vonageStreamId_key",
    /** unique or primary key constraint */
    EventParticipantStreamPkey = "EventParticipantStream_pkey",
}

/** input type for inserting data into table "video.EventParticipantStream" */
export type Video_EventParticipantStream_Insert_Input = {
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    event?: Maybe<Schedule_Event_Obj_Rel_Insert_Input>;
    eventId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    registrant?: Maybe<Registrant_Registrant_Obj_Rel_Insert_Input>;
    registrantId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    vonageConnectionId?: Maybe<Scalars["String"]>;
    vonageStreamId?: Maybe<Scalars["String"]>;
    vonageStreamType?: Maybe<Scalars["String"]>;
};

/** aggregate max on columns */
export type Video_EventParticipantStream_Max_Fields = {
    __typename?: "video_EventParticipantStream_max_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    eventId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    vonageConnectionId?: Maybe<Scalars["String"]>;
    vonageStreamId?: Maybe<Scalars["String"]>;
    vonageStreamType?: Maybe<Scalars["String"]>;
};

/** order by max() on columns of table "video.EventParticipantStream" */
export type Video_EventParticipantStream_Max_Order_By = {
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    eventId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    registrantId?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
    vonageConnectionId?: Maybe<Order_By>;
    vonageStreamId?: Maybe<Order_By>;
    vonageStreamType?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Video_EventParticipantStream_Min_Fields = {
    __typename?: "video_EventParticipantStream_min_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    eventId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    vonageConnectionId?: Maybe<Scalars["String"]>;
    vonageStreamId?: Maybe<Scalars["String"]>;
    vonageStreamType?: Maybe<Scalars["String"]>;
};

/** order by min() on columns of table "video.EventParticipantStream" */
export type Video_EventParticipantStream_Min_Order_By = {
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    eventId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    registrantId?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
    vonageConnectionId?: Maybe<Order_By>;
    vonageStreamId?: Maybe<Order_By>;
    vonageStreamType?: Maybe<Order_By>;
};

/** response of any mutation on the table "video.EventParticipantStream" */
export type Video_EventParticipantStream_Mutation_Response = {
    __typename?: "video_EventParticipantStream_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Video_EventParticipantStream>;
};

/** on conflict condition type for table "video.EventParticipantStream" */
export type Video_EventParticipantStream_On_Conflict = {
    constraint: Video_EventParticipantStream_Constraint;
    update_columns?: Array<Video_EventParticipantStream_Update_Column>;
    where?: Maybe<Video_EventParticipantStream_Bool_Exp>;
};

/** Ordering options when selecting data from "video.EventParticipantStream". */
export type Video_EventParticipantStream_Order_By = {
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    event?: Maybe<Schedule_Event_Order_By>;
    eventId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    registrant?: Maybe<Registrant_Registrant_Order_By>;
    registrantId?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
    vonageConnectionId?: Maybe<Order_By>;
    vonageStreamId?: Maybe<Order_By>;
    vonageStreamType?: Maybe<Order_By>;
};

/** primary key columns input for table: video_EventParticipantStream */
export type Video_EventParticipantStream_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "video.EventParticipantStream" */
export enum Video_EventParticipantStream_Select_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    EventId = "eventId",
    /** column name */
    Id = "id",
    /** column name */
    RegistrantId = "registrantId",
    /** column name */
    UpdatedAt = "updatedAt",
    /** column name */
    VonageConnectionId = "vonageConnectionId",
    /** column name */
    VonageStreamId = "vonageStreamId",
    /** column name */
    VonageStreamType = "vonageStreamType",
}

/** input type for updating data in table "video.EventParticipantStream" */
export type Video_EventParticipantStream_Set_Input = {
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    eventId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    registrantId?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    vonageConnectionId?: Maybe<Scalars["String"]>;
    vonageStreamId?: Maybe<Scalars["String"]>;
    vonageStreamType?: Maybe<Scalars["String"]>;
};

/** update columns of table "video.EventParticipantStream" */
export enum Video_EventParticipantStream_Update_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    EventId = "eventId",
    /** column name */
    Id = "id",
    /** column name */
    RegistrantId = "registrantId",
    /** column name */
    UpdatedAt = "updatedAt",
    /** column name */
    VonageConnectionId = "vonageConnectionId",
    /** column name */
    VonageStreamId = "vonageStreamId",
    /** column name */
    VonageStreamType = "vonageStreamType",
}

/** columns and relationships of "video.EventVonageSession" */
export type Video_EventVonageSession = {
    __typename?: "video_EventVonageSession";
    /** An object relationship */
    conference: Conference_Conference;
    conferenceId: Scalars["uuid"];
    createdAt: Scalars["timestamptz"];
    /** An object relationship */
    event: Schedule_Event;
    eventId: Scalars["uuid"];
    id: Scalars["uuid"];
    layoutData?: Maybe<Scalars["jsonb"]>;
    rtmpInputName: Video_RtmpInput_Enum;
    sessionId: Scalars["String"];
    updatedAt: Scalars["timestamptz"];
};

/** columns and relationships of "video.EventVonageSession" */
export type Video_EventVonageSessionLayoutDataArgs = {
    path?: Maybe<Scalars["String"]>;
};

/** aggregated selection of "video.EventVonageSession" */
export type Video_EventVonageSession_Aggregate = {
    __typename?: "video_EventVonageSession_aggregate";
    aggregate?: Maybe<Video_EventVonageSession_Aggregate_Fields>;
    nodes: Array<Video_EventVonageSession>;
};

/** aggregate fields of "video.EventVonageSession" */
export type Video_EventVonageSession_Aggregate_Fields = {
    __typename?: "video_EventVonageSession_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Video_EventVonageSession_Max_Fields>;
    min?: Maybe<Video_EventVonageSession_Min_Fields>;
};

/** aggregate fields of "video.EventVonageSession" */
export type Video_EventVonageSession_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Video_EventVonageSession_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** append existing jsonb value of filtered columns with new jsonb value */
export type Video_EventVonageSession_Append_Input = {
    layoutData?: Maybe<Scalars["jsonb"]>;
};

/** Boolean expression to filter rows from the table "video.EventVonageSession". All fields are combined with a logical 'AND'. */
export type Video_EventVonageSession_Bool_Exp = {
    _and?: Maybe<Array<Video_EventVonageSession_Bool_Exp>>;
    _not?: Maybe<Video_EventVonageSession_Bool_Exp>;
    _or?: Maybe<Array<Video_EventVonageSession_Bool_Exp>>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    createdAt?: Maybe<Timestamptz_Comparison_Exp>;
    event?: Maybe<Schedule_Event_Bool_Exp>;
    eventId?: Maybe<Uuid_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    layoutData?: Maybe<Jsonb_Comparison_Exp>;
    rtmpInputName?: Maybe<Video_RtmpInput_Enum_Comparison_Exp>;
    sessionId?: Maybe<String_Comparison_Exp>;
    updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "video.EventVonageSession" */
export enum Video_EventVonageSession_Constraint {
    /** unique or primary key constraint */
    EventVonageSessionEventIdKey = "EventVonageSession_eventId_key",
    /** unique or primary key constraint */
    EventVonageSessionPkey = "EventVonageSession_pkey",
    /** unique or primary key constraint */
    EventVonageSessionSessionIdKey = "EventVonageSession_sessionId_key",
}

/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export type Video_EventVonageSession_Delete_At_Path_Input = {
    layoutData?: Maybe<Array<Scalars["String"]>>;
};

/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
export type Video_EventVonageSession_Delete_Elem_Input = {
    layoutData?: Maybe<Scalars["Int"]>;
};

/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export type Video_EventVonageSession_Delete_Key_Input = {
    layoutData?: Maybe<Scalars["String"]>;
};

/** input type for inserting data into table "video.EventVonageSession" */
export type Video_EventVonageSession_Insert_Input = {
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    event?: Maybe<Schedule_Event_Obj_Rel_Insert_Input>;
    eventId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    layoutData?: Maybe<Scalars["jsonb"]>;
    rtmpInputName?: Maybe<Video_RtmpInput_Enum>;
    sessionId?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Video_EventVonageSession_Max_Fields = {
    __typename?: "video_EventVonageSession_max_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    eventId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    sessionId?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate min on columns */
export type Video_EventVonageSession_Min_Fields = {
    __typename?: "video_EventVonageSession_min_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    eventId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    sessionId?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** response of any mutation on the table "video.EventVonageSession" */
export type Video_EventVonageSession_Mutation_Response = {
    __typename?: "video_EventVonageSession_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Video_EventVonageSession>;
};

/** input type for inserting object relation for remote table "video.EventVonageSession" */
export type Video_EventVonageSession_Obj_Rel_Insert_Input = {
    data: Video_EventVonageSession_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Video_EventVonageSession_On_Conflict>;
};

/** on conflict condition type for table "video.EventVonageSession" */
export type Video_EventVonageSession_On_Conflict = {
    constraint: Video_EventVonageSession_Constraint;
    update_columns?: Array<Video_EventVonageSession_Update_Column>;
    where?: Maybe<Video_EventVonageSession_Bool_Exp>;
};

/** Ordering options when selecting data from "video.EventVonageSession". */
export type Video_EventVonageSession_Order_By = {
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    event?: Maybe<Schedule_Event_Order_By>;
    eventId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    layoutData?: Maybe<Order_By>;
    rtmpInputName?: Maybe<Order_By>;
    sessionId?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** primary key columns input for table: video_EventVonageSession */
export type Video_EventVonageSession_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** prepend existing jsonb value of filtered columns with new jsonb value */
export type Video_EventVonageSession_Prepend_Input = {
    layoutData?: Maybe<Scalars["jsonb"]>;
};

/** select columns of table "video.EventVonageSession" */
export enum Video_EventVonageSession_Select_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    EventId = "eventId",
    /** column name */
    Id = "id",
    /** column name */
    LayoutData = "layoutData",
    /** column name */
    RtmpInputName = "rtmpInputName",
    /** column name */
    SessionId = "sessionId",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** input type for updating data in table "video.EventVonageSession" */
export type Video_EventVonageSession_Set_Input = {
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    eventId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    layoutData?: Maybe<Scalars["jsonb"]>;
    rtmpInputName?: Maybe<Video_RtmpInput_Enum>;
    sessionId?: Maybe<Scalars["String"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** update columns of table "video.EventVonageSession" */
export enum Video_EventVonageSession_Update_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    EventId = "eventId",
    /** column name */
    Id = "id",
    /** column name */
    LayoutData = "layoutData",
    /** column name */
    RtmpInputName = "rtmpInputName",
    /** column name */
    SessionId = "sessionId",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** columns and relationships of "video.ImmediateSwitch" */
export type Video_ImmediateSwitch = {
    __typename?: "video_ImmediateSwitch";
    /** An object relationship */
    conference?: Maybe<Conference_Conference>;
    conferenceId: Scalars["uuid"];
    createdAt: Scalars["timestamptz"];
    data: Scalars["jsonb"];
    errorMessage?: Maybe<Scalars["String"]>;
    /** An object relationship */
    event?: Maybe<Schedule_Event>;
    eventId?: Maybe<Scalars["uuid"]>;
    executedAt?: Maybe<Scalars["timestamptz"]>;
    id: Scalars["uuid"];
    updatedAt: Scalars["timestamptz"];
};

/** columns and relationships of "video.ImmediateSwitch" */
export type Video_ImmediateSwitchDataArgs = {
    path?: Maybe<Scalars["String"]>;
};

/** aggregated selection of "video.ImmediateSwitch" */
export type Video_ImmediateSwitch_Aggregate = {
    __typename?: "video_ImmediateSwitch_aggregate";
    aggregate?: Maybe<Video_ImmediateSwitch_Aggregate_Fields>;
    nodes: Array<Video_ImmediateSwitch>;
};

/** aggregate fields of "video.ImmediateSwitch" */
export type Video_ImmediateSwitch_Aggregate_Fields = {
    __typename?: "video_ImmediateSwitch_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Video_ImmediateSwitch_Max_Fields>;
    min?: Maybe<Video_ImmediateSwitch_Min_Fields>;
};

/** aggregate fields of "video.ImmediateSwitch" */
export type Video_ImmediateSwitch_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Video_ImmediateSwitch_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** append existing jsonb value of filtered columns with new jsonb value */
export type Video_ImmediateSwitch_Append_Input = {
    data?: Maybe<Scalars["jsonb"]>;
};

/** Boolean expression to filter rows from the table "video.ImmediateSwitch". All fields are combined with a logical 'AND'. */
export type Video_ImmediateSwitch_Bool_Exp = {
    _and?: Maybe<Array<Video_ImmediateSwitch_Bool_Exp>>;
    _not?: Maybe<Video_ImmediateSwitch_Bool_Exp>;
    _or?: Maybe<Array<Video_ImmediateSwitch_Bool_Exp>>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    createdAt?: Maybe<Timestamptz_Comparison_Exp>;
    data?: Maybe<Jsonb_Comparison_Exp>;
    errorMessage?: Maybe<String_Comparison_Exp>;
    event?: Maybe<Schedule_Event_Bool_Exp>;
    eventId?: Maybe<Uuid_Comparison_Exp>;
    executedAt?: Maybe<Timestamptz_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "video.ImmediateSwitch" */
export enum Video_ImmediateSwitch_Constraint {
    /** unique or primary key constraint */
    ImmediateSwitchPkey = "ImmediateSwitch_pkey",
}

/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export type Video_ImmediateSwitch_Delete_At_Path_Input = {
    data?: Maybe<Array<Scalars["String"]>>;
};

/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
export type Video_ImmediateSwitch_Delete_Elem_Input = {
    data?: Maybe<Scalars["Int"]>;
};

/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export type Video_ImmediateSwitch_Delete_Key_Input = {
    data?: Maybe<Scalars["String"]>;
};

/** input type for inserting data into table "video.ImmediateSwitch" */
export type Video_ImmediateSwitch_Insert_Input = {
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    data?: Maybe<Scalars["jsonb"]>;
    errorMessage?: Maybe<Scalars["String"]>;
    event?: Maybe<Schedule_Event_Obj_Rel_Insert_Input>;
    eventId?: Maybe<Scalars["uuid"]>;
    executedAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Video_ImmediateSwitch_Max_Fields = {
    __typename?: "video_ImmediateSwitch_max_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    errorMessage?: Maybe<Scalars["String"]>;
    eventId?: Maybe<Scalars["uuid"]>;
    executedAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate min on columns */
export type Video_ImmediateSwitch_Min_Fields = {
    __typename?: "video_ImmediateSwitch_min_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    errorMessage?: Maybe<Scalars["String"]>;
    eventId?: Maybe<Scalars["uuid"]>;
    executedAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** response of any mutation on the table "video.ImmediateSwitch" */
export type Video_ImmediateSwitch_Mutation_Response = {
    __typename?: "video_ImmediateSwitch_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Video_ImmediateSwitch>;
};

/** on conflict condition type for table "video.ImmediateSwitch" */
export type Video_ImmediateSwitch_On_Conflict = {
    constraint: Video_ImmediateSwitch_Constraint;
    update_columns?: Array<Video_ImmediateSwitch_Update_Column>;
    where?: Maybe<Video_ImmediateSwitch_Bool_Exp>;
};

/** Ordering options when selecting data from "video.ImmediateSwitch". */
export type Video_ImmediateSwitch_Order_By = {
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    data?: Maybe<Order_By>;
    errorMessage?: Maybe<Order_By>;
    event?: Maybe<Schedule_Event_Order_By>;
    eventId?: Maybe<Order_By>;
    executedAt?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** primary key columns input for table: video_ImmediateSwitch */
export type Video_ImmediateSwitch_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** prepend existing jsonb value of filtered columns with new jsonb value */
export type Video_ImmediateSwitch_Prepend_Input = {
    data?: Maybe<Scalars["jsonb"]>;
};

/** select columns of table "video.ImmediateSwitch" */
export enum Video_ImmediateSwitch_Select_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Data = "data",
    /** column name */
    ErrorMessage = "errorMessage",
    /** column name */
    EventId = "eventId",
    /** column name */
    ExecutedAt = "executedAt",
    /** column name */
    Id = "id",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** input type for updating data in table "video.ImmediateSwitch" */
export type Video_ImmediateSwitch_Set_Input = {
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    data?: Maybe<Scalars["jsonb"]>;
    errorMessage?: Maybe<Scalars["String"]>;
    eventId?: Maybe<Scalars["uuid"]>;
    executedAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** update columns of table "video.ImmediateSwitch" */
export enum Video_ImmediateSwitch_Update_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Data = "data",
    /** column name */
    ErrorMessage = "errorMessage",
    /** column name */
    EventId = "eventId",
    /** column name */
    ExecutedAt = "executedAt",
    /** column name */
    Id = "id",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** columns and relationships of "video.InputType" */
export type Video_InputType = {
    __typename?: "video_InputType";
    description: Scalars["String"];
    name: Scalars["String"];
};

/** aggregated selection of "video.InputType" */
export type Video_InputType_Aggregate = {
    __typename?: "video_InputType_aggregate";
    aggregate?: Maybe<Video_InputType_Aggregate_Fields>;
    nodes: Array<Video_InputType>;
};

/** aggregate fields of "video.InputType" */
export type Video_InputType_Aggregate_Fields = {
    __typename?: "video_InputType_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Video_InputType_Max_Fields>;
    min?: Maybe<Video_InputType_Min_Fields>;
};

/** aggregate fields of "video.InputType" */
export type Video_InputType_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Video_InputType_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** Boolean expression to filter rows from the table "video.InputType". All fields are combined with a logical 'AND'. */
export type Video_InputType_Bool_Exp = {
    _and?: Maybe<Array<Video_InputType_Bool_Exp>>;
    _not?: Maybe<Video_InputType_Bool_Exp>;
    _or?: Maybe<Array<Video_InputType_Bool_Exp>>;
    description?: Maybe<String_Comparison_Exp>;
    name?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "video.InputType" */
export enum Video_InputType_Constraint {
    /** unique or primary key constraint */
    InputTypeNamePkey = "InputTypeName_pkey",
}

/** input type for inserting data into table "video.InputType" */
export type Video_InputType_Insert_Input = {
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** aggregate max on columns */
export type Video_InputType_Max_Fields = {
    __typename?: "video_InputType_max_fields";
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** aggregate min on columns */
export type Video_InputType_Min_Fields = {
    __typename?: "video_InputType_min_fields";
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** response of any mutation on the table "video.InputType" */
export type Video_InputType_Mutation_Response = {
    __typename?: "video_InputType_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Video_InputType>;
};

/** on conflict condition type for table "video.InputType" */
export type Video_InputType_On_Conflict = {
    constraint: Video_InputType_Constraint;
    update_columns?: Array<Video_InputType_Update_Column>;
    where?: Maybe<Video_InputType_Bool_Exp>;
};

/** Ordering options when selecting data from "video.InputType". */
export type Video_InputType_Order_By = {
    description?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
};

/** primary key columns input for table: video_InputType */
export type Video_InputType_Pk_Columns_Input = {
    name: Scalars["String"];
};

/** select columns of table "video.InputType" */
export enum Video_InputType_Select_Column {
    /** column name */
    Description = "description",
    /** column name */
    Name = "name",
}

/** input type for updating data in table "video.InputType" */
export type Video_InputType_Set_Input = {
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** update columns of table "video.InputType" */
export enum Video_InputType_Update_Column {
    /** column name */
    Description = "description",
    /** column name */
    Name = "name",
}

/** columns and relationships of "video.JobStatus" */
export type Video_JobStatus = {
    __typename?: "video_JobStatus";
    description: Scalars["String"];
    name: Scalars["String"];
};

/** aggregated selection of "video.JobStatus" */
export type Video_JobStatus_Aggregate = {
    __typename?: "video_JobStatus_aggregate";
    aggregate?: Maybe<Video_JobStatus_Aggregate_Fields>;
    nodes: Array<Video_JobStatus>;
};

/** aggregate fields of "video.JobStatus" */
export type Video_JobStatus_Aggregate_Fields = {
    __typename?: "video_JobStatus_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Video_JobStatus_Max_Fields>;
    min?: Maybe<Video_JobStatus_Min_Fields>;
};

/** aggregate fields of "video.JobStatus" */
export type Video_JobStatus_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Video_JobStatus_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** Boolean expression to filter rows from the table "video.JobStatus". All fields are combined with a logical 'AND'. */
export type Video_JobStatus_Bool_Exp = {
    _and?: Maybe<Array<Video_JobStatus_Bool_Exp>>;
    _not?: Maybe<Video_JobStatus_Bool_Exp>;
    _or?: Maybe<Array<Video_JobStatus_Bool_Exp>>;
    description?: Maybe<String_Comparison_Exp>;
    name?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "video.JobStatus" */
export enum Video_JobStatus_Constraint {
    /** unique or primary key constraint */
    JobStatusPkey = "JobStatus_pkey",
}

export enum Video_JobStatus_Enum {
    /** Job completed successfully. */
    Completed = "COMPLETED",
    /** Job is no longer valid. */
    Expired = "EXPIRED",
    /** Job failed during execution. */
    Failed = "FAILED",
    /** Job is currently in progress. */
    InProgress = "IN_PROGRESS",
    /** Job has not yet started execution. */
    New = "NEW",
}

/** Boolean expression to compare columns of type "video_JobStatus_enum". All fields are combined with logical 'AND'. */
export type Video_JobStatus_Enum_Comparison_Exp = {
    _eq?: Maybe<Video_JobStatus_Enum>;
    _in?: Maybe<Array<Video_JobStatus_Enum>>;
    _is_null?: Maybe<Scalars["Boolean"]>;
    _neq?: Maybe<Video_JobStatus_Enum>;
    _nin?: Maybe<Array<Video_JobStatus_Enum>>;
};

/** input type for inserting data into table "video.JobStatus" */
export type Video_JobStatus_Insert_Input = {
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** aggregate max on columns */
export type Video_JobStatus_Max_Fields = {
    __typename?: "video_JobStatus_max_fields";
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** aggregate min on columns */
export type Video_JobStatus_Min_Fields = {
    __typename?: "video_JobStatus_min_fields";
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** response of any mutation on the table "video.JobStatus" */
export type Video_JobStatus_Mutation_Response = {
    __typename?: "video_JobStatus_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Video_JobStatus>;
};

/** input type for inserting object relation for remote table "video.JobStatus" */
export type Video_JobStatus_Obj_Rel_Insert_Input = {
    data: Video_JobStatus_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Video_JobStatus_On_Conflict>;
};

/** on conflict condition type for table "video.JobStatus" */
export type Video_JobStatus_On_Conflict = {
    constraint: Video_JobStatus_Constraint;
    update_columns?: Array<Video_JobStatus_Update_Column>;
    where?: Maybe<Video_JobStatus_Bool_Exp>;
};

/** Ordering options when selecting data from "video.JobStatus". */
export type Video_JobStatus_Order_By = {
    description?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
};

/** primary key columns input for table: video_JobStatus */
export type Video_JobStatus_Pk_Columns_Input = {
    name: Scalars["String"];
};

/** select columns of table "video.JobStatus" */
export enum Video_JobStatus_Select_Column {
    /** column name */
    Description = "description",
    /** column name */
    Name = "name",
}

/** input type for updating data in table "video.JobStatus" */
export type Video_JobStatus_Set_Input = {
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** update columns of table "video.JobStatus" */
export enum Video_JobStatus_Update_Column {
    /** column name */
    Description = "description",
    /** column name */
    Name = "name",
}

/** columns and relationships of "video.MediaLiveChannelStatus" */
export type Video_MediaLiveChannelStatus = {
    __typename?: "video_MediaLiveChannelStatus";
    activeInputAttachmentName?: Maybe<Scalars["String"]>;
    activeInputSwitchActionName?: Maybe<Scalars["String"]>;
    /** An object relationship */
    channelStack: Video_ChannelStack;
    channelStackId: Scalars["uuid"];
    /** An object relationship */
    conference?: Maybe<Conference_Conference>;
    conferenceId: Scalars["uuid"];
    createdAt: Scalars["timestamptz"];
    id: Scalars["uuid"];
    pipelinesRunningCount?: Maybe<Scalars["numeric"]>;
    updatedAt: Scalars["timestamptz"];
};

/** aggregated selection of "video.MediaLiveChannelStatus" */
export type Video_MediaLiveChannelStatus_Aggregate = {
    __typename?: "video_MediaLiveChannelStatus_aggregate";
    aggregate?: Maybe<Video_MediaLiveChannelStatus_Aggregate_Fields>;
    nodes: Array<Video_MediaLiveChannelStatus>;
};

/** aggregate fields of "video.MediaLiveChannelStatus" */
export type Video_MediaLiveChannelStatus_Aggregate_Fields = {
    __typename?: "video_MediaLiveChannelStatus_aggregate_fields";
    avg?: Maybe<Video_MediaLiveChannelStatus_Avg_Fields>;
    count: Scalars["Int"];
    max?: Maybe<Video_MediaLiveChannelStatus_Max_Fields>;
    min?: Maybe<Video_MediaLiveChannelStatus_Min_Fields>;
    stddev?: Maybe<Video_MediaLiveChannelStatus_Stddev_Fields>;
    stddev_pop?: Maybe<Video_MediaLiveChannelStatus_Stddev_Pop_Fields>;
    stddev_samp?: Maybe<Video_MediaLiveChannelStatus_Stddev_Samp_Fields>;
    sum?: Maybe<Video_MediaLiveChannelStatus_Sum_Fields>;
    var_pop?: Maybe<Video_MediaLiveChannelStatus_Var_Pop_Fields>;
    var_samp?: Maybe<Video_MediaLiveChannelStatus_Var_Samp_Fields>;
    variance?: Maybe<Video_MediaLiveChannelStatus_Variance_Fields>;
};

/** aggregate fields of "video.MediaLiveChannelStatus" */
export type Video_MediaLiveChannelStatus_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Video_MediaLiveChannelStatus_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** aggregate avg on columns */
export type Video_MediaLiveChannelStatus_Avg_Fields = {
    __typename?: "video_MediaLiveChannelStatus_avg_fields";
    pipelinesRunningCount?: Maybe<Scalars["Float"]>;
};

/** Boolean expression to filter rows from the table "video.MediaLiveChannelStatus". All fields are combined with a logical 'AND'. */
export type Video_MediaLiveChannelStatus_Bool_Exp = {
    _and?: Maybe<Array<Video_MediaLiveChannelStatus_Bool_Exp>>;
    _not?: Maybe<Video_MediaLiveChannelStatus_Bool_Exp>;
    _or?: Maybe<Array<Video_MediaLiveChannelStatus_Bool_Exp>>;
    activeInputAttachmentName?: Maybe<String_Comparison_Exp>;
    activeInputSwitchActionName?: Maybe<String_Comparison_Exp>;
    channelStack?: Maybe<Video_ChannelStack_Bool_Exp>;
    channelStackId?: Maybe<Uuid_Comparison_Exp>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    createdAt?: Maybe<Timestamptz_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    pipelinesRunningCount?: Maybe<Numeric_Comparison_Exp>;
    updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "video.MediaLiveChannelStatus" */
export enum Video_MediaLiveChannelStatus_Constraint {
    /** unique or primary key constraint */
    MediaLiveChannelStatusChannelStackIdKey = "MediaLiveChannelStatus_channelStackId_key",
    /** unique or primary key constraint */
    MediaLiveChannelStatusPkey = "MediaLiveChannelStatus_pkey",
}

/** input type for incrementing numeric columns in table "video.MediaLiveChannelStatus" */
export type Video_MediaLiveChannelStatus_Inc_Input = {
    pipelinesRunningCount?: Maybe<Scalars["numeric"]>;
};

/** input type for inserting data into table "video.MediaLiveChannelStatus" */
export type Video_MediaLiveChannelStatus_Insert_Input = {
    activeInputAttachmentName?: Maybe<Scalars["String"]>;
    activeInputSwitchActionName?: Maybe<Scalars["String"]>;
    channelStack?: Maybe<Video_ChannelStack_Obj_Rel_Insert_Input>;
    channelStackId?: Maybe<Scalars["uuid"]>;
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    pipelinesRunningCount?: Maybe<Scalars["numeric"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Video_MediaLiveChannelStatus_Max_Fields = {
    __typename?: "video_MediaLiveChannelStatus_max_fields";
    activeInputAttachmentName?: Maybe<Scalars["String"]>;
    activeInputSwitchActionName?: Maybe<Scalars["String"]>;
    channelStackId?: Maybe<Scalars["uuid"]>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    pipelinesRunningCount?: Maybe<Scalars["numeric"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate min on columns */
export type Video_MediaLiveChannelStatus_Min_Fields = {
    __typename?: "video_MediaLiveChannelStatus_min_fields";
    activeInputAttachmentName?: Maybe<Scalars["String"]>;
    activeInputSwitchActionName?: Maybe<Scalars["String"]>;
    channelStackId?: Maybe<Scalars["uuid"]>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    pipelinesRunningCount?: Maybe<Scalars["numeric"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** response of any mutation on the table "video.MediaLiveChannelStatus" */
export type Video_MediaLiveChannelStatus_Mutation_Response = {
    __typename?: "video_MediaLiveChannelStatus_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Video_MediaLiveChannelStatus>;
};

/** input type for inserting object relation for remote table "video.MediaLiveChannelStatus" */
export type Video_MediaLiveChannelStatus_Obj_Rel_Insert_Input = {
    data: Video_MediaLiveChannelStatus_Insert_Input;
    /** on conflict condition */
    on_conflict?: Maybe<Video_MediaLiveChannelStatus_On_Conflict>;
};

/** on conflict condition type for table "video.MediaLiveChannelStatus" */
export type Video_MediaLiveChannelStatus_On_Conflict = {
    constraint: Video_MediaLiveChannelStatus_Constraint;
    update_columns?: Array<Video_MediaLiveChannelStatus_Update_Column>;
    where?: Maybe<Video_MediaLiveChannelStatus_Bool_Exp>;
};

/** Ordering options when selecting data from "video.MediaLiveChannelStatus". */
export type Video_MediaLiveChannelStatus_Order_By = {
    activeInputAttachmentName?: Maybe<Order_By>;
    activeInputSwitchActionName?: Maybe<Order_By>;
    channelStack?: Maybe<Video_ChannelStack_Order_By>;
    channelStackId?: Maybe<Order_By>;
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    pipelinesRunningCount?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
};

/** primary key columns input for table: video_MediaLiveChannelStatus */
export type Video_MediaLiveChannelStatus_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "video.MediaLiveChannelStatus" */
export enum Video_MediaLiveChannelStatus_Select_Column {
    /** column name */
    ActiveInputAttachmentName = "activeInputAttachmentName",
    /** column name */
    ActiveInputSwitchActionName = "activeInputSwitchActionName",
    /** column name */
    ChannelStackId = "channelStackId",
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Id = "id",
    /** column name */
    PipelinesRunningCount = "pipelinesRunningCount",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** input type for updating data in table "video.MediaLiveChannelStatus" */
export type Video_MediaLiveChannelStatus_Set_Input = {
    activeInputAttachmentName?: Maybe<Scalars["String"]>;
    activeInputSwitchActionName?: Maybe<Scalars["String"]>;
    channelStackId?: Maybe<Scalars["uuid"]>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    id?: Maybe<Scalars["uuid"]>;
    pipelinesRunningCount?: Maybe<Scalars["numeric"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate stddev on columns */
export type Video_MediaLiveChannelStatus_Stddev_Fields = {
    __typename?: "video_MediaLiveChannelStatus_stddev_fields";
    pipelinesRunningCount?: Maybe<Scalars["Float"]>;
};

/** aggregate stddev_pop on columns */
export type Video_MediaLiveChannelStatus_Stddev_Pop_Fields = {
    __typename?: "video_MediaLiveChannelStatus_stddev_pop_fields";
    pipelinesRunningCount?: Maybe<Scalars["Float"]>;
};

/** aggregate stddev_samp on columns */
export type Video_MediaLiveChannelStatus_Stddev_Samp_Fields = {
    __typename?: "video_MediaLiveChannelStatus_stddev_samp_fields";
    pipelinesRunningCount?: Maybe<Scalars["Float"]>;
};

/** aggregate sum on columns */
export type Video_MediaLiveChannelStatus_Sum_Fields = {
    __typename?: "video_MediaLiveChannelStatus_sum_fields";
    pipelinesRunningCount?: Maybe<Scalars["numeric"]>;
};

/** update columns of table "video.MediaLiveChannelStatus" */
export enum Video_MediaLiveChannelStatus_Update_Column {
    /** column name */
    ActiveInputAttachmentName = "activeInputAttachmentName",
    /** column name */
    ActiveInputSwitchActionName = "activeInputSwitchActionName",
    /** column name */
    ChannelStackId = "channelStackId",
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    Id = "id",
    /** column name */
    PipelinesRunningCount = "pipelinesRunningCount",
    /** column name */
    UpdatedAt = "updatedAt",
}

/** aggregate var_pop on columns */
export type Video_MediaLiveChannelStatus_Var_Pop_Fields = {
    __typename?: "video_MediaLiveChannelStatus_var_pop_fields";
    pipelinesRunningCount?: Maybe<Scalars["Float"]>;
};

/** aggregate var_samp on columns */
export type Video_MediaLiveChannelStatus_Var_Samp_Fields = {
    __typename?: "video_MediaLiveChannelStatus_var_samp_fields";
    pipelinesRunningCount?: Maybe<Scalars["Float"]>;
};

/** aggregate variance on columns */
export type Video_MediaLiveChannelStatus_Variance_Fields = {
    __typename?: "video_MediaLiveChannelStatus_variance_fields";
    pipelinesRunningCount?: Maybe<Scalars["Float"]>;
};

/** columns and relationships of "video.RtmpInput" */
export type Video_RtmpInput = {
    __typename?: "video_RtmpInput";
    description: Scalars["String"];
    name: Scalars["String"];
};

/** aggregated selection of "video.RtmpInput" */
export type Video_RtmpInput_Aggregate = {
    __typename?: "video_RtmpInput_aggregate";
    aggregate?: Maybe<Video_RtmpInput_Aggregate_Fields>;
    nodes: Array<Video_RtmpInput>;
};

/** aggregate fields of "video.RtmpInput" */
export type Video_RtmpInput_Aggregate_Fields = {
    __typename?: "video_RtmpInput_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Video_RtmpInput_Max_Fields>;
    min?: Maybe<Video_RtmpInput_Min_Fields>;
};

/** aggregate fields of "video.RtmpInput" */
export type Video_RtmpInput_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Video_RtmpInput_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** Boolean expression to filter rows from the table "video.RtmpInput". All fields are combined with a logical 'AND'. */
export type Video_RtmpInput_Bool_Exp = {
    _and?: Maybe<Array<Video_RtmpInput_Bool_Exp>>;
    _not?: Maybe<Video_RtmpInput_Bool_Exp>;
    _or?: Maybe<Array<Video_RtmpInput_Bool_Exp>>;
    description?: Maybe<String_Comparison_Exp>;
    name?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "video.RtmpInput" */
export enum Video_RtmpInput_Constraint {
    /** unique or primary key constraint */
    RtmpInputPkey = "RtmpInput_pkey",
}

export enum Video_RtmpInput_Enum {
    /** The A RTMP input. */
    RtmpA = "RTMP_A",
    /** The B RTMP input. */
    RtmpB = "RTMP_B",
}

/** Boolean expression to compare columns of type "video_RtmpInput_enum". All fields are combined with logical 'AND'. */
export type Video_RtmpInput_Enum_Comparison_Exp = {
    _eq?: Maybe<Video_RtmpInput_Enum>;
    _in?: Maybe<Array<Video_RtmpInput_Enum>>;
    _is_null?: Maybe<Scalars["Boolean"]>;
    _neq?: Maybe<Video_RtmpInput_Enum>;
    _nin?: Maybe<Array<Video_RtmpInput_Enum>>;
};

/** input type for inserting data into table "video.RtmpInput" */
export type Video_RtmpInput_Insert_Input = {
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** aggregate max on columns */
export type Video_RtmpInput_Max_Fields = {
    __typename?: "video_RtmpInput_max_fields";
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** aggregate min on columns */
export type Video_RtmpInput_Min_Fields = {
    __typename?: "video_RtmpInput_min_fields";
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** response of any mutation on the table "video.RtmpInput" */
export type Video_RtmpInput_Mutation_Response = {
    __typename?: "video_RtmpInput_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Video_RtmpInput>;
};

/** on conflict condition type for table "video.RtmpInput" */
export type Video_RtmpInput_On_Conflict = {
    constraint: Video_RtmpInput_Constraint;
    update_columns?: Array<Video_RtmpInput_Update_Column>;
    where?: Maybe<Video_RtmpInput_Bool_Exp>;
};

/** Ordering options when selecting data from "video.RtmpInput". */
export type Video_RtmpInput_Order_By = {
    description?: Maybe<Order_By>;
    name?: Maybe<Order_By>;
};

/** primary key columns input for table: video_RtmpInput */
export type Video_RtmpInput_Pk_Columns_Input = {
    name: Scalars["String"];
};

/** select columns of table "video.RtmpInput" */
export enum Video_RtmpInput_Select_Column {
    /** column name */
    Description = "description",
    /** column name */
    Name = "name",
}

/** input type for updating data in table "video.RtmpInput" */
export type Video_RtmpInput_Set_Input = {
    description?: Maybe<Scalars["String"]>;
    name?: Maybe<Scalars["String"]>;
};

/** update columns of table "video.RtmpInput" */
export enum Video_RtmpInput_Update_Column {
    /** column name */
    Description = "description",
    /** column name */
    Name = "name",
}

/** columns and relationships of "video.TranscriptionJob" */
export type Video_TranscriptionJob = {
    __typename?: "video_TranscriptionJob";
    awsTranscribeJobName: Scalars["String"];
    created_at: Scalars["timestamptz"];
    elementId: Scalars["uuid"];
    id: Scalars["uuid"];
    languageCode: Scalars["String"];
    transcriptionS3Url: Scalars["String"];
    updated_at: Scalars["timestamptz"];
    videoS3Url: Scalars["String"];
};

/** aggregated selection of "video.TranscriptionJob" */
export type Video_TranscriptionJob_Aggregate = {
    __typename?: "video_TranscriptionJob_aggregate";
    aggregate?: Maybe<Video_TranscriptionJob_Aggregate_Fields>;
    nodes: Array<Video_TranscriptionJob>;
};

/** aggregate fields of "video.TranscriptionJob" */
export type Video_TranscriptionJob_Aggregate_Fields = {
    __typename?: "video_TranscriptionJob_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Video_TranscriptionJob_Max_Fields>;
    min?: Maybe<Video_TranscriptionJob_Min_Fields>;
};

/** aggregate fields of "video.TranscriptionJob" */
export type Video_TranscriptionJob_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Video_TranscriptionJob_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** Boolean expression to filter rows from the table "video.TranscriptionJob". All fields are combined with a logical 'AND'. */
export type Video_TranscriptionJob_Bool_Exp = {
    _and?: Maybe<Array<Video_TranscriptionJob_Bool_Exp>>;
    _not?: Maybe<Video_TranscriptionJob_Bool_Exp>;
    _or?: Maybe<Array<Video_TranscriptionJob_Bool_Exp>>;
    awsTranscribeJobName?: Maybe<String_Comparison_Exp>;
    created_at?: Maybe<Timestamptz_Comparison_Exp>;
    elementId?: Maybe<Uuid_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    languageCode?: Maybe<String_Comparison_Exp>;
    transcriptionS3Url?: Maybe<String_Comparison_Exp>;
    updated_at?: Maybe<Timestamptz_Comparison_Exp>;
    videoS3Url?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "video.TranscriptionJob" */
export enum Video_TranscriptionJob_Constraint {
    /** unique or primary key constraint */
    TranscriptionJobAwsTranscribeJobNameKey = "TranscriptionJob_awsTranscribeJobName_key",
    /** unique or primary key constraint */
    TranscriptionJobPkey = "TranscriptionJob_pkey",
}

/** input type for inserting data into table "video.TranscriptionJob" */
export type Video_TranscriptionJob_Insert_Input = {
    awsTranscribeJobName?: Maybe<Scalars["String"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    elementId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    languageCode?: Maybe<Scalars["String"]>;
    transcriptionS3Url?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
    videoS3Url?: Maybe<Scalars["String"]>;
};

/** aggregate max on columns */
export type Video_TranscriptionJob_Max_Fields = {
    __typename?: "video_TranscriptionJob_max_fields";
    awsTranscribeJobName?: Maybe<Scalars["String"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    elementId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    languageCode?: Maybe<Scalars["String"]>;
    transcriptionS3Url?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
    videoS3Url?: Maybe<Scalars["String"]>;
};

/** aggregate min on columns */
export type Video_TranscriptionJob_Min_Fields = {
    __typename?: "video_TranscriptionJob_min_fields";
    awsTranscribeJobName?: Maybe<Scalars["String"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    elementId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    languageCode?: Maybe<Scalars["String"]>;
    transcriptionS3Url?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
    videoS3Url?: Maybe<Scalars["String"]>;
};

/** response of any mutation on the table "video.TranscriptionJob" */
export type Video_TranscriptionJob_Mutation_Response = {
    __typename?: "video_TranscriptionJob_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Video_TranscriptionJob>;
};

/** on conflict condition type for table "video.TranscriptionJob" */
export type Video_TranscriptionJob_On_Conflict = {
    constraint: Video_TranscriptionJob_Constraint;
    update_columns?: Array<Video_TranscriptionJob_Update_Column>;
    where?: Maybe<Video_TranscriptionJob_Bool_Exp>;
};

/** Ordering options when selecting data from "video.TranscriptionJob". */
export type Video_TranscriptionJob_Order_By = {
    awsTranscribeJobName?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    elementId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    languageCode?: Maybe<Order_By>;
    transcriptionS3Url?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
    videoS3Url?: Maybe<Order_By>;
};

/** primary key columns input for table: video_TranscriptionJob */
export type Video_TranscriptionJob_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "video.TranscriptionJob" */
export enum Video_TranscriptionJob_Select_Column {
    /** column name */
    AwsTranscribeJobName = "awsTranscribeJobName",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    ElementId = "elementId",
    /** column name */
    Id = "id",
    /** column name */
    LanguageCode = "languageCode",
    /** column name */
    TranscriptionS3Url = "transcriptionS3Url",
    /** column name */
    UpdatedAt = "updated_at",
    /** column name */
    VideoS3Url = "videoS3Url",
}

/** input type for updating data in table "video.TranscriptionJob" */
export type Video_TranscriptionJob_Set_Input = {
    awsTranscribeJobName?: Maybe<Scalars["String"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    elementId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    languageCode?: Maybe<Scalars["String"]>;
    transcriptionS3Url?: Maybe<Scalars["String"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
    videoS3Url?: Maybe<Scalars["String"]>;
};

/** update columns of table "video.TranscriptionJob" */
export enum Video_TranscriptionJob_Update_Column {
    /** column name */
    AwsTranscribeJobName = "awsTranscribeJobName",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    ElementId = "elementId",
    /** column name */
    Id = "id",
    /** column name */
    LanguageCode = "languageCode",
    /** column name */
    TranscriptionS3Url = "transcriptionS3Url",
    /** column name */
    UpdatedAt = "updated_at",
    /** column name */
    VideoS3Url = "videoS3Url",
}

/** columns and relationships of "video.VideoRenderJob" */
export type Video_VideoRenderJob = {
    __typename?: "video_VideoRenderJob";
    /** An object relationship */
    conference: Conference_Conference;
    conferenceId: Scalars["uuid"];
    /** An object relationship */
    conferencePrepareJob: Conference_PrepareJob;
    conferencePrepareJobId: Scalars["uuid"];
    created_at: Scalars["timestamptz"];
    data: Scalars["jsonb"];
    /** An object relationship */
    element?: Maybe<Content_Element>;
    elementId: Scalars["uuid"];
    id: Scalars["uuid"];
    /** An object relationship */
    jobStatus: Video_JobStatus;
    jobStatusName: Video_JobStatus_Enum;
    message?: Maybe<Scalars["String"]>;
    retriesCount: Scalars["Int"];
    updated_at: Scalars["timestamptz"];
};

/** columns and relationships of "video.VideoRenderJob" */
export type Video_VideoRenderJobDataArgs = {
    path?: Maybe<Scalars["String"]>;
};

/** aggregated selection of "video.VideoRenderJob" */
export type Video_VideoRenderJob_Aggregate = {
    __typename?: "video_VideoRenderJob_aggregate";
    aggregate?: Maybe<Video_VideoRenderJob_Aggregate_Fields>;
    nodes: Array<Video_VideoRenderJob>;
};

/** aggregate fields of "video.VideoRenderJob" */
export type Video_VideoRenderJob_Aggregate_Fields = {
    __typename?: "video_VideoRenderJob_aggregate_fields";
    avg?: Maybe<Video_VideoRenderJob_Avg_Fields>;
    count: Scalars["Int"];
    max?: Maybe<Video_VideoRenderJob_Max_Fields>;
    min?: Maybe<Video_VideoRenderJob_Min_Fields>;
    stddev?: Maybe<Video_VideoRenderJob_Stddev_Fields>;
    stddev_pop?: Maybe<Video_VideoRenderJob_Stddev_Pop_Fields>;
    stddev_samp?: Maybe<Video_VideoRenderJob_Stddev_Samp_Fields>;
    sum?: Maybe<Video_VideoRenderJob_Sum_Fields>;
    var_pop?: Maybe<Video_VideoRenderJob_Var_Pop_Fields>;
    var_samp?: Maybe<Video_VideoRenderJob_Var_Samp_Fields>;
    variance?: Maybe<Video_VideoRenderJob_Variance_Fields>;
};

/** aggregate fields of "video.VideoRenderJob" */
export type Video_VideoRenderJob_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Video_VideoRenderJob_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "video.VideoRenderJob" */
export type Video_VideoRenderJob_Aggregate_Order_By = {
    avg?: Maybe<Video_VideoRenderJob_Avg_Order_By>;
    count?: Maybe<Order_By>;
    max?: Maybe<Video_VideoRenderJob_Max_Order_By>;
    min?: Maybe<Video_VideoRenderJob_Min_Order_By>;
    stddev?: Maybe<Video_VideoRenderJob_Stddev_Order_By>;
    stddev_pop?: Maybe<Video_VideoRenderJob_Stddev_Pop_Order_By>;
    stddev_samp?: Maybe<Video_VideoRenderJob_Stddev_Samp_Order_By>;
    sum?: Maybe<Video_VideoRenderJob_Sum_Order_By>;
    var_pop?: Maybe<Video_VideoRenderJob_Var_Pop_Order_By>;
    var_samp?: Maybe<Video_VideoRenderJob_Var_Samp_Order_By>;
    variance?: Maybe<Video_VideoRenderJob_Variance_Order_By>;
};

/** append existing jsonb value of filtered columns with new jsonb value */
export type Video_VideoRenderJob_Append_Input = {
    data?: Maybe<Scalars["jsonb"]>;
};

/** input type for inserting array relation for remote table "video.VideoRenderJob" */
export type Video_VideoRenderJob_Arr_Rel_Insert_Input = {
    data: Array<Video_VideoRenderJob_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Video_VideoRenderJob_On_Conflict>;
};

/** aggregate avg on columns */
export type Video_VideoRenderJob_Avg_Fields = {
    __typename?: "video_VideoRenderJob_avg_fields";
    retriesCount?: Maybe<Scalars["Float"]>;
};

/** order by avg() on columns of table "video.VideoRenderJob" */
export type Video_VideoRenderJob_Avg_Order_By = {
    retriesCount?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "video.VideoRenderJob". All fields are combined with a logical 'AND'. */
export type Video_VideoRenderJob_Bool_Exp = {
    _and?: Maybe<Array<Video_VideoRenderJob_Bool_Exp>>;
    _not?: Maybe<Video_VideoRenderJob_Bool_Exp>;
    _or?: Maybe<Array<Video_VideoRenderJob_Bool_Exp>>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    conferencePrepareJob?: Maybe<Conference_PrepareJob_Bool_Exp>;
    conferencePrepareJobId?: Maybe<Uuid_Comparison_Exp>;
    created_at?: Maybe<Timestamptz_Comparison_Exp>;
    data?: Maybe<Jsonb_Comparison_Exp>;
    element?: Maybe<Content_Element_Bool_Exp>;
    elementId?: Maybe<Uuid_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    jobStatus?: Maybe<Video_JobStatus_Bool_Exp>;
    jobStatusName?: Maybe<Video_JobStatus_Enum_Comparison_Exp>;
    message?: Maybe<String_Comparison_Exp>;
    retriesCount?: Maybe<Int_Comparison_Exp>;
    updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "video.VideoRenderJob" */
export enum Video_VideoRenderJob_Constraint {
    /** unique or primary key constraint */
    VideoRenderJobPkey = "VideoRenderJob_pkey",
}

/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export type Video_VideoRenderJob_Delete_At_Path_Input = {
    data?: Maybe<Array<Scalars["String"]>>;
};

/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
export type Video_VideoRenderJob_Delete_Elem_Input = {
    data?: Maybe<Scalars["Int"]>;
};

/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export type Video_VideoRenderJob_Delete_Key_Input = {
    data?: Maybe<Scalars["String"]>;
};

/** input type for incrementing numeric columns in table "video.VideoRenderJob" */
export type Video_VideoRenderJob_Inc_Input = {
    retriesCount?: Maybe<Scalars["Int"]>;
};

/** input type for inserting data into table "video.VideoRenderJob" */
export type Video_VideoRenderJob_Insert_Input = {
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    conferencePrepareJob?: Maybe<Conference_PrepareJob_Obj_Rel_Insert_Input>;
    conferencePrepareJobId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    data?: Maybe<Scalars["jsonb"]>;
    element?: Maybe<Content_Element_Obj_Rel_Insert_Input>;
    elementId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    jobStatus?: Maybe<Video_JobStatus_Obj_Rel_Insert_Input>;
    jobStatusName?: Maybe<Video_JobStatus_Enum>;
    message?: Maybe<Scalars["String"]>;
    retriesCount?: Maybe<Scalars["Int"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Video_VideoRenderJob_Max_Fields = {
    __typename?: "video_VideoRenderJob_max_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    conferencePrepareJobId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    elementId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    message?: Maybe<Scalars["String"]>;
    retriesCount?: Maybe<Scalars["Int"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** order by max() on columns of table "video.VideoRenderJob" */
export type Video_VideoRenderJob_Max_Order_By = {
    conferenceId?: Maybe<Order_By>;
    conferencePrepareJobId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    elementId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    message?: Maybe<Order_By>;
    retriesCount?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Video_VideoRenderJob_Min_Fields = {
    __typename?: "video_VideoRenderJob_min_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    conferencePrepareJobId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    elementId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    message?: Maybe<Scalars["String"]>;
    retriesCount?: Maybe<Scalars["Int"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** order by min() on columns of table "video.VideoRenderJob" */
export type Video_VideoRenderJob_Min_Order_By = {
    conferenceId?: Maybe<Order_By>;
    conferencePrepareJobId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    elementId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    message?: Maybe<Order_By>;
    retriesCount?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** response of any mutation on the table "video.VideoRenderJob" */
export type Video_VideoRenderJob_Mutation_Response = {
    __typename?: "video_VideoRenderJob_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Video_VideoRenderJob>;
};

/** on conflict condition type for table "video.VideoRenderJob" */
export type Video_VideoRenderJob_On_Conflict = {
    constraint: Video_VideoRenderJob_Constraint;
    update_columns?: Array<Video_VideoRenderJob_Update_Column>;
    where?: Maybe<Video_VideoRenderJob_Bool_Exp>;
};

/** Ordering options when selecting data from "video.VideoRenderJob". */
export type Video_VideoRenderJob_Order_By = {
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    conferencePrepareJob?: Maybe<Conference_PrepareJob_Order_By>;
    conferencePrepareJobId?: Maybe<Order_By>;
    created_at?: Maybe<Order_By>;
    data?: Maybe<Order_By>;
    element?: Maybe<Content_Element_Order_By>;
    elementId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    jobStatus?: Maybe<Video_JobStatus_Order_By>;
    jobStatusName?: Maybe<Order_By>;
    message?: Maybe<Order_By>;
    retriesCount?: Maybe<Order_By>;
    updated_at?: Maybe<Order_By>;
};

/** primary key columns input for table: video_VideoRenderJob */
export type Video_VideoRenderJob_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** prepend existing jsonb value of filtered columns with new jsonb value */
export type Video_VideoRenderJob_Prepend_Input = {
    data?: Maybe<Scalars["jsonb"]>;
};

/** select columns of table "video.VideoRenderJob" */
export enum Video_VideoRenderJob_Select_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    ConferencePrepareJobId = "conferencePrepareJobId",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    Data = "data",
    /** column name */
    ElementId = "elementId",
    /** column name */
    Id = "id",
    /** column name */
    JobStatusName = "jobStatusName",
    /** column name */
    Message = "message",
    /** column name */
    RetriesCount = "retriesCount",
    /** column name */
    UpdatedAt = "updated_at",
}

/** input type for updating data in table "video.VideoRenderJob" */
export type Video_VideoRenderJob_Set_Input = {
    conferenceId?: Maybe<Scalars["uuid"]>;
    conferencePrepareJobId?: Maybe<Scalars["uuid"]>;
    created_at?: Maybe<Scalars["timestamptz"]>;
    data?: Maybe<Scalars["jsonb"]>;
    elementId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    jobStatusName?: Maybe<Video_JobStatus_Enum>;
    message?: Maybe<Scalars["String"]>;
    retriesCount?: Maybe<Scalars["Int"]>;
    updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate stddev on columns */
export type Video_VideoRenderJob_Stddev_Fields = {
    __typename?: "video_VideoRenderJob_stddev_fields";
    retriesCount?: Maybe<Scalars["Float"]>;
};

/** order by stddev() on columns of table "video.VideoRenderJob" */
export type Video_VideoRenderJob_Stddev_Order_By = {
    retriesCount?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Video_VideoRenderJob_Stddev_Pop_Fields = {
    __typename?: "video_VideoRenderJob_stddev_pop_fields";
    retriesCount?: Maybe<Scalars["Float"]>;
};

/** order by stddev_pop() on columns of table "video.VideoRenderJob" */
export type Video_VideoRenderJob_Stddev_Pop_Order_By = {
    retriesCount?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Video_VideoRenderJob_Stddev_Samp_Fields = {
    __typename?: "video_VideoRenderJob_stddev_samp_fields";
    retriesCount?: Maybe<Scalars["Float"]>;
};

/** order by stddev_samp() on columns of table "video.VideoRenderJob" */
export type Video_VideoRenderJob_Stddev_Samp_Order_By = {
    retriesCount?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Video_VideoRenderJob_Sum_Fields = {
    __typename?: "video_VideoRenderJob_sum_fields";
    retriesCount?: Maybe<Scalars["Int"]>;
};

/** order by sum() on columns of table "video.VideoRenderJob" */
export type Video_VideoRenderJob_Sum_Order_By = {
    retriesCount?: Maybe<Order_By>;
};

/** update columns of table "video.VideoRenderJob" */
export enum Video_VideoRenderJob_Update_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    ConferencePrepareJobId = "conferencePrepareJobId",
    /** column name */
    CreatedAt = "created_at",
    /** column name */
    Data = "data",
    /** column name */
    ElementId = "elementId",
    /** column name */
    Id = "id",
    /** column name */
    JobStatusName = "jobStatusName",
    /** column name */
    Message = "message",
    /** column name */
    RetriesCount = "retriesCount",
    /** column name */
    UpdatedAt = "updated_at",
}

/** aggregate var_pop on columns */
export type Video_VideoRenderJob_Var_Pop_Fields = {
    __typename?: "video_VideoRenderJob_var_pop_fields";
    retriesCount?: Maybe<Scalars["Float"]>;
};

/** order by var_pop() on columns of table "video.VideoRenderJob" */
export type Video_VideoRenderJob_Var_Pop_Order_By = {
    retriesCount?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Video_VideoRenderJob_Var_Samp_Fields = {
    __typename?: "video_VideoRenderJob_var_samp_fields";
    retriesCount?: Maybe<Scalars["Float"]>;
};

/** order by var_samp() on columns of table "video.VideoRenderJob" */
export type Video_VideoRenderJob_Var_Samp_Order_By = {
    retriesCount?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Video_VideoRenderJob_Variance_Fields = {
    __typename?: "video_VideoRenderJob_variance_fields";
    retriesCount?: Maybe<Scalars["Float"]>;
};

/** order by variance() on columns of table "video.VideoRenderJob" */
export type Video_VideoRenderJob_Variance_Order_By = {
    retriesCount?: Maybe<Order_By>;
};

/** columns and relationships of "video.YouTubeUpload" */
export type Video_YouTubeUpload = {
    __typename?: "video_YouTubeUpload";
    /** An object relationship */
    conference: Conference_Conference;
    conferenceId: Scalars["uuid"];
    createdAt: Scalars["timestamptz"];
    /** An object relationship */
    element?: Maybe<Content_Element>;
    elementId?: Maybe<Scalars["uuid"]>;
    id: Scalars["uuid"];
    updatedAt: Scalars["timestamptz"];
    uploadYouTubeVideoJobId?: Maybe<Scalars["uuid"]>;
    videoId: Scalars["String"];
    videoPrivacyStatus: Scalars["String"];
    videoStatus: Scalars["String"];
    videoTitle: Scalars["String"];
};

/** aggregated selection of "video.YouTubeUpload" */
export type Video_YouTubeUpload_Aggregate = {
    __typename?: "video_YouTubeUpload_aggregate";
    aggregate?: Maybe<Video_YouTubeUpload_Aggregate_Fields>;
    nodes: Array<Video_YouTubeUpload>;
};

/** aggregate fields of "video.YouTubeUpload" */
export type Video_YouTubeUpload_Aggregate_Fields = {
    __typename?: "video_YouTubeUpload_aggregate_fields";
    count: Scalars["Int"];
    max?: Maybe<Video_YouTubeUpload_Max_Fields>;
    min?: Maybe<Video_YouTubeUpload_Min_Fields>;
};

/** aggregate fields of "video.YouTubeUpload" */
export type Video_YouTubeUpload_Aggregate_FieldsCountArgs = {
    columns?: Maybe<Array<Video_YouTubeUpload_Select_Column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "video.YouTubeUpload" */
export type Video_YouTubeUpload_Aggregate_Order_By = {
    count?: Maybe<Order_By>;
    max?: Maybe<Video_YouTubeUpload_Max_Order_By>;
    min?: Maybe<Video_YouTubeUpload_Min_Order_By>;
};

/** input type for inserting array relation for remote table "video.YouTubeUpload" */
export type Video_YouTubeUpload_Arr_Rel_Insert_Input = {
    data: Array<Video_YouTubeUpload_Insert_Input>;
    /** on conflict condition */
    on_conflict?: Maybe<Video_YouTubeUpload_On_Conflict>;
};

/** Boolean expression to filter rows from the table "video.YouTubeUpload". All fields are combined with a logical 'AND'. */
export type Video_YouTubeUpload_Bool_Exp = {
    _and?: Maybe<Array<Video_YouTubeUpload_Bool_Exp>>;
    _not?: Maybe<Video_YouTubeUpload_Bool_Exp>;
    _or?: Maybe<Array<Video_YouTubeUpload_Bool_Exp>>;
    conference?: Maybe<Conference_Conference_Bool_Exp>;
    conferenceId?: Maybe<Uuid_Comparison_Exp>;
    createdAt?: Maybe<Timestamptz_Comparison_Exp>;
    element?: Maybe<Content_Element_Bool_Exp>;
    elementId?: Maybe<Uuid_Comparison_Exp>;
    id?: Maybe<Uuid_Comparison_Exp>;
    updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
    uploadYouTubeVideoJobId?: Maybe<Uuid_Comparison_Exp>;
    videoId?: Maybe<String_Comparison_Exp>;
    videoPrivacyStatus?: Maybe<String_Comparison_Exp>;
    videoStatus?: Maybe<String_Comparison_Exp>;
    videoTitle?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "video.YouTubeUpload" */
export enum Video_YouTubeUpload_Constraint {
    /** unique or primary key constraint */
    YouTubeUploadPkey = "YouTubeUpload_pkey",
    /** unique or primary key constraint */
    YouTubeUploadVideoIdKey = "YouTubeUpload_videoId_key",
}

/** input type for inserting data into table "video.YouTubeUpload" */
export type Video_YouTubeUpload_Insert_Input = {
    conference?: Maybe<Conference_Conference_Obj_Rel_Insert_Input>;
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    element?: Maybe<Content_Element_Obj_Rel_Insert_Input>;
    elementId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    uploadYouTubeVideoJobId?: Maybe<Scalars["uuid"]>;
    videoId?: Maybe<Scalars["String"]>;
    videoPrivacyStatus?: Maybe<Scalars["String"]>;
    videoStatus?: Maybe<Scalars["String"]>;
    videoTitle?: Maybe<Scalars["String"]>;
};

/** aggregate max on columns */
export type Video_YouTubeUpload_Max_Fields = {
    __typename?: "video_YouTubeUpload_max_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    elementId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    uploadYouTubeVideoJobId?: Maybe<Scalars["uuid"]>;
    videoId?: Maybe<Scalars["String"]>;
    videoPrivacyStatus?: Maybe<Scalars["String"]>;
    videoStatus?: Maybe<Scalars["String"]>;
    videoTitle?: Maybe<Scalars["String"]>;
};

/** order by max() on columns of table "video.YouTubeUpload" */
export type Video_YouTubeUpload_Max_Order_By = {
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    elementId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
    uploadYouTubeVideoJobId?: Maybe<Order_By>;
    videoId?: Maybe<Order_By>;
    videoPrivacyStatus?: Maybe<Order_By>;
    videoStatus?: Maybe<Order_By>;
    videoTitle?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Video_YouTubeUpload_Min_Fields = {
    __typename?: "video_YouTubeUpload_min_fields";
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    elementId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    uploadYouTubeVideoJobId?: Maybe<Scalars["uuid"]>;
    videoId?: Maybe<Scalars["String"]>;
    videoPrivacyStatus?: Maybe<Scalars["String"]>;
    videoStatus?: Maybe<Scalars["String"]>;
    videoTitle?: Maybe<Scalars["String"]>;
};

/** order by min() on columns of table "video.YouTubeUpload" */
export type Video_YouTubeUpload_Min_Order_By = {
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    elementId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
    uploadYouTubeVideoJobId?: Maybe<Order_By>;
    videoId?: Maybe<Order_By>;
    videoPrivacyStatus?: Maybe<Order_By>;
    videoStatus?: Maybe<Order_By>;
    videoTitle?: Maybe<Order_By>;
};

/** response of any mutation on the table "video.YouTubeUpload" */
export type Video_YouTubeUpload_Mutation_Response = {
    __typename?: "video_YouTubeUpload_mutation_response";
    /** number of rows affected by the mutation */
    affected_rows: Scalars["Int"];
    /** data from the rows affected by the mutation */
    returning: Array<Video_YouTubeUpload>;
};

/** on conflict condition type for table "video.YouTubeUpload" */
export type Video_YouTubeUpload_On_Conflict = {
    constraint: Video_YouTubeUpload_Constraint;
    update_columns?: Array<Video_YouTubeUpload_Update_Column>;
    where?: Maybe<Video_YouTubeUpload_Bool_Exp>;
};

/** Ordering options when selecting data from "video.YouTubeUpload". */
export type Video_YouTubeUpload_Order_By = {
    conference?: Maybe<Conference_Conference_Order_By>;
    conferenceId?: Maybe<Order_By>;
    createdAt?: Maybe<Order_By>;
    element?: Maybe<Content_Element_Order_By>;
    elementId?: Maybe<Order_By>;
    id?: Maybe<Order_By>;
    updatedAt?: Maybe<Order_By>;
    uploadYouTubeVideoJobId?: Maybe<Order_By>;
    videoId?: Maybe<Order_By>;
    videoPrivacyStatus?: Maybe<Order_By>;
    videoStatus?: Maybe<Order_By>;
    videoTitle?: Maybe<Order_By>;
};

/** primary key columns input for table: video_YouTubeUpload */
export type Video_YouTubeUpload_Pk_Columns_Input = {
    id: Scalars["uuid"];
};

/** select columns of table "video.YouTubeUpload" */
export enum Video_YouTubeUpload_Select_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    ElementId = "elementId",
    /** column name */
    Id = "id",
    /** column name */
    UpdatedAt = "updatedAt",
    /** column name */
    UploadYouTubeVideoJobId = "uploadYouTubeVideoJobId",
    /** column name */
    VideoId = "videoId",
    /** column name */
    VideoPrivacyStatus = "videoPrivacyStatus",
    /** column name */
    VideoStatus = "videoStatus",
    /** column name */
    VideoTitle = "videoTitle",
}

/** input type for updating data in table "video.YouTubeUpload" */
export type Video_YouTubeUpload_Set_Input = {
    conferenceId?: Maybe<Scalars["uuid"]>;
    createdAt?: Maybe<Scalars["timestamptz"]>;
    elementId?: Maybe<Scalars["uuid"]>;
    id?: Maybe<Scalars["uuid"]>;
    updatedAt?: Maybe<Scalars["timestamptz"]>;
    uploadYouTubeVideoJobId?: Maybe<Scalars["uuid"]>;
    videoId?: Maybe<Scalars["String"]>;
    videoPrivacyStatus?: Maybe<Scalars["String"]>;
    videoStatus?: Maybe<Scalars["String"]>;
    videoTitle?: Maybe<Scalars["String"]>;
};

/** update columns of table "video.YouTubeUpload" */
export enum Video_YouTubeUpload_Update_Column {
    /** column name */
    ConferenceId = "conferenceId",
    /** column name */
    CreatedAt = "createdAt",
    /** column name */
    ElementId = "elementId",
    /** column name */
    Id = "id",
    /** column name */
    UpdatedAt = "updatedAt",
    /** column name */
    UploadYouTubeVideoJobId = "uploadYouTubeVideoJobId",
    /** column name */
    VideoId = "videoId",
    /** column name */
    VideoPrivacyStatus = "videoPrivacyStatus",
    /** column name */
    VideoStatus = "videoStatus",
    /** column name */
    VideoTitle = "videoTitle",
}

export type EmptyQueryQueryVariables = Exact<{ [key: string]: never }>;

export type EmptyQueryQuery = { __typename?: "query_root" } & {
    conference_Conference: Array<{ __typename?: "conference_Conference" } & Pick<Conference_Conference, "id">>;
};

export type FlagInserted_GetModeratorsQueryVariables = Exact<{
    messageSId: Scalars["uuid"];
}>;

export type FlagInserted_GetModeratorsQuery = { __typename?: "query_root" } & {
    chat_Message: Array<
        { __typename?: "chat_Message" } & {
            chat: { __typename?: "chat_Chat" } & {
                conference: { __typename?: "conference_Conference" } & Pick<Conference_Conference, "slug"> & {
                        registrants: Array<
                            { __typename?: "registrant_Registrant" } & Pick<Registrant_Registrant, "id" | "userId">
                        >;
                    };
            };
        }
    >;
};

export type ChatInfoQueryVariables = Exact<{
    chatId: Scalars["uuid"];
}>;

export type ChatInfoQuery = { __typename?: "query_root" } & {
    chat_Chat_by_pk?: Maybe<
        { __typename?: "chat_Chat" } & Pick<Chat_Chat, "id" | "restrictToAdmins"> & {
                conference: { __typename?: "conference_Conference" } & Pick<
                    Conference_Conference,
                    "id" | "slug" | "shortName"
                >;
                items: Array<{ __typename?: "content_Item" } & Pick<Content_Item, "id" | "title" | "shortTitle">>;
                rooms: Array<
                    { __typename?: "room_Room" } & Pick<Room_Room, "id" | "name" | "managementModeName"> & {
                            roomPeople: Array<
                                { __typename?: "room_RoomPerson" } & Pick<Room_RoomPerson, "id"> & {
                                        registrant: { __typename?: "registrant_Registrant" } & Pick<
                                            Registrant_Registrant,
                                            "id" | "userId"
                                        >;
                                    }
                            >;
                        }
                >;
            }
    >;
};

export type PinsQueryVariables = Exact<{
    chatId: Scalars["uuid"];
}>;

export type PinsQuery = { __typename?: "query_root" } & {
    chat_Pin: Array<{ __typename?: "chat_Pin" } & Pick<Chat_Pin, "chatId" | "registrantId">>;
};

export type PushNotificationSubscriptionsQueryVariables = Exact<{
    userId: Scalars["String"];
}>;

export type PushNotificationSubscriptionsQuery = { __typename?: "query_root" } & {
    PushNotificationSubscription: Array<
        { __typename?: "PushNotificationSubscription" } & Pick<
            PushNotificationSubscription,
            "userId" | "endpoint" | "p256dh" | "auth"
        >
    >;
};

export type ReadUpToIndexQueryVariables = Exact<{
    chatId: Scalars["uuid"];
    userId: Scalars["String"];
}>;

export type ReadUpToIndexQuery = { __typename?: "query_root" } & {
    chat_ReadUpToIndex: Array<
        { __typename?: "chat_ReadUpToIndex" } & Pick<Chat_ReadUpToIndex, "chatId" | "registrantId" | "messageSId">
    >;
};

export type RegistrantInfoQueryVariables = Exact<{
    registrantId: Scalars["uuid"];
}>;

export type RegistrantInfoQuery = { __typename?: "query_root" } & {
    registrant_Registrant_by_pk?: Maybe<
        { __typename?: "registrant_Registrant" } & Pick<Registrant_Registrant, "id" | "userId" | "displayName">
    >;
};

export type EventInfoQueryVariables = Exact<{
    eventId: Scalars["uuid"];
}>;

export type EventInfoQuery = { __typename?: "query_root" } & {
    schedule_Event_by_pk?: Maybe<
        { __typename?: "schedule_Event" } & Pick<Schedule_Event, "id"> & {
                conference: { __typename?: "conference_Conference" } & Pick<
                    Conference_Conference,
                    "id" | "slug" | "shortName"
                >;
                room: { __typename?: "room_Room" } & Pick<Room_Room, "id" | "name" | "managementModeName"> & {
                        roomPeople: Array<
                            { __typename?: "room_RoomPerson" } & Pick<Room_RoomPerson, "id"> & {
                                    registrant: { __typename?: "registrant_Registrant" } & Pick<
                                        Registrant_Registrant,
                                        "id" | "userId"
                                    >;
                                }
                        >;
                    };
            }
    >;
};

export type SubscriptionsQueryVariables = Exact<{
    chatId: Scalars["uuid"];
}>;

export type SubscriptionsQuery = { __typename?: "query_root" } & {
    chat_Subscription: Array<{ __typename?: "chat_Subscription" } & Pick<Chat_Subscription, "chatId" | "registrantId">>;
};

export type UserPermissionsQueryVariables = Exact<{
    userId: Scalars["String"];
}>;

export type UserPermissionsQuery = { __typename?: "query_root" } & {
    FlatUserPermission: Array<
        { __typename?: "FlatUserPermission" } & Pick<FlatUserPermission, "slug" | "permission_name" | "user_id">
    >;
};

export type GetUserConferenceSlugsQueryVariables = Exact<{
    userId: Scalars["String"];
}>;

export type GetUserConferenceSlugsQuery = { __typename?: "query_root" } & {
    conference_Conference: Array<{ __typename?: "conference_Conference" } & Pick<Conference_Conference, "id" | "slug">>;
};

export type GetExistingProgramPersonQueryVariables = Exact<{
    conferenceId: Scalars["uuid"];
    userId: Scalars["String"];
}>;

export type GetExistingProgramPersonQuery = { __typename?: "query_root" } & {
    collection_ProgramPerson: Array<{ __typename?: "collection_ProgramPerson" } & Pick<Collection_ProgramPerson, "id">>;
    registrant_Registrant: Array<
        { __typename?: "registrant_Registrant" } & Pick<Registrant_Registrant, "id" | "displayName">
    >;
};

export type InsertEventParticipantMutationVariables = Exact<{
    eventPerson: Schedule_EventProgramPerson_Insert_Input;
}>;

export type InsertEventParticipantMutation = { __typename?: "mutation_root" } & {
    insert_schedule_EventProgramPerson_one?: Maybe<
        { __typename?: "schedule_EventProgramPerson" } & Pick<Schedule_EventProgramPerson, "id"> & {
                person: { __typename?: "collection_ProgramPerson" } & Pick<
                    Collection_ProgramPerson,
                    "id" | "name" | "affiliation" | "registrantId"
                >;
            }
    >;
};

export type DeletePushNotificationSubscriptionMutationVariables = Exact<{
    endpoint: Scalars["String"];
}>;

export type DeletePushNotificationSubscriptionMutation = { __typename?: "mutation_root" } & {
    delete_PushNotificationSubscription_by_pk?: Maybe<
        { __typename?: "PushNotificationSubscription" } & Pick<PushNotificationSubscription, "endpoint">
    >;
};

export type VapidKeysQueryVariables = Exact<{ [key: string]: never }>;

export type VapidKeysQuery = { __typename?: "query_root" } & {
    publicKey?: Maybe<{ __typename?: "system_Configuration" } & Pick<System_Configuration, "key" | "value">>;
    privateKey?: Maybe<{ __typename?: "system_Configuration" } & Pick<System_Configuration, "key" | "value">>;
};

export type SetVapidKeysMutationVariables = Exact<{
    publicKey: Scalars["jsonb"];
    privateKey: Scalars["jsonb"];
}>;

export type SetVapidKeysMutation = { __typename?: "mutation_root" } & {
    insert_system_Configuration?: Maybe<
        { __typename?: "system_Configuration_mutation_response" } & Pick<
            System_Configuration_Mutation_Response,
            "affected_rows"
        >
    >;
};

export type SelectViewCountsQueryVariables = Exact<{
    cutoff: Scalars["timestamptz"];
    itemIds: Array<Scalars["uuid"]> | Scalars["uuid"];
    elementIds: Array<Scalars["uuid"]> | Scalars["uuid"];
    roomIds: Array<Scalars["uuid"]> | Scalars["uuid"];
}>;

export type SelectViewCountsQuery = { __typename?: "query_root" } & {
    analytics_ContentItemStats: Array<
        { __typename?: "analytics_ContentItemStats" } & Pick<Analytics_ContentItemStats, "id" | "itemId" | "viewCount">
    >;
    analytics_ContentElementStats: Array<
        { __typename?: "analytics_ContentElementStats" } & Pick<
            Analytics_ContentElementStats,
            "id" | "elementId" | "viewCount"
        >
    >;
    analytics_RoomStats: Array<
        { __typename?: "analytics_RoomStats" } & Pick<Analytics_RoomStats, "id" | "roomId" | "hlsViewCount">
    >;
};

export type InsertViewCountsMutationVariables = Exact<{
    itemStats: Array<Analytics_ContentItemStats_Insert_Input> | Analytics_ContentItemStats_Insert_Input;
    elementStats: Array<Analytics_ContentElementStats_Insert_Input> | Analytics_ContentElementStats_Insert_Input;
    roomStats: Array<Analytics_RoomStats_Insert_Input> | Analytics_RoomStats_Insert_Input;
}>;

export type InsertViewCountsMutation = { __typename?: "mutation_root" } & {
    insert_analytics_ContentItemStats?: Maybe<
        { __typename?: "analytics_ContentItemStats_mutation_response" } & Pick<
            Analytics_ContentItemStats_Mutation_Response,
            "affected_rows"
        >
    >;
    insert_analytics_ContentElementStats?: Maybe<
        { __typename?: "analytics_ContentElementStats_mutation_response" } & Pick<
            Analytics_ContentElementStats_Mutation_Response,
            "affected_rows"
        >
    >;
    insert_analytics_RoomStats?: Maybe<
        { __typename?: "analytics_RoomStats_mutation_response" } & Pick<
            Analytics_RoomStats_Mutation_Response,
            "affected_rows"
        >
    >;
};

export type InsertChatMessagesMutationVariables = Exact<{
    objects: Array<Chat_Message_Insert_Input> | Chat_Message_Insert_Input;
}>;

export type InsertChatMessagesMutation = { __typename?: "mutation_root" } & {
    insert_chat_Message?: Maybe<
        { __typename?: "chat_Message_mutation_response" } & {
            returning: Array<{ __typename?: "chat_Message" } & Pick<Chat_Message, "sId">>;
        }
    >;
};

export type UpdateChatMessageMutationVariables = Exact<{
    messageId: Scalars["uuid"];
    object: Chat_Message_Set_Input;
}>;

export type UpdateChatMessageMutation = { __typename?: "mutation_root" } & {
    update_chat_Message?: Maybe<
        { __typename?: "chat_Message_mutation_response" } & {
            returning: Array<{ __typename?: "chat_Message" } & Pick<Chat_Message, "sId">>;
        }
    >;
};

export type DeleteChatMessagesMutationVariables = Exact<{
    messageIds: Array<Scalars["uuid"]> | Scalars["uuid"];
}>;

export type DeleteChatMessagesMutation = { __typename?: "mutation_root" } & {
    delete_chat_Message?: Maybe<
        { __typename?: "chat_Message_mutation_response" } & {
            returning: Array<{ __typename?: "chat_Message" } & Pick<Chat_Message, "sId">>;
        }
    >;
};

export type InsertChatReactionsMutationVariables = Exact<{
    objects: Array<Chat_Reaction_Insert_Input> | Chat_Reaction_Insert_Input;
}>;

export type InsertChatReactionsMutation = { __typename?: "mutation_root" } & {
    insert_chat_Reaction?: Maybe<
        { __typename?: "chat_Reaction_mutation_response" } & {
            returning: Array<{ __typename?: "chat_Reaction" } & Pick<Chat_Reaction, "sId">>;
        }
    >;
};

export type UpdateChatReactionMutationVariables = Exact<{
    reactionId: Scalars["uuid"];
    object: Chat_Reaction_Set_Input;
}>;

export type UpdateChatReactionMutation = { __typename?: "mutation_root" } & {
    update_chat_Reaction?: Maybe<
        { __typename?: "chat_Reaction_mutation_response" } & {
            returning: Array<{ __typename?: "chat_Reaction" } & Pick<Chat_Reaction, "sId">>;
        }
    >;
};

export type DeleteChatReactionsMutationVariables = Exact<{
    reactionIds: Array<Scalars["uuid"]> | Scalars["uuid"];
}>;

export type DeleteChatReactionsMutation = { __typename?: "mutation_root" } & {
    delete_chat_Reaction?: Maybe<
        { __typename?: "chat_Reaction_mutation_response" } & {
            returning: Array<{ __typename?: "chat_Reaction" } & Pick<Chat_Reaction, "sId">>;
        }
    >;
};

export type RegistrantIdsFromChatsAndUsersQueryVariables = Exact<{
    chatIds: Array<Scalars["uuid"]> | Scalars["uuid"];
    userIds: Array<Scalars["String"]> | Scalars["String"];
}>;

export type RegistrantIdsFromChatsAndUsersQuery = { __typename?: "query_root" } & {
    registrant_Registrant: Array<
        { __typename?: "registrant_Registrant" } & Pick<Registrant_Registrant, "id" | "userId">
    >;
};

export type InsertReadUpToIndexMutationVariables = Exact<{
    objects: Array<Chat_ReadUpToIndex_Insert_Input> | Chat_ReadUpToIndex_Insert_Input;
}>;

export type InsertReadUpToIndexMutation = { __typename?: "mutation_root" } & {
    insert_chat_ReadUpToIndex?: Maybe<
        { __typename?: "chat_ReadUpToIndex_mutation_response" } & Pick<
            Chat_ReadUpToIndex_Mutation_Response,
            "affected_rows"
        >
    >;
};

export const EmptyQueryDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "EmptyQuery" },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "conference_Conference" },
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                ],
            },
        },
    ],
} as unknown as DocumentNode<EmptyQueryQuery, EmptyQueryQueryVariables>;
export const FlagInserted_GetModeratorsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "FlagInserted_GetModerators" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "messageSId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "uuid" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "chat_Message" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "where" },
                                value: {
                                    kind: "ObjectValue",
                                    fields: [
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "sId" },
                                            value: {
                                                kind: "ObjectValue",
                                                fields: [
                                                    {
                                                        kind: "ObjectField",
                                                        name: { kind: "Name", value: "_eq" },
                                                        value: {
                                                            kind: "Variable",
                                                            name: { kind: "Name", value: "messageSId" },
                                                        },
                                                    },
                                                ],
                                            },
                                        },
                                    ],
                                },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "chat" },
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [
                                            {
                                                kind: "Field",
                                                name: { kind: "Name", value: "conference" },
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [
                                                        { kind: "Field", name: { kind: "Name", value: "slug" } },
                                                        {
                                                            kind: "Field",
                                                            name: { kind: "Name", value: "registrants" },
                                                            arguments: [
                                                                {
                                                                    kind: "Argument",
                                                                    name: { kind: "Name", value: "where" },
                                                                    value: {
                                                                        kind: "ObjectValue",
                                                                        fields: [
                                                                            {
                                                                                kind: "ObjectField",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "groupRegistrants",
                                                                                },
                                                                                value: {
                                                                                    kind: "ObjectValue",
                                                                                    fields: [
                                                                                        {
                                                                                            kind: "ObjectField",
                                                                                            name: {
                                                                                                kind: "Name",
                                                                                                value: "group",
                                                                                            },
                                                                                            value: {
                                                                                                kind: "ObjectValue",
                                                                                                fields: [
                                                                                                    {
                                                                                                        kind: "ObjectField",
                                                                                                        name: {
                                                                                                            kind: "Name",
                                                                                                            value: "enabled",
                                                                                                        },
                                                                                                        value: {
                                                                                                            kind: "ObjectValue",
                                                                                                            fields: [
                                                                                                                {
                                                                                                                    kind: "ObjectField",
                                                                                                                    name: {
                                                                                                                        kind: "Name",
                                                                                                                        value: "_eq",
                                                                                                                    },
                                                                                                                    value: {
                                                                                                                        kind: "BooleanValue",
                                                                                                                        value: true,
                                                                                                                    },
                                                                                                                },
                                                                                                            ],
                                                                                                        },
                                                                                                    },
                                                                                                    {
                                                                                                        kind: "ObjectField",
                                                                                                        name: {
                                                                                                            kind: "Name",
                                                                                                            value: "groupRoles",
                                                                                                        },
                                                                                                        value: {
                                                                                                            kind: "ObjectValue",
                                                                                                            fields: [
                                                                                                                {
                                                                                                                    kind: "ObjectField",
                                                                                                                    name: {
                                                                                                                        kind: "Name",
                                                                                                                        value: "role",
                                                                                                                    },
                                                                                                                    value: {
                                                                                                                        kind: "ObjectValue",
                                                                                                                        fields: [
                                                                                                                            {
                                                                                                                                kind: "ObjectField",
                                                                                                                                name: {
                                                                                                                                    kind: "Name",
                                                                                                                                    value: "rolePermissions",
                                                                                                                                },
                                                                                                                                value: {
                                                                                                                                    kind: "ObjectValue",
                                                                                                                                    fields: [
                                                                                                                                        {
                                                                                                                                            kind: "ObjectField",
                                                                                                                                            name: {
                                                                                                                                                kind: "Name",
                                                                                                                                                value: "permissionName",
                                                                                                                                            },
                                                                                                                                            value: {
                                                                                                                                                kind: "ObjectValue",
                                                                                                                                                fields: [
                                                                                                                                                    {
                                                                                                                                                        kind: "ObjectField",
                                                                                                                                                        name: {
                                                                                                                                                            kind: "Name",
                                                                                                                                                            value: "_eq",
                                                                                                                                                        },
                                                                                                                                                        value: {
                                                                                                                                                            kind: "EnumValue",
                                                                                                                                                            value: "CONFERENCE_MODERATE_ATTENDEES",
                                                                                                                                                        },
                                                                                                                                                    },
                                                                                                                                                ],
                                                                                                                                            },
                                                                                                                                        },
                                                                                                                                    ],
                                                                                                                                },
                                                                                                                            },
                                                                                                                        ],
                                                                                                                    },
                                                                                                                },
                                                                                                            ],
                                                                                                        },
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                            ],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [
                                                                    {
                                                                        kind: "Field",
                                                                        name: { kind: "Name", value: "id" },
                                                                    },
                                                                    {
                                                                        kind: "Field",
                                                                        name: { kind: "Name", value: "userId" },
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ],
                                                },
                                            },
                                        ],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
    ],
} as unknown as DocumentNode<FlagInserted_GetModeratorsQuery, FlagInserted_GetModeratorsQueryVariables>;
export const ChatInfoDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "ChatInfo" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "chatId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "uuid" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "chat_Chat_by_pk" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "chatId" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                { kind: "Field", name: { kind: "Name", value: "id" } },
                                { kind: "Field", name: { kind: "Name", value: "restrictToAdmins" } },
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "conference" },
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [
                                            { kind: "Field", name: { kind: "Name", value: "id" } },
                                            { kind: "Field", name: { kind: "Name", value: "slug" } },
                                            { kind: "Field", name: { kind: "Name", value: "shortName" } },
                                        ],
                                    },
                                },
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "items" },
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [
                                            { kind: "Field", name: { kind: "Name", value: "id" } },
                                            { kind: "Field", name: { kind: "Name", value: "title" } },
                                            { kind: "Field", name: { kind: "Name", value: "shortTitle" } },
                                        ],
                                    },
                                },
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "rooms" },
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [
                                            { kind: "Field", name: { kind: "Name", value: "id" } },
                                            { kind: "Field", name: { kind: "Name", value: "name" } },
                                            { kind: "Field", name: { kind: "Name", value: "managementModeName" } },
                                            {
                                                kind: "Field",
                                                name: { kind: "Name", value: "roomPeople" },
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [
                                                        { kind: "Field", name: { kind: "Name", value: "id" } },
                                                        {
                                                            kind: "Field",
                                                            name: { kind: "Name", value: "registrant" },
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [
                                                                    {
                                                                        kind: "Field",
                                                                        name: { kind: "Name", value: "id" },
                                                                    },
                                                                    {
                                                                        kind: "Field",
                                                                        name: { kind: "Name", value: "userId" },
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ],
                                                },
                                            },
                                        ],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
    ],
} as unknown as DocumentNode<ChatInfoQuery, ChatInfoQueryVariables>;
export const PinsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "Pins" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "chatId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "uuid" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "chat_Pin" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "where" },
                                value: {
                                    kind: "ObjectValue",
                                    fields: [
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "chatId" },
                                            value: {
                                                kind: "ObjectValue",
                                                fields: [
                                                    {
                                                        kind: "ObjectField",
                                                        name: { kind: "Name", value: "_eq" },
                                                        value: {
                                                            kind: "Variable",
                                                            name: { kind: "Name", value: "chatId" },
                                                        },
                                                    },
                                                ],
                                            },
                                        },
                                    ],
                                },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                { kind: "Field", name: { kind: "Name", value: "chatId" } },
                                { kind: "Field", name: { kind: "Name", value: "registrantId" } },
                            ],
                        },
                    },
                ],
            },
        },
    ],
} as unknown as DocumentNode<PinsQuery, PinsQueryVariables>;
export const PushNotificationSubscriptionsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "PushNotificationSubscriptions" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "userId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "PushNotificationSubscription" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "where" },
                                value: {
                                    kind: "ObjectValue",
                                    fields: [
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "userId" },
                                            value: {
                                                kind: "ObjectValue",
                                                fields: [
                                                    {
                                                        kind: "ObjectField",
                                                        name: { kind: "Name", value: "_eq" },
                                                        value: {
                                                            kind: "Variable",
                                                            name: { kind: "Name", value: "userId" },
                                                        },
                                                    },
                                                ],
                                            },
                                        },
                                    ],
                                },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                { kind: "Field", name: { kind: "Name", value: "userId" } },
                                { kind: "Field", name: { kind: "Name", value: "endpoint" } },
                                { kind: "Field", name: { kind: "Name", value: "p256dh" } },
                                { kind: "Field", name: { kind: "Name", value: "auth" } },
                            ],
                        },
                    },
                ],
            },
        },
    ],
} as unknown as DocumentNode<PushNotificationSubscriptionsQuery, PushNotificationSubscriptionsQueryVariables>;
export const ReadUpToIndexDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "ReadUpToIndex" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "chatId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "uuid" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "userId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "chat_ReadUpToIndex" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "where" },
                                value: {
                                    kind: "ObjectValue",
                                    fields: [
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "chatId" },
                                            value: {
                                                kind: "ObjectValue",
                                                fields: [
                                                    {
                                                        kind: "ObjectField",
                                                        name: { kind: "Name", value: "_eq" },
                                                        value: {
                                                            kind: "Variable",
                                                            name: { kind: "Name", value: "chatId" },
                                                        },
                                                    },
                                                ],
                                            },
                                        },
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "registrant" },
                                            value: {
                                                kind: "ObjectValue",
                                                fields: [
                                                    {
                                                        kind: "ObjectField",
                                                        name: { kind: "Name", value: "userId" },
                                                        value: {
                                                            kind: "ObjectValue",
                                                            fields: [
                                                                {
                                                                    kind: "ObjectField",
                                                                    name: { kind: "Name", value: "_eq" },
                                                                    value: {
                                                                        kind: "Variable",
                                                                        name: { kind: "Name", value: "userId" },
                                                                    },
                                                                },
                                                            ],
                                                        },
                                                    },
                                                ],
                                            },
                                        },
                                    ],
                                },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                { kind: "Field", name: { kind: "Name", value: "chatId" } },
                                { kind: "Field", name: { kind: "Name", value: "registrantId" } },
                                { kind: "Field", name: { kind: "Name", value: "messageSId" } },
                            ],
                        },
                    },
                ],
            },
        },
    ],
} as unknown as DocumentNode<ReadUpToIndexQuery, ReadUpToIndexQueryVariables>;
export const RegistrantInfoDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "RegistrantInfo" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "registrantId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "uuid" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "registrant_Registrant_by_pk" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "registrantId" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                { kind: "Field", name: { kind: "Name", value: "id" } },
                                { kind: "Field", name: { kind: "Name", value: "userId" } },
                                { kind: "Field", name: { kind: "Name", value: "displayName" } },
                            ],
                        },
                    },
                ],
            },
        },
    ],
} as unknown as DocumentNode<RegistrantInfoQuery, RegistrantInfoQueryVariables>;
export const EventInfoDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "EventInfo" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "eventId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "uuid" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "schedule_Event_by_pk" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "id" },
                                value: { kind: "Variable", name: { kind: "Name", value: "eventId" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                { kind: "Field", name: { kind: "Name", value: "id" } },
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "conference" },
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [
                                            { kind: "Field", name: { kind: "Name", value: "id" } },
                                            { kind: "Field", name: { kind: "Name", value: "slug" } },
                                            { kind: "Field", name: { kind: "Name", value: "shortName" } },
                                        ],
                                    },
                                },
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "room" },
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [
                                            { kind: "Field", name: { kind: "Name", value: "id" } },
                                            { kind: "Field", name: { kind: "Name", value: "name" } },
                                            { kind: "Field", name: { kind: "Name", value: "managementModeName" } },
                                            {
                                                kind: "Field",
                                                name: { kind: "Name", value: "roomPeople" },
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [
                                                        { kind: "Field", name: { kind: "Name", value: "id" } },
                                                        {
                                                            kind: "Field",
                                                            name: { kind: "Name", value: "registrant" },
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [
                                                                    {
                                                                        kind: "Field",
                                                                        name: { kind: "Name", value: "id" },
                                                                    },
                                                                    {
                                                                        kind: "Field",
                                                                        name: { kind: "Name", value: "userId" },
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                    ],
                                                },
                                            },
                                        ],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
    ],
} as unknown as DocumentNode<EventInfoQuery, EventInfoQueryVariables>;
export const SubscriptionsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "Subscriptions" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "chatId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "uuid" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "chat_Subscription" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "where" },
                                value: {
                                    kind: "ObjectValue",
                                    fields: [
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "chatId" },
                                            value: {
                                                kind: "ObjectValue",
                                                fields: [
                                                    {
                                                        kind: "ObjectField",
                                                        name: { kind: "Name", value: "_eq" },
                                                        value: {
                                                            kind: "Variable",
                                                            name: { kind: "Name", value: "chatId" },
                                                        },
                                                    },
                                                ],
                                            },
                                        },
                                    ],
                                },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                { kind: "Field", name: { kind: "Name", value: "chatId" } },
                                { kind: "Field", name: { kind: "Name", value: "registrantId" } },
                            ],
                        },
                    },
                ],
            },
        },
    ],
} as unknown as DocumentNode<SubscriptionsQuery, SubscriptionsQueryVariables>;
export const UserPermissionsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "UserPermissions" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "userId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "FlatUserPermission" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "where" },
                                value: {
                                    kind: "ObjectValue",
                                    fields: [
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "user_id" },
                                            value: {
                                                kind: "ObjectValue",
                                                fields: [
                                                    {
                                                        kind: "ObjectField",
                                                        name: { kind: "Name", value: "_eq" },
                                                        value: {
                                                            kind: "Variable",
                                                            name: { kind: "Name", value: "userId" },
                                                        },
                                                    },
                                                ],
                                            },
                                        },
                                    ],
                                },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                { kind: "Field", name: { kind: "Name", value: "slug" } },
                                { kind: "Field", name: { kind: "Name", value: "permission_name" } },
                                { kind: "Field", name: { kind: "Name", value: "user_id" } },
                            ],
                        },
                    },
                ],
            },
        },
    ],
} as unknown as DocumentNode<UserPermissionsQuery, UserPermissionsQueryVariables>;
export const GetUserConferenceSlugsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "GetUserConferenceSlugs" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "userId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "conference_Conference" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "where" },
                                value: {
                                    kind: "ObjectValue",
                                    fields: [
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "groups" },
                                            value: {
                                                kind: "ObjectValue",
                                                fields: [
                                                    {
                                                        kind: "ObjectField",
                                                        name: { kind: "Name", value: "enabled" },
                                                        value: {
                                                            kind: "ObjectValue",
                                                            fields: [
                                                                {
                                                                    kind: "ObjectField",
                                                                    name: { kind: "Name", value: "_eq" },
                                                                    value: { kind: "BooleanValue", value: true },
                                                                },
                                                            ],
                                                        },
                                                    },
                                                    {
                                                        kind: "ObjectField",
                                                        name: { kind: "Name", value: "groupRoles" },
                                                        value: {
                                                            kind: "ObjectValue",
                                                            fields: [
                                                                {
                                                                    kind: "ObjectField",
                                                                    name: { kind: "Name", value: "role" },
                                                                    value: {
                                                                        kind: "ObjectValue",
                                                                        fields: [
                                                                            {
                                                                                kind: "ObjectField",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "rolePermissions",
                                                                                },
                                                                                value: {
                                                                                    kind: "ObjectValue",
                                                                                    fields: [
                                                                                        {
                                                                                            kind: "ObjectField",
                                                                                            name: {
                                                                                                kind: "Name",
                                                                                                value: "permissionName",
                                                                                            },
                                                                                            value: {
                                                                                                kind: "ObjectValue",
                                                                                                fields: [
                                                                                                    {
                                                                                                        kind: "ObjectField",
                                                                                                        name: {
                                                                                                            kind: "Name",
                                                                                                            value: "_eq",
                                                                                                        },
                                                                                                        value: {
                                                                                                            kind: "EnumValue",
                                                                                                            value: "CONFERENCE_VIEW",
                                                                                                        },
                                                                                                    },
                                                                                                ],
                                                                                            },
                                                                                        },
                                                                                    ],
                                                                                },
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                            ],
                                                        },
                                                    },
                                                    {
                                                        kind: "ObjectField",
                                                        name: { kind: "Name", value: "_or" },
                                                        value: {
                                                            kind: "ListValue",
                                                            values: [
                                                                {
                                                                    kind: "ObjectValue",
                                                                    fields: [
                                                                        {
                                                                            kind: "ObjectField",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "includeUnauthenticated",
                                                                            },
                                                                            value: {
                                                                                kind: "ObjectValue",
                                                                                fields: [
                                                                                    {
                                                                                        kind: "ObjectField",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "_eq",
                                                                                        },
                                                                                        value: {
                                                                                            kind: "BooleanValue",
                                                                                            value: true,
                                                                                        },
                                                                                    },
                                                                                ],
                                                                            },
                                                                        },
                                                                    ],
                                                                },
                                                                {
                                                                    kind: "ObjectValue",
                                                                    fields: [
                                                                        {
                                                                            kind: "ObjectField",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "groupRegistrants",
                                                                            },
                                                                            value: {
                                                                                kind: "ObjectValue",
                                                                                fields: [
                                                                                    {
                                                                                        kind: "ObjectField",
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "registrant",
                                                                                        },
                                                                                        value: {
                                                                                            kind: "ObjectValue",
                                                                                            fields: [
                                                                                                {
                                                                                                    kind: "ObjectField",
                                                                                                    name: {
                                                                                                        kind: "Name",
                                                                                                        value: "userId",
                                                                                                    },
                                                                                                    value: {
                                                                                                        kind: "ObjectValue",
                                                                                                        fields: [
                                                                                                            {
                                                                                                                kind: "ObjectField",
                                                                                                                name: {
                                                                                                                    kind: "Name",
                                                                                                                    value: "_eq",
                                                                                                                },
                                                                                                                value: {
                                                                                                                    kind: "Variable",
                                                                                                                    name: {
                                                                                                                        kind: "Name",
                                                                                                                        value: "userId",
                                                                                                                    },
                                                                                                                },
                                                                                                            },
                                                                                                        ],
                                                                                                    },
                                                                                                },
                                                                                            ],
                                                                                        },
                                                                                    },
                                                                                ],
                                                                            },
                                                                        },
                                                                    ],
                                                                },
                                                            ],
                                                        },
                                                    },
                                                ],
                                            },
                                        },
                                    ],
                                },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                { kind: "Field", name: { kind: "Name", value: "id" } },
                                { kind: "Field", name: { kind: "Name", value: "slug" } },
                            ],
                        },
                    },
                ],
            },
        },
    ],
} as unknown as DocumentNode<GetUserConferenceSlugsQuery, GetUserConferenceSlugsQueryVariables>;
export const GetExistingProgramPersonDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "GetExistingProgramPerson" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "conferenceId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "uuid" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "userId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "collection_ProgramPerson" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "where" },
                                value: {
                                    kind: "ObjectValue",
                                    fields: [
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "conferenceId" },
                                            value: {
                                                kind: "ObjectValue",
                                                fields: [
                                                    {
                                                        kind: "ObjectField",
                                                        name: { kind: "Name", value: "_eq" },
                                                        value: {
                                                            kind: "Variable",
                                                            name: { kind: "Name", value: "conferenceId" },
                                                        },
                                                    },
                                                ],
                                            },
                                        },
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "registrant" },
                                            value: {
                                                kind: "ObjectValue",
                                                fields: [
                                                    {
                                                        kind: "ObjectField",
                                                        name: { kind: "Name", value: "userId" },
                                                        value: {
                                                            kind: "ObjectValue",
                                                            fields: [
                                                                {
                                                                    kind: "ObjectField",
                                                                    name: { kind: "Name", value: "_eq" },
                                                                    value: {
                                                                        kind: "Variable",
                                                                        name: { kind: "Name", value: "userId" },
                                                                    },
                                                                },
                                                            ],
                                                        },
                                                    },
                                                ],
                                            },
                                        },
                                    ],
                                },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "registrant_Registrant" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "where" },
                                value: {
                                    kind: "ObjectValue",
                                    fields: [
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "conferenceId" },
                                            value: {
                                                kind: "ObjectValue",
                                                fields: [
                                                    {
                                                        kind: "ObjectField",
                                                        name: { kind: "Name", value: "_eq" },
                                                        value: {
                                                            kind: "Variable",
                                                            name: { kind: "Name", value: "conferenceId" },
                                                        },
                                                    },
                                                ],
                                            },
                                        },
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "userId" },
                                            value: {
                                                kind: "ObjectValue",
                                                fields: [
                                                    {
                                                        kind: "ObjectField",
                                                        name: { kind: "Name", value: "_eq" },
                                                        value: {
                                                            kind: "Variable",
                                                            name: { kind: "Name", value: "userId" },
                                                        },
                                                    },
                                                ],
                                            },
                                        },
                                    ],
                                },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                { kind: "Field", name: { kind: "Name", value: "id" } },
                                { kind: "Field", name: { kind: "Name", value: "displayName" } },
                            ],
                        },
                    },
                ],
            },
        },
    ],
} as unknown as DocumentNode<GetExistingProgramPersonQuery, GetExistingProgramPersonQueryVariables>;
export const InsertEventParticipantDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "InsertEventParticipant" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "eventPerson" } },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: { kind: "Name", value: "schedule_EventProgramPerson_insert_input" },
                        },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "insert_schedule_EventProgramPerson_one" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "object" },
                                value: { kind: "Variable", name: { kind: "Name", value: "eventPerson" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "on_conflict" },
                                value: {
                                    kind: "ObjectValue",
                                    fields: [
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "constraint" },
                                            value: {
                                                kind: "EnumValue",
                                                value: "EventProgramPerson_eventId_personId_roleName_key",
                                            },
                                        },
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "update_columns" },
                                            value: {
                                                kind: "ListValue",
                                                values: [{ kind: "EnumValue", value: "roleName" }],
                                            },
                                        },
                                    ],
                                },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                { kind: "Field", name: { kind: "Name", value: "id" } },
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "person" },
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [
                                            { kind: "Field", name: { kind: "Name", value: "id" } },
                                            { kind: "Field", name: { kind: "Name", value: "name" } },
                                            { kind: "Field", name: { kind: "Name", value: "affiliation" } },
                                            { kind: "Field", name: { kind: "Name", value: "registrantId" } },
                                        ],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
    ],
} as unknown as DocumentNode<InsertEventParticipantMutation, InsertEventParticipantMutationVariables>;
export const DeletePushNotificationSubscriptionDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "DeletePushNotificationSubscription" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "endpoint" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "delete_PushNotificationSubscription_by_pk" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "endpoint" },
                                value: { kind: "Variable", name: { kind: "Name", value: "endpoint" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "endpoint" } }],
                        },
                    },
                ],
            },
        },
    ],
} as unknown as DocumentNode<
    DeletePushNotificationSubscriptionMutation,
    DeletePushNotificationSubscriptionMutationVariables
>;
export const VapidKeysDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "VAPIDKeys" },
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        alias: { kind: "Name", value: "publicKey" },
                        name: { kind: "Name", value: "system_Configuration_by_pk" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "key" },
                                value: { kind: "EnumValue", value: "VAPID_PUBLIC_KEY" },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                { kind: "Field", name: { kind: "Name", value: "key" } },
                                { kind: "Field", name: { kind: "Name", value: "value" } },
                            ],
                        },
                    },
                    {
                        kind: "Field",
                        alias: { kind: "Name", value: "privateKey" },
                        name: { kind: "Name", value: "system_Configuration_by_pk" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "key" },
                                value: { kind: "EnumValue", value: "VAPID_PRIVATE_KEY" },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                { kind: "Field", name: { kind: "Name", value: "key" } },
                                { kind: "Field", name: { kind: "Name", value: "value" } },
                            ],
                        },
                    },
                ],
            },
        },
    ],
} as unknown as DocumentNode<VapidKeysQuery, VapidKeysQueryVariables>;
export const SetVapidKeysDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "SetVAPIDKeys" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "publicKey" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "jsonb" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "privateKey" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "jsonb" } } },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "insert_system_Configuration" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "objects" },
                                value: {
                                    kind: "ListValue",
                                    values: [
                                        {
                                            kind: "ObjectValue",
                                            fields: [
                                                {
                                                    kind: "ObjectField",
                                                    name: { kind: "Name", value: "key" },
                                                    value: { kind: "EnumValue", value: "VAPID_PUBLIC_KEY" },
                                                },
                                                {
                                                    kind: "ObjectField",
                                                    name: { kind: "Name", value: "value" },
                                                    value: {
                                                        kind: "Variable",
                                                        name: { kind: "Name", value: "publicKey" },
                                                    },
                                                },
                                            ],
                                        },
                                        {
                                            kind: "ObjectValue",
                                            fields: [
                                                {
                                                    kind: "ObjectField",
                                                    name: { kind: "Name", value: "key" },
                                                    value: { kind: "EnumValue", value: "VAPID_PRIVATE_KEY" },
                                                },
                                                {
                                                    kind: "ObjectField",
                                                    name: { kind: "Name", value: "value" },
                                                    value: {
                                                        kind: "Variable",
                                                        name: { kind: "Name", value: "privateKey" },
                                                    },
                                                },
                                            ],
                                        },
                                    ],
                                },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "on_conflict" },
                                value: {
                                    kind: "ObjectValue",
                                    fields: [
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "constraint" },
                                            value: { kind: "EnumValue", value: "Configuration_pkey" },
                                        },
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "update_columns" },
                                            value: {
                                                kind: "ListValue",
                                                values: [{ kind: "EnumValue", value: "value" }],
                                            },
                                        },
                                    ],
                                },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "affected_rows" } }],
                        },
                    },
                ],
            },
        },
    ],
} as unknown as DocumentNode<SetVapidKeysMutation, SetVapidKeysMutationVariables>;
export const SelectViewCountsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "SelectViewCounts" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "cutoff" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "timestamptz" } },
                    },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "itemIds" } },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "ListType",
                            type: {
                                kind: "NonNullType",
                                type: { kind: "NamedType", name: { kind: "Name", value: "uuid" } },
                            },
                        },
                    },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "elementIds" } },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "ListType",
                            type: {
                                kind: "NonNullType",
                                type: { kind: "NamedType", name: { kind: "Name", value: "uuid" } },
                            },
                        },
                    },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "roomIds" } },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "ListType",
                            type: {
                                kind: "NonNullType",
                                type: { kind: "NamedType", name: { kind: "Name", value: "uuid" } },
                            },
                        },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "analytics_ContentItemStats" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "where" },
                                value: {
                                    kind: "ObjectValue",
                                    fields: [
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "itemId" },
                                            value: {
                                                kind: "ObjectValue",
                                                fields: [
                                                    {
                                                        kind: "ObjectField",
                                                        name: { kind: "Name", value: "_in" },
                                                        value: {
                                                            kind: "Variable",
                                                            name: { kind: "Name", value: "itemIds" },
                                                        },
                                                    },
                                                ],
                                            },
                                        },
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "created_at" },
                                            value: {
                                                kind: "ObjectValue",
                                                fields: [
                                                    {
                                                        kind: "ObjectField",
                                                        name: { kind: "Name", value: "_gt" },
                                                        value: {
                                                            kind: "Variable",
                                                            name: { kind: "Name", value: "cutoff" },
                                                        },
                                                    },
                                                ],
                                            },
                                        },
                                    ],
                                },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                { kind: "Field", name: { kind: "Name", value: "id" } },
                                { kind: "Field", name: { kind: "Name", value: "itemId" } },
                                { kind: "Field", name: { kind: "Name", value: "viewCount" } },
                            ],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "analytics_ContentElementStats" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "where" },
                                value: {
                                    kind: "ObjectValue",
                                    fields: [
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "elementId" },
                                            value: {
                                                kind: "ObjectValue",
                                                fields: [
                                                    {
                                                        kind: "ObjectField",
                                                        name: { kind: "Name", value: "_in" },
                                                        value: {
                                                            kind: "Variable",
                                                            name: { kind: "Name", value: "elementIds" },
                                                        },
                                                    },
                                                ],
                                            },
                                        },
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "created_at" },
                                            value: {
                                                kind: "ObjectValue",
                                                fields: [
                                                    {
                                                        kind: "ObjectField",
                                                        name: { kind: "Name", value: "_gt" },
                                                        value: {
                                                            kind: "Variable",
                                                            name: { kind: "Name", value: "cutoff" },
                                                        },
                                                    },
                                                ],
                                            },
                                        },
                                    ],
                                },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                { kind: "Field", name: { kind: "Name", value: "id" } },
                                { kind: "Field", name: { kind: "Name", value: "elementId" } },
                                { kind: "Field", name: { kind: "Name", value: "viewCount" } },
                            ],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "analytics_RoomStats" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "where" },
                                value: {
                                    kind: "ObjectValue",
                                    fields: [
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "roomId" },
                                            value: {
                                                kind: "ObjectValue",
                                                fields: [
                                                    {
                                                        kind: "ObjectField",
                                                        name: { kind: "Name", value: "_in" },
                                                        value: {
                                                            kind: "Variable",
                                                            name: { kind: "Name", value: "roomIds" },
                                                        },
                                                    },
                                                ],
                                            },
                                        },
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "created_at" },
                                            value: {
                                                kind: "ObjectValue",
                                                fields: [
                                                    {
                                                        kind: "ObjectField",
                                                        name: { kind: "Name", value: "_gt" },
                                                        value: {
                                                            kind: "Variable",
                                                            name: { kind: "Name", value: "cutoff" },
                                                        },
                                                    },
                                                ],
                                            },
                                        },
                                    ],
                                },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                { kind: "Field", name: { kind: "Name", value: "id" } },
                                { kind: "Field", name: { kind: "Name", value: "roomId" } },
                                { kind: "Field", name: { kind: "Name", value: "hlsViewCount" } },
                            ],
                        },
                    },
                ],
            },
        },
    ],
} as unknown as DocumentNode<SelectViewCountsQuery, SelectViewCountsQueryVariables>;
export const InsertViewCountsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "InsertViewCounts" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "itemStats" } },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "ListType",
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: { kind: "Name", value: "analytics_ContentItemStats_insert_input" },
                                },
                            },
                        },
                    },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "elementStats" } },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "ListType",
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: { kind: "Name", value: "analytics_ContentElementStats_insert_input" },
                                },
                            },
                        },
                    },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "roomStats" } },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "ListType",
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: { kind: "Name", value: "analytics_RoomStats_insert_input" },
                                },
                            },
                        },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "insert_analytics_ContentItemStats" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "objects" },
                                value: { kind: "Variable", name: { kind: "Name", value: "itemStats" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "on_conflict" },
                                value: {
                                    kind: "ObjectValue",
                                    fields: [
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "constraint" },
                                            value: { kind: "EnumValue", value: "ContentItemStats_pkey" },
                                        },
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "update_columns" },
                                            value: {
                                                kind: "ListValue",
                                                values: [{ kind: "EnumValue", value: "viewCount" }],
                                            },
                                        },
                                    ],
                                },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "affected_rows" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "insert_analytics_ContentElementStats" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "objects" },
                                value: { kind: "Variable", name: { kind: "Name", value: "elementStats" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "on_conflict" },
                                value: {
                                    kind: "ObjectValue",
                                    fields: [
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "constraint" },
                                            value: { kind: "EnumValue", value: "ContentElementStats_pkey" },
                                        },
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "update_columns" },
                                            value: {
                                                kind: "ListValue",
                                                values: [{ kind: "EnumValue", value: "viewCount" }],
                                            },
                                        },
                                    ],
                                },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "affected_rows" } }],
                        },
                    },
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "insert_analytics_RoomStats" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "objects" },
                                value: { kind: "Variable", name: { kind: "Name", value: "roomStats" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "on_conflict" },
                                value: {
                                    kind: "ObjectValue",
                                    fields: [
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "constraint" },
                                            value: { kind: "EnumValue", value: "RoomStats_pkey" },
                                        },
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "update_columns" },
                                            value: {
                                                kind: "ListValue",
                                                values: [{ kind: "EnumValue", value: "hlsViewCount" }],
                                            },
                                        },
                                    ],
                                },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "affected_rows" } }],
                        },
                    },
                ],
            },
        },
    ],
} as unknown as DocumentNode<InsertViewCountsMutation, InsertViewCountsMutationVariables>;
export const InsertChatMessagesDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "InsertChatMessages" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "objects" } },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "ListType",
                            type: {
                                kind: "NonNullType",
                                type: { kind: "NamedType", name: { kind: "Name", value: "chat_Message_insert_input" } },
                            },
                        },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "insert_chat_Message" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "objects" },
                                value: { kind: "Variable", name: { kind: "Name", value: "objects" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "on_conflict" },
                                value: {
                                    kind: "ObjectValue",
                                    fields: [
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "constraint" },
                                            value: { kind: "EnumValue", value: "Message_sId_key" },
                                        },
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "update_columns" },
                                            value: { kind: "ListValue", values: [] },
                                        },
                                    ],
                                },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "returning" },
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "Field", name: { kind: "Name", value: "sId" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
    ],
} as unknown as DocumentNode<InsertChatMessagesMutation, InsertChatMessagesMutationVariables>;
export const UpdateChatMessageDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "UpdateChatMessage" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "messageId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "uuid" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "object" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "chat_Message_set_input" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "update_chat_Message" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "where" },
                                value: {
                                    kind: "ObjectValue",
                                    fields: [
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "sId" },
                                            value: {
                                                kind: "ObjectValue",
                                                fields: [
                                                    {
                                                        kind: "ObjectField",
                                                        name: { kind: "Name", value: "_eq" },
                                                        value: {
                                                            kind: "Variable",
                                                            name: { kind: "Name", value: "messageId" },
                                                        },
                                                    },
                                                ],
                                            },
                                        },
                                    ],
                                },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "_set" },
                                value: { kind: "Variable", name: { kind: "Name", value: "object" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "returning" },
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "Field", name: { kind: "Name", value: "sId" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
    ],
} as unknown as DocumentNode<UpdateChatMessageMutation, UpdateChatMessageMutationVariables>;
export const DeleteChatMessagesDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "DeleteChatMessages" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "messageIds" } },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "ListType",
                            type: {
                                kind: "NonNullType",
                                type: { kind: "NamedType", name: { kind: "Name", value: "uuid" } },
                            },
                        },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "delete_chat_Message" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "where" },
                                value: {
                                    kind: "ObjectValue",
                                    fields: [
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "sId" },
                                            value: {
                                                kind: "ObjectValue",
                                                fields: [
                                                    {
                                                        kind: "ObjectField",
                                                        name: { kind: "Name", value: "_in" },
                                                        value: {
                                                            kind: "Variable",
                                                            name: { kind: "Name", value: "messageIds" },
                                                        },
                                                    },
                                                ],
                                            },
                                        },
                                    ],
                                },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "returning" },
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "Field", name: { kind: "Name", value: "sId" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
    ],
} as unknown as DocumentNode<DeleteChatMessagesMutation, DeleteChatMessagesMutationVariables>;
export const InsertChatReactionsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "InsertChatReactions" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "objects" } },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "ListType",
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: { kind: "Name", value: "chat_Reaction_insert_input" },
                                },
                            },
                        },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "insert_chat_Reaction" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "objects" },
                                value: { kind: "Variable", name: { kind: "Name", value: "objects" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "on_conflict" },
                                value: {
                                    kind: "ObjectValue",
                                    fields: [
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "constraint" },
                                            value: { kind: "EnumValue", value: "Reaction_sId_key" },
                                        },
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "update_columns" },
                                            value: { kind: "ListValue", values: [] },
                                        },
                                    ],
                                },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "returning" },
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "Field", name: { kind: "Name", value: "sId" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
    ],
} as unknown as DocumentNode<InsertChatReactionsMutation, InsertChatReactionsMutationVariables>;
export const UpdateChatReactionDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "UpdateChatReaction" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "reactionId" } },
                    type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "uuid" } } },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "object" } },
                    type: {
                        kind: "NonNullType",
                        type: { kind: "NamedType", name: { kind: "Name", value: "chat_Reaction_set_input" } },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "update_chat_Reaction" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "where" },
                                value: {
                                    kind: "ObjectValue",
                                    fields: [
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "sId" },
                                            value: {
                                                kind: "ObjectValue",
                                                fields: [
                                                    {
                                                        kind: "ObjectField",
                                                        name: { kind: "Name", value: "_eq" },
                                                        value: {
                                                            kind: "Variable",
                                                            name: { kind: "Name", value: "reactionId" },
                                                        },
                                                    },
                                                ],
                                            },
                                        },
                                    ],
                                },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "_set" },
                                value: { kind: "Variable", name: { kind: "Name", value: "object" } },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "returning" },
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "Field", name: { kind: "Name", value: "sId" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
    ],
} as unknown as DocumentNode<UpdateChatReactionMutation, UpdateChatReactionMutationVariables>;
export const DeleteChatReactionsDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "DeleteChatReactions" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "reactionIds" } },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "ListType",
                            type: {
                                kind: "NonNullType",
                                type: { kind: "NamedType", name: { kind: "Name", value: "uuid" } },
                            },
                        },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "delete_chat_Reaction" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "where" },
                                value: {
                                    kind: "ObjectValue",
                                    fields: [
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "sId" },
                                            value: {
                                                kind: "ObjectValue",
                                                fields: [
                                                    {
                                                        kind: "ObjectField",
                                                        name: { kind: "Name", value: "_in" },
                                                        value: {
                                                            kind: "Variable",
                                                            name: { kind: "Name", value: "reactionIds" },
                                                        },
                                                    },
                                                ],
                                            },
                                        },
                                    ],
                                },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                {
                                    kind: "Field",
                                    name: { kind: "Name", value: "returning" },
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{ kind: "Field", name: { kind: "Name", value: "sId" } }],
                                    },
                                },
                            ],
                        },
                    },
                ],
            },
        },
    ],
} as unknown as DocumentNode<DeleteChatReactionsMutation, DeleteChatReactionsMutationVariables>;
export const RegistrantIdsFromChatsAndUsersDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "query",
            name: { kind: "Name", value: "RegistrantIdsFromChatsAndUsers" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "chatIds" } },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "ListType",
                            type: {
                                kind: "NonNullType",
                                type: { kind: "NamedType", name: { kind: "Name", value: "uuid" } },
                            },
                        },
                    },
                },
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "userIds" } },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "ListType",
                            type: {
                                kind: "NonNullType",
                                type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                            },
                        },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "registrant_Registrant" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "where" },
                                value: {
                                    kind: "ObjectValue",
                                    fields: [
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "userId" },
                                            value: {
                                                kind: "ObjectValue",
                                                fields: [
                                                    {
                                                        kind: "ObjectField",
                                                        name: { kind: "Name", value: "_in" },
                                                        value: {
                                                            kind: "Variable",
                                                            name: { kind: "Name", value: "userIds" },
                                                        },
                                                    },
                                                ],
                                            },
                                        },
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "conference" },
                                            value: {
                                                kind: "ObjectValue",
                                                fields: [
                                                    {
                                                        kind: "ObjectField",
                                                        name: { kind: "Name", value: "chats" },
                                                        value: {
                                                            kind: "ObjectValue",
                                                            fields: [
                                                                {
                                                                    kind: "ObjectField",
                                                                    name: { kind: "Name", value: "id" },
                                                                    value: {
                                                                        kind: "ObjectValue",
                                                                        fields: [
                                                                            {
                                                                                kind: "ObjectField",
                                                                                name: { kind: "Name", value: "_in" },
                                                                                value: {
                                                                                    kind: "Variable",
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "chatIds",
                                                                                    },
                                                                                },
                                                                            },
                                                                        ],
                                                                    },
                                                                },
                                                            ],
                                                        },
                                                    },
                                                ],
                                            },
                                        },
                                    ],
                                },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                                { kind: "Field", name: { kind: "Name", value: "id" } },
                                { kind: "Field", name: { kind: "Name", value: "userId" } },
                            ],
                        },
                    },
                ],
            },
        },
    ],
} as unknown as DocumentNode<RegistrantIdsFromChatsAndUsersQuery, RegistrantIdsFromChatsAndUsersQueryVariables>;
export const InsertReadUpToIndexDocument = {
    kind: "Document",
    definitions: [
        {
            kind: "OperationDefinition",
            operation: "mutation",
            name: { kind: "Name", value: "InsertReadUpToIndex" },
            variableDefinitions: [
                {
                    kind: "VariableDefinition",
                    variable: { kind: "Variable", name: { kind: "Name", value: "objects" } },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "ListType",
                            type: {
                                kind: "NonNullType",
                                type: {
                                    kind: "NamedType",
                                    name: { kind: "Name", value: "chat_ReadUpToIndex_insert_input" },
                                },
                            },
                        },
                    },
                },
            ],
            selectionSet: {
                kind: "SelectionSet",
                selections: [
                    {
                        kind: "Field",
                        name: { kind: "Name", value: "insert_chat_ReadUpToIndex" },
                        arguments: [
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "objects" },
                                value: { kind: "Variable", name: { kind: "Name", value: "objects" } },
                            },
                            {
                                kind: "Argument",
                                name: { kind: "Name", value: "on_conflict" },
                                value: {
                                    kind: "ObjectValue",
                                    fields: [
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "constraint" },
                                            value: { kind: "EnumValue", value: "ReadUpToIndex_pkey" },
                                        },
                                        {
                                            kind: "ObjectField",
                                            name: { kind: "Name", value: "update_columns" },
                                            value: {
                                                kind: "ListValue",
                                                values: [{ kind: "EnumValue", value: "messageSId" }],
                                            },
                                        },
                                    ],
                                },
                            },
                        ],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "affected_rows" } }],
                        },
                    },
                ],
            },
        },
    ],
} as unknown as DocumentNode<InsertReadUpToIndexMutation, InsertReadUpToIndexMutationVariables>;
